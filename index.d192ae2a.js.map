{"mappings":"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","sources":["<anon>","src/main.js","node_modules/gpu.js/dist/gpu-browser.js"],"sourcesContent":["var $bcaa5dedc49d55dc$exports = {};\n/**\n * gpu.js\n * http://gpu.rocks/\n *\n * GPU Accelerated JavaScript\n *\n * @version 2.16.0\n * @date Wed Nov 16 2022 15:48:37 GMT-0500 (Eastern Standard Time)\n *\n * @license MIT\n * The MIT License\n *\n * Copyright (c) 2022 gpu.js Team\n */ (function(f) {\n    var g;\n    $bcaa5dedc49d55dc$exports = f();\n})(function() {\n    var define, module1, exports;\n    return (function() {\n        function r(e, n, t) {\n            function o(i, f) {\n                if (!n[i]) {\n                    if (!e[i]) {\n                        var c = undefined;\n                        if (!f && c) return c(i, !0);\n                        if (u) return u(i, !0);\n                        var a = new Error(\"Cannot find module '\" + i + \"'\");\n                        throw a.code = \"MODULE_NOT_FOUND\", a;\n                    }\n                    var p = n[i] = {\n                        exports: {}\n                    };\n                    e[i][0].call(p.exports, function(r) {\n                        var n = e[i][1][r];\n                        return o(n || r);\n                    }, p, p.exports, r, e, n, t);\n                }\n                return n[i].exports;\n            }\n            for(var u = undefined, i = 0; i < t.length; i++)o(t[i]);\n            return o;\n        }\n        return r;\n    })()({\n        1: [\n            function(require1, module1, exports) {\n                (function(global, factory) {\n                    typeof exports === \"object\" && typeof module1 !== \"undefined\" ? factory(exports) : typeof define === \"function\" && define.amd ? define([\n                        \"exports\"\n                    ], factory) : (global = global || self, factory(global.acorn = {}));\n                })(this, function(exports) {\n                    \"use strict\";\n                    var reservedWords = {\n                        3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n                        5: \"class enum extends super const export import\",\n                        6: \"enum\",\n                        strict: \"implements interface let package private protected public static yield\",\n                        strictBind: \"eval arguments\"\n                    };\n                    var ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";\n                    var keywords = {\n                        5: ecma5AndLessKeywords,\n                        \"5module\": ecma5AndLessKeywords + \" export import\",\n                        6: ecma5AndLessKeywords + \" const class extends export import super\"\n                    };\n                    var keywordRelationalOperator = /^in(stanceof)?$/;\n                    var nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࢠ-ࢴࢶ-ࢽऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿯ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞿꟂ-Ᶎꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭧꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ\";\n                    var nonASCIIidentifierChars = \"‌‍\\xb7̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛࣓-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ංඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷹᷻-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿\";\n                    var nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\n                    var nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n                    nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n                    var astralIdentifierStartCodes = [\n                        0,\n                        11,\n                        2,\n                        25,\n                        2,\n                        18,\n                        2,\n                        1,\n                        2,\n                        14,\n                        3,\n                        13,\n                        35,\n                        122,\n                        70,\n                        52,\n                        268,\n                        28,\n                        4,\n                        48,\n                        48,\n                        31,\n                        14,\n                        29,\n                        6,\n                        37,\n                        11,\n                        29,\n                        3,\n                        35,\n                        5,\n                        7,\n                        2,\n                        4,\n                        43,\n                        157,\n                        19,\n                        35,\n                        5,\n                        35,\n                        5,\n                        39,\n                        9,\n                        51,\n                        157,\n                        310,\n                        10,\n                        21,\n                        11,\n                        7,\n                        153,\n                        5,\n                        3,\n                        0,\n                        2,\n                        43,\n                        2,\n                        1,\n                        4,\n                        0,\n                        3,\n                        22,\n                        11,\n                        22,\n                        10,\n                        30,\n                        66,\n                        18,\n                        2,\n                        1,\n                        11,\n                        21,\n                        11,\n                        25,\n                        71,\n                        55,\n                        7,\n                        1,\n                        65,\n                        0,\n                        16,\n                        3,\n                        2,\n                        2,\n                        2,\n                        28,\n                        43,\n                        28,\n                        4,\n                        28,\n                        36,\n                        7,\n                        2,\n                        27,\n                        28,\n                        53,\n                        11,\n                        21,\n                        11,\n                        18,\n                        14,\n                        17,\n                        111,\n                        72,\n                        56,\n                        50,\n                        14,\n                        50,\n                        14,\n                        35,\n                        477,\n                        28,\n                        11,\n                        0,\n                        9,\n                        21,\n                        155,\n                        22,\n                        13,\n                        52,\n                        76,\n                        44,\n                        33,\n                        24,\n                        27,\n                        35,\n                        30,\n                        0,\n                        12,\n                        34,\n                        4,\n                        0,\n                        13,\n                        47,\n                        15,\n                        3,\n                        22,\n                        0,\n                        2,\n                        0,\n                        36,\n                        17,\n                        2,\n                        24,\n                        85,\n                        6,\n                        2,\n                        0,\n                        2,\n                        3,\n                        2,\n                        14,\n                        2,\n                        9,\n                        8,\n                        46,\n                        39,\n                        7,\n                        3,\n                        1,\n                        3,\n                        21,\n                        2,\n                        6,\n                        2,\n                        1,\n                        2,\n                        4,\n                        4,\n                        0,\n                        19,\n                        0,\n                        13,\n                        4,\n                        159,\n                        52,\n                        19,\n                        3,\n                        21,\n                        0,\n                        33,\n                        47,\n                        21,\n                        1,\n                        2,\n                        0,\n                        185,\n                        46,\n                        42,\n                        3,\n                        37,\n                        47,\n                        21,\n                        0,\n                        60,\n                        42,\n                        14,\n                        0,\n                        72,\n                        26,\n                        230,\n                        43,\n                        117,\n                        63,\n                        32,\n                        0,\n                        161,\n                        7,\n                        3,\n                        38,\n                        17,\n                        0,\n                        2,\n                        0,\n                        29,\n                        0,\n                        11,\n                        39,\n                        8,\n                        0,\n                        22,\n                        0,\n                        12,\n                        45,\n                        20,\n                        0,\n                        35,\n                        56,\n                        264,\n                        8,\n                        2,\n                        36,\n                        18,\n                        0,\n                        50,\n                        29,\n                        113,\n                        6,\n                        2,\n                        1,\n                        2,\n                        37,\n                        22,\n                        0,\n                        26,\n                        5,\n                        2,\n                        1,\n                        2,\n                        31,\n                        15,\n                        0,\n                        328,\n                        18,\n                        270,\n                        921,\n                        103,\n                        110,\n                        18,\n                        195,\n                        2749,\n                        1070,\n                        4050,\n                        582,\n                        8634,\n                        568,\n                        8,\n                        30,\n                        114,\n                        29,\n                        19,\n                        47,\n                        17,\n                        3,\n                        32,\n                        20,\n                        6,\n                        18,\n                        689,\n                        63,\n                        129,\n                        74,\n                        6,\n                        0,\n                        67,\n                        12,\n                        65,\n                        1,\n                        2,\n                        0,\n                        29,\n                        6135,\n                        9,\n                        754,\n                        9486,\n                        286,\n                        50,\n                        2,\n                        18,\n                        3,\n                        9,\n                        395,\n                        2309,\n                        106,\n                        6,\n                        12,\n                        4,\n                        8,\n                        8,\n                        9,\n                        5991,\n                        84,\n                        2,\n                        70,\n                        2,\n                        1,\n                        3,\n                        0,\n                        3,\n                        1,\n                        3,\n                        3,\n                        2,\n                        11,\n                        2,\n                        0,\n                        2,\n                        6,\n                        2,\n                        64,\n                        2,\n                        3,\n                        3,\n                        7,\n                        2,\n                        6,\n                        2,\n                        27,\n                        2,\n                        3,\n                        2,\n                        4,\n                        2,\n                        0,\n                        4,\n                        6,\n                        2,\n                        339,\n                        3,\n                        24,\n                        2,\n                        24,\n                        2,\n                        30,\n                        2,\n                        24,\n                        2,\n                        30,\n                        2,\n                        24,\n                        2,\n                        30,\n                        2,\n                        24,\n                        2,\n                        30,\n                        2,\n                        24,\n                        2,\n                        7,\n                        2357,\n                        44,\n                        11,\n                        6,\n                        17,\n                        0,\n                        370,\n                        43,\n                        1301,\n                        196,\n                        60,\n                        67,\n                        8,\n                        0,\n                        1205,\n                        3,\n                        2,\n                        26,\n                        2,\n                        1,\n                        2,\n                        0,\n                        3,\n                        0,\n                        2,\n                        9,\n                        2,\n                        3,\n                        2,\n                        0,\n                        2,\n                        0,\n                        7,\n                        0,\n                        5,\n                        0,\n                        2,\n                        0,\n                        2,\n                        0,\n                        2,\n                        2,\n                        2,\n                        1,\n                        2,\n                        0,\n                        3,\n                        0,\n                        2,\n                        0,\n                        2,\n                        0,\n                        2,\n                        0,\n                        2,\n                        0,\n                        2,\n                        1,\n                        2,\n                        0,\n                        3,\n                        3,\n                        2,\n                        6,\n                        2,\n                        3,\n                        2,\n                        3,\n                        2,\n                        0,\n                        2,\n                        9,\n                        2,\n                        16,\n                        6,\n                        2,\n                        2,\n                        4,\n                        2,\n                        16,\n                        4421,\n                        42710,\n                        42,\n                        4148,\n                        12,\n                        221,\n                        3,\n                        5761,\n                        15,\n                        7472,\n                        3104,\n                        541\n                    ];\n                    var astralIdentifierCodes = [\n                        509,\n                        0,\n                        227,\n                        0,\n                        150,\n                        4,\n                        294,\n                        9,\n                        1368,\n                        2,\n                        2,\n                        1,\n                        6,\n                        3,\n                        41,\n                        2,\n                        5,\n                        0,\n                        166,\n                        1,\n                        574,\n                        3,\n                        9,\n                        9,\n                        525,\n                        10,\n                        176,\n                        2,\n                        54,\n                        14,\n                        32,\n                        9,\n                        16,\n                        3,\n                        46,\n                        10,\n                        54,\n                        9,\n                        7,\n                        2,\n                        37,\n                        13,\n                        2,\n                        9,\n                        6,\n                        1,\n                        45,\n                        0,\n                        13,\n                        2,\n                        49,\n                        13,\n                        9,\n                        3,\n                        4,\n                        9,\n                        83,\n                        11,\n                        7,\n                        0,\n                        161,\n                        11,\n                        6,\n                        9,\n                        7,\n                        3,\n                        56,\n                        1,\n                        2,\n                        6,\n                        3,\n                        1,\n                        3,\n                        2,\n                        10,\n                        0,\n                        11,\n                        1,\n                        3,\n                        6,\n                        4,\n                        4,\n                        193,\n                        17,\n                        10,\n                        9,\n                        5,\n                        0,\n                        82,\n                        19,\n                        13,\n                        9,\n                        214,\n                        6,\n                        3,\n                        8,\n                        28,\n                        1,\n                        83,\n                        16,\n                        16,\n                        9,\n                        82,\n                        12,\n                        9,\n                        9,\n                        84,\n                        14,\n                        5,\n                        9,\n                        243,\n                        14,\n                        166,\n                        9,\n                        232,\n                        6,\n                        3,\n                        6,\n                        4,\n                        0,\n                        29,\n                        9,\n                        41,\n                        6,\n                        2,\n                        3,\n                        9,\n                        0,\n                        10,\n                        10,\n                        47,\n                        15,\n                        406,\n                        7,\n                        2,\n                        7,\n                        17,\n                        9,\n                        57,\n                        21,\n                        2,\n                        13,\n                        123,\n                        5,\n                        4,\n                        0,\n                        2,\n                        1,\n                        2,\n                        6,\n                        2,\n                        0,\n                        9,\n                        9,\n                        49,\n                        4,\n                        2,\n                        1,\n                        2,\n                        4,\n                        9,\n                        9,\n                        330,\n                        3,\n                        19306,\n                        9,\n                        135,\n                        4,\n                        60,\n                        6,\n                        26,\n                        9,\n                        1014,\n                        0,\n                        2,\n                        54,\n                        8,\n                        3,\n                        19723,\n                        1,\n                        5319,\n                        4,\n                        4,\n                        5,\n                        9,\n                        7,\n                        3,\n                        6,\n                        31,\n                        3,\n                        149,\n                        2,\n                        1418,\n                        49,\n                        513,\n                        54,\n                        5,\n                        49,\n                        9,\n                        0,\n                        15,\n                        0,\n                        23,\n                        4,\n                        2,\n                        14,\n                        1361,\n                        6,\n                        2,\n                        16,\n                        3,\n                        6,\n                        2,\n                        1,\n                        2,\n                        4,\n                        262,\n                        6,\n                        10,\n                        9,\n                        419,\n                        13,\n                        1495,\n                        6,\n                        110,\n                        6,\n                        6,\n                        9,\n                        792487,\n                        239\n                    ];\n                    function isInAstralSet(code, set) {\n                        var pos = 0x10000;\n                        for(var i = 0; i < set.length; i += 2){\n                            pos += set[i];\n                            if (pos > code) return false;\n                            pos += set[i + 1];\n                            if (pos >= code) return true;\n                        }\n                    }\n                    function isIdentifierStart(code, astral) {\n                        if (code < 65) return code === 36;\n                        if (code < 91) return true;\n                        if (code < 97) return code === 95;\n                        if (code < 123) return true;\n                        if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n                        if (astral === false) return false;\n                        return isInAstralSet(code, astralIdentifierStartCodes);\n                    }\n                    function isIdentifierChar(code, astral) {\n                        if (code < 48) return code === 36;\n                        if (code < 58) return true;\n                        if (code < 65) return false;\n                        if (code < 91) return true;\n                        if (code < 97) return code === 95;\n                        if (code < 123) return true;\n                        if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n                        if (astral === false) return false;\n                        return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n                    }\n                    var TokenType = function TokenType(label, conf) {\n                        if (conf === void 0) conf = {};\n                        this.label = label;\n                        this.keyword = conf.keyword;\n                        this.beforeExpr = !!conf.beforeExpr;\n                        this.startsExpr = !!conf.startsExpr;\n                        this.isLoop = !!conf.isLoop;\n                        this.isAssign = !!conf.isAssign;\n                        this.prefix = !!conf.prefix;\n                        this.postfix = !!conf.postfix;\n                        this.binop = conf.binop || null;\n                        this.updateContext = null;\n                    };\n                    function binop(name1, prec) {\n                        return new TokenType(name1, {\n                            beforeExpr: true,\n                            binop: prec\n                        });\n                    }\n                    var beforeExpr = {\n                        beforeExpr: true\n                    }, startsExpr = {\n                        startsExpr: true\n                    };\n                    var keywords$1 = {};\n                    function kw(name1, options) {\n                        if (options === void 0) options = {};\n                        options.keyword = name1;\n                        return keywords$1[name1] = new TokenType(name1, options);\n                    }\n                    var types = {\n                        num: new TokenType(\"num\", startsExpr),\n                        regexp: new TokenType(\"regexp\", startsExpr),\n                        string: new TokenType(\"string\", startsExpr),\n                        name: new TokenType(\"name\", startsExpr),\n                        eof: new TokenType(\"eof\"),\n                        bracketL: new TokenType(\"[\", {\n                            beforeExpr: true,\n                            startsExpr: true\n                        }),\n                        bracketR: new TokenType(\"]\"),\n                        braceL: new TokenType(\"{\", {\n                            beforeExpr: true,\n                            startsExpr: true\n                        }),\n                        braceR: new TokenType(\"}\"),\n                        parenL: new TokenType(\"(\", {\n                            beforeExpr: true,\n                            startsExpr: true\n                        }),\n                        parenR: new TokenType(\")\"),\n                        comma: new TokenType(\",\", beforeExpr),\n                        semi: new TokenType(\";\", beforeExpr),\n                        colon: new TokenType(\":\", beforeExpr),\n                        dot: new TokenType(\".\"),\n                        question: new TokenType(\"?\", beforeExpr),\n                        arrow: new TokenType(\"=>\", beforeExpr),\n                        template: new TokenType(\"template\"),\n                        invalidTemplate: new TokenType(\"invalidTemplate\"),\n                        ellipsis: new TokenType(\"...\", beforeExpr),\n                        backQuote: new TokenType(\"`\", startsExpr),\n                        dollarBraceL: new TokenType(\"${\", {\n                            beforeExpr: true,\n                            startsExpr: true\n                        }),\n                        eq: new TokenType(\"=\", {\n                            beforeExpr: true,\n                            isAssign: true\n                        }),\n                        assign: new TokenType(\"_=\", {\n                            beforeExpr: true,\n                            isAssign: true\n                        }),\n                        incDec: new TokenType(\"++/--\", {\n                            prefix: true,\n                            postfix: true,\n                            startsExpr: true\n                        }),\n                        prefix: new TokenType(\"!/~\", {\n                            beforeExpr: true,\n                            prefix: true,\n                            startsExpr: true\n                        }),\n                        logicalOR: binop(\"||\", 1),\n                        logicalAND: binop(\"&&\", 2),\n                        bitwiseOR: binop(\"|\", 3),\n                        bitwiseXOR: binop(\"^\", 4),\n                        bitwiseAND: binop(\"&\", 5),\n                        equality: binop(\"==/!=/===/!==\", 6),\n                        relational: binop(\"</>/<=/>=\", 7),\n                        bitShift: binop(\"<</>>/>>>\", 8),\n                        plusMin: new TokenType(\"+/-\", {\n                            beforeExpr: true,\n                            binop: 9,\n                            prefix: true,\n                            startsExpr: true\n                        }),\n                        modulo: binop(\"%\", 10),\n                        star: binop(\"*\", 10),\n                        slash: binop(\"/\", 10),\n                        starstar: new TokenType(\"**\", {\n                            beforeExpr: true\n                        }),\n                        _break: kw(\"break\"),\n                        _case: kw(\"case\", beforeExpr),\n                        _catch: kw(\"catch\"),\n                        _continue: kw(\"continue\"),\n                        _debugger: kw(\"debugger\"),\n                        _default: kw(\"default\", beforeExpr),\n                        _do: kw(\"do\", {\n                            isLoop: true,\n                            beforeExpr: true\n                        }),\n                        _else: kw(\"else\", beforeExpr),\n                        _finally: kw(\"finally\"),\n                        _for: kw(\"for\", {\n                            isLoop: true\n                        }),\n                        _function: kw(\"function\", startsExpr),\n                        _if: kw(\"if\"),\n                        _return: kw(\"return\", beforeExpr),\n                        _switch: kw(\"switch\"),\n                        _throw: kw(\"throw\", beforeExpr),\n                        _try: kw(\"try\"),\n                        _var: kw(\"var\"),\n                        _const: kw(\"const\"),\n                        _while: kw(\"while\", {\n                            isLoop: true\n                        }),\n                        _with: kw(\"with\"),\n                        _new: kw(\"new\", {\n                            beforeExpr: true,\n                            startsExpr: true\n                        }),\n                        _this: kw(\"this\", startsExpr),\n                        _super: kw(\"super\", startsExpr),\n                        _class: kw(\"class\", startsExpr),\n                        _extends: kw(\"extends\", beforeExpr),\n                        _export: kw(\"export\"),\n                        _import: kw(\"import\", startsExpr),\n                        _null: kw(\"null\", startsExpr),\n                        _true: kw(\"true\", startsExpr),\n                        _false: kw(\"false\", startsExpr),\n                        _in: kw(\"in\", {\n                            beforeExpr: true,\n                            binop: 7\n                        }),\n                        _instanceof: kw(\"instanceof\", {\n                            beforeExpr: true,\n                            binop: 7\n                        }),\n                        _typeof: kw(\"typeof\", {\n                            beforeExpr: true,\n                            prefix: true,\n                            startsExpr: true\n                        }),\n                        _void: kw(\"void\", {\n                            beforeExpr: true,\n                            prefix: true,\n                            startsExpr: true\n                        }),\n                        _delete: kw(\"delete\", {\n                            beforeExpr: true,\n                            prefix: true,\n                            startsExpr: true\n                        })\n                    };\n                    var lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\n                    var lineBreakG = new RegExp(lineBreak.source, \"g\");\n                    function isNewLine(code, ecma2019String) {\n                        return code === 10 || code === 13 || !ecma2019String && (code === 0x2028 || code === 0x2029);\n                    }\n                    var nonASCIIwhitespace = /[\\u1680\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n                    var skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n                    var ref = Object.prototype;\n                    var hasOwnProperty = ref.hasOwnProperty;\n                    var toString = ref.toString;\n                    function has(obj, propName) {\n                        return hasOwnProperty.call(obj, propName);\n                    }\n                    var isArray = Array.isArray || function(obj) {\n                        return toString.call(obj) === \"[object Array]\";\n                    };\n                    function wordsRegexp(words) {\n                        return new RegExp(\"^(?:\" + words.replace(/ /g, \"|\") + \")$\");\n                    }\n                    var Position = function Position(line, col) {\n                        this.line = line;\n                        this.column = col;\n                    };\n                    Position.prototype.offset = function offset(n) {\n                        return new Position(this.line, this.column + n);\n                    };\n                    var SourceLocation = function SourceLocation(p, start, end) {\n                        this.start = start;\n                        this.end = end;\n                        if (p.sourceFile !== null) this.source = p.sourceFile;\n                    };\n                    function getLineInfo(input, offset) {\n                        for(var line = 1, cur = 0;;){\n                            lineBreakG.lastIndex = cur;\n                            var match = lineBreakG.exec(input);\n                            if (match && match.index < offset) {\n                                ++line;\n                                cur = match.index + match[0].length;\n                            } else return new Position(line, offset - cur);\n                        }\n                    }\n                    var defaultOptions = {\n                        ecmaVersion: 10,\n                        sourceType: \"script\",\n                        onInsertedSemicolon: null,\n                        onTrailingComma: null,\n                        allowReserved: null,\n                        allowReturnOutsideFunction: false,\n                        allowImportExportEverywhere: false,\n                        allowAwaitOutsideFunction: false,\n                        allowHashBang: false,\n                        locations: false,\n                        onToken: null,\n                        onComment: null,\n                        ranges: false,\n                        program: null,\n                        sourceFile: null,\n                        directSourceFile: null,\n                        preserveParens: false\n                    };\n                    function getOptions(opts) {\n                        var options = {};\n                        for(var opt in defaultOptions)options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt];\n                        if (options.ecmaVersion >= 2015) options.ecmaVersion -= 2009;\n                        if (options.allowReserved == null) options.allowReserved = options.ecmaVersion < 5;\n                        if (isArray(options.onToken)) {\n                            var tokens = options.onToken;\n                            options.onToken = function(token) {\n                                return tokens.push(token);\n                            };\n                        }\n                        if (isArray(options.onComment)) options.onComment = pushComment(options, options.onComment);\n                        return options;\n                    }\n                    function pushComment(options, array) {\n                        return function(block, text, start, end, startLoc, endLoc) {\n                            var comment = {\n                                type: block ? \"Block\" : \"Line\",\n                                value: text,\n                                start: start,\n                                end: end\n                            };\n                            if (options.locations) comment.loc = new SourceLocation(this, startLoc, endLoc);\n                            if (options.ranges) comment.range = [\n                                start,\n                                end\n                            ];\n                            array.push(comment);\n                        };\n                    }\n                    var SCOPE_TOP = 1, SCOPE_FUNCTION = 2, SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION, SCOPE_ASYNC = 4, SCOPE_GENERATOR = 8, SCOPE_ARROW = 16, SCOPE_SIMPLE_CATCH = 32, SCOPE_SUPER = 64, SCOPE_DIRECT_SUPER = 128;\n                    function functionFlags(async, generator) {\n                        return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0);\n                    }\n                    var BIND_NONE = 0, BIND_VAR = 1, BIND_LEXICAL = 2, BIND_FUNCTION = 3, BIND_SIMPLE_CATCH = 4, BIND_OUTSIDE = 5;\n                    var Parser = function Parser(options, input, startPos) {\n                        this.options = options = getOptions(options);\n                        this.sourceFile = options.sourceFile;\n                        this.keywords = wordsRegexp(keywords[options.ecmaVersion >= 6 ? 6 : options.sourceType === \"module\" ? \"5module\" : 5]);\n                        var reserved = \"\";\n                        if (options.allowReserved !== true) {\n                            for(var v = options.ecmaVersion;; v--){\n                                if (reserved = reservedWords[v]) break;\n                            }\n                            if (options.sourceType === \"module\") reserved += \" await\";\n                        }\n                        this.reservedWords = wordsRegexp(reserved);\n                        var reservedStrict = (reserved ? reserved + \" \" : \"\") + reservedWords.strict;\n                        this.reservedWordsStrict = wordsRegexp(reservedStrict);\n                        this.reservedWordsStrictBind = wordsRegexp(reservedStrict + \" \" + reservedWords.strictBind);\n                        this.input = String(input);\n                        this.containsEsc = false;\n                        if (startPos) {\n                            this.pos = startPos;\n                            this.lineStart = this.input.lastIndexOf(\"\\n\", startPos - 1) + 1;\n                            this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;\n                        } else {\n                            this.pos = this.lineStart = 0;\n                            this.curLine = 1;\n                        }\n                        this.type = types.eof;\n                        this.value = null;\n                        this.start = this.end = this.pos;\n                        this.startLoc = this.endLoc = this.curPosition();\n                        this.lastTokEndLoc = this.lastTokStartLoc = null;\n                        this.lastTokStart = this.lastTokEnd = this.pos;\n                        this.context = this.initialContext();\n                        this.exprAllowed = true;\n                        this.inModule = options.sourceType === \"module\";\n                        this.strict = this.inModule || this.strictDirective(this.pos);\n                        this.potentialArrowAt = -1;\n                        this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;\n                        this.labels = [];\n                        this.undefinedExports = {};\n                        if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === \"#!\") this.skipLineComment(2);\n                        this.scopeStack = [];\n                        this.enterScope(SCOPE_TOP);\n                        this.regexpState = null;\n                    };\n                    var prototypeAccessors = {\n                        inFunction: {\n                            configurable: true\n                        },\n                        inGenerator: {\n                            configurable: true\n                        },\n                        inAsync: {\n                            configurable: true\n                        },\n                        allowSuper: {\n                            configurable: true\n                        },\n                        allowDirectSuper: {\n                            configurable: true\n                        },\n                        treatFunctionsAsVar: {\n                            configurable: true\n                        }\n                    };\n                    Parser.prototype.parse = function parse() {\n                        var node = this.options.program || this.startNode();\n                        this.nextToken();\n                        return this.parseTopLevel(node);\n                    };\n                    prototypeAccessors.inFunction.get = function() {\n                        return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;\n                    };\n                    prototypeAccessors.inGenerator.get = function() {\n                        return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0;\n                    };\n                    prototypeAccessors.inAsync.get = function() {\n                        return (this.currentVarScope().flags & SCOPE_ASYNC) > 0;\n                    };\n                    prototypeAccessors.allowSuper.get = function() {\n                        return (this.currentThisScope().flags & SCOPE_SUPER) > 0;\n                    };\n                    prototypeAccessors.allowDirectSuper.get = function() {\n                        return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;\n                    };\n                    prototypeAccessors.treatFunctionsAsVar.get = function() {\n                        return this.treatFunctionsAsVarInScope(this.currentScope());\n                    };\n                    Parser.prototype.inNonArrowFunction = function inNonArrowFunction() {\n                        return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;\n                    };\n                    Parser.extend = function extend() {\n                        var plugins = [], len = arguments.length;\n                        while(len--)plugins[len] = arguments[len];\n                        var cls = this;\n                        for(var i = 0; i < plugins.length; i++)cls = plugins[i](cls);\n                        return cls;\n                    };\n                    Parser.parse = function parse(input, options) {\n                        return new this(options, input).parse();\n                    };\n                    Parser.parseExpressionAt = function parseExpressionAt(input, pos, options) {\n                        var parser = new this(options, input, pos);\n                        parser.nextToken();\n                        return parser.parseExpression();\n                    };\n                    Parser.tokenizer = function tokenizer(input, options) {\n                        return new this(options, input);\n                    };\n                    Object.defineProperties(Parser.prototype, prototypeAccessors);\n                    var pp = Parser.prototype;\n                    var literal = /^(?:'((?:\\\\.|[^'])*?)'|\"((?:\\\\.|[^\"])*?)\")/;\n                    pp.strictDirective = function(start) {\n                        for(;;){\n                            skipWhiteSpace.lastIndex = start;\n                            start += skipWhiteSpace.exec(this.input)[0].length;\n                            var match = literal.exec(this.input.slice(start));\n                            if (!match) return false;\n                            if ((match[1] || match[2]) === \"use strict\") return true;\n                            start += match[0].length;\n                            skipWhiteSpace.lastIndex = start;\n                            start += skipWhiteSpace.exec(this.input)[0].length;\n                            if (this.input[start] === \";\") start++;\n                        }\n                    };\n                    pp.eat = function(type) {\n                        if (this.type === type) {\n                            this.next();\n                            return true;\n                        } else return false;\n                    };\n                    pp.isContextual = function(name1) {\n                        return this.type === types.name && this.value === name1 && !this.containsEsc;\n                    };\n                    pp.eatContextual = function(name1) {\n                        if (!this.isContextual(name1)) return false;\n                        this.next();\n                        return true;\n                    };\n                    pp.expectContextual = function(name1) {\n                        if (!this.eatContextual(name1)) this.unexpected();\n                    };\n                    pp.canInsertSemicolon = function() {\n                        return this.type === types.eof || this.type === types.braceR || lineBreak.test(this.input.slice(this.lastTokEnd, this.start));\n                    };\n                    pp.insertSemicolon = function() {\n                        if (this.canInsertSemicolon()) {\n                            if (this.options.onInsertedSemicolon) this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);\n                            return true;\n                        }\n                    };\n                    pp.semicolon = function() {\n                        if (!this.eat(types.semi) && !this.insertSemicolon()) this.unexpected();\n                    };\n                    pp.afterTrailingComma = function(tokType, notNext) {\n                        if (this.type === tokType) {\n                            if (this.options.onTrailingComma) this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);\n                            if (!notNext) this.next();\n                            return true;\n                        }\n                    };\n                    pp.expect = function(type) {\n                        this.eat(type) || this.unexpected();\n                    };\n                    pp.unexpected = function(pos) {\n                        this.raise(pos != null ? pos : this.start, \"Unexpected token\");\n                    };\n                    function DestructuringErrors() {\n                        this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;\n                    }\n                    pp.checkPatternErrors = function(refDestructuringErrors, isAssign) {\n                        if (!refDestructuringErrors) return;\n                        if (refDestructuringErrors.trailingComma > -1) this.raiseRecoverable(refDestructuringErrors.trailingComma, \"Comma is not permitted after the rest element\");\n                        var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;\n                        if (parens > -1) this.raiseRecoverable(parens, \"Parenthesized pattern\");\n                    };\n                    pp.checkExpressionErrors = function(refDestructuringErrors, andThrow) {\n                        if (!refDestructuringErrors) return false;\n                        var shorthandAssign = refDestructuringErrors.shorthandAssign;\n                        var doubleProto = refDestructuringErrors.doubleProto;\n                        if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;\n                        if (shorthandAssign >= 0) this.raise(shorthandAssign, \"Shorthand property assignments are valid only in destructuring patterns\");\n                        if (doubleProto >= 0) this.raiseRecoverable(doubleProto, \"Redefinition of __proto__ property\");\n                    };\n                    pp.checkYieldAwaitInDefaultParams = function() {\n                        if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos)) this.raise(this.yieldPos, \"Yield expression cannot be a default value\");\n                        if (this.awaitPos) this.raise(this.awaitPos, \"Await expression cannot be a default value\");\n                    };\n                    pp.isSimpleAssignTarget = function(expr) {\n                        if (expr.type === \"ParenthesizedExpression\") return this.isSimpleAssignTarget(expr.expression);\n                        return expr.type === \"Identifier\" || expr.type === \"MemberExpression\";\n                    };\n                    var pp$1 = Parser.prototype;\n                    pp$1.parseTopLevel = function(node) {\n                        var exports = {};\n                        if (!node.body) node.body = [];\n                        while(this.type !== types.eof){\n                            var stmt = this.parseStatement(null, true, exports);\n                            node.body.push(stmt);\n                        }\n                        if (this.inModule) for(var i = 0, list = Object.keys(this.undefinedExports); i < list.length; i += 1){\n                            var name1 = list[i];\n                            this.raiseRecoverable(this.undefinedExports[name1].start, \"Export '\" + name1 + \"' is not defined\");\n                        }\n                        this.adaptDirectivePrologue(node.body);\n                        this.next();\n                        node.sourceType = this.options.sourceType;\n                        return this.finishNode(node, \"Program\");\n                    };\n                    var loopLabel = {\n                        kind: \"loop\"\n                    }, switchLabel = {\n                        kind: \"switch\"\n                    };\n                    pp$1.isLet = function(context) {\n                        if (this.options.ecmaVersion < 6 || !this.isContextual(\"let\")) return false;\n                        skipWhiteSpace.lastIndex = this.pos;\n                        var skip = skipWhiteSpace.exec(this.input);\n                        var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n                        if (nextCh === 91) return true;\n                        if (context) return false;\n                        if (nextCh === 123) return true;\n                        if (isIdentifierStart(nextCh, true)) {\n                            var pos = next + 1;\n                            while(isIdentifierChar(this.input.charCodeAt(pos), true))++pos;\n                            var ident = this.input.slice(next, pos);\n                            if (!keywordRelationalOperator.test(ident)) return true;\n                        }\n                        return false;\n                    };\n                    pp$1.isAsyncFunction = function() {\n                        if (this.options.ecmaVersion < 8 || !this.isContextual(\"async\")) return false;\n                        skipWhiteSpace.lastIndex = this.pos;\n                        var skip = skipWhiteSpace.exec(this.input);\n                        var next = this.pos + skip[0].length;\n                        return !lineBreak.test(this.input.slice(this.pos, next)) && this.input.slice(next, next + 8) === \"function\" && (next + 8 === this.input.length || !isIdentifierChar(this.input.charAt(next + 8)));\n                    };\n                    pp$1.parseStatement = function(context, topLevel, exports) {\n                        var starttype = this.type, node = this.startNode(), kind;\n                        if (this.isLet(context)) {\n                            starttype = types._var;\n                            kind = \"let\";\n                        }\n                        switch(starttype){\n                            case types._break:\n                            case types._continue:\n                                return this.parseBreakContinueStatement(node, starttype.keyword);\n                            case types._debugger:\n                                return this.parseDebuggerStatement(node);\n                            case types._do:\n                                return this.parseDoStatement(node);\n                            case types._for:\n                                return this.parseForStatement(node);\n                            case types._function:\n                                if (context && (this.strict || context !== \"if\" && context !== \"label\") && this.options.ecmaVersion >= 6) this.unexpected();\n                                return this.parseFunctionStatement(node, false, !context);\n                            case types._class:\n                                if (context) this.unexpected();\n                                return this.parseClass(node, true);\n                            case types._if:\n                                return this.parseIfStatement(node);\n                            case types._return:\n                                return this.parseReturnStatement(node);\n                            case types._switch:\n                                return this.parseSwitchStatement(node);\n                            case types._throw:\n                                return this.parseThrowStatement(node);\n                            case types._try:\n                                return this.parseTryStatement(node);\n                            case types._const:\n                            case types._var:\n                                kind = kind || this.value;\n                                if (context && kind !== \"var\") this.unexpected();\n                                return this.parseVarStatement(node, kind);\n                            case types._while:\n                                return this.parseWhileStatement(node);\n                            case types._with:\n                                return this.parseWithStatement(node);\n                            case types.braceL:\n                                return this.parseBlock(true, node);\n                            case types.semi:\n                                return this.parseEmptyStatement(node);\n                            case types._export:\n                            case types._import:\n                                if (this.options.ecmaVersion > 10 && starttype === types._import) {\n                                    skipWhiteSpace.lastIndex = this.pos;\n                                    var skip = skipWhiteSpace.exec(this.input);\n                                    var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n                                    if (nextCh === 40) return this.parseExpressionStatement(node, this.parseExpression());\n                                }\n                                if (!this.options.allowImportExportEverywhere) {\n                                    if (!topLevel) this.raise(this.start, \"'import' and 'export' may only appear at the top level\");\n                                    if (!this.inModule) this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\");\n                                }\n                                return starttype === types._import ? this.parseImport(node) : this.parseExport(node, exports);\n                            default:\n                                if (this.isAsyncFunction()) {\n                                    if (context) this.unexpected();\n                                    this.next();\n                                    return this.parseFunctionStatement(node, true, !context);\n                                }\n                                var maybeName = this.value, expr = this.parseExpression();\n                                if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon)) return this.parseLabeledStatement(node, maybeName, expr, context);\n                                else return this.parseExpressionStatement(node, expr);\n                        }\n                    };\n                    pp$1.parseBreakContinueStatement = function(node, keyword) {\n                        var isBreak = keyword === \"break\";\n                        this.next();\n                        if (this.eat(types.semi) || this.insertSemicolon()) node.label = null;\n                        else if (this.type !== types.name) this.unexpected();\n                        else {\n                            node.label = this.parseIdent();\n                            this.semicolon();\n                        }\n                        var i = 0;\n                        for(; i < this.labels.length; ++i){\n                            var lab = this.labels[i];\n                            if (node.label == null || lab.name === node.label.name) {\n                                if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n                                if (node.label && isBreak) break;\n                            }\n                        }\n                        if (i === this.labels.length) this.raise(node.start, \"Unsyntactic \" + keyword);\n                        return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n                    };\n                    pp$1.parseDebuggerStatement = function(node) {\n                        this.next();\n                        this.semicolon();\n                        return this.finishNode(node, \"DebuggerStatement\");\n                    };\n                    pp$1.parseDoStatement = function(node) {\n                        this.next();\n                        this.labels.push(loopLabel);\n                        node.body = this.parseStatement(\"do\");\n                        this.labels.pop();\n                        this.expect(types._while);\n                        node.test = this.parseParenExpression();\n                        if (this.options.ecmaVersion >= 6) this.eat(types.semi);\n                        else this.semicolon();\n                        return this.finishNode(node, \"DoWhileStatement\");\n                    };\n                    pp$1.parseForStatement = function(node) {\n                        this.next();\n                        var awaitAt = this.options.ecmaVersion >= 9 && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction) && this.eatContextual(\"await\") ? this.lastTokStart : -1;\n                        this.labels.push(loopLabel);\n                        this.enterScope(0);\n                        this.expect(types.parenL);\n                        if (this.type === types.semi) {\n                            if (awaitAt > -1) this.unexpected(awaitAt);\n                            return this.parseFor(node, null);\n                        }\n                        var isLet = this.isLet();\n                        if (this.type === types._var || this.type === types._const || isLet) {\n                            var init$1 = this.startNode(), kind = isLet ? \"let\" : this.value;\n                            this.next();\n                            this.parseVar(init$1, true, kind);\n                            this.finishNode(init$1, \"VariableDeclaration\");\n                            if ((this.type === types._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\")) && init$1.declarations.length === 1) {\n                                if (this.options.ecmaVersion >= 9) {\n                                    if (this.type === types._in) {\n                                        if (awaitAt > -1) this.unexpected(awaitAt);\n                                    } else node.await = awaitAt > -1;\n                                }\n                                return this.parseForIn(node, init$1);\n                            }\n                            if (awaitAt > -1) this.unexpected(awaitAt);\n                            return this.parseFor(node, init$1);\n                        }\n                        var refDestructuringErrors = new DestructuringErrors;\n                        var init = this.parseExpression(true, refDestructuringErrors);\n                        if (this.type === types._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\")) {\n                            if (this.options.ecmaVersion >= 9) {\n                                if (this.type === types._in) {\n                                    if (awaitAt > -1) this.unexpected(awaitAt);\n                                } else node.await = awaitAt > -1;\n                            }\n                            this.toAssignable(init, false, refDestructuringErrors);\n                            this.checkLVal(init);\n                            return this.parseForIn(node, init);\n                        } else this.checkExpressionErrors(refDestructuringErrors, true);\n                        if (awaitAt > -1) this.unexpected(awaitAt);\n                        return this.parseFor(node, init);\n                    };\n                    pp$1.parseFunctionStatement = function(node, isAsync, declarationPosition) {\n                        this.next();\n                        return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync);\n                    };\n                    pp$1.parseIfStatement = function(node) {\n                        this.next();\n                        node.test = this.parseParenExpression();\n                        node.consequent = this.parseStatement(\"if\");\n                        node.alternate = this.eat(types._else) ? this.parseStatement(\"if\") : null;\n                        return this.finishNode(node, \"IfStatement\");\n                    };\n                    pp$1.parseReturnStatement = function(node) {\n                        if (!this.inFunction && !this.options.allowReturnOutsideFunction) this.raise(this.start, \"'return' outside of function\");\n                        this.next();\n                        if (this.eat(types.semi) || this.insertSemicolon()) node.argument = null;\n                        else {\n                            node.argument = this.parseExpression();\n                            this.semicolon();\n                        }\n                        return this.finishNode(node, \"ReturnStatement\");\n                    };\n                    pp$1.parseSwitchStatement = function(node) {\n                        this.next();\n                        node.discriminant = this.parseParenExpression();\n                        node.cases = [];\n                        this.expect(types.braceL);\n                        this.labels.push(switchLabel);\n                        this.enterScope(0);\n                        var cur;\n                        for(var sawDefault = false; this.type !== types.braceR;)if (this.type === types._case || this.type === types._default) {\n                            var isCase = this.type === types._case;\n                            if (cur) this.finishNode(cur, \"SwitchCase\");\n                            node.cases.push(cur = this.startNode());\n                            cur.consequent = [];\n                            this.next();\n                            if (isCase) cur.test = this.parseExpression();\n                            else {\n                                if (sawDefault) this.raiseRecoverable(this.lastTokStart, \"Multiple default clauses\");\n                                sawDefault = true;\n                                cur.test = null;\n                            }\n                            this.expect(types.colon);\n                        } else {\n                            if (!cur) this.unexpected();\n                            cur.consequent.push(this.parseStatement(null));\n                        }\n                        this.exitScope();\n                        if (cur) this.finishNode(cur, \"SwitchCase\");\n                        this.next();\n                        this.labels.pop();\n                        return this.finishNode(node, \"SwitchStatement\");\n                    };\n                    pp$1.parseThrowStatement = function(node) {\n                        this.next();\n                        if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) this.raise(this.lastTokEnd, \"Illegal newline after throw\");\n                        node.argument = this.parseExpression();\n                        this.semicolon();\n                        return this.finishNode(node, \"ThrowStatement\");\n                    };\n                    var empty = [];\n                    pp$1.parseTryStatement = function(node) {\n                        this.next();\n                        node.block = this.parseBlock();\n                        node.handler = null;\n                        if (this.type === types._catch) {\n                            var clause = this.startNode();\n                            this.next();\n                            if (this.eat(types.parenL)) {\n                                clause.param = this.parseBindingAtom();\n                                var simple = clause.param.type === \"Identifier\";\n                                this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);\n                                this.checkLVal(clause.param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);\n                                this.expect(types.parenR);\n                            } else {\n                                if (this.options.ecmaVersion < 10) this.unexpected();\n                                clause.param = null;\n                                this.enterScope(0);\n                            }\n                            clause.body = this.parseBlock(false);\n                            this.exitScope();\n                            node.handler = this.finishNode(clause, \"CatchClause\");\n                        }\n                        node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n                        if (!node.handler && !node.finalizer) this.raise(node.start, \"Missing catch or finally clause\");\n                        return this.finishNode(node, \"TryStatement\");\n                    };\n                    pp$1.parseVarStatement = function(node, kind) {\n                        this.next();\n                        this.parseVar(node, false, kind);\n                        this.semicolon();\n                        return this.finishNode(node, \"VariableDeclaration\");\n                    };\n                    pp$1.parseWhileStatement = function(node) {\n                        this.next();\n                        node.test = this.parseParenExpression();\n                        this.labels.push(loopLabel);\n                        node.body = this.parseStatement(\"while\");\n                        this.labels.pop();\n                        return this.finishNode(node, \"WhileStatement\");\n                    };\n                    pp$1.parseWithStatement = function(node) {\n                        if (this.strict) this.raise(this.start, \"'with' in strict mode\");\n                        this.next();\n                        node.object = this.parseParenExpression();\n                        node.body = this.parseStatement(\"with\");\n                        return this.finishNode(node, \"WithStatement\");\n                    };\n                    pp$1.parseEmptyStatement = function(node) {\n                        this.next();\n                        return this.finishNode(node, \"EmptyStatement\");\n                    };\n                    pp$1.parseLabeledStatement = function(node, maybeName, expr, context) {\n                        for(var i$1 = 0, list = this.labels; i$1 < list.length; i$1 += 1){\n                            var label = list[i$1];\n                            if (label.name === maybeName) this.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n                        }\n                        var kind = this.type.isLoop ? \"loop\" : this.type === types._switch ? \"switch\" : null;\n                        for(var i = this.labels.length - 1; i >= 0; i--){\n                            var label$1 = this.labels[i];\n                            if (label$1.statementStart === node.start) {\n                                label$1.statementStart = this.start;\n                                label$1.kind = kind;\n                            } else break;\n                        }\n                        this.labels.push({\n                            name: maybeName,\n                            kind: kind,\n                            statementStart: this.start\n                        });\n                        node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n                        this.labels.pop();\n                        node.label = expr;\n                        return this.finishNode(node, \"LabeledStatement\");\n                    };\n                    pp$1.parseExpressionStatement = function(node, expr) {\n                        node.expression = expr;\n                        this.semicolon();\n                        return this.finishNode(node, \"ExpressionStatement\");\n                    };\n                    pp$1.parseBlock = function(createNewLexicalScope, node) {\n                        if (createNewLexicalScope === void 0) createNewLexicalScope = true;\n                        if (node === void 0) node = this.startNode();\n                        node.body = [];\n                        this.expect(types.braceL);\n                        if (createNewLexicalScope) this.enterScope(0);\n                        while(!this.eat(types.braceR)){\n                            var stmt = this.parseStatement(null);\n                            node.body.push(stmt);\n                        }\n                        if (createNewLexicalScope) this.exitScope();\n                        return this.finishNode(node, \"BlockStatement\");\n                    };\n                    pp$1.parseFor = function(node, init) {\n                        node.init = init;\n                        this.expect(types.semi);\n                        node.test = this.type === types.semi ? null : this.parseExpression();\n                        this.expect(types.semi);\n                        node.update = this.type === types.parenR ? null : this.parseExpression();\n                        this.expect(types.parenR);\n                        node.body = this.parseStatement(\"for\");\n                        this.exitScope();\n                        this.labels.pop();\n                        return this.finishNode(node, \"ForStatement\");\n                    };\n                    pp$1.parseForIn = function(node, init) {\n                        var isForIn = this.type === types._in;\n                        this.next();\n                        if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.options.ecmaVersion < 8 || this.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) this.raise(init.start, (isForIn ? \"for-in\" : \"for-of\") + \" loop variable declaration may not have an initializer\");\n                        else if (init.type === \"AssignmentPattern\") this.raise(init.start, \"Invalid left-hand side in for-loop\");\n                        node.left = init;\n                        node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();\n                        this.expect(types.parenR);\n                        node.body = this.parseStatement(\"for\");\n                        this.exitScope();\n                        this.labels.pop();\n                        return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n                    };\n                    pp$1.parseVar = function(node, isFor, kind) {\n                        node.declarations = [];\n                        node.kind = kind;\n                        for(;;){\n                            var decl = this.startNode();\n                            this.parseVarId(decl, kind);\n                            if (this.eat(types.eq)) decl.init = this.parseMaybeAssign(isFor);\n                            else if (kind === \"const\" && !(this.type === types._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) this.unexpected();\n                            else if (decl.id.type !== \"Identifier\" && !(isFor && (this.type === types._in || this.isContextual(\"of\")))) this.raise(this.lastTokEnd, \"Complex binding patterns require an initialization value\");\n                            else decl.init = null;\n                            node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n                            if (!this.eat(types.comma)) break;\n                        }\n                        return node;\n                    };\n                    pp$1.parseVarId = function(decl, kind) {\n                        decl.id = this.parseBindingAtom();\n                        this.checkLVal(decl.id, kind === \"var\" ? BIND_VAR : BIND_LEXICAL, false);\n                    };\n                    var FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2, FUNC_NULLABLE_ID = 4;\n                    pp$1.parseFunction = function(node, statement, allowExpressionBody, isAsync) {\n                        this.initFunction(node);\n                        if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {\n                            if (this.type === types.star && statement & FUNC_HANGING_STATEMENT) this.unexpected();\n                            node.generator = this.eat(types.star);\n                        }\n                        if (this.options.ecmaVersion >= 8) node.async = !!isAsync;\n                        if (statement & FUNC_STATEMENT) {\n                            node.id = statement & FUNC_NULLABLE_ID && this.type !== types.name ? null : this.parseIdent();\n                            if (node.id && !(statement & FUNC_HANGING_STATEMENT)) this.checkLVal(node.id, this.strict || node.generator || node.async ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION);\n                        }\n                        var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n                        this.yieldPos = 0;\n                        this.awaitPos = 0;\n                        this.awaitIdentPos = 0;\n                        this.enterScope(functionFlags(node.async, node.generator));\n                        if (!(statement & FUNC_STATEMENT)) node.id = this.type === types.name ? this.parseIdent() : null;\n                        this.parseFunctionParams(node);\n                        this.parseFunctionBody(node, allowExpressionBody, false);\n                        this.yieldPos = oldYieldPos;\n                        this.awaitPos = oldAwaitPos;\n                        this.awaitIdentPos = oldAwaitIdentPos;\n                        return this.finishNode(node, statement & FUNC_STATEMENT ? \"FunctionDeclaration\" : \"FunctionExpression\");\n                    };\n                    pp$1.parseFunctionParams = function(node) {\n                        this.expect(types.parenL);\n                        node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);\n                        this.checkYieldAwaitInDefaultParams();\n                    };\n                    pp$1.parseClass = function(node, isStatement) {\n                        this.next();\n                        var oldStrict = this.strict;\n                        this.strict = true;\n                        this.parseClassId(node, isStatement);\n                        this.parseClassSuper(node);\n                        var classBody = this.startNode();\n                        var hadConstructor = false;\n                        classBody.body = [];\n                        this.expect(types.braceL);\n                        while(!this.eat(types.braceR)){\n                            var element = this.parseClassElement(node.superClass !== null);\n                            if (element) {\n                                classBody.body.push(element);\n                                if (element.type === \"MethodDefinition\" && element.kind === \"constructor\") {\n                                    if (hadConstructor) this.raise(element.start, \"Duplicate constructor in the same class\");\n                                    hadConstructor = true;\n                                }\n                            }\n                        }\n                        node.body = this.finishNode(classBody, \"ClassBody\");\n                        this.strict = oldStrict;\n                        return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n                    };\n                    pp$1.parseClassElement = function(constructorAllowsSuper) {\n                        var this$1 = this;\n                        if (this.eat(types.semi)) return null;\n                        var method = this.startNode();\n                        var tryContextual = function(k, noLineBreak) {\n                            if (noLineBreak === void 0) noLineBreak = false;\n                            var start = this$1.start, startLoc = this$1.startLoc;\n                            if (!this$1.eatContextual(k)) return false;\n                            if (this$1.type !== types.parenL && (!noLineBreak || !this$1.canInsertSemicolon())) return true;\n                            if (method.key) this$1.unexpected();\n                            method.computed = false;\n                            method.key = this$1.startNodeAt(start, startLoc);\n                            method.key.name = k;\n                            this$1.finishNode(method.key, \"Identifier\");\n                            return false;\n                        };\n                        method.kind = \"method\";\n                        method.static = tryContextual(\"static\");\n                        var isGenerator = this.eat(types.star);\n                        var isAsync = false;\n                        if (!isGenerator) {\n                            if (this.options.ecmaVersion >= 8 && tryContextual(\"async\", true)) {\n                                isAsync = true;\n                                isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);\n                            } else if (tryContextual(\"get\")) method.kind = \"get\";\n                            else if (tryContextual(\"set\")) method.kind = \"set\";\n                        }\n                        if (!method.key) this.parsePropertyName(method);\n                        var key = method.key;\n                        var allowsDirectSuper = false;\n                        if (!method.computed && !method.static && (key.type === \"Identifier\" && key.name === \"constructor\" || key.type === \"Literal\" && key.value === \"constructor\")) {\n                            if (method.kind !== \"method\") this.raise(key.start, \"Constructor can't have get/set modifier\");\n                            if (isGenerator) this.raise(key.start, \"Constructor can't be a generator\");\n                            if (isAsync) this.raise(key.start, \"Constructor can't be an async method\");\n                            method.kind = \"constructor\";\n                            allowsDirectSuper = constructorAllowsSuper;\n                        } else if (method.static && key.type === \"Identifier\" && key.name === \"prototype\") this.raise(key.start, \"Classes may not have a static property named prototype\");\n                        this.parseClassMethod(method, isGenerator, isAsync, allowsDirectSuper);\n                        if (method.kind === \"get\" && method.value.params.length !== 0) this.raiseRecoverable(method.value.start, \"getter should have no params\");\n                        if (method.kind === \"set\" && method.value.params.length !== 1) this.raiseRecoverable(method.value.start, \"setter should have exactly one param\");\n                        if (method.kind === \"set\" && method.value.params[0].type === \"RestElement\") this.raiseRecoverable(method.value.params[0].start, \"Setter cannot use rest params\");\n                        return method;\n                    };\n                    pp$1.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {\n                        method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);\n                        return this.finishNode(method, \"MethodDefinition\");\n                    };\n                    pp$1.parseClassId = function(node, isStatement) {\n                        if (this.type === types.name) {\n                            node.id = this.parseIdent();\n                            if (isStatement) this.checkLVal(node.id, BIND_LEXICAL, false);\n                        } else {\n                            if (isStatement === true) this.unexpected();\n                            node.id = null;\n                        }\n                    };\n                    pp$1.parseClassSuper = function(node) {\n                        node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n                    };\n                    pp$1.parseExport = function(node, exports) {\n                        this.next();\n                        if (this.eat(types.star)) {\n                            this.expectContextual(\"from\");\n                            if (this.type !== types.string) this.unexpected();\n                            node.source = this.parseExprAtom();\n                            this.semicolon();\n                            return this.finishNode(node, \"ExportAllDeclaration\");\n                        }\n                        if (this.eat(types._default)) {\n                            this.checkExport(exports, \"default\", this.lastTokStart);\n                            var isAsync;\n                            if (this.type === types._function || (isAsync = this.isAsyncFunction())) {\n                                var fNode = this.startNode();\n                                this.next();\n                                if (isAsync) this.next();\n                                node.declaration = this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);\n                            } else if (this.type === types._class) {\n                                var cNode = this.startNode();\n                                node.declaration = this.parseClass(cNode, \"nullableID\");\n                            } else {\n                                node.declaration = this.parseMaybeAssign();\n                                this.semicolon();\n                            }\n                            return this.finishNode(node, \"ExportDefaultDeclaration\");\n                        }\n                        if (this.shouldParseExportStatement()) {\n                            node.declaration = this.parseStatement(null);\n                            if (node.declaration.type === \"VariableDeclaration\") this.checkVariableExport(exports, node.declaration.declarations);\n                            else this.checkExport(exports, node.declaration.id.name, node.declaration.id.start);\n                            node.specifiers = [];\n                            node.source = null;\n                        } else {\n                            node.declaration = null;\n                            node.specifiers = this.parseExportSpecifiers(exports);\n                            if (this.eatContextual(\"from\")) {\n                                if (this.type !== types.string) this.unexpected();\n                                node.source = this.parseExprAtom();\n                            } else {\n                                for(var i = 0, list = node.specifiers; i < list.length; i += 1){\n                                    var spec = list[i];\n                                    this.checkUnreserved(spec.local);\n                                    this.checkLocalExport(spec.local);\n                                }\n                                node.source = null;\n                            }\n                            this.semicolon();\n                        }\n                        return this.finishNode(node, \"ExportNamedDeclaration\");\n                    };\n                    pp$1.checkExport = function(exports, name1, pos) {\n                        if (!exports) return;\n                        if (has(exports, name1)) this.raiseRecoverable(pos, \"Duplicate export '\" + name1 + \"'\");\n                        exports[name1] = true;\n                    };\n                    pp$1.checkPatternExport = function(exports, pat) {\n                        var type = pat.type;\n                        if (type === \"Identifier\") this.checkExport(exports, pat.name, pat.start);\n                        else if (type === \"ObjectPattern\") for(var i = 0, list = pat.properties; i < list.length; i += 1){\n                            var prop = list[i];\n                            this.checkPatternExport(exports, prop);\n                        }\n                        else if (type === \"ArrayPattern\") for(var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1){\n                            var elt = list$1[i$1];\n                            if (elt) this.checkPatternExport(exports, elt);\n                        }\n                        else if (type === \"Property\") this.checkPatternExport(exports, pat.value);\n                        else if (type === \"AssignmentPattern\") this.checkPatternExport(exports, pat.left);\n                        else if (type === \"RestElement\") this.checkPatternExport(exports, pat.argument);\n                        else if (type === \"ParenthesizedExpression\") this.checkPatternExport(exports, pat.expression);\n                    };\n                    pp$1.checkVariableExport = function(exports, decls) {\n                        if (!exports) return;\n                        for(var i = 0, list = decls; i < list.length; i += 1){\n                            var decl = list[i];\n                            this.checkPatternExport(exports, decl.id);\n                        }\n                    };\n                    pp$1.shouldParseExportStatement = function() {\n                        return this.type.keyword === \"var\" || this.type.keyword === \"const\" || this.type.keyword === \"class\" || this.type.keyword === \"function\" || this.isLet() || this.isAsyncFunction();\n                    };\n                    pp$1.parseExportSpecifiers = function(exports) {\n                        var nodes = [], first = true;\n                        this.expect(types.braceL);\n                        while(!this.eat(types.braceR)){\n                            if (!first) {\n                                this.expect(types.comma);\n                                if (this.afterTrailingComma(types.braceR)) break;\n                            } else first = false;\n                            var node = this.startNode();\n                            node.local = this.parseIdent(true);\n                            node.exported = this.eatContextual(\"as\") ? this.parseIdent(true) : node.local;\n                            this.checkExport(exports, node.exported.name, node.exported.start);\n                            nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n                        }\n                        return nodes;\n                    };\n                    pp$1.parseImport = function(node) {\n                        this.next();\n                        if (this.type === types.string) {\n                            node.specifiers = empty;\n                            node.source = this.parseExprAtom();\n                        } else {\n                            node.specifiers = this.parseImportSpecifiers();\n                            this.expectContextual(\"from\");\n                            node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();\n                        }\n                        this.semicolon();\n                        return this.finishNode(node, \"ImportDeclaration\");\n                    };\n                    pp$1.parseImportSpecifiers = function() {\n                        var nodes = [], first = true;\n                        if (this.type === types.name) {\n                            var node = this.startNode();\n                            node.local = this.parseIdent();\n                            this.checkLVal(node.local, BIND_LEXICAL);\n                            nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"));\n                            if (!this.eat(types.comma)) return nodes;\n                        }\n                        if (this.type === types.star) {\n                            var node$1 = this.startNode();\n                            this.next();\n                            this.expectContextual(\"as\");\n                            node$1.local = this.parseIdent();\n                            this.checkLVal(node$1.local, BIND_LEXICAL);\n                            nodes.push(this.finishNode(node$1, \"ImportNamespaceSpecifier\"));\n                            return nodes;\n                        }\n                        this.expect(types.braceL);\n                        while(!this.eat(types.braceR)){\n                            if (!first) {\n                                this.expect(types.comma);\n                                if (this.afterTrailingComma(types.braceR)) break;\n                            } else first = false;\n                            var node$2 = this.startNode();\n                            node$2.imported = this.parseIdent(true);\n                            if (this.eatContextual(\"as\")) node$2.local = this.parseIdent();\n                            else {\n                                this.checkUnreserved(node$2.imported);\n                                node$2.local = node$2.imported;\n                            }\n                            this.checkLVal(node$2.local, BIND_LEXICAL);\n                            nodes.push(this.finishNode(node$2, \"ImportSpecifier\"));\n                        }\n                        return nodes;\n                    };\n                    pp$1.adaptDirectivePrologue = function(statements) {\n                        for(var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i)statements[i].directive = statements[i].expression.raw.slice(1, -1);\n                    };\n                    pp$1.isDirectiveCandidate = function(statement) {\n                        return statement.type === \"ExpressionStatement\" && statement.expression.type === \"Literal\" && typeof statement.expression.value === \"string\" && (this.input[statement.start] === '\"' || this.input[statement.start] === \"'\");\n                    };\n                    var pp$2 = Parser.prototype;\n                    pp$2.toAssignable = function(node, isBinding, refDestructuringErrors) {\n                        if (this.options.ecmaVersion >= 6 && node) switch(node.type){\n                            case \"Identifier\":\n                                if (this.inAsync && node.name === \"await\") this.raise(node.start, \"Cannot use 'await' as identifier inside an async function\");\n                                break;\n                            case \"ObjectPattern\":\n                            case \"ArrayPattern\":\n                            case \"RestElement\":\n                                break;\n                            case \"ObjectExpression\":\n                                node.type = \"ObjectPattern\";\n                                if (refDestructuringErrors) this.checkPatternErrors(refDestructuringErrors, true);\n                                for(var i = 0, list = node.properties; i < list.length; i += 1){\n                                    var prop = list[i];\n                                    this.toAssignable(prop, isBinding);\n                                    if (prop.type === \"RestElement\" && (prop.argument.type === \"ArrayPattern\" || prop.argument.type === \"ObjectPattern\")) this.raise(prop.argument.start, \"Unexpected token\");\n                                }\n                                break;\n                            case \"Property\":\n                                if (node.kind !== \"init\") this.raise(node.key.start, \"Object pattern can't contain getter or setter\");\n                                this.toAssignable(node.value, isBinding);\n                                break;\n                            case \"ArrayExpression\":\n                                node.type = \"ArrayPattern\";\n                                if (refDestructuringErrors) this.checkPatternErrors(refDestructuringErrors, true);\n                                this.toAssignableList(node.elements, isBinding);\n                                break;\n                            case \"SpreadElement\":\n                                node.type = \"RestElement\";\n                                this.toAssignable(node.argument, isBinding);\n                                if (node.argument.type === \"AssignmentPattern\") this.raise(node.argument.start, \"Rest elements cannot have a default value\");\n                                break;\n                            case \"AssignmentExpression\":\n                                if (node.operator !== \"=\") this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\");\n                                node.type = \"AssignmentPattern\";\n                                delete node.operator;\n                                this.toAssignable(node.left, isBinding);\n                            case \"AssignmentPattern\":\n                                break;\n                            case \"ParenthesizedExpression\":\n                                this.toAssignable(node.expression, isBinding, refDestructuringErrors);\n                                break;\n                            case \"MemberExpression\":\n                                if (!isBinding) break;\n                            default:\n                                this.raise(node.start, \"Assigning to rvalue\");\n                        }\n                        else if (refDestructuringErrors) this.checkPatternErrors(refDestructuringErrors, true);\n                        return node;\n                    };\n                    pp$2.toAssignableList = function(exprList, isBinding) {\n                        var end = exprList.length;\n                        for(var i = 0; i < end; i++){\n                            var elt = exprList[i];\n                            if (elt) this.toAssignable(elt, isBinding);\n                        }\n                        if (end) {\n                            var last = exprList[end - 1];\n                            if (this.options.ecmaVersion === 6 && isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\") this.unexpected(last.argument.start);\n                        }\n                        return exprList;\n                    };\n                    pp$2.parseSpread = function(refDestructuringErrors) {\n                        var node = this.startNode();\n                        this.next();\n                        node.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n                        return this.finishNode(node, \"SpreadElement\");\n                    };\n                    pp$2.parseRestBinding = function() {\n                        var node = this.startNode();\n                        this.next();\n                        if (this.options.ecmaVersion === 6 && this.type !== types.name) this.unexpected();\n                        node.argument = this.parseBindingAtom();\n                        return this.finishNode(node, \"RestElement\");\n                    };\n                    pp$2.parseBindingAtom = function() {\n                        if (this.options.ecmaVersion >= 6) switch(this.type){\n                            case types.bracketL:\n                                var node = this.startNode();\n                                this.next();\n                                node.elements = this.parseBindingList(types.bracketR, true, true);\n                                return this.finishNode(node, \"ArrayPattern\");\n                            case types.braceL:\n                                return this.parseObj(true);\n                        }\n                        return this.parseIdent();\n                    };\n                    pp$2.parseBindingList = function(close, allowEmpty, allowTrailingComma) {\n                        var elts = [], first = true;\n                        while(!this.eat(close)){\n                            if (first) first = false;\n                            else this.expect(types.comma);\n                            if (allowEmpty && this.type === types.comma) elts.push(null);\n                            else if (allowTrailingComma && this.afterTrailingComma(close)) break;\n                            else if (this.type === types.ellipsis) {\n                                var rest = this.parseRestBinding();\n                                this.parseBindingListItem(rest);\n                                elts.push(rest);\n                                if (this.type === types.comma) this.raise(this.start, \"Comma is not permitted after the rest element\");\n                                this.expect(close);\n                                break;\n                            } else {\n                                var elem = this.parseMaybeDefault(this.start, this.startLoc);\n                                this.parseBindingListItem(elem);\n                                elts.push(elem);\n                            }\n                        }\n                        return elts;\n                    };\n                    pp$2.parseBindingListItem = function(param) {\n                        return param;\n                    };\n                    pp$2.parseMaybeDefault = function(startPos, startLoc, left) {\n                        left = left || this.parseBindingAtom();\n                        if (this.options.ecmaVersion < 6 || !this.eat(types.eq)) return left;\n                        var node = this.startNodeAt(startPos, startLoc);\n                        node.left = left;\n                        node.right = this.parseMaybeAssign();\n                        return this.finishNode(node, \"AssignmentPattern\");\n                    };\n                    pp$2.checkLVal = function(expr, bindingType, checkClashes) {\n                        if (bindingType === void 0) bindingType = BIND_NONE;\n                        switch(expr.type){\n                            case \"Identifier\":\n                                if (bindingType === BIND_LEXICAL && expr.name === \"let\") this.raiseRecoverable(expr.start, \"let is disallowed as a lexically bound name\");\n                                if (this.strict && this.reservedWordsStrictBind.test(expr.name)) this.raiseRecoverable(expr.start, (bindingType ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\");\n                                if (checkClashes) {\n                                    if (has(checkClashes, expr.name)) this.raiseRecoverable(expr.start, \"Argument name clash\");\n                                    checkClashes[expr.name] = true;\n                                }\n                                if (bindingType !== BIND_NONE && bindingType !== BIND_OUTSIDE) this.declareName(expr.name, bindingType, expr.start);\n                                break;\n                            case \"MemberExpression\":\n                                if (bindingType) this.raiseRecoverable(expr.start, \"Binding member expression\");\n                                break;\n                            case \"ObjectPattern\":\n                                for(var i = 0, list = expr.properties; i < list.length; i += 1){\n                                    var prop = list[i];\n                                    this.checkLVal(prop, bindingType, checkClashes);\n                                }\n                                break;\n                            case \"Property\":\n                                this.checkLVal(expr.value, bindingType, checkClashes);\n                                break;\n                            case \"ArrayPattern\":\n                                for(var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1){\n                                    var elem = list$1[i$1];\n                                    if (elem) this.checkLVal(elem, bindingType, checkClashes);\n                                }\n                                break;\n                            case \"AssignmentPattern\":\n                                this.checkLVal(expr.left, bindingType, checkClashes);\n                                break;\n                            case \"RestElement\":\n                                this.checkLVal(expr.argument, bindingType, checkClashes);\n                                break;\n                            case \"ParenthesizedExpression\":\n                                this.checkLVal(expr.expression, bindingType, checkClashes);\n                                break;\n                            default:\n                                this.raise(expr.start, (bindingType ? \"Binding\" : \"Assigning to\") + \" rvalue\");\n                        }\n                    };\n                    var pp$3 = Parser.prototype;\n                    pp$3.checkPropClash = function(prop, propHash, refDestructuringErrors) {\n                        if (this.options.ecmaVersion >= 9 && prop.type === \"SpreadElement\") return;\n                        if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand)) return;\n                        var key = prop.key;\n                        var name1;\n                        switch(key.type){\n                            case \"Identifier\":\n                                name1 = key.name;\n                                break;\n                            case \"Literal\":\n                                name1 = String(key.value);\n                                break;\n                            default:\n                                return;\n                        }\n                        var kind = prop.kind;\n                        if (this.options.ecmaVersion >= 6) {\n                            if (name1 === \"__proto__\" && kind === \"init\") {\n                                if (propHash.proto) {\n                                    if (refDestructuringErrors) {\n                                        if (refDestructuringErrors.doubleProto < 0) refDestructuringErrors.doubleProto = key.start;\n                                    } else this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\");\n                                }\n                                propHash.proto = true;\n                            }\n                            return;\n                        }\n                        name1 = \"$\" + name1;\n                        var other = propHash[name1];\n                        if (other) {\n                            var redefinition;\n                            if (kind === \"init\") redefinition = this.strict && other.init || other.get || other.set;\n                            else redefinition = other.init || other[kind];\n                            if (redefinition) this.raiseRecoverable(key.start, \"Redefinition of property\");\n                        } else other = propHash[name1] = {\n                            init: false,\n                            get: false,\n                            set: false\n                        };\n                        other[kind] = true;\n                    };\n                    pp$3.parseExpression = function(noIn, refDestructuringErrors) {\n                        var startPos = this.start, startLoc = this.startLoc;\n                        var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);\n                        if (this.type === types.comma) {\n                            var node = this.startNodeAt(startPos, startLoc);\n                            node.expressions = [\n                                expr\n                            ];\n                            while(this.eat(types.comma))node.expressions.push(this.parseMaybeAssign(noIn, refDestructuringErrors));\n                            return this.finishNode(node, \"SequenceExpression\");\n                        }\n                        return expr;\n                    };\n                    pp$3.parseMaybeAssign = function(noIn, refDestructuringErrors, afterLeftParse) {\n                        if (this.isContextual(\"yield\")) {\n                            if (this.inGenerator) return this.parseYield(noIn);\n                            else this.exprAllowed = false;\n                        }\n                        var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1;\n                        if (refDestructuringErrors) {\n                            oldParenAssign = refDestructuringErrors.parenthesizedAssign;\n                            oldTrailingComma = refDestructuringErrors.trailingComma;\n                            refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;\n                        } else {\n                            refDestructuringErrors = new DestructuringErrors;\n                            ownDestructuringErrors = true;\n                        }\n                        var startPos = this.start, startLoc = this.startLoc;\n                        if (this.type === types.parenL || this.type === types.name) this.potentialArrowAt = this.start;\n                        var left = this.parseMaybeConditional(noIn, refDestructuringErrors);\n                        if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc);\n                        if (this.type.isAssign) {\n                            var node = this.startNodeAt(startPos, startLoc);\n                            node.operator = this.value;\n                            node.left = this.type === types.eq ? this.toAssignable(left, false, refDestructuringErrors) : left;\n                            if (!ownDestructuringErrors) refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;\n                            if (refDestructuringErrors.shorthandAssign >= node.left.start) refDestructuringErrors.shorthandAssign = -1;\n                            this.checkLVal(left);\n                            this.next();\n                            node.right = this.parseMaybeAssign(noIn);\n                            return this.finishNode(node, \"AssignmentExpression\");\n                        } else if (ownDestructuringErrors) this.checkExpressionErrors(refDestructuringErrors, true);\n                        if (oldParenAssign > -1) refDestructuringErrors.parenthesizedAssign = oldParenAssign;\n                        if (oldTrailingComma > -1) refDestructuringErrors.trailingComma = oldTrailingComma;\n                        return left;\n                    };\n                    pp$3.parseMaybeConditional = function(noIn, refDestructuringErrors) {\n                        var startPos = this.start, startLoc = this.startLoc;\n                        var expr = this.parseExprOps(noIn, refDestructuringErrors);\n                        if (this.checkExpressionErrors(refDestructuringErrors)) return expr;\n                        if (this.eat(types.question)) {\n                            var node = this.startNodeAt(startPos, startLoc);\n                            node.test = expr;\n                            node.consequent = this.parseMaybeAssign();\n                            this.expect(types.colon);\n                            node.alternate = this.parseMaybeAssign(noIn);\n                            return this.finishNode(node, \"ConditionalExpression\");\n                        }\n                        return expr;\n                    };\n                    pp$3.parseExprOps = function(noIn, refDestructuringErrors) {\n                        var startPos = this.start, startLoc = this.startLoc;\n                        var expr = this.parseMaybeUnary(refDestructuringErrors, false);\n                        if (this.checkExpressionErrors(refDestructuringErrors)) return expr;\n                        return expr.start === startPos && expr.type === \"ArrowFunctionExpression\" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, noIn);\n                    };\n                    pp$3.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n                        var prec = this.type.binop;\n                        if (prec != null && (!noIn || this.type !== types._in)) {\n                            if (prec > minPrec) {\n                                var logical = this.type === types.logicalOR || this.type === types.logicalAND;\n                                var op = this.value;\n                                this.next();\n                                var startPos = this.start, startLoc = this.startLoc;\n                                var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);\n                                var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical);\n                                return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);\n                            }\n                        }\n                        return left;\n                    };\n                    pp$3.buildBinary = function(startPos, startLoc, left, right, op, logical) {\n                        var node = this.startNodeAt(startPos, startLoc);\n                        node.left = left;\n                        node.operator = op;\n                        node.right = right;\n                        return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\");\n                    };\n                    pp$3.parseMaybeUnary = function(refDestructuringErrors, sawUnary) {\n                        var startPos = this.start, startLoc = this.startLoc, expr;\n                        if (this.isContextual(\"await\") && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction)) {\n                            expr = this.parseAwait();\n                            sawUnary = true;\n                        } else if (this.type.prefix) {\n                            var node = this.startNode(), update = this.type === types.incDec;\n                            node.operator = this.value;\n                            node.prefix = true;\n                            this.next();\n                            node.argument = this.parseMaybeUnary(null, true);\n                            this.checkExpressionErrors(refDestructuringErrors, true);\n                            if (update) this.checkLVal(node.argument);\n                            else if (this.strict && node.operator === \"delete\" && node.argument.type === \"Identifier\") this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\");\n                            else sawUnary = true;\n                            expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n                        } else {\n                            expr = this.parseExprSubscripts(refDestructuringErrors);\n                            if (this.checkExpressionErrors(refDestructuringErrors)) return expr;\n                            while(this.type.postfix && !this.canInsertSemicolon()){\n                                var node$1 = this.startNodeAt(startPos, startLoc);\n                                node$1.operator = this.value;\n                                node$1.prefix = false;\n                                node$1.argument = expr;\n                                this.checkLVal(expr);\n                                this.next();\n                                expr = this.finishNode(node$1, \"UpdateExpression\");\n                            }\n                        }\n                        if (!sawUnary && this.eat(types.starstar)) return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), \"**\", false);\n                        else return expr;\n                    };\n                    pp$3.parseExprSubscripts = function(refDestructuringErrors) {\n                        var startPos = this.start, startLoc = this.startLoc;\n                        var expr = this.parseExprAtom(refDestructuringErrors);\n                        if (expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\") return expr;\n                        var result = this.parseSubscripts(expr, startPos, startLoc);\n                        if (refDestructuringErrors && result.type === \"MemberExpression\") {\n                            if (refDestructuringErrors.parenthesizedAssign >= result.start) refDestructuringErrors.parenthesizedAssign = -1;\n                            if (refDestructuringErrors.parenthesizedBind >= result.start) refDestructuringErrors.parenthesizedBind = -1;\n                        }\n                        return result;\n                    };\n                    pp$3.parseSubscripts = function(base, startPos, startLoc, noCalls) {\n                        var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === \"Identifier\" && base.name === \"async\" && this.lastTokEnd === base.end && !this.canInsertSemicolon() && this.input.slice(base.start, base.end) === \"async\";\n                        while(true){\n                            var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow);\n                            if (element === base || element.type === \"ArrowFunctionExpression\") return element;\n                            base = element;\n                        }\n                    };\n                    pp$3.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow) {\n                        var computed = this.eat(types.bracketL);\n                        if (computed || this.eat(types.dot)) {\n                            var node = this.startNodeAt(startPos, startLoc);\n                            node.object = base;\n                            node.property = computed ? this.parseExpression() : this.parseIdent(this.options.allowReserved !== \"never\");\n                            node.computed = !!computed;\n                            if (computed) this.expect(types.bracketR);\n                            base = this.finishNode(node, \"MemberExpression\");\n                        } else if (!noCalls && this.eat(types.parenL)) {\n                            var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n                            this.yieldPos = 0;\n                            this.awaitPos = 0;\n                            this.awaitIdentPos = 0;\n                            var exprList = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);\n                            if (maybeAsyncArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {\n                                this.checkPatternErrors(refDestructuringErrors, false);\n                                this.checkYieldAwaitInDefaultParams();\n                                if (this.awaitIdentPos > 0) this.raise(this.awaitIdentPos, \"Cannot use 'await' as identifier inside an async function\");\n                                this.yieldPos = oldYieldPos;\n                                this.awaitPos = oldAwaitPos;\n                                this.awaitIdentPos = oldAwaitIdentPos;\n                                return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true);\n                            }\n                            this.checkExpressionErrors(refDestructuringErrors, true);\n                            this.yieldPos = oldYieldPos || this.yieldPos;\n                            this.awaitPos = oldAwaitPos || this.awaitPos;\n                            this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;\n                            var node$1 = this.startNodeAt(startPos, startLoc);\n                            node$1.callee = base;\n                            node$1.arguments = exprList;\n                            base = this.finishNode(node$1, \"CallExpression\");\n                        } else if (this.type === types.backQuote) {\n                            var node$2 = this.startNodeAt(startPos, startLoc);\n                            node$2.tag = base;\n                            node$2.quasi = this.parseTemplate({\n                                isTagged: true\n                            });\n                            base = this.finishNode(node$2, \"TaggedTemplateExpression\");\n                        }\n                        return base;\n                    };\n                    pp$3.parseExprAtom = function(refDestructuringErrors) {\n                        if (this.type === types.slash) this.readRegexp();\n                        var node, canBeArrow = this.potentialArrowAt === this.start;\n                        switch(this.type){\n                            case types._super:\n                                if (!this.allowSuper) this.raise(this.start, \"'super' keyword outside a method\");\n                                node = this.startNode();\n                                this.next();\n                                if (this.type === types.parenL && !this.allowDirectSuper) this.raise(node.start, \"super() call outside constructor of a subclass\");\n                                if (this.type !== types.dot && this.type !== types.bracketL && this.type !== types.parenL) this.unexpected();\n                                return this.finishNode(node, \"Super\");\n                            case types._this:\n                                node = this.startNode();\n                                this.next();\n                                return this.finishNode(node, \"ThisExpression\");\n                            case types.name:\n                                var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;\n                                var id = this.parseIdent(false);\n                                if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === \"async\" && !this.canInsertSemicolon() && this.eat(types._function)) return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true);\n                                if (canBeArrow && !this.canInsertSemicolon()) {\n                                    if (this.eat(types.arrow)) return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [\n                                        id\n                                    ], false);\n                                    if (this.options.ecmaVersion >= 8 && id.name === \"async\" && this.type === types.name && !containsEsc) {\n                                        id = this.parseIdent(false);\n                                        if (this.canInsertSemicolon() || !this.eat(types.arrow)) this.unexpected();\n                                        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [\n                                            id\n                                        ], true);\n                                    }\n                                }\n                                return id;\n                            case types.regexp:\n                                var value1 = this.value;\n                                node = this.parseLiteral(value1.value);\n                                node.regex = {\n                                    pattern: value1.pattern,\n                                    flags: value1.flags\n                                };\n                                return node;\n                            case types.num:\n                            case types.string:\n                                return this.parseLiteral(this.value);\n                            case types._null:\n                            case types._true:\n                            case types._false:\n                                node = this.startNode();\n                                node.value = this.type === types._null ? null : this.type === types._true;\n                                node.raw = this.type.keyword;\n                                this.next();\n                                return this.finishNode(node, \"Literal\");\n                            case types.parenL:\n                                var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow);\n                                if (refDestructuringErrors) {\n                                    if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr)) refDestructuringErrors.parenthesizedAssign = start;\n                                    if (refDestructuringErrors.parenthesizedBind < 0) refDestructuringErrors.parenthesizedBind = start;\n                                }\n                                return expr;\n                            case types.bracketL:\n                                node = this.startNode();\n                                this.next();\n                                node.elements = this.parseExprList(types.bracketR, true, true, refDestructuringErrors);\n                                return this.finishNode(node, \"ArrayExpression\");\n                            case types.braceL:\n                                return this.parseObj(false, refDestructuringErrors);\n                            case types._function:\n                                node = this.startNode();\n                                this.next();\n                                return this.parseFunction(node, 0);\n                            case types._class:\n                                return this.parseClass(this.startNode(), false);\n                            case types._new:\n                                return this.parseNew();\n                            case types.backQuote:\n                                return this.parseTemplate();\n                            case types._import:\n                                if (this.options.ecmaVersion >= 11) return this.parseExprImport();\n                                else return this.unexpected();\n                            default:\n                                this.unexpected();\n                        }\n                    };\n                    pp$3.parseExprImport = function() {\n                        var node = this.startNode();\n                        this.next();\n                        switch(this.type){\n                            case types.parenL:\n                                return this.parseDynamicImport(node);\n                            default:\n                                this.unexpected();\n                        }\n                    };\n                    pp$3.parseDynamicImport = function(node) {\n                        this.next();\n                        node.source = this.parseMaybeAssign();\n                        if (!this.eat(types.parenR)) {\n                            var errorPos = this.start;\n                            if (this.eat(types.comma) && this.eat(types.parenR)) this.raiseRecoverable(errorPos, \"Trailing comma is not allowed in import()\");\n                            else this.unexpected(errorPos);\n                        }\n                        return this.finishNode(node, \"ImportExpression\");\n                    };\n                    pp$3.parseLiteral = function(value1) {\n                        var node = this.startNode();\n                        node.value = value1;\n                        node.raw = this.input.slice(this.start, this.end);\n                        if (node.raw.charCodeAt(node.raw.length - 1) === 110) node.bigint = node.raw.slice(0, -1);\n                        this.next();\n                        return this.finishNode(node, \"Literal\");\n                    };\n                    pp$3.parseParenExpression = function() {\n                        this.expect(types.parenL);\n                        var val = this.parseExpression();\n                        this.expect(types.parenR);\n                        return val;\n                    };\n                    pp$3.parseParenAndDistinguishExpression = function(canBeArrow) {\n                        var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;\n                        if (this.options.ecmaVersion >= 6) {\n                            this.next();\n                            var innerStartPos = this.start, innerStartLoc = this.startLoc;\n                            var exprList = [], first = true, lastIsComma = false;\n                            var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;\n                            this.yieldPos = 0;\n                            this.awaitPos = 0;\n                            while(this.type !== types.parenR){\n                                first ? first = false : this.expect(types.comma);\n                                if (allowTrailingComma && this.afterTrailingComma(types.parenR, true)) {\n                                    lastIsComma = true;\n                                    break;\n                                } else if (this.type === types.ellipsis) {\n                                    spreadStart = this.start;\n                                    exprList.push(this.parseParenItem(this.parseRestBinding()));\n                                    if (this.type === types.comma) this.raise(this.start, \"Comma is not permitted after the rest element\");\n                                    break;\n                                } else exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));\n                            }\n                            var innerEndPos = this.start, innerEndLoc = this.startLoc;\n                            this.expect(types.parenR);\n                            if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {\n                                this.checkPatternErrors(refDestructuringErrors, false);\n                                this.checkYieldAwaitInDefaultParams();\n                                this.yieldPos = oldYieldPos;\n                                this.awaitPos = oldAwaitPos;\n                                return this.parseParenArrowList(startPos, startLoc, exprList);\n                            }\n                            if (!exprList.length || lastIsComma) this.unexpected(this.lastTokStart);\n                            if (spreadStart) this.unexpected(spreadStart);\n                            this.checkExpressionErrors(refDestructuringErrors, true);\n                            this.yieldPos = oldYieldPos || this.yieldPos;\n                            this.awaitPos = oldAwaitPos || this.awaitPos;\n                            if (exprList.length > 1) {\n                                val = this.startNodeAt(innerStartPos, innerStartLoc);\n                                val.expressions = exprList;\n                                this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n                            } else val = exprList[0];\n                        } else val = this.parseParenExpression();\n                        if (this.options.preserveParens) {\n                            var par = this.startNodeAt(startPos, startLoc);\n                            par.expression = val;\n                            return this.finishNode(par, \"ParenthesizedExpression\");\n                        } else return val;\n                    };\n                    pp$3.parseParenItem = function(item) {\n                        return item;\n                    };\n                    pp$3.parseParenArrowList = function(startPos, startLoc, exprList) {\n                        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList);\n                    };\n                    var empty$1 = [];\n                    pp$3.parseNew = function() {\n                        if (this.containsEsc) this.raiseRecoverable(this.start, \"Escape sequence in keyword new\");\n                        var node = this.startNode();\n                        var meta = this.parseIdent(true);\n                        if (this.options.ecmaVersion >= 6 && this.eat(types.dot)) {\n                            node.meta = meta;\n                            var containsEsc = this.containsEsc;\n                            node.property = this.parseIdent(true);\n                            if (node.property.name !== \"target\" || containsEsc) this.raiseRecoverable(node.property.start, \"The only valid meta property for new is new.target\");\n                            if (!this.inNonArrowFunction()) this.raiseRecoverable(node.start, \"new.target can only be used in functions\");\n                            return this.finishNode(node, \"MetaProperty\");\n                        }\n                        var startPos = this.start, startLoc = this.startLoc, isImport = this.type === types._import;\n                        node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n                        if (isImport && node.callee.type === \"ImportExpression\") this.raise(startPos, \"Cannot use new with import()\");\n                        if (this.eat(types.parenL)) node.arguments = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false);\n                        else node.arguments = empty$1;\n                        return this.finishNode(node, \"NewExpression\");\n                    };\n                    pp$3.parseTemplateElement = function(ref) {\n                        var isTagged = ref.isTagged;\n                        var elem = this.startNode();\n                        if (this.type === types.invalidTemplate) {\n                            if (!isTagged) this.raiseRecoverable(this.start, \"Bad escape sequence in untagged template literal\");\n                            elem.value = {\n                                raw: this.value,\n                                cooked: null\n                            };\n                        } else elem.value = {\n                            raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, \"\\n\"),\n                            cooked: this.value\n                        };\n                        this.next();\n                        elem.tail = this.type === types.backQuote;\n                        return this.finishNode(elem, \"TemplateElement\");\n                    };\n                    pp$3.parseTemplate = function(ref) {\n                        if (ref === void 0) ref = {};\n                        var isTagged = ref.isTagged;\n                        if (isTagged === void 0) isTagged = false;\n                        var node = this.startNode();\n                        this.next();\n                        node.expressions = [];\n                        var curElt = this.parseTemplateElement({\n                            isTagged: isTagged\n                        });\n                        node.quasis = [\n                            curElt\n                        ];\n                        while(!curElt.tail){\n                            if (this.type === types.eof) this.raise(this.pos, \"Unterminated template literal\");\n                            this.expect(types.dollarBraceL);\n                            node.expressions.push(this.parseExpression());\n                            this.expect(types.braceR);\n                            node.quasis.push(curElt = this.parseTemplateElement({\n                                isTagged: isTagged\n                            }));\n                        }\n                        this.next();\n                        return this.finishNode(node, \"TemplateLiteral\");\n                    };\n                    pp$3.isAsyncProp = function(prop) {\n                        return !prop.computed && prop.key.type === \"Identifier\" && prop.key.name === \"async\" && (this.type === types.name || this.type === types.num || this.type === types.string || this.type === types.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === types.star) && !lineBreak.test(this.input.slice(this.lastTokEnd, this.start));\n                    };\n                    pp$3.parseObj = function(isPattern, refDestructuringErrors) {\n                        var node = this.startNode(), first = true, propHash = {};\n                        node.properties = [];\n                        this.next();\n                        while(!this.eat(types.braceR)){\n                            if (!first) {\n                                this.expect(types.comma);\n                                if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types.braceR)) break;\n                            } else first = false;\n                            var prop = this.parseProperty(isPattern, refDestructuringErrors);\n                            if (!isPattern) this.checkPropClash(prop, propHash, refDestructuringErrors);\n                            node.properties.push(prop);\n                        }\n                        return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\");\n                    };\n                    pp$3.parseProperty = function(isPattern, refDestructuringErrors) {\n                        var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;\n                        if (this.options.ecmaVersion >= 9 && this.eat(types.ellipsis)) {\n                            if (isPattern) {\n                                prop.argument = this.parseIdent(false);\n                                if (this.type === types.comma) this.raise(this.start, \"Comma is not permitted after the rest element\");\n                                return this.finishNode(prop, \"RestElement\");\n                            }\n                            if (this.type === types.parenL && refDestructuringErrors) {\n                                if (refDestructuringErrors.parenthesizedAssign < 0) refDestructuringErrors.parenthesizedAssign = this.start;\n                                if (refDestructuringErrors.parenthesizedBind < 0) refDestructuringErrors.parenthesizedBind = this.start;\n                            }\n                            prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n                            if (this.type === types.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) refDestructuringErrors.trailingComma = this.start;\n                            return this.finishNode(prop, \"SpreadElement\");\n                        }\n                        if (this.options.ecmaVersion >= 6) {\n                            prop.method = false;\n                            prop.shorthand = false;\n                            if (isPattern || refDestructuringErrors) {\n                                startPos = this.start;\n                                startLoc = this.startLoc;\n                            }\n                            if (!isPattern) isGenerator = this.eat(types.star);\n                        }\n                        var containsEsc = this.containsEsc;\n                        this.parsePropertyName(prop);\n                        if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {\n                            isAsync = true;\n                            isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);\n                            this.parsePropertyName(prop, refDestructuringErrors);\n                        } else isAsync = false;\n                        this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);\n                        return this.finishNode(prop, \"Property\");\n                    };\n                    pp$3.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {\n                        if ((isGenerator || isAsync) && this.type === types.colon) this.unexpected();\n                        if (this.eat(types.colon)) {\n                            prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);\n                            prop.kind = \"init\";\n                        } else if (this.options.ecmaVersion >= 6 && this.type === types.parenL) {\n                            if (isPattern) this.unexpected();\n                            prop.kind = \"init\";\n                            prop.method = true;\n                            prop.value = this.parseMethod(isGenerator, isAsync);\n                        } else if (!isPattern && !containsEsc && this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" && (prop.key.name === \"get\" || prop.key.name === \"set\") && this.type !== types.comma && this.type !== types.braceR) {\n                            if (isGenerator || isAsync) this.unexpected();\n                            prop.kind = prop.key.name;\n                            this.parsePropertyName(prop);\n                            prop.value = this.parseMethod(false);\n                            var paramCount = prop.kind === \"get\" ? 0 : 1;\n                            if (prop.value.params.length !== paramCount) {\n                                var start = prop.value.start;\n                                if (prop.kind === \"get\") this.raiseRecoverable(start, \"getter should have no params\");\n                                else this.raiseRecoverable(start, \"setter should have exactly one param\");\n                            } else if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\") this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\");\n                        } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n                            if (isGenerator || isAsync) this.unexpected();\n                            this.checkUnreserved(prop.key);\n                            if (prop.key.name === \"await\" && !this.awaitIdentPos) this.awaitIdentPos = startPos;\n                            prop.kind = \"init\";\n                            if (isPattern) prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n                            else if (this.type === types.eq && refDestructuringErrors) {\n                                if (refDestructuringErrors.shorthandAssign < 0) refDestructuringErrors.shorthandAssign = this.start;\n                                prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n                            } else prop.value = prop.key;\n                            prop.shorthand = true;\n                        } else this.unexpected();\n                    };\n                    pp$3.parsePropertyName = function(prop) {\n                        if (this.options.ecmaVersion >= 6) {\n                            if (this.eat(types.bracketL)) {\n                                prop.computed = true;\n                                prop.key = this.parseMaybeAssign();\n                                this.expect(types.bracketR);\n                                return prop.key;\n                            } else prop.computed = false;\n                        }\n                        return prop.key = this.type === types.num || this.type === types.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== \"never\");\n                    };\n                    pp$3.initFunction = function(node) {\n                        node.id = null;\n                        if (this.options.ecmaVersion >= 6) node.generator = node.expression = false;\n                        if (this.options.ecmaVersion >= 8) node.async = false;\n                    };\n                    pp$3.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {\n                        var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n                        this.initFunction(node);\n                        if (this.options.ecmaVersion >= 6) node.generator = isGenerator;\n                        if (this.options.ecmaVersion >= 8) node.async = !!isAsync;\n                        this.yieldPos = 0;\n                        this.awaitPos = 0;\n                        this.awaitIdentPos = 0;\n                        this.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n                        this.expect(types.parenL);\n                        node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);\n                        this.checkYieldAwaitInDefaultParams();\n                        this.parseFunctionBody(node, false, true);\n                        this.yieldPos = oldYieldPos;\n                        this.awaitPos = oldAwaitPos;\n                        this.awaitIdentPos = oldAwaitIdentPos;\n                        return this.finishNode(node, \"FunctionExpression\");\n                    };\n                    pp$3.parseArrowExpression = function(node, params, isAsync) {\n                        var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n                        this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);\n                        this.initFunction(node);\n                        if (this.options.ecmaVersion >= 8) node.async = !!isAsync;\n                        this.yieldPos = 0;\n                        this.awaitPos = 0;\n                        this.awaitIdentPos = 0;\n                        node.params = this.toAssignableList(params, true);\n                        this.parseFunctionBody(node, true, false);\n                        this.yieldPos = oldYieldPos;\n                        this.awaitPos = oldAwaitPos;\n                        this.awaitIdentPos = oldAwaitIdentPos;\n                        return this.finishNode(node, \"ArrowFunctionExpression\");\n                    };\n                    pp$3.parseFunctionBody = function(node, isArrowFunction, isMethod) {\n                        var isExpression = isArrowFunction && this.type !== types.braceL;\n                        var oldStrict = this.strict, useStrict = false;\n                        if (isExpression) {\n                            node.body = this.parseMaybeAssign();\n                            node.expression = true;\n                            this.checkParams(node, false);\n                        } else {\n                            var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);\n                            if (!oldStrict || nonSimple) {\n                                useStrict = this.strictDirective(this.end);\n                                if (useStrict && nonSimple) this.raiseRecoverable(node.start, \"Illegal 'use strict' directive in function with non-simple parameter list\");\n                            }\n                            var oldLabels = this.labels;\n                            this.labels = [];\n                            if (useStrict) this.strict = true;\n                            this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));\n                            node.body = this.parseBlock(false);\n                            node.expression = false;\n                            this.adaptDirectivePrologue(node.body.body);\n                            this.labels = oldLabels;\n                        }\n                        this.exitScope();\n                        if (this.strict && node.id) this.checkLVal(node.id, BIND_OUTSIDE);\n                        this.strict = oldStrict;\n                    };\n                    pp$3.isSimpleParamList = function(params) {\n                        for(var i = 0, list = params; i < list.length; i += 1){\n                            var param = list[i];\n                            if (param.type !== \"Identifier\") return false;\n                        }\n                        return true;\n                    };\n                    pp$3.checkParams = function(node, allowDuplicates) {\n                        var nameHash = {};\n                        for(var i = 0, list = node.params; i < list.length; i += 1){\n                            var param = list[i];\n                            this.checkLVal(param, BIND_VAR, allowDuplicates ? null : nameHash);\n                        }\n                    };\n                    pp$3.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n                        var elts = [], first = true;\n                        while(!this.eat(close)){\n                            if (!first) {\n                                this.expect(types.comma);\n                                if (allowTrailingComma && this.afterTrailingComma(close)) break;\n                            } else first = false;\n                            var elt = void 0;\n                            if (allowEmpty && this.type === types.comma) elt = null;\n                            else if (this.type === types.ellipsis) {\n                                elt = this.parseSpread(refDestructuringErrors);\n                                if (refDestructuringErrors && this.type === types.comma && refDestructuringErrors.trailingComma < 0) refDestructuringErrors.trailingComma = this.start;\n                            } else elt = this.parseMaybeAssign(false, refDestructuringErrors);\n                            elts.push(elt);\n                        }\n                        return elts;\n                    };\n                    pp$3.checkUnreserved = function(ref) {\n                        var start = ref.start;\n                        var end = ref.end;\n                        var name1 = ref.name;\n                        if (this.inGenerator && name1 === \"yield\") this.raiseRecoverable(start, \"Cannot use 'yield' as identifier inside a generator\");\n                        if (this.inAsync && name1 === \"await\") this.raiseRecoverable(start, \"Cannot use 'await' as identifier inside an async function\");\n                        if (this.keywords.test(name1)) this.raise(start, \"Unexpected keyword '\" + name1 + \"'\");\n                        if (this.options.ecmaVersion < 6 && this.input.slice(start, end).indexOf(\"\\\\\") !== -1) return;\n                        var re = this.strict ? this.reservedWordsStrict : this.reservedWords;\n                        if (re.test(name1)) {\n                            if (!this.inAsync && name1 === \"await\") this.raiseRecoverable(start, \"Cannot use keyword 'await' outside an async function\");\n                            this.raiseRecoverable(start, \"The keyword '\" + name1 + \"' is reserved\");\n                        }\n                    };\n                    pp$3.parseIdent = function(liberal, isBinding) {\n                        var node = this.startNode();\n                        if (this.type === types.name) node.name = this.value;\n                        else if (this.type.keyword) {\n                            node.name = this.type.keyword;\n                            if ((node.name === \"class\" || node.name === \"function\") && (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) this.context.pop();\n                        } else this.unexpected();\n                        this.next(!!liberal);\n                        this.finishNode(node, \"Identifier\");\n                        if (!liberal) {\n                            this.checkUnreserved(node);\n                            if (node.name === \"await\" && !this.awaitIdentPos) this.awaitIdentPos = node.start;\n                        }\n                        return node;\n                    };\n                    pp$3.parseYield = function(noIn) {\n                        if (!this.yieldPos) this.yieldPos = this.start;\n                        var node = this.startNode();\n                        this.next();\n                        if (this.type === types.semi || this.canInsertSemicolon() || this.type !== types.star && !this.type.startsExpr) {\n                            node.delegate = false;\n                            node.argument = null;\n                        } else {\n                            node.delegate = this.eat(types.star);\n                            node.argument = this.parseMaybeAssign(noIn);\n                        }\n                        return this.finishNode(node, \"YieldExpression\");\n                    };\n                    pp$3.parseAwait = function() {\n                        if (!this.awaitPos) this.awaitPos = this.start;\n                        var node = this.startNode();\n                        this.next();\n                        node.argument = this.parseMaybeUnary(null, false);\n                        return this.finishNode(node, \"AwaitExpression\");\n                    };\n                    var pp$4 = Parser.prototype;\n                    pp$4.raise = function(pos, message) {\n                        var loc = getLineInfo(this.input, pos);\n                        message += \" (\" + loc.line + \":\" + loc.column + \")\";\n                        var err = new SyntaxError(message);\n                        err.pos = pos;\n                        err.loc = loc;\n                        err.raisedAt = this.pos;\n                        throw err;\n                    };\n                    pp$4.raiseRecoverable = pp$4.raise;\n                    pp$4.curPosition = function() {\n                        if (this.options.locations) return new Position(this.curLine, this.pos - this.lineStart);\n                    };\n                    var pp$5 = Parser.prototype;\n                    var Scope = function Scope(flags) {\n                        this.flags = flags;\n                        this.var = [];\n                        this.lexical = [];\n                        this.functions = [];\n                    };\n                    pp$5.enterScope = function(flags) {\n                        this.scopeStack.push(new Scope(flags));\n                    };\n                    pp$5.exitScope = function() {\n                        this.scopeStack.pop();\n                    };\n                    pp$5.treatFunctionsAsVarInScope = function(scope) {\n                        return scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_TOP;\n                    };\n                    pp$5.declareName = function(name1, bindingType, pos) {\n                        var redeclared = false;\n                        if (bindingType === BIND_LEXICAL) {\n                            var scope = this.currentScope();\n                            redeclared = scope.lexical.indexOf(name1) > -1 || scope.functions.indexOf(name1) > -1 || scope.var.indexOf(name1) > -1;\n                            scope.lexical.push(name1);\n                            if (this.inModule && scope.flags & SCOPE_TOP) delete this.undefinedExports[name1];\n                        } else if (bindingType === BIND_SIMPLE_CATCH) {\n                            var scope$1 = this.currentScope();\n                            scope$1.lexical.push(name1);\n                        } else if (bindingType === BIND_FUNCTION) {\n                            var scope$2 = this.currentScope();\n                            if (this.treatFunctionsAsVar) redeclared = scope$2.lexical.indexOf(name1) > -1;\n                            else redeclared = scope$2.lexical.indexOf(name1) > -1 || scope$2.var.indexOf(name1) > -1;\n                            scope$2.functions.push(name1);\n                        } else for(var i = this.scopeStack.length - 1; i >= 0; --i){\n                            var scope$3 = this.scopeStack[i];\n                            if (scope$3.lexical.indexOf(name1) > -1 && !(scope$3.flags & SCOPE_SIMPLE_CATCH && scope$3.lexical[0] === name1) || !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name1) > -1) {\n                                redeclared = true;\n                                break;\n                            }\n                            scope$3.var.push(name1);\n                            if (this.inModule && scope$3.flags & SCOPE_TOP) delete this.undefinedExports[name1];\n                            if (scope$3.flags & SCOPE_VAR) break;\n                        }\n                        if (redeclared) this.raiseRecoverable(pos, \"Identifier '\" + name1 + \"' has already been declared\");\n                    };\n                    pp$5.checkLocalExport = function(id) {\n                        if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1) this.undefinedExports[id.name] = id;\n                    };\n                    pp$5.currentScope = function() {\n                        return this.scopeStack[this.scopeStack.length - 1];\n                    };\n                    pp$5.currentVarScope = function() {\n                        for(var i = this.scopeStack.length - 1;; i--){\n                            var scope = this.scopeStack[i];\n                            if (scope.flags & SCOPE_VAR) return scope;\n                        }\n                    };\n                    pp$5.currentThisScope = function() {\n                        for(var i = this.scopeStack.length - 1;; i--){\n                            var scope = this.scopeStack[i];\n                            if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) return scope;\n                        }\n                    };\n                    var Node = function Node(parser, pos, loc) {\n                        this.type = \"\";\n                        this.start = pos;\n                        this.end = 0;\n                        if (parser.options.locations) this.loc = new SourceLocation(parser, loc);\n                        if (parser.options.directSourceFile) this.sourceFile = parser.options.directSourceFile;\n                        if (parser.options.ranges) this.range = [\n                            pos,\n                            0\n                        ];\n                    };\n                    var pp$6 = Parser.prototype;\n                    pp$6.startNode = function() {\n                        return new Node(this, this.start, this.startLoc);\n                    };\n                    pp$6.startNodeAt = function(pos, loc) {\n                        return new Node(this, pos, loc);\n                    };\n                    function finishNodeAt(node, type, pos, loc) {\n                        node.type = type;\n                        node.end = pos;\n                        if (this.options.locations) node.loc.end = loc;\n                        if (this.options.ranges) node.range[1] = pos;\n                        return node;\n                    }\n                    pp$6.finishNode = function(node, type) {\n                        return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);\n                    };\n                    pp$6.finishNodeAt = function(node, type, pos, loc) {\n                        return finishNodeAt.call(this, node, type, pos, loc);\n                    };\n                    var TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {\n                        this.token = token;\n                        this.isExpr = !!isExpr;\n                        this.preserveSpace = !!preserveSpace;\n                        this.override = override;\n                        this.generator = !!generator;\n                    };\n                    var types$1 = {\n                        b_stat: new TokContext(\"{\", false),\n                        b_expr: new TokContext(\"{\", true),\n                        b_tmpl: new TokContext(\"${\", false),\n                        p_stat: new TokContext(\"(\", false),\n                        p_expr: new TokContext(\"(\", true),\n                        q_tmpl: new TokContext(\"`\", true, true, function(p) {\n                            return p.tryReadTemplateToken();\n                        }),\n                        f_stat: new TokContext(\"function\", false),\n                        f_expr: new TokContext(\"function\", true),\n                        f_expr_gen: new TokContext(\"function\", true, false, null, true),\n                        f_gen: new TokContext(\"function\", false, false, null, true)\n                    };\n                    var pp$7 = Parser.prototype;\n                    pp$7.initialContext = function() {\n                        return [\n                            types$1.b_stat\n                        ];\n                    };\n                    pp$7.braceIsBlock = function(prevType) {\n                        var parent = this.curContext();\n                        if (parent === types$1.f_expr || parent === types$1.f_stat) return true;\n                        if (prevType === types.colon && (parent === types$1.b_stat || parent === types$1.b_expr)) return !parent.isExpr;\n                        if (prevType === types._return || prevType === types.name && this.exprAllowed) return lineBreak.test(this.input.slice(this.lastTokEnd, this.start));\n                        if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow) return true;\n                        if (prevType === types.braceL) return parent === types$1.b_stat;\n                        if (prevType === types._var || prevType === types._const || prevType === types.name) return false;\n                        return !this.exprAllowed;\n                    };\n                    pp$7.inGeneratorContext = function() {\n                        for(var i = this.context.length - 1; i >= 1; i--){\n                            var context = this.context[i];\n                            if (context.token === \"function\") return context.generator;\n                        }\n                        return false;\n                    };\n                    pp$7.updateContext = function(prevType) {\n                        var update, type = this.type;\n                        if (type.keyword && prevType === types.dot) this.exprAllowed = false;\n                        else if (update = type.updateContext) update.call(this, prevType);\n                        else this.exprAllowed = type.beforeExpr;\n                    };\n                    types.parenR.updateContext = types.braceR.updateContext = function() {\n                        if (this.context.length === 1) {\n                            this.exprAllowed = true;\n                            return;\n                        }\n                        var out = this.context.pop();\n                        if (out === types$1.b_stat && this.curContext().token === \"function\") out = this.context.pop();\n                        this.exprAllowed = !out.isExpr;\n                    };\n                    types.braceL.updateContext = function(prevType) {\n                        this.context.push(this.braceIsBlock(prevType) ? types$1.b_stat : types$1.b_expr);\n                        this.exprAllowed = true;\n                    };\n                    types.dollarBraceL.updateContext = function() {\n                        this.context.push(types$1.b_tmpl);\n                        this.exprAllowed = true;\n                    };\n                    types.parenL.updateContext = function(prevType) {\n                        var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n                        this.context.push(statementParens ? types$1.p_stat : types$1.p_expr);\n                        this.exprAllowed = true;\n                    };\n                    types.incDec.updateContext = function() {};\n                    types._function.updateContext = types._class.updateContext = function(prevType) {\n                        if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else && !(prevType === types._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) && !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat)) this.context.push(types$1.f_expr);\n                        else this.context.push(types$1.f_stat);\n                        this.exprAllowed = false;\n                    };\n                    types.backQuote.updateContext = function() {\n                        if (this.curContext() === types$1.q_tmpl) this.context.pop();\n                        else this.context.push(types$1.q_tmpl);\n                        this.exprAllowed = false;\n                    };\n                    types.star.updateContext = function(prevType) {\n                        if (prevType === types._function) {\n                            var index = this.context.length - 1;\n                            if (this.context[index] === types$1.f_expr) this.context[index] = types$1.f_expr_gen;\n                            else this.context[index] = types$1.f_gen;\n                        }\n                        this.exprAllowed = true;\n                    };\n                    types.name.updateContext = function(prevType) {\n                        var allowed = false;\n                        if (this.options.ecmaVersion >= 6 && prevType !== types.dot) {\n                            if (this.value === \"of\" && !this.exprAllowed || this.value === \"yield\" && this.inGeneratorContext()) allowed = true;\n                        }\n                        this.exprAllowed = allowed;\n                    };\n                    var ecma9BinaryProperties = \"ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS\";\n                    var ecma10BinaryProperties = ecma9BinaryProperties + \" Extended_Pictographic\";\n                    var ecma11BinaryProperties = ecma10BinaryProperties;\n                    var unicodeBinaryProperties = {\n                        9: ecma9BinaryProperties,\n                        10: ecma10BinaryProperties,\n                        11: ecma11BinaryProperties\n                    };\n                    var unicodeGeneralCategoryValues = \"Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu\";\n                    var ecma9ScriptValues = \"Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb\";\n                    var ecma10ScriptValues = ecma9ScriptValues + \" Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd\";\n                    var ecma11ScriptValues = ecma10ScriptValues + \" Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho\";\n                    var unicodeScriptValues = {\n                        9: ecma9ScriptValues,\n                        10: ecma10ScriptValues,\n                        11: ecma11ScriptValues\n                    };\n                    var data = {};\n                    function buildUnicodeData(ecmaVersion) {\n                        var d = data[ecmaVersion] = {\n                            binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + \" \" + unicodeGeneralCategoryValues),\n                            nonBinary: {\n                                General_Category: wordsRegexp(unicodeGeneralCategoryValues),\n                                Script: wordsRegexp(unicodeScriptValues[ecmaVersion])\n                            }\n                        };\n                        d.nonBinary.Script_Extensions = d.nonBinary.Script;\n                        d.nonBinary.gc = d.nonBinary.General_Category;\n                        d.nonBinary.sc = d.nonBinary.Script;\n                        d.nonBinary.scx = d.nonBinary.Script_Extensions;\n                    }\n                    buildUnicodeData(9);\n                    buildUnicodeData(10);\n                    buildUnicodeData(11);\n                    var pp$8 = Parser.prototype;\n                    var RegExpValidationState = function RegExpValidationState(parser) {\n                        this.parser = parser;\n                        this.validFlags = \"gim\" + (parser.options.ecmaVersion >= 6 ? \"uy\" : \"\") + (parser.options.ecmaVersion >= 9 ? \"s\" : \"\");\n                        this.unicodeProperties = data[parser.options.ecmaVersion >= 11 ? 11 : parser.options.ecmaVersion];\n                        this.source = \"\";\n                        this.flags = \"\";\n                        this.start = 0;\n                        this.switchU = false;\n                        this.switchN = false;\n                        this.pos = 0;\n                        this.lastIntValue = 0;\n                        this.lastStringValue = \"\";\n                        this.lastAssertionIsQuantifiable = false;\n                        this.numCapturingParens = 0;\n                        this.maxBackReference = 0;\n                        this.groupNames = [];\n                        this.backReferenceNames = [];\n                    };\n                    RegExpValidationState.prototype.reset = function reset(start, pattern, flags) {\n                        var unicode = flags.indexOf(\"u\") !== -1;\n                        this.start = start | 0;\n                        this.source = pattern + \"\";\n                        this.flags = flags;\n                        this.switchU = unicode && this.parser.options.ecmaVersion >= 6;\n                        this.switchN = unicode && this.parser.options.ecmaVersion >= 9;\n                    };\n                    RegExpValidationState.prototype.raise = function raise(message) {\n                        this.parser.raiseRecoverable(this.start, \"Invalid regular expression: /\" + this.source + \"/: \" + message);\n                    };\n                    RegExpValidationState.prototype.at = function at(i) {\n                        var s = this.source;\n                        var l = s.length;\n                        if (i >= l) return -1;\n                        var c = s.charCodeAt(i);\n                        if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) return c;\n                        var next = s.charCodeAt(i + 1);\n                        return next >= 0xDC00 && next <= 0xDFFF ? (c << 10) + next - 0x35FDC00 : c;\n                    };\n                    RegExpValidationState.prototype.nextIndex = function nextIndex(i) {\n                        var s = this.source;\n                        var l = s.length;\n                        if (i >= l) return l;\n                        var c = s.charCodeAt(i), next;\n                        if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l || (next = s.charCodeAt(i + 1)) < 0xDC00 || next > 0xDFFF) return i + 1;\n                        return i + 2;\n                    };\n                    RegExpValidationState.prototype.current = function current() {\n                        return this.at(this.pos);\n                    };\n                    RegExpValidationState.prototype.lookahead = function lookahead() {\n                        return this.at(this.nextIndex(this.pos));\n                    };\n                    RegExpValidationState.prototype.advance = function advance() {\n                        this.pos = this.nextIndex(this.pos);\n                    };\n                    RegExpValidationState.prototype.eat = function eat(ch) {\n                        if (this.current() === ch) {\n                            this.advance();\n                            return true;\n                        }\n                        return false;\n                    };\n                    function codePointToString(ch) {\n                        if (ch <= 0xFFFF) return String.fromCharCode(ch);\n                        ch -= 0x10000;\n                        return String.fromCharCode((ch >> 10) + 0xD800, (ch & 0x03FF) + 0xDC00);\n                    }\n                    pp$8.validateRegExpFlags = function(state) {\n                        var validFlags = state.validFlags;\n                        var flags = state.flags;\n                        for(var i = 0; i < flags.length; i++){\n                            var flag = flags.charAt(i);\n                            if (validFlags.indexOf(flag) === -1) this.raise(state.start, \"Invalid regular expression flag\");\n                            if (flags.indexOf(flag, i + 1) > -1) this.raise(state.start, \"Duplicate regular expression flag\");\n                        }\n                    };\n                    pp$8.validateRegExpPattern = function(state) {\n                        this.regexp_pattern(state);\n                        if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {\n                            state.switchN = true;\n                            this.regexp_pattern(state);\n                        }\n                    };\n                    pp$8.regexp_pattern = function(state) {\n                        state.pos = 0;\n                        state.lastIntValue = 0;\n                        state.lastStringValue = \"\";\n                        state.lastAssertionIsQuantifiable = false;\n                        state.numCapturingParens = 0;\n                        state.maxBackReference = 0;\n                        state.groupNames.length = 0;\n                        state.backReferenceNames.length = 0;\n                        this.regexp_disjunction(state);\n                        if (state.pos !== state.source.length) {\n                            if (state.eat(0x29)) state.raise(\"Unmatched ')'\");\n                            if (state.eat(0x5D) || state.eat(0x7D)) state.raise(\"Lone quantifier brackets\");\n                        }\n                        if (state.maxBackReference > state.numCapturingParens) state.raise(\"Invalid escape\");\n                        for(var i = 0, list = state.backReferenceNames; i < list.length; i += 1){\n                            var name1 = list[i];\n                            if (state.groupNames.indexOf(name1) === -1) state.raise(\"Invalid named capture referenced\");\n                        }\n                    };\n                    pp$8.regexp_disjunction = function(state) {\n                        this.regexp_alternative(state);\n                        while(state.eat(0x7C))this.regexp_alternative(state);\n                        if (this.regexp_eatQuantifier(state, true)) state.raise(\"Nothing to repeat\");\n                        if (state.eat(0x7B)) state.raise(\"Lone quantifier brackets\");\n                    };\n                    pp$8.regexp_alternative = function(state) {\n                        while(state.pos < state.source.length && this.regexp_eatTerm(state));\n                    };\n                    pp$8.regexp_eatTerm = function(state) {\n                        if (this.regexp_eatAssertion(state)) {\n                            if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {\n                                if (state.switchU) state.raise(\"Invalid quantifier\");\n                            }\n                            return true;\n                        }\n                        if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {\n                            this.regexp_eatQuantifier(state);\n                            return true;\n                        }\n                        return false;\n                    };\n                    pp$8.regexp_eatAssertion = function(state) {\n                        var start = state.pos;\n                        state.lastAssertionIsQuantifiable = false;\n                        if (state.eat(0x5E) || state.eat(0x24)) return true;\n                        if (state.eat(0x5C)) {\n                            if (state.eat(0x42) || state.eat(0x62)) return true;\n                            state.pos = start;\n                        }\n                        if (state.eat(0x28) && state.eat(0x3F)) {\n                            var lookbehind = false;\n                            if (this.options.ecmaVersion >= 9) lookbehind = state.eat(0x3C);\n                            if (state.eat(0x3D) || state.eat(0x21)) {\n                                this.regexp_disjunction(state);\n                                if (!state.eat(0x29)) state.raise(\"Unterminated group\");\n                                state.lastAssertionIsQuantifiable = !lookbehind;\n                                return true;\n                            }\n                        }\n                        state.pos = start;\n                        return false;\n                    };\n                    pp$8.regexp_eatQuantifier = function(state, noError) {\n                        if (noError === void 0) noError = false;\n                        if (this.regexp_eatQuantifierPrefix(state, noError)) {\n                            state.eat(0x3F);\n                            return true;\n                        }\n                        return false;\n                    };\n                    pp$8.regexp_eatQuantifierPrefix = function(state, noError) {\n                        return state.eat(0x2A) || state.eat(0x2B) || state.eat(0x3F) || this.regexp_eatBracedQuantifier(state, noError);\n                    };\n                    pp$8.regexp_eatBracedQuantifier = function(state, noError) {\n                        var start = state.pos;\n                        if (state.eat(0x7B)) {\n                            var min = 0, max = -1;\n                            if (this.regexp_eatDecimalDigits(state)) {\n                                min = state.lastIntValue;\n                                if (state.eat(0x2C) && this.regexp_eatDecimalDigits(state)) max = state.lastIntValue;\n                                if (state.eat(0x7D)) {\n                                    if (max !== -1 && max < min && !noError) state.raise(\"numbers out of order in {} quantifier\");\n                                    return true;\n                                }\n                            }\n                            if (state.switchU && !noError) state.raise(\"Incomplete quantifier\");\n                            state.pos = start;\n                        }\n                        return false;\n                    };\n                    pp$8.regexp_eatAtom = function(state) {\n                        return this.regexp_eatPatternCharacters(state) || state.eat(0x2E) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state);\n                    };\n                    pp$8.regexp_eatReverseSolidusAtomEscape = function(state) {\n                        var start = state.pos;\n                        if (state.eat(0x5C)) {\n                            if (this.regexp_eatAtomEscape(state)) return true;\n                            state.pos = start;\n                        }\n                        return false;\n                    };\n                    pp$8.regexp_eatUncapturingGroup = function(state) {\n                        var start = state.pos;\n                        if (state.eat(0x28)) {\n                            if (state.eat(0x3F) && state.eat(0x3A)) {\n                                this.regexp_disjunction(state);\n                                if (state.eat(0x29)) return true;\n                                state.raise(\"Unterminated group\");\n                            }\n                            state.pos = start;\n                        }\n                        return false;\n                    };\n                    pp$8.regexp_eatCapturingGroup = function(state) {\n                        if (state.eat(0x28)) {\n                            if (this.options.ecmaVersion >= 9) this.regexp_groupSpecifier(state);\n                            else if (state.current() === 0x3F) state.raise(\"Invalid group\");\n                            this.regexp_disjunction(state);\n                            if (state.eat(0x29)) {\n                                state.numCapturingParens += 1;\n                                return true;\n                            }\n                            state.raise(\"Unterminated group\");\n                        }\n                        return false;\n                    };\n                    pp$8.regexp_eatExtendedAtom = function(state) {\n                        return state.eat(0x2E) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state) || this.regexp_eatInvalidBracedQuantifier(state) || this.regexp_eatExtendedPatternCharacter(state);\n                    };\n                    pp$8.regexp_eatInvalidBracedQuantifier = function(state) {\n                        if (this.regexp_eatBracedQuantifier(state, true)) state.raise(\"Nothing to repeat\");\n                        return false;\n                    };\n                    pp$8.regexp_eatSyntaxCharacter = function(state) {\n                        var ch = state.current();\n                        if (isSyntaxCharacter(ch)) {\n                            state.lastIntValue = ch;\n                            state.advance();\n                            return true;\n                        }\n                        return false;\n                    };\n                    function isSyntaxCharacter(ch) {\n                        return ch === 0x24 || ch >= 0x28 && ch <= 0x2B || ch === 0x2E || ch === 0x3F || ch >= 0x5B && ch <= 0x5E || ch >= 0x7B && ch <= 0x7D;\n                    }\n                    pp$8.regexp_eatPatternCharacters = function(state) {\n                        var start = state.pos;\n                        var ch = 0;\n                        while((ch = state.current()) !== -1 && !isSyntaxCharacter(ch))state.advance();\n                        return state.pos !== start;\n                    };\n                    pp$8.regexp_eatExtendedPatternCharacter = function(state) {\n                        var ch = state.current();\n                        if (ch !== -1 && ch !== 0x24 && !(ch >= 0x28 && ch <= 0x2B) && ch !== 0x2E && ch !== 0x3F && ch !== 0x5B && ch !== 0x5E && ch !== 0x7C) {\n                            state.advance();\n                            return true;\n                        }\n                        return false;\n                    };\n                    pp$8.regexp_groupSpecifier = function(state) {\n                        if (state.eat(0x3F)) {\n                            if (this.regexp_eatGroupName(state)) {\n                                if (state.groupNames.indexOf(state.lastStringValue) !== -1) state.raise(\"Duplicate capture group name\");\n                                state.groupNames.push(state.lastStringValue);\n                                return;\n                            }\n                            state.raise(\"Invalid group\");\n                        }\n                    };\n                    pp$8.regexp_eatGroupName = function(state) {\n                        state.lastStringValue = \"\";\n                        if (state.eat(0x3C)) {\n                            if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E)) return true;\n                            state.raise(\"Invalid capture group name\");\n                        }\n                        return false;\n                    };\n                    pp$8.regexp_eatRegExpIdentifierName = function(state) {\n                        state.lastStringValue = \"\";\n                        if (this.regexp_eatRegExpIdentifierStart(state)) {\n                            state.lastStringValue += codePointToString(state.lastIntValue);\n                            while(this.regexp_eatRegExpIdentifierPart(state))state.lastStringValue += codePointToString(state.lastIntValue);\n                            return true;\n                        }\n                        return false;\n                    };\n                    pp$8.regexp_eatRegExpIdentifierStart = function(state) {\n                        var start = state.pos;\n                        var ch = state.current();\n                        state.advance();\n                        if (ch === 0x5C && this.regexp_eatRegExpUnicodeEscapeSequence(state)) ch = state.lastIntValue;\n                        if (isRegExpIdentifierStart(ch)) {\n                            state.lastIntValue = ch;\n                            return true;\n                        }\n                        state.pos = start;\n                        return false;\n                    };\n                    function isRegExpIdentifierStart(ch) {\n                        return isIdentifierStart(ch, true) || ch === 0x24 || ch === 0x5F;\n                    }\n                    pp$8.regexp_eatRegExpIdentifierPart = function(state) {\n                        var start = state.pos;\n                        var ch = state.current();\n                        state.advance();\n                        if (ch === 0x5C && this.regexp_eatRegExpUnicodeEscapeSequence(state)) ch = state.lastIntValue;\n                        if (isRegExpIdentifierPart(ch)) {\n                            state.lastIntValue = ch;\n                            return true;\n                        }\n                        state.pos = start;\n                        return false;\n                    };\n                    function isRegExpIdentifierPart(ch) {\n                        return isIdentifierChar(ch, true) || ch === 0x24 || ch === 0x5F || ch === 0x200C || ch === 0x200D;\n                    }\n                    pp$8.regexp_eatAtomEscape = function(state) {\n                        if (this.regexp_eatBackReference(state) || this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state) || state.switchN && this.regexp_eatKGroupName(state)) return true;\n                        if (state.switchU) {\n                            if (state.current() === 0x63) state.raise(\"Invalid unicode escape\");\n                            state.raise(\"Invalid escape\");\n                        }\n                        return false;\n                    };\n                    pp$8.regexp_eatBackReference = function(state) {\n                        var start = state.pos;\n                        if (this.regexp_eatDecimalEscape(state)) {\n                            var n = state.lastIntValue;\n                            if (state.switchU) {\n                                if (n > state.maxBackReference) state.maxBackReference = n;\n                                return true;\n                            }\n                            if (n <= state.numCapturingParens) return true;\n                            state.pos = start;\n                        }\n                        return false;\n                    };\n                    pp$8.regexp_eatKGroupName = function(state) {\n                        if (state.eat(0x6B)) {\n                            if (this.regexp_eatGroupName(state)) {\n                                state.backReferenceNames.push(state.lastStringValue);\n                                return true;\n                            }\n                            state.raise(\"Invalid named reference\");\n                        }\n                        return false;\n                    };\n                    pp$8.regexp_eatCharacterEscape = function(state) {\n                        return this.regexp_eatControlEscape(state) || this.regexp_eatCControlLetter(state) || this.regexp_eatZero(state) || this.regexp_eatHexEscapeSequence(state) || this.regexp_eatRegExpUnicodeEscapeSequence(state) || !state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state) || this.regexp_eatIdentityEscape(state);\n                    };\n                    pp$8.regexp_eatCControlLetter = function(state) {\n                        var start = state.pos;\n                        if (state.eat(0x63)) {\n                            if (this.regexp_eatControlLetter(state)) return true;\n                            state.pos = start;\n                        }\n                        return false;\n                    };\n                    pp$8.regexp_eatZero = function(state) {\n                        if (state.current() === 0x30 && !isDecimalDigit(state.lookahead())) {\n                            state.lastIntValue = 0;\n                            state.advance();\n                            return true;\n                        }\n                        return false;\n                    };\n                    pp$8.regexp_eatControlEscape = function(state) {\n                        var ch = state.current();\n                        if (ch === 0x74) {\n                            state.lastIntValue = 0x09;\n                            state.advance();\n                            return true;\n                        }\n                        if (ch === 0x6E) {\n                            state.lastIntValue = 0x0A;\n                            state.advance();\n                            return true;\n                        }\n                        if (ch === 0x76) {\n                            state.lastIntValue = 0x0B;\n                            state.advance();\n                            return true;\n                        }\n                        if (ch === 0x66) {\n                            state.lastIntValue = 0x0C;\n                            state.advance();\n                            return true;\n                        }\n                        if (ch === 0x72) {\n                            state.lastIntValue = 0x0D;\n                            state.advance();\n                            return true;\n                        }\n                        return false;\n                    };\n                    pp$8.regexp_eatControlLetter = function(state) {\n                        var ch = state.current();\n                        if (isControlLetter(ch)) {\n                            state.lastIntValue = ch % 0x20;\n                            state.advance();\n                            return true;\n                        }\n                        return false;\n                    };\n                    function isControlLetter(ch) {\n                        return ch >= 0x41 && ch <= 0x5A || ch >= 0x61 && ch <= 0x7A;\n                    }\n                    pp$8.regexp_eatRegExpUnicodeEscapeSequence = function(state) {\n                        var start = state.pos;\n                        if (state.eat(0x75)) {\n                            if (this.regexp_eatFixedHexDigits(state, 4)) {\n                                var lead = state.lastIntValue;\n                                if (state.switchU && lead >= 0xD800 && lead <= 0xDBFF) {\n                                    var leadSurrogateEnd = state.pos;\n                                    if (state.eat(0x5C) && state.eat(0x75) && this.regexp_eatFixedHexDigits(state, 4)) {\n                                        var trail = state.lastIntValue;\n                                        if (trail >= 0xDC00 && trail <= 0xDFFF) {\n                                            state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;\n                                            return true;\n                                        }\n                                    }\n                                    state.pos = leadSurrogateEnd;\n                                    state.lastIntValue = lead;\n                                }\n                                return true;\n                            }\n                            if (state.switchU && state.eat(0x7B) && this.regexp_eatHexDigits(state) && state.eat(0x7D) && isValidUnicode(state.lastIntValue)) return true;\n                            if (state.switchU) state.raise(\"Invalid unicode escape\");\n                            state.pos = start;\n                        }\n                        return false;\n                    };\n                    function isValidUnicode(ch) {\n                        return ch >= 0 && ch <= 0x10FFFF;\n                    }\n                    pp$8.regexp_eatIdentityEscape = function(state) {\n                        if (state.switchU) {\n                            if (this.regexp_eatSyntaxCharacter(state)) return true;\n                            if (state.eat(0x2F)) {\n                                state.lastIntValue = 0x2F;\n                                return true;\n                            }\n                            return false;\n                        }\n                        var ch = state.current();\n                        if (ch !== 0x63 && (!state.switchN || ch !== 0x6B)) {\n                            state.lastIntValue = ch;\n                            state.advance();\n                            return true;\n                        }\n                        return false;\n                    };\n                    pp$8.regexp_eatDecimalEscape = function(state) {\n                        state.lastIntValue = 0;\n                        var ch = state.current();\n                        if (ch >= 0x31 && ch <= 0x39) {\n                            do {\n                                state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30);\n                                state.advance();\n                            }while ((ch = state.current()) >= 0x30 && ch <= 0x39);\n                            return true;\n                        }\n                        return false;\n                    };\n                    pp$8.regexp_eatCharacterClassEscape = function(state) {\n                        var ch = state.current();\n                        if (isCharacterClassEscape(ch)) {\n                            state.lastIntValue = -1;\n                            state.advance();\n                            return true;\n                        }\n                        if (state.switchU && this.options.ecmaVersion >= 9 && (ch === 0x50 || ch === 0x70)) {\n                            state.lastIntValue = -1;\n                            state.advance();\n                            if (state.eat(0x7B) && this.regexp_eatUnicodePropertyValueExpression(state) && state.eat(0x7D)) return true;\n                            state.raise(\"Invalid property name\");\n                        }\n                        return false;\n                    };\n                    function isCharacterClassEscape(ch) {\n                        return ch === 0x64 || ch === 0x44 || ch === 0x73 || ch === 0x53 || ch === 0x77 || ch === 0x57;\n                    }\n                    pp$8.regexp_eatUnicodePropertyValueExpression = function(state) {\n                        var start = state.pos;\n                        if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D)) {\n                            var name1 = state.lastStringValue;\n                            if (this.regexp_eatUnicodePropertyValue(state)) {\n                                var value1 = state.lastStringValue;\n                                this.regexp_validateUnicodePropertyNameAndValue(state, name1, value1);\n                                return true;\n                            }\n                        }\n                        state.pos = start;\n                        if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {\n                            var nameOrValue = state.lastStringValue;\n                            this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);\n                            return true;\n                        }\n                        return false;\n                    };\n                    pp$8.regexp_validateUnicodePropertyNameAndValue = function(state, name1, value1) {\n                        if (!has(state.unicodeProperties.nonBinary, name1)) state.raise(\"Invalid property name\");\n                        if (!state.unicodeProperties.nonBinary[name1].test(value1)) state.raise(\"Invalid property value\");\n                    };\n                    pp$8.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {\n                        if (!state.unicodeProperties.binary.test(nameOrValue)) state.raise(\"Invalid property name\");\n                    };\n                    pp$8.regexp_eatUnicodePropertyName = function(state) {\n                        var ch = 0;\n                        state.lastStringValue = \"\";\n                        while(isUnicodePropertyNameCharacter(ch = state.current())){\n                            state.lastStringValue += codePointToString(ch);\n                            state.advance();\n                        }\n                        return state.lastStringValue !== \"\";\n                    };\n                    function isUnicodePropertyNameCharacter(ch) {\n                        return isControlLetter(ch) || ch === 0x5F;\n                    }\n                    pp$8.regexp_eatUnicodePropertyValue = function(state) {\n                        var ch = 0;\n                        state.lastStringValue = \"\";\n                        while(isUnicodePropertyValueCharacter(ch = state.current())){\n                            state.lastStringValue += codePointToString(ch);\n                            state.advance();\n                        }\n                        return state.lastStringValue !== \"\";\n                    };\n                    function isUnicodePropertyValueCharacter(ch) {\n                        return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch);\n                    }\n                    pp$8.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {\n                        return this.regexp_eatUnicodePropertyValue(state);\n                    };\n                    pp$8.regexp_eatCharacterClass = function(state) {\n                        if (state.eat(0x5B)) {\n                            state.eat(0x5E);\n                            this.regexp_classRanges(state);\n                            if (state.eat(0x5D)) return true;\n                            state.raise(\"Unterminated character class\");\n                        }\n                        return false;\n                    };\n                    pp$8.regexp_classRanges = function(state) {\n                        while(this.regexp_eatClassAtom(state)){\n                            var left = state.lastIntValue;\n                            if (state.eat(0x2D) && this.regexp_eatClassAtom(state)) {\n                                var right = state.lastIntValue;\n                                if (state.switchU && (left === -1 || right === -1)) state.raise(\"Invalid character class\");\n                                if (left !== -1 && right !== -1 && left > right) state.raise(\"Range out of order in character class\");\n                            }\n                        }\n                    };\n                    pp$8.regexp_eatClassAtom = function(state) {\n                        var start = state.pos;\n                        if (state.eat(0x5C)) {\n                            if (this.regexp_eatClassEscape(state)) return true;\n                            if (state.switchU) {\n                                var ch$1 = state.current();\n                                if (ch$1 === 0x63 || isOctalDigit(ch$1)) state.raise(\"Invalid class escape\");\n                                state.raise(\"Invalid escape\");\n                            }\n                            state.pos = start;\n                        }\n                        var ch = state.current();\n                        if (ch !== 0x5D) {\n                            state.lastIntValue = ch;\n                            state.advance();\n                            return true;\n                        }\n                        return false;\n                    };\n                    pp$8.regexp_eatClassEscape = function(state) {\n                        var start = state.pos;\n                        if (state.eat(0x62)) {\n                            state.lastIntValue = 0x08;\n                            return true;\n                        }\n                        if (state.switchU && state.eat(0x2D)) {\n                            state.lastIntValue = 0x2D;\n                            return true;\n                        }\n                        if (!state.switchU && state.eat(0x63)) {\n                            if (this.regexp_eatClassControlLetter(state)) return true;\n                            state.pos = start;\n                        }\n                        return this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state);\n                    };\n                    pp$8.regexp_eatClassControlLetter = function(state) {\n                        var ch = state.current();\n                        if (isDecimalDigit(ch) || ch === 0x5F) {\n                            state.lastIntValue = ch % 0x20;\n                            state.advance();\n                            return true;\n                        }\n                        return false;\n                    };\n                    pp$8.regexp_eatHexEscapeSequence = function(state) {\n                        var start = state.pos;\n                        if (state.eat(0x78)) {\n                            if (this.regexp_eatFixedHexDigits(state, 2)) return true;\n                            if (state.switchU) state.raise(\"Invalid escape\");\n                            state.pos = start;\n                        }\n                        return false;\n                    };\n                    pp$8.regexp_eatDecimalDigits = function(state) {\n                        var start = state.pos;\n                        var ch = 0;\n                        state.lastIntValue = 0;\n                        while(isDecimalDigit(ch = state.current())){\n                            state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30);\n                            state.advance();\n                        }\n                        return state.pos !== start;\n                    };\n                    function isDecimalDigit(ch) {\n                        return ch >= 0x30 && ch <= 0x39;\n                    }\n                    pp$8.regexp_eatHexDigits = function(state) {\n                        var start = state.pos;\n                        var ch = 0;\n                        state.lastIntValue = 0;\n                        while(isHexDigit(ch = state.current())){\n                            state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n                            state.advance();\n                        }\n                        return state.pos !== start;\n                    };\n                    function isHexDigit(ch) {\n                        return ch >= 0x30 && ch <= 0x39 || ch >= 0x41 && ch <= 0x46 || ch >= 0x61 && ch <= 0x66;\n                    }\n                    function hexToInt(ch) {\n                        if (ch >= 0x41 && ch <= 0x46) return 10 + (ch - 0x41);\n                        if (ch >= 0x61 && ch <= 0x66) return 10 + (ch - 0x61);\n                        return ch - 0x30;\n                    }\n                    pp$8.regexp_eatLegacyOctalEscapeSequence = function(state) {\n                        if (this.regexp_eatOctalDigit(state)) {\n                            var n1 = state.lastIntValue;\n                            if (this.regexp_eatOctalDigit(state)) {\n                                var n2 = state.lastIntValue;\n                                if (n1 <= 3 && this.regexp_eatOctalDigit(state)) state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;\n                                else state.lastIntValue = n1 * 8 + n2;\n                            } else state.lastIntValue = n1;\n                            return true;\n                        }\n                        return false;\n                    };\n                    pp$8.regexp_eatOctalDigit = function(state) {\n                        var ch = state.current();\n                        if (isOctalDigit(ch)) {\n                            state.lastIntValue = ch - 0x30;\n                            state.advance();\n                            return true;\n                        }\n                        state.lastIntValue = 0;\n                        return false;\n                    };\n                    function isOctalDigit(ch) {\n                        return ch >= 0x30 && ch <= 0x37;\n                    }\n                    pp$8.regexp_eatFixedHexDigits = function(state, length) {\n                        var start = state.pos;\n                        state.lastIntValue = 0;\n                        for(var i = 0; i < length; ++i){\n                            var ch = state.current();\n                            if (!isHexDigit(ch)) {\n                                state.pos = start;\n                                return false;\n                            }\n                            state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n                            state.advance();\n                        }\n                        return true;\n                    };\n                    var Token = function Token(p) {\n                        this.type = p.type;\n                        this.value = p.value;\n                        this.start = p.start;\n                        this.end = p.end;\n                        if (p.options.locations) this.loc = new SourceLocation(p, p.startLoc, p.endLoc);\n                        if (p.options.ranges) this.range = [\n                            p.start,\n                            p.end\n                        ];\n                    };\n                    var pp$9 = Parser.prototype;\n                    pp$9.next = function(ignoreEscapeSequenceInKeyword) {\n                        if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc) this.raiseRecoverable(this.start, \"Escape sequence in keyword \" + this.type.keyword);\n                        if (this.options.onToken) this.options.onToken(new Token(this));\n                        this.lastTokEnd = this.end;\n                        this.lastTokStart = this.start;\n                        this.lastTokEndLoc = this.endLoc;\n                        this.lastTokStartLoc = this.startLoc;\n                        this.nextToken();\n                    };\n                    pp$9.getToken = function() {\n                        this.next();\n                        return new Token(this);\n                    };\n                    if (typeof Symbol !== \"undefined\") pp$9[Symbol.iterator] = function() {\n                        var this$1 = this;\n                        return {\n                            next: function() {\n                                var token = this$1.getToken();\n                                return {\n                                    done: token.type === types.eof,\n                                    value: token\n                                };\n                            }\n                        };\n                    };\n                    pp$9.curContext = function() {\n                        return this.context[this.context.length - 1];\n                    };\n                    pp$9.nextToken = function() {\n                        var curContext = this.curContext();\n                        if (!curContext || !curContext.preserveSpace) this.skipSpace();\n                        this.start = this.pos;\n                        if (this.options.locations) this.startLoc = this.curPosition();\n                        if (this.pos >= this.input.length) return this.finishToken(types.eof);\n                        if (curContext.override) return curContext.override(this);\n                        else this.readToken(this.fullCharCodeAtPos());\n                    };\n                    pp$9.readToken = function(code) {\n                        if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92) return this.readWord();\n                        return this.getTokenFromCode(code);\n                    };\n                    pp$9.fullCharCodeAtPos = function() {\n                        var code = this.input.charCodeAt(this.pos);\n                        if (code <= 0xd7ff || code >= 0xe000) return code;\n                        var next = this.input.charCodeAt(this.pos + 1);\n                        return (code << 10) + next - 0x35fdc00;\n                    };\n                    pp$9.skipBlockComment = function() {\n                        var startLoc = this.options.onComment && this.curPosition();\n                        var start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2);\n                        if (end === -1) this.raise(this.pos - 2, \"Unterminated comment\");\n                        this.pos = end + 2;\n                        if (this.options.locations) {\n                            lineBreakG.lastIndex = start;\n                            var match;\n                            while((match = lineBreakG.exec(this.input)) && match.index < this.pos){\n                                ++this.curLine;\n                                this.lineStart = match.index + match[0].length;\n                            }\n                        }\n                        if (this.options.onComment) this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());\n                    };\n                    pp$9.skipLineComment = function(startSkip) {\n                        var start = this.pos;\n                        var startLoc = this.options.onComment && this.curPosition();\n                        var ch = this.input.charCodeAt(this.pos += startSkip);\n                        while(this.pos < this.input.length && !isNewLine(ch))ch = this.input.charCodeAt(++this.pos);\n                        if (this.options.onComment) this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());\n                    };\n                    pp$9.skipSpace = function() {\n                        loop: while(this.pos < this.input.length){\n                            var ch = this.input.charCodeAt(this.pos);\n                            switch(ch){\n                                case 32:\n                                case 160:\n                                    ++this.pos;\n                                    break;\n                                case 13:\n                                    if (this.input.charCodeAt(this.pos + 1) === 10) ++this.pos;\n                                case 10:\n                                case 8232:\n                                case 8233:\n                                    ++this.pos;\n                                    if (this.options.locations) {\n                                        ++this.curLine;\n                                        this.lineStart = this.pos;\n                                    }\n                                    break;\n                                case 47:\n                                    switch(this.input.charCodeAt(this.pos + 1)){\n                                        case 42:\n                                            this.skipBlockComment();\n                                            break;\n                                        case 47:\n                                            this.skipLineComment(2);\n                                            break;\n                                        default:\n                                            break loop;\n                                    }\n                                    break;\n                                default:\n                                    if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) ++this.pos;\n                                    else break loop;\n                            }\n                        }\n                    };\n                    pp$9.finishToken = function(type, val) {\n                        this.end = this.pos;\n                        if (this.options.locations) this.endLoc = this.curPosition();\n                        var prevType = this.type;\n                        this.type = type;\n                        this.value = val;\n                        this.updateContext(prevType);\n                    };\n                    pp$9.readToken_dot = function() {\n                        var next = this.input.charCodeAt(this.pos + 1);\n                        if (next >= 48 && next <= 57) return this.readNumber(true);\n                        var next2 = this.input.charCodeAt(this.pos + 2);\n                        if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {\n                            this.pos += 3;\n                            return this.finishToken(types.ellipsis);\n                        } else {\n                            ++this.pos;\n                            return this.finishToken(types.dot);\n                        }\n                    };\n                    pp$9.readToken_slash = function() {\n                        var next = this.input.charCodeAt(this.pos + 1);\n                        if (this.exprAllowed) {\n                            ++this.pos;\n                            return this.readRegexp();\n                        }\n                        if (next === 61) return this.finishOp(types.assign, 2);\n                        return this.finishOp(types.slash, 1);\n                    };\n                    pp$9.readToken_mult_modulo_exp = function(code) {\n                        var next = this.input.charCodeAt(this.pos + 1);\n                        var size = 1;\n                        var tokentype = code === 42 ? types.star : types.modulo;\n                        if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {\n                            ++size;\n                            tokentype = types.starstar;\n                            next = this.input.charCodeAt(this.pos + 2);\n                        }\n                        if (next === 61) return this.finishOp(types.assign, size + 1);\n                        return this.finishOp(tokentype, size);\n                    };\n                    pp$9.readToken_pipe_amp = function(code) {\n                        var next = this.input.charCodeAt(this.pos + 1);\n                        if (next === code) return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);\n                        if (next === 61) return this.finishOp(types.assign, 2);\n                        return this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);\n                    };\n                    pp$9.readToken_caret = function() {\n                        var next = this.input.charCodeAt(this.pos + 1);\n                        if (next === 61) return this.finishOp(types.assign, 2);\n                        return this.finishOp(types.bitwiseXOR, 1);\n                    };\n                    pp$9.readToken_plus_min = function(code) {\n                        var next = this.input.charCodeAt(this.pos + 1);\n                        if (next === code) {\n                            if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 && (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {\n                                this.skipLineComment(3);\n                                this.skipSpace();\n                                return this.nextToken();\n                            }\n                            return this.finishOp(types.incDec, 2);\n                        }\n                        if (next === 61) return this.finishOp(types.assign, 2);\n                        return this.finishOp(types.plusMin, 1);\n                    };\n                    pp$9.readToken_lt_gt = function(code) {\n                        var next = this.input.charCodeAt(this.pos + 1);\n                        var size = 1;\n                        if (next === code) {\n                            size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\n                            if (this.input.charCodeAt(this.pos + size) === 61) return this.finishOp(types.assign, size + 1);\n                            return this.finishOp(types.bitShift, size);\n                        }\n                        if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 && this.input.charCodeAt(this.pos + 3) === 45) {\n                            this.skipLineComment(4);\n                            this.skipSpace();\n                            return this.nextToken();\n                        }\n                        if (next === 61) size = 2;\n                        return this.finishOp(types.relational, size);\n                    };\n                    pp$9.readToken_eq_excl = function(code) {\n                        var next = this.input.charCodeAt(this.pos + 1);\n                        if (next === 61) return this.finishOp(types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);\n                        if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) {\n                            this.pos += 2;\n                            return this.finishToken(types.arrow);\n                        }\n                        return this.finishOp(code === 61 ? types.eq : types.prefix, 1);\n                    };\n                    pp$9.getTokenFromCode = function(code) {\n                        switch(code){\n                            case 46:\n                                return this.readToken_dot();\n                            case 40:\n                                ++this.pos;\n                                return this.finishToken(types.parenL);\n                            case 41:\n                                ++this.pos;\n                                return this.finishToken(types.parenR);\n                            case 59:\n                                ++this.pos;\n                                return this.finishToken(types.semi);\n                            case 44:\n                                ++this.pos;\n                                return this.finishToken(types.comma);\n                            case 91:\n                                ++this.pos;\n                                return this.finishToken(types.bracketL);\n                            case 93:\n                                ++this.pos;\n                                return this.finishToken(types.bracketR);\n                            case 123:\n                                ++this.pos;\n                                return this.finishToken(types.braceL);\n                            case 125:\n                                ++this.pos;\n                                return this.finishToken(types.braceR);\n                            case 58:\n                                ++this.pos;\n                                return this.finishToken(types.colon);\n                            case 63:\n                                ++this.pos;\n                                return this.finishToken(types.question);\n                            case 96:\n                                if (this.options.ecmaVersion < 6) break;\n                                ++this.pos;\n                                return this.finishToken(types.backQuote);\n                            case 48:\n                                var next = this.input.charCodeAt(this.pos + 1);\n                                if (next === 120 || next === 88) return this.readRadixNumber(16);\n                                if (this.options.ecmaVersion >= 6) {\n                                    if (next === 111 || next === 79) return this.readRadixNumber(8);\n                                    if (next === 98 || next === 66) return this.readRadixNumber(2);\n                                }\n                            case 49:\n                            case 50:\n                            case 51:\n                            case 52:\n                            case 53:\n                            case 54:\n                            case 55:\n                            case 56:\n                            case 57:\n                                return this.readNumber(false);\n                            case 34:\n                            case 39:\n                                return this.readString(code);\n                            case 47:\n                                return this.readToken_slash();\n                            case 37:\n                            case 42:\n                                return this.readToken_mult_modulo_exp(code);\n                            case 124:\n                            case 38:\n                                return this.readToken_pipe_amp(code);\n                            case 94:\n                                return this.readToken_caret();\n                            case 43:\n                            case 45:\n                                return this.readToken_plus_min(code);\n                            case 60:\n                            case 62:\n                                return this.readToken_lt_gt(code);\n                            case 61:\n                            case 33:\n                                return this.readToken_eq_excl(code);\n                            case 126:\n                                return this.finishOp(types.prefix, 1);\n                        }\n                        this.raise(this.pos, \"Unexpected character '\" + codePointToString$1(code) + \"'\");\n                    };\n                    pp$9.finishOp = function(type, size) {\n                        var str = this.input.slice(this.pos, this.pos + size);\n                        this.pos += size;\n                        return this.finishToken(type, str);\n                    };\n                    pp$9.readRegexp = function() {\n                        var escaped, inClass, start = this.pos;\n                        for(;;){\n                            if (this.pos >= this.input.length) this.raise(start, \"Unterminated regular expression\");\n                            var ch = this.input.charAt(this.pos);\n                            if (lineBreak.test(ch)) this.raise(start, \"Unterminated regular expression\");\n                            if (!escaped) {\n                                if (ch === \"[\") inClass = true;\n                                else if (ch === \"]\" && inClass) inClass = false;\n                                else if (ch === \"/\" && !inClass) break;\n                                escaped = ch === \"\\\\\";\n                            } else escaped = false;\n                            ++this.pos;\n                        }\n                        var pattern = this.input.slice(start, this.pos);\n                        ++this.pos;\n                        var flagsStart = this.pos;\n                        var flags = this.readWord1();\n                        if (this.containsEsc) this.unexpected(flagsStart);\n                        var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));\n                        state.reset(start, pattern, flags);\n                        this.validateRegExpFlags(state);\n                        this.validateRegExpPattern(state);\n                        var value1 = null;\n                        try {\n                            value1 = new RegExp(pattern, flags);\n                        } catch (e) {}\n                        return this.finishToken(types.regexp, {\n                            pattern: pattern,\n                            flags: flags,\n                            value: value1\n                        });\n                    };\n                    pp$9.readInt = function(radix, len) {\n                        var start = this.pos, total = 0;\n                        for(var i = 0, e = len == null ? Infinity : len; i < e; ++i){\n                            var code = this.input.charCodeAt(this.pos), val = void 0;\n                            if (code >= 97) val = code - 97 + 10;\n                            else if (code >= 65) val = code - 65 + 10;\n                            else if (code >= 48 && code <= 57) val = code - 48;\n                            else val = Infinity;\n                            if (val >= radix) break;\n                            ++this.pos;\n                            total = total * radix + val;\n                        }\n                        if (this.pos === start || len != null && this.pos - start !== len) return null;\n                        return total;\n                    };\n                    pp$9.readRadixNumber = function(radix) {\n                        var start = this.pos;\n                        this.pos += 2;\n                        var val = this.readInt(radix);\n                        if (val == null) this.raise(this.start + 2, \"Expected number in radix \" + radix);\n                        if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {\n                            val = typeof BigInt !== \"undefined\" ? BigInt(this.input.slice(start, this.pos)) : null;\n                            ++this.pos;\n                        } else if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\");\n                        return this.finishToken(types.num, val);\n                    };\n                    pp$9.readNumber = function(startsWithDot) {\n                        var start = this.pos;\n                        if (!startsWithDot && this.readInt(10) === null) this.raise(start, \"Invalid number\");\n                        var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n                        if (octal && this.strict) this.raise(start, \"Invalid number\");\n                        var next = this.input.charCodeAt(this.pos);\n                        if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {\n                            var str$1 = this.input.slice(start, this.pos);\n                            var val$1 = typeof BigInt !== \"undefined\" ? BigInt(str$1) : null;\n                            ++this.pos;\n                            if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\");\n                            return this.finishToken(types.num, val$1);\n                        }\n                        if (octal && /[89]/.test(this.input.slice(start, this.pos))) octal = false;\n                        if (next === 46 && !octal) {\n                            ++this.pos;\n                            this.readInt(10);\n                            next = this.input.charCodeAt(this.pos);\n                        }\n                        if ((next === 69 || next === 101) && !octal) {\n                            next = this.input.charCodeAt(++this.pos);\n                            if (next === 43 || next === 45) ++this.pos;\n                            if (this.readInt(10) === null) this.raise(start, \"Invalid number\");\n                        }\n                        if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\");\n                        var str = this.input.slice(start, this.pos);\n                        var val = octal ? parseInt(str, 8) : parseFloat(str);\n                        return this.finishToken(types.num, val);\n                    };\n                    pp$9.readCodePoint = function() {\n                        var ch = this.input.charCodeAt(this.pos), code;\n                        if (ch === 123) {\n                            if (this.options.ecmaVersion < 6) this.unexpected();\n                            var codePos = ++this.pos;\n                            code = this.readHexChar(this.input.indexOf(\"}\", this.pos) - this.pos);\n                            ++this.pos;\n                            if (code > 0x10FFFF) this.invalidStringToken(codePos, \"Code point out of bounds\");\n                        } else code = this.readHexChar(4);\n                        return code;\n                    };\n                    function codePointToString$1(code) {\n                        if (code <= 0xFFFF) return String.fromCharCode(code);\n                        code -= 0x10000;\n                        return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00);\n                    }\n                    pp$9.readString = function(quote) {\n                        var out = \"\", chunkStart = ++this.pos;\n                        for(;;){\n                            if (this.pos >= this.input.length) this.raise(this.start, \"Unterminated string constant\");\n                            var ch = this.input.charCodeAt(this.pos);\n                            if (ch === quote) break;\n                            if (ch === 92) {\n                                out += this.input.slice(chunkStart, this.pos);\n                                out += this.readEscapedChar(false);\n                                chunkStart = this.pos;\n                            } else {\n                                if (isNewLine(ch, this.options.ecmaVersion >= 10)) this.raise(this.start, \"Unterminated string constant\");\n                                ++this.pos;\n                            }\n                        }\n                        out += this.input.slice(chunkStart, this.pos++);\n                        return this.finishToken(types.string, out);\n                    };\n                    var INVALID_TEMPLATE_ESCAPE_ERROR = {};\n                    pp$9.tryReadTemplateToken = function() {\n                        this.inTemplateElement = true;\n                        try {\n                            this.readTmplToken();\n                        } catch (err) {\n                            if (err === INVALID_TEMPLATE_ESCAPE_ERROR) this.readInvalidTemplateToken();\n                            else throw err;\n                        }\n                        this.inTemplateElement = false;\n                    };\n                    pp$9.invalidStringToken = function(position, message) {\n                        if (this.inTemplateElement && this.options.ecmaVersion >= 9) throw INVALID_TEMPLATE_ESCAPE_ERROR;\n                        else this.raise(position, message);\n                    };\n                    pp$9.readTmplToken = function() {\n                        var out = \"\", chunkStart = this.pos;\n                        for(;;){\n                            if (this.pos >= this.input.length) this.raise(this.start, \"Unterminated template\");\n                            var ch = this.input.charCodeAt(this.pos);\n                            if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) {\n                                if (this.pos === this.start && (this.type === types.template || this.type === types.invalidTemplate)) {\n                                    if (ch === 36) {\n                                        this.pos += 2;\n                                        return this.finishToken(types.dollarBraceL);\n                                    } else {\n                                        ++this.pos;\n                                        return this.finishToken(types.backQuote);\n                                    }\n                                }\n                                out += this.input.slice(chunkStart, this.pos);\n                                return this.finishToken(types.template, out);\n                            }\n                            if (ch === 92) {\n                                out += this.input.slice(chunkStart, this.pos);\n                                out += this.readEscapedChar(true);\n                                chunkStart = this.pos;\n                            } else if (isNewLine(ch)) {\n                                out += this.input.slice(chunkStart, this.pos);\n                                ++this.pos;\n                                switch(ch){\n                                    case 13:\n                                        if (this.input.charCodeAt(this.pos) === 10) ++this.pos;\n                                    case 10:\n                                        out += \"\\n\";\n                                        break;\n                                    default:\n                                        out += String.fromCharCode(ch);\n                                        break;\n                                }\n                                if (this.options.locations) {\n                                    ++this.curLine;\n                                    this.lineStart = this.pos;\n                                }\n                                chunkStart = this.pos;\n                            } else ++this.pos;\n                        }\n                    };\n                    pp$9.readInvalidTemplateToken = function() {\n                        for(; this.pos < this.input.length; this.pos++)switch(this.input[this.pos]){\n                            case \"\\\\\":\n                                ++this.pos;\n                                break;\n                            case \"$\":\n                                if (this.input[this.pos + 1] !== \"{\") break;\n                            case \"`\":\n                                return this.finishToken(types.invalidTemplate, this.input.slice(this.start, this.pos));\n                        }\n                        this.raise(this.start, \"Unterminated template\");\n                    };\n                    pp$9.readEscapedChar = function(inTemplate) {\n                        var ch = this.input.charCodeAt(++this.pos);\n                        ++this.pos;\n                        switch(ch){\n                            case 110:\n                                return \"\\n\";\n                            case 114:\n                                return \"\\r\";\n                            case 120:\n                                return String.fromCharCode(this.readHexChar(2));\n                            case 117:\n                                return codePointToString$1(this.readCodePoint());\n                            case 116:\n                                return \"\t\";\n                            case 98:\n                                return \"\\b\";\n                            case 118:\n                                return \"\\v\";\n                            case 102:\n                                return \"\\f\";\n                            case 13:\n                                if (this.input.charCodeAt(this.pos) === 10) ++this.pos;\n                            case 10:\n                                if (this.options.locations) {\n                                    this.lineStart = this.pos;\n                                    ++this.curLine;\n                                }\n                                return \"\";\n                            case 56:\n                            case 57:\n                                if (inTemplate) {\n                                    var codePos = this.pos - 1;\n                                    this.invalidStringToken(codePos, \"Invalid escape sequence in template string\");\n                                    return null;\n                                }\n                            default:\n                                if (ch >= 48 && ch <= 55) {\n                                    var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];\n                                    var octal = parseInt(octalStr, 8);\n                                    if (octal > 255) {\n                                        octalStr = octalStr.slice(0, -1);\n                                        octal = parseInt(octalStr, 8);\n                                    }\n                                    this.pos += octalStr.length - 1;\n                                    ch = this.input.charCodeAt(this.pos);\n                                    if ((octalStr !== \"0\" || ch === 56 || ch === 57) && (this.strict || inTemplate)) this.invalidStringToken(this.pos - 1 - octalStr.length, inTemplate ? \"Octal literal in template string\" : \"Octal literal in strict mode\");\n                                    return String.fromCharCode(octal);\n                                }\n                                if (isNewLine(ch)) return \"\";\n                                return String.fromCharCode(ch);\n                        }\n                    };\n                    pp$9.readHexChar = function(len) {\n                        var codePos = this.pos;\n                        var n = this.readInt(16, len);\n                        if (n === null) this.invalidStringToken(codePos, \"Bad character escape sequence\");\n                        return n;\n                    };\n                    pp$9.readWord1 = function() {\n                        this.containsEsc = false;\n                        var word = \"\", first = true, chunkStart = this.pos;\n                        var astral = this.options.ecmaVersion >= 6;\n                        while(this.pos < this.input.length){\n                            var ch = this.fullCharCodeAtPos();\n                            if (isIdentifierChar(ch, astral)) this.pos += ch <= 0xffff ? 1 : 2;\n                            else if (ch === 92) {\n                                this.containsEsc = true;\n                                word += this.input.slice(chunkStart, this.pos);\n                                var escStart = this.pos;\n                                if (this.input.charCodeAt(++this.pos) !== 117) this.invalidStringToken(this.pos, \"Expecting Unicode escape sequence \\\\uXXXX\");\n                                ++this.pos;\n                                var esc = this.readCodePoint();\n                                if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral)) this.invalidStringToken(escStart, \"Invalid Unicode escape\");\n                                word += codePointToString$1(esc);\n                                chunkStart = this.pos;\n                            } else break;\n                            first = false;\n                        }\n                        return word + this.input.slice(chunkStart, this.pos);\n                    };\n                    pp$9.readWord = function() {\n                        var word = this.readWord1();\n                        var type = types.name;\n                        if (this.keywords.test(word)) type = keywords$1[word];\n                        return this.finishToken(type, word);\n                    };\n                    var version = \"7.1.0\";\n                    Parser.acorn = {\n                        Parser: Parser,\n                        version: version,\n                        defaultOptions: defaultOptions,\n                        Position: Position,\n                        SourceLocation: SourceLocation,\n                        getLineInfo: getLineInfo,\n                        Node: Node,\n                        TokenType: TokenType,\n                        tokTypes: types,\n                        keywordTypes: keywords$1,\n                        TokContext: TokContext,\n                        tokContexts: types$1,\n                        isIdentifierChar: isIdentifierChar,\n                        isIdentifierStart: isIdentifierStart,\n                        Token: Token,\n                        isNewLine: isNewLine,\n                        lineBreak: lineBreak,\n                        lineBreakG: lineBreakG,\n                        nonASCIIwhitespace: nonASCIIwhitespace\n                    };\n                    function parse(input, options) {\n                        return Parser.parse(input, options);\n                    }\n                    function parseExpressionAt(input, pos, options) {\n                        return Parser.parseExpressionAt(input, pos, options);\n                    }\n                    function tokenizer(input, options) {\n                        return Parser.tokenizer(input, options);\n                    }\n                    exports.Node = Node;\n                    exports.Parser = Parser;\n                    exports.Position = Position;\n                    exports.SourceLocation = SourceLocation;\n                    exports.TokContext = TokContext;\n                    exports.Token = Token;\n                    exports.TokenType = TokenType;\n                    exports.defaultOptions = defaultOptions;\n                    exports.getLineInfo = getLineInfo;\n                    exports.isIdentifierChar = isIdentifierChar;\n                    exports.isIdentifierStart = isIdentifierStart;\n                    exports.isNewLine = isNewLine;\n                    exports.keywordTypes = keywords$1;\n                    exports.lineBreak = lineBreak;\n                    exports.lineBreakG = lineBreakG;\n                    exports.nonASCIIwhitespace = nonASCIIwhitespace;\n                    exports.parse = parse;\n                    exports.parseExpressionAt = parseExpressionAt;\n                    exports.tokContexts = types$1;\n                    exports.tokTypes = types;\n                    exports.tokenizer = tokenizer;\n                    exports.version = version;\n                    Object.defineProperty(exports, \"__esModule\", {\n                        value: true\n                    });\n                });\n            },\n            {}\n        ],\n        2: [\n            function(require1, module1, exports) {},\n            {}\n        ],\n        3: [\n            function(require1, module1, exports) {\n                function glWiretap(gl, options = {}) {\n                    const { contextName: contextName = \"gl\" , throwGetError: throwGetError , useTrackablePrimitives: useTrackablePrimitives , readPixelsFile: readPixelsFile , recording: recording = [] , variables: variables = {} , onReadPixels: onReadPixels , onUnrecognizedArgumentLookup: onUnrecognizedArgumentLookup  } = options;\n                    const proxy = new Proxy(gl, {\n                        get: listen\n                    });\n                    const contextVariables = [];\n                    const entityNames = {};\n                    let imageCount = 0;\n                    let indent = \"\";\n                    let readPixelsVariableName;\n                    return proxy;\n                    function listen(obj, property) {\n                        switch(property){\n                            case \"addComment\":\n                                return addComment;\n                            case \"checkThrowError\":\n                                return checkThrowError;\n                            case \"getReadPixelsVariableName\":\n                                return readPixelsVariableName;\n                            case \"insertVariable\":\n                                return insertVariable;\n                            case \"reset\":\n                                return reset;\n                            case \"setIndent\":\n                                return setIndent;\n                            case \"toString\":\n                                return toString;\n                            case \"getContextVariableName\":\n                                return getContextVariableName;\n                        }\n                        if (typeof gl[property] === \"function\") return function() {\n                            switch(property){\n                                case \"getError\":\n                                    if (throwGetError) recording.push(`${indent}if (${contextName}.getError() !== ${contextName}.NONE) throw new Error('error');`);\n                                    else recording.push(`${indent}${contextName}.getError();`);\n                                    return gl.getError();\n                                case \"getExtension\":\n                                    {\n                                        const variableName = `${contextName}Variables${contextVariables.length}`;\n                                        recording.push(`${indent}const ${variableName} = ${contextName}.getExtension('${arguments[0]}');`);\n                                        const extension = gl.getExtension(arguments[0]);\n                                        if (extension && typeof extension === \"object\") {\n                                            const tappedExtension = glExtensionWiretap(extension, {\n                                                getEntity: getEntity,\n                                                useTrackablePrimitives: useTrackablePrimitives,\n                                                recording: recording,\n                                                contextName: variableName,\n                                                contextVariables: contextVariables,\n                                                variables: variables,\n                                                indent: indent,\n                                                onUnrecognizedArgumentLookup: onUnrecognizedArgumentLookup\n                                            });\n                                            contextVariables.push(tappedExtension);\n                                            return tappedExtension;\n                                        } else contextVariables.push(null);\n                                        return extension;\n                                    }\n                                case \"readPixels\":\n                                    const i = contextVariables.indexOf(arguments[6]);\n                                    let targetVariableName;\n                                    if (i === -1) {\n                                        const variableName = getVariableName(arguments[6]);\n                                        if (variableName) {\n                                            targetVariableName = variableName;\n                                            recording.push(`${indent}${variableName}`);\n                                        } else {\n                                            targetVariableName = `${contextName}Variable${contextVariables.length}`;\n                                            contextVariables.push(arguments[6]);\n                                            recording.push(`${indent}const ${targetVariableName} = new ${arguments[6].constructor.name}(${arguments[6].length});`);\n                                        }\n                                    } else targetVariableName = `${contextName}Variable${i}`;\n                                    readPixelsVariableName = targetVariableName;\n                                    const argumentAsStrings = [\n                                        arguments[0],\n                                        arguments[1],\n                                        arguments[2],\n                                        arguments[3],\n                                        getEntity(arguments[4]),\n                                        getEntity(arguments[5]),\n                                        targetVariableName\n                                    ];\n                                    recording.push(`${indent}${contextName}.readPixels(${argumentAsStrings.join(\", \")});`);\n                                    if (readPixelsFile) writePPM(arguments[2], arguments[3]);\n                                    if (onReadPixels) onReadPixels(targetVariableName, argumentAsStrings);\n                                    return gl.readPixels.apply(gl, arguments);\n                                case \"drawBuffers\":\n                                    recording.push(`${indent}${contextName}.drawBuffers([${argumentsToString(arguments[0], {\n                                        contextName: contextName,\n                                        contextVariables: contextVariables,\n                                        getEntity: getEntity,\n                                        addVariable: addVariable,\n                                        variables: variables,\n                                        onUnrecognizedArgumentLookup: onUnrecognizedArgumentLookup\n                                    })}]);`);\n                                    return gl.drawBuffers(arguments[0]);\n                            }\n                            let result = gl[property].apply(gl, arguments);\n                            switch(typeof result){\n                                case \"undefined\":\n                                    recording.push(`${indent}${methodCallToString(property, arguments)};`);\n                                    return;\n                                case \"number\":\n                                case \"boolean\":\n                                    if (useTrackablePrimitives && contextVariables.indexOf(trackablePrimitive(result)) === -1) {\n                                        recording.push(`${indent}const ${contextName}Variable${contextVariables.length} = ${methodCallToString(property, arguments)};`);\n                                        contextVariables.push(result = trackablePrimitive(result));\n                                        break;\n                                    }\n                                default:\n                                    if (result === null) recording.push(`${methodCallToString(property, arguments)};`);\n                                    else recording.push(`${indent}const ${contextName}Variable${contextVariables.length} = ${methodCallToString(property, arguments)};`);\n                                    contextVariables.push(result);\n                            }\n                            return result;\n                        };\n                        entityNames[gl[property]] = property;\n                        return gl[property];\n                    }\n                    function toString() {\n                        return recording.join(\"\\n\");\n                    }\n                    function reset() {\n                        while(recording.length > 0)recording.pop();\n                    }\n                    function insertVariable(name1, value1) {\n                        variables[name1] = value1;\n                    }\n                    function getEntity(value1) {\n                        const name1 = entityNames[value1];\n                        if (name1) return contextName + \".\" + name1;\n                        return value1;\n                    }\n                    function setIndent(spaces) {\n                        indent = \" \".repeat(spaces);\n                    }\n                    function addVariable(value1, source) {\n                        const variableName = `${contextName}Variable${contextVariables.length}`;\n                        recording.push(`${indent}const ${variableName} = ${source};`);\n                        contextVariables.push(value1);\n                        return variableName;\n                    }\n                    function writePPM(width, height) {\n                        const sourceVariable = `${contextName}Variable${contextVariables.length}`;\n                        const imageVariable = `imageDatum${imageCount}`;\n                        recording.push(`${indent}let ${imageVariable} = [\"P3\\\\n# ${readPixelsFile}.ppm\\\\n\", ${width}, ' ', ${height}, \"\\\\n255\\\\n\"].join(\"\");`);\n                        recording.push(`${indent}for (let i = 0; i < ${imageVariable}.length; i += 4) {`);\n                        recording.push(`${indent}  ${imageVariable} += ${sourceVariable}[i] + ' ' + ${sourceVariable}[i + 1] + ' ' + ${sourceVariable}[i + 2] + ' ';`);\n                        recording.push(`${indent}}`);\n                        recording.push(`${indent}if (typeof require !== \"undefined\") {`);\n                        recording.push(`${indent}  require('fs').writeFileSync('./${readPixelsFile}.ppm', ${imageVariable});`);\n                        recording.push(`${indent}}`);\n                        imageCount++;\n                    }\n                    function addComment(value1) {\n                        recording.push(`${indent}// ${value1}`);\n                    }\n                    function checkThrowError() {\n                        recording.push(`${indent}(() => {\n${indent}const error = ${contextName}.getError();\n${indent}if (error !== ${contextName}.NONE) {\n${indent}  const names = Object.getOwnPropertyNames(gl);\n${indent}  for (let i = 0; i < names.length; i++) {\n${indent}    const name = names[i];\n${indent}    if (${contextName}[name] === error) {\n${indent}      throw new Error('${contextName} threw ' + name);\n${indent}    }\n${indent}  }\n${indent}}\n${indent}})();`);\n                    }\n                    function methodCallToString(method, args) {\n                        return `${contextName}.${method}(${argumentsToString(args, {\n                            contextName: contextName,\n                            contextVariables: contextVariables,\n                            getEntity: getEntity,\n                            addVariable: addVariable,\n                            variables: variables,\n                            onUnrecognizedArgumentLookup: onUnrecognizedArgumentLookup\n                        })})`;\n                    }\n                    function getVariableName(value1) {\n                        if (variables) for(const name1 in variables){\n                            if (variables[name1] === value1) return name1;\n                        }\n                        return null;\n                    }\n                    function getContextVariableName(value1) {\n                        const i = contextVariables.indexOf(value1);\n                        if (i !== -1) return `${contextName}Variable${i}`;\n                        return null;\n                    }\n                }\n                function glExtensionWiretap(extension, options) {\n                    const proxy = new Proxy(extension, {\n                        get: listen\n                    });\n                    const extensionEntityNames = {};\n                    const { contextName: contextName , contextVariables: contextVariables , getEntity: getEntity , useTrackablePrimitives: useTrackablePrimitives , recording: recording , variables: variables , indent: indent , onUnrecognizedArgumentLookup: onUnrecognizedArgumentLookup  } = options;\n                    return proxy;\n                    function listen(obj, property) {\n                        if (typeof obj[property] === \"function\") return function() {\n                            switch(property){\n                                case \"drawBuffersWEBGL\":\n                                    recording.push(`${indent}${contextName}.drawBuffersWEBGL([${argumentsToString(arguments[0], {\n                                        contextName: contextName,\n                                        contextVariables: contextVariables,\n                                        getEntity: getExtensionEntity,\n                                        addVariable: addVariable,\n                                        variables: variables,\n                                        onUnrecognizedArgumentLookup: onUnrecognizedArgumentLookup\n                                    })}]);`);\n                                    return extension.drawBuffersWEBGL(arguments[0]);\n                            }\n                            let result = extension[property].apply(extension, arguments);\n                            switch(typeof result){\n                                case \"undefined\":\n                                    recording.push(`${indent}${methodCallToString(property, arguments)};`);\n                                    return;\n                                case \"number\":\n                                case \"boolean\":\n                                    if (useTrackablePrimitives && contextVariables.indexOf(trackablePrimitive(result)) === -1) {\n                                        recording.push(`${indent}const ${contextName}Variable${contextVariables.length} = ${methodCallToString(property, arguments)};`);\n                                        contextVariables.push(result = trackablePrimitive(result));\n                                    } else {\n                                        recording.push(`${indent}const ${contextName}Variable${contextVariables.length} = ${methodCallToString(property, arguments)};`);\n                                        contextVariables.push(result);\n                                    }\n                                    break;\n                                default:\n                                    if (result === null) recording.push(`${methodCallToString(property, arguments)};`);\n                                    else recording.push(`${indent}const ${contextName}Variable${contextVariables.length} = ${methodCallToString(property, arguments)};`);\n                                    contextVariables.push(result);\n                            }\n                            return result;\n                        };\n                        extensionEntityNames[extension[property]] = property;\n                        return extension[property];\n                    }\n                    function getExtensionEntity(value1) {\n                        if (extensionEntityNames.hasOwnProperty(value1)) return `${contextName}.${extensionEntityNames[value1]}`;\n                        return getEntity(value1);\n                    }\n                    function methodCallToString(method, args) {\n                        return `${contextName}.${method}(${argumentsToString(args, {\n                            contextName: contextName,\n                            contextVariables: contextVariables,\n                            getEntity: getExtensionEntity,\n                            addVariable: addVariable,\n                            variables: variables,\n                            onUnrecognizedArgumentLookup: onUnrecognizedArgumentLookup\n                        })})`;\n                    }\n                    function addVariable(value1, source) {\n                        const variableName = `${contextName}Variable${contextVariables.length}`;\n                        contextVariables.push(value1);\n                        recording.push(`${indent}const ${variableName} = ${source};`);\n                        return variableName;\n                    }\n                }\n                function argumentsToString(args, options) {\n                    const { variables: variables , onUnrecognizedArgumentLookup: onUnrecognizedArgumentLookup  } = options;\n                    return Array.from(args).map((arg)=>{\n                        const variableName = getVariableName(arg);\n                        if (variableName) return variableName;\n                        return argumentToString(arg, options);\n                    }).join(\", \");\n                    function getVariableName(value1) {\n                        if (variables) for(const name1 in variables){\n                            if (!variables.hasOwnProperty(name1)) continue;\n                            if (variables[name1] === value1) return name1;\n                        }\n                        if (onUnrecognizedArgumentLookup) return onUnrecognizedArgumentLookup(value1);\n                        return null;\n                    }\n                }\n                function argumentToString(arg, options) {\n                    const { contextName: contextName , contextVariables: contextVariables , getEntity: getEntity , addVariable: addVariable , onUnrecognizedArgumentLookup: onUnrecognizedArgumentLookup  } = options;\n                    if (typeof arg === \"undefined\") return \"undefined\";\n                    if (arg === null) return \"null\";\n                    const i = contextVariables.indexOf(arg);\n                    if (i > -1) return `${contextName}Variable${i}`;\n                    switch(arg.constructor.name){\n                        case \"String\":\n                            const hasLines = /\\n/.test(arg);\n                            const hasSingleQuotes = /'/.test(arg);\n                            const hasDoubleQuotes = /\"/.test(arg);\n                            if (hasLines) return \"`\" + arg + \"`\";\n                            else if (hasSingleQuotes && !hasDoubleQuotes) return '\"' + arg + '\"';\n                            else if (!hasSingleQuotes && hasDoubleQuotes) return \"'\" + arg + \"'\";\n                            else return \"'\" + arg + \"'\";\n                        case \"Number\":\n                            return getEntity(arg);\n                        case \"Boolean\":\n                            return getEntity(arg);\n                        case \"Array\":\n                            return addVariable(arg, `new ${arg.constructor.name}([${Array.from(arg).join(\",\")}])`);\n                        case \"Float32Array\":\n                        case \"Uint8Array\":\n                        case \"Uint16Array\":\n                        case \"Int32Array\":\n                            return addVariable(arg, `new ${arg.constructor.name}(${JSON.stringify(Array.from(arg))})`);\n                        default:\n                            if (onUnrecognizedArgumentLookup) {\n                                const instantiationString = onUnrecognizedArgumentLookup(arg);\n                                if (instantiationString) return instantiationString;\n                            }\n                            throw new Error(`unrecognized argument type ${arg.constructor.name}`);\n                    }\n                }\n                function trackablePrimitive(value1) {\n                    return new value1.constructor(value1);\n                }\n                if (typeof module1 !== \"undefined\") module1.exports = {\n                    glWiretap: glWiretap,\n                    glExtensionWiretap: glExtensionWiretap\n                };\n                if (typeof window !== \"undefined\") {\n                    glWiretap.glExtensionWiretap = glExtensionWiretap;\n                    window.glWiretap = glWiretap;\n                }\n            },\n            {}\n        ],\n        4: [\n            function(require1, module1, exports) {\n                function setupArguments(args) {\n                    const newArguments = new Array(args.length);\n                    for(let i = 0; i < args.length; i++){\n                        const arg = args[i];\n                        if (arg.toArray) newArguments[i] = arg.toArray();\n                        else newArguments[i] = arg;\n                    }\n                    return newArguments;\n                }\n                function mock1D() {\n                    const args = setupArguments(arguments);\n                    const row = new Float32Array(this.output.x);\n                    for(let x = 0; x < this.output.x; x++){\n                        this.thread.x = x;\n                        this.thread.y = 0;\n                        this.thread.z = 0;\n                        row[x] = this._fn.apply(this, args);\n                    }\n                    return row;\n                }\n                function mock2D() {\n                    const args = setupArguments(arguments);\n                    const matrix = new Array(this.output.y);\n                    for(let y = 0; y < this.output.y; y++){\n                        const row = new Float32Array(this.output.x);\n                        for(let x = 0; x < this.output.x; x++){\n                            this.thread.x = x;\n                            this.thread.y = y;\n                            this.thread.z = 0;\n                            row[x] = this._fn.apply(this, args);\n                        }\n                        matrix[y] = row;\n                    }\n                    return matrix;\n                }\n                function mock2DGraphical() {\n                    const args = setupArguments(arguments);\n                    for(let y = 0; y < this.output.y; y++)for(let x = 0; x < this.output.x; x++){\n                        this.thread.x = x;\n                        this.thread.y = y;\n                        this.thread.z = 0;\n                        this._fn.apply(this, args);\n                    }\n                }\n                function mock3D() {\n                    const args = setupArguments(arguments);\n                    const cube = new Array(this.output.z);\n                    for(let z = 0; z < this.output.z; z++){\n                        const matrix = new Array(this.output.y);\n                        for(let y = 0; y < this.output.y; y++){\n                            const row = new Float32Array(this.output.x);\n                            for(let x = 0; x < this.output.x; x++){\n                                this.thread.x = x;\n                                this.thread.y = y;\n                                this.thread.z = z;\n                                row[x] = this._fn.apply(this, args);\n                            }\n                            matrix[y] = row;\n                        }\n                        cube[z] = matrix;\n                    }\n                    return cube;\n                }\n                function apiDecorate(kernel) {\n                    kernel.setOutput = (output)=>{\n                        kernel.output = setupOutput(output);\n                        if (kernel.graphical) setupGraphical(kernel);\n                    };\n                    kernel.toJSON = ()=>{\n                        throw new Error(\"Not usable with gpuMock\");\n                    };\n                    kernel.setConstants = (flag)=>{\n                        kernel.constants = flag;\n                        return kernel;\n                    };\n                    kernel.setGraphical = (flag)=>{\n                        kernel.graphical = flag;\n                        return kernel;\n                    };\n                    kernel.setCanvas = (flag)=>{\n                        kernel.canvas = flag;\n                        return kernel;\n                    };\n                    kernel.setContext = (flag)=>{\n                        kernel.context = flag;\n                        return kernel;\n                    };\n                    kernel.destroy = ()=>{};\n                    kernel.validateSettings = ()=>{};\n                    if (kernel.graphical && kernel.output) setupGraphical(kernel);\n                    kernel.exec = function() {\n                        return new Promise((resolve, reject)=>{\n                            try {\n                                resolve(kernel.apply(kernel, arguments));\n                            } catch (e) {\n                                reject(e);\n                            }\n                        });\n                    };\n                    kernel.getPixels = (flip)=>{\n                        const { x: x , y: y  } = kernel.output;\n                        return flip ? flipPixels(kernel._imageData.data, x, y) : kernel._imageData.data.slice(0);\n                    };\n                    kernel.color = function(r, g, b, a) {\n                        if (typeof a === \"undefined\") a = 1;\n                        r = Math.floor(r * 255);\n                        g = Math.floor(g * 255);\n                        b = Math.floor(b * 255);\n                        a = Math.floor(a * 255);\n                        const width = kernel.output.x;\n                        const height = kernel.output.y;\n                        const x = kernel.thread.x;\n                        const y = height - kernel.thread.y - 1;\n                        const index = x + y * width;\n                        kernel._colorData[index * 4 + 0] = r;\n                        kernel._colorData[index * 4 + 1] = g;\n                        kernel._colorData[index * 4 + 2] = b;\n                        kernel._colorData[index * 4 + 3] = a;\n                    };\n                    const mockMethod = ()=>kernel;\n                    const methods = [\n                        \"setWarnVarUsage\",\n                        \"setArgumentTypes\",\n                        \"setTactic\",\n                        \"setOptimizeFloatMemory\",\n                        \"setDebug\",\n                        \"setLoopMaxIterations\",\n                        \"setConstantTypes\",\n                        \"setFunctions\",\n                        \"setNativeFunctions\",\n                        \"setInjectedNative\",\n                        \"setPipeline\",\n                        \"setPrecision\",\n                        \"setOutputToTexture\",\n                        \"setImmutable\",\n                        \"setStrictIntegers\",\n                        \"setDynamicOutput\",\n                        \"setHardcodeConstants\",\n                        \"setDynamicArguments\",\n                        \"setUseLegacyEncoder\",\n                        \"setWarnVarUsage\",\n                        \"addSubKernel\"\n                    ];\n                    for(let i = 0; i < methods.length; i++)kernel[methods[i]] = mockMethod;\n                    return kernel;\n                }\n                function setupGraphical(kernel) {\n                    const { x: x , y: y  } = kernel.output;\n                    if (kernel.context && kernel.context.createImageData) {\n                        const data = new Uint8ClampedArray(x * y * 4);\n                        kernel._imageData = kernel.context.createImageData(x, y);\n                        kernel._colorData = data;\n                    } else {\n                        const data = new Uint8ClampedArray(x * y * 4);\n                        kernel._imageData = {\n                            data: data\n                        };\n                        kernel._colorData = data;\n                    }\n                }\n                function setupOutput(output) {\n                    let result = null;\n                    if (output.length) {\n                        if (output.length === 3) {\n                            const [x, y, z] = output;\n                            result = {\n                                x: x,\n                                y: y,\n                                z: z\n                            };\n                        } else if (output.length === 2) {\n                            const [x, y] = output;\n                            result = {\n                                x: x,\n                                y: y\n                            };\n                        } else {\n                            const [x] = output;\n                            result = {\n                                x: x\n                            };\n                        }\n                    } else result = output;\n                    return result;\n                }\n                function gpuMock(fn, settings = {}) {\n                    const output = settings.output ? setupOutput(settings.output) : null;\n                    function kernel() {\n                        if (kernel.output.z) return mock3D.apply(kernel, arguments);\n                        else if (kernel.output.y) {\n                            if (kernel.graphical) return mock2DGraphical.apply(kernel, arguments);\n                            return mock2D.apply(kernel, arguments);\n                        } else return mock1D.apply(kernel, arguments);\n                    }\n                    kernel._fn = fn;\n                    kernel.constants = settings.constants || null;\n                    kernel.context = settings.context || null;\n                    kernel.canvas = settings.canvas || null;\n                    kernel.graphical = settings.graphical || false;\n                    kernel._imageData = null;\n                    kernel._colorData = null;\n                    kernel.output = output;\n                    kernel.thread = {\n                        x: 0,\n                        y: 0,\n                        z: 0\n                    };\n                    return apiDecorate(kernel);\n                }\n                function flipPixels(pixels, width, height) {\n                    const halfHeight = height / 2 | 0;\n                    const bytesPerRow = width * 4;\n                    const temp = new Uint8ClampedArray(width * 4);\n                    const result = pixels.slice(0);\n                    for(let y = 0; y < halfHeight; ++y){\n                        const topOffset = y * bytesPerRow;\n                        const bottomOffset = (height - y - 1) * bytesPerRow;\n                        temp.set(result.subarray(topOffset, topOffset + bytesPerRow));\n                        result.copyWithin(topOffset, bottomOffset, bottomOffset + bytesPerRow);\n                        result.set(temp, bottomOffset);\n                    }\n                    return result;\n                }\n                module1.exports = {\n                    gpuMock: gpuMock\n                };\n            },\n            {}\n        ],\n        5: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"./utils\");\n                function alias(name1, source) {\n                    const fnString = source.toString();\n                    return new Function(`return function ${name1} (${utils.getArgumentNamesFromString(fnString).join(\", \")}) {\n  ${utils.getFunctionBodyFromString(fnString)}\n}`)();\n                }\n                module1.exports = {\n                    alias: alias\n                };\n            },\n            {\n                \"./utils\": 114\n            }\n        ],\n        6: [\n            function(require1, module1, exports) {\n                const { FunctionNode: FunctionNode  } = require1(\"../function-node\");\n                class CPUFunctionNode extends FunctionNode {\n                    astFunction(ast, retArr) {\n                        if (!this.isRootKernel) {\n                            retArr.push(\"function\");\n                            retArr.push(\" \");\n                            retArr.push(this.name);\n                            retArr.push(\"(\");\n                            for(let i = 0; i < this.argumentNames.length; ++i){\n                                const argumentName = this.argumentNames[i];\n                                if (i > 0) retArr.push(\", \");\n                                retArr.push(\"user_\");\n                                retArr.push(argumentName);\n                            }\n                            retArr.push(\") {\\n\");\n                        }\n                        for(let i = 0; i < ast.body.body.length; ++i){\n                            this.astGeneric(ast.body.body[i], retArr);\n                            retArr.push(\"\\n\");\n                        }\n                        if (!this.isRootKernel) retArr.push(\"}\\n\");\n                        return retArr;\n                    }\n                    astReturnStatement(ast, retArr) {\n                        const type = this.returnType || this.getType(ast.argument);\n                        if (!this.returnType) this.returnType = type;\n                        if (this.isRootKernel) {\n                            retArr.push(this.leadingReturnStatement);\n                            this.astGeneric(ast.argument, retArr);\n                            retArr.push(\";\\n\");\n                            retArr.push(this.followingReturnStatement);\n                            retArr.push(\"continue;\\n\");\n                        } else if (this.isSubKernel) {\n                            retArr.push(`subKernelResult_${this.name} = `);\n                            this.astGeneric(ast.argument, retArr);\n                            retArr.push(\";\");\n                            retArr.push(`return subKernelResult_${this.name};`);\n                        } else {\n                            retArr.push(\"return \");\n                            this.astGeneric(ast.argument, retArr);\n                            retArr.push(\";\");\n                        }\n                        return retArr;\n                    }\n                    astLiteral(ast, retArr) {\n                        if (isNaN(ast.value)) throw this.astErrorOutput(\"Non-numeric literal not supported : \" + ast.value, ast);\n                        retArr.push(ast.value);\n                        return retArr;\n                    }\n                    astBinaryExpression(ast, retArr) {\n                        retArr.push(\"(\");\n                        this.astGeneric(ast.left, retArr);\n                        retArr.push(ast.operator);\n                        this.astGeneric(ast.right, retArr);\n                        retArr.push(\")\");\n                        return retArr;\n                    }\n                    astIdentifierExpression(idtNode, retArr) {\n                        if (idtNode.type !== \"Identifier\") throw this.astErrorOutput(\"IdentifierExpression - not an Identifier\", idtNode);\n                        switch(idtNode.name){\n                            case \"Infinity\":\n                                retArr.push(\"Infinity\");\n                                break;\n                            default:\n                                if (this.constants && this.constants.hasOwnProperty(idtNode.name)) retArr.push(\"constants_\" + idtNode.name);\n                                else retArr.push(\"user_\" + idtNode.name);\n                        }\n                        return retArr;\n                    }\n                    astForStatement(forNode, retArr) {\n                        if (forNode.type !== \"ForStatement\") throw this.astErrorOutput(\"Invalid for statement\", forNode);\n                        const initArr = [];\n                        const testArr = [];\n                        const updateArr = [];\n                        const bodyArr = [];\n                        let isSafe = null;\n                        if (forNode.init) {\n                            this.pushState(\"in-for-loop-init\");\n                            this.astGeneric(forNode.init, initArr);\n                            for(let i = 0; i < initArr.length; i++)if (initArr[i].includes && initArr[i].includes(\",\")) isSafe = false;\n                            this.popState(\"in-for-loop-init\");\n                        } else isSafe = false;\n                        if (forNode.test) this.astGeneric(forNode.test, testArr);\n                        else isSafe = false;\n                        if (forNode.update) this.astGeneric(forNode.update, updateArr);\n                        else isSafe = false;\n                        if (forNode.body) {\n                            this.pushState(\"loop-body\");\n                            this.astGeneric(forNode.body, bodyArr);\n                            this.popState(\"loop-body\");\n                        }\n                        if (isSafe === null) isSafe = this.isSafe(forNode.init) && this.isSafe(forNode.test);\n                        if (isSafe) {\n                            retArr.push(`for (${initArr.join(\"\")};${testArr.join(\"\")};${updateArr.join(\"\")}){\\n`);\n                            retArr.push(bodyArr.join(\"\"));\n                            retArr.push(\"}\\n\");\n                        } else {\n                            const iVariableName = this.getInternalVariableName(\"safeI\");\n                            if (initArr.length > 0) retArr.push(initArr.join(\"\"), \";\\n\");\n                            retArr.push(`for (let ${iVariableName}=0;${iVariableName}<LOOP_MAX;${iVariableName}++){\\n`);\n                            if (testArr.length > 0) retArr.push(`if (!${testArr.join(\"\")}) break;\\n`);\n                            retArr.push(bodyArr.join(\"\"));\n                            retArr.push(`\\n${updateArr.join(\"\")};`);\n                            retArr.push(\"}\\n\");\n                        }\n                        return retArr;\n                    }\n                    astWhileStatement(whileNode, retArr) {\n                        if (whileNode.type !== \"WhileStatement\") throw this.astErrorOutput(\"Invalid while statement\", whileNode);\n                        retArr.push(\"for (let i = 0; i < LOOP_MAX; i++) {\");\n                        retArr.push(\"if (\");\n                        this.astGeneric(whileNode.test, retArr);\n                        retArr.push(\") {\\n\");\n                        this.astGeneric(whileNode.body, retArr);\n                        retArr.push(\"} else {\\n\");\n                        retArr.push(\"break;\\n\");\n                        retArr.push(\"}\\n\");\n                        retArr.push(\"}\\n\");\n                        return retArr;\n                    }\n                    astDoWhileStatement(doWhileNode, retArr) {\n                        if (doWhileNode.type !== \"DoWhileStatement\") throw this.astErrorOutput(\"Invalid while statement\", doWhileNode);\n                        retArr.push(\"for (let i = 0; i < LOOP_MAX; i++) {\");\n                        this.astGeneric(doWhileNode.body, retArr);\n                        retArr.push(\"if (!\");\n                        this.astGeneric(doWhileNode.test, retArr);\n                        retArr.push(\") {\\n\");\n                        retArr.push(\"break;\\n\");\n                        retArr.push(\"}\\n\");\n                        retArr.push(\"}\\n\");\n                        return retArr;\n                    }\n                    astAssignmentExpression(assNode, retArr) {\n                        const declaration = this.getDeclaration(assNode.left);\n                        if (declaration && !declaration.assignable) throw this.astErrorOutput(`Variable ${assNode.left.name} is not assignable here`, assNode);\n                        this.astGeneric(assNode.left, retArr);\n                        retArr.push(assNode.operator);\n                        this.astGeneric(assNode.right, retArr);\n                        return retArr;\n                    }\n                    astBlockStatement(bNode, retArr) {\n                        if (this.isState(\"loop-body\")) {\n                            this.pushState(\"block-body\");\n                            for(let i = 0; i < bNode.body.length; i++)this.astGeneric(bNode.body[i], retArr);\n                            this.popState(\"block-body\");\n                        } else {\n                            retArr.push(\"{\\n\");\n                            for(let i = 0; i < bNode.body.length; i++)this.astGeneric(bNode.body[i], retArr);\n                            retArr.push(\"}\\n\");\n                        }\n                        return retArr;\n                    }\n                    astVariableDeclaration(varDecNode, retArr) {\n                        retArr.push(`${varDecNode.kind} `);\n                        const { declarations: declarations  } = varDecNode;\n                        for(let i = 0; i < declarations.length; i++){\n                            if (i > 0) retArr.push(\",\");\n                            const declaration = declarations[i];\n                            const info = this.getDeclaration(declaration.id);\n                            if (!info.valueType) info.valueType = this.getType(declaration.init);\n                            this.astGeneric(declaration, retArr);\n                        }\n                        if (!this.isState(\"in-for-loop-init\")) retArr.push(\";\");\n                        return retArr;\n                    }\n                    astIfStatement(ifNode, retArr) {\n                        retArr.push(\"if (\");\n                        this.astGeneric(ifNode.test, retArr);\n                        retArr.push(\")\");\n                        if (ifNode.consequent.type === \"BlockStatement\") this.astGeneric(ifNode.consequent, retArr);\n                        else {\n                            retArr.push(\" {\\n\");\n                            this.astGeneric(ifNode.consequent, retArr);\n                            retArr.push(\"\\n}\\n\");\n                        }\n                        if (ifNode.alternate) {\n                            retArr.push(\"else \");\n                            if (ifNode.alternate.type === \"BlockStatement\" || ifNode.alternate.type === \"IfStatement\") this.astGeneric(ifNode.alternate, retArr);\n                            else {\n                                retArr.push(\" {\\n\");\n                                this.astGeneric(ifNode.alternate, retArr);\n                                retArr.push(\"\\n}\\n\");\n                            }\n                        }\n                        return retArr;\n                    }\n                    astSwitchStatement(ast, retArr) {\n                        const { discriminant: discriminant , cases: cases  } = ast;\n                        retArr.push(\"switch (\");\n                        this.astGeneric(discriminant, retArr);\n                        retArr.push(\") {\\n\");\n                        for(let i = 0; i < cases.length; i++){\n                            if (cases[i].test === null) {\n                                retArr.push(\"default:\\n\");\n                                this.astGeneric(cases[i].consequent, retArr);\n                                if (cases[i].consequent && cases[i].consequent.length > 0) retArr.push(\"break;\\n\");\n                                continue;\n                            }\n                            retArr.push(\"case \");\n                            this.astGeneric(cases[i].test, retArr);\n                            retArr.push(\":\\n\");\n                            if (cases[i].consequent && cases[i].consequent.length > 0) {\n                                this.astGeneric(cases[i].consequent, retArr);\n                                retArr.push(\"break;\\n\");\n                            }\n                        }\n                        retArr.push(\"\\n}\");\n                    }\n                    astThisExpression(tNode, retArr) {\n                        retArr.push(\"_this\");\n                        return retArr;\n                    }\n                    astMemberExpression(mNode, retArr) {\n                        const { signature: signature , type: type , property: property , xProperty: xProperty , yProperty: yProperty , zProperty: zProperty , name: name1 , origin: origin  } = this.getMemberExpressionDetails(mNode);\n                        switch(signature){\n                            case \"this.thread.value\":\n                                retArr.push(`_this.thread.${name1}`);\n                                return retArr;\n                            case \"this.output.value\":\n                                switch(name1){\n                                    case \"x\":\n                                        retArr.push(\"outputX\");\n                                        break;\n                                    case \"y\":\n                                        retArr.push(\"outputY\");\n                                        break;\n                                    case \"z\":\n                                        retArr.push(\"outputZ\");\n                                        break;\n                                    default:\n                                        throw this.astErrorOutput(\"Unexpected expression\", mNode);\n                                }\n                                return retArr;\n                            case \"value\":\n                                throw this.astErrorOutput(\"Unexpected expression\", mNode);\n                            case \"value[]\":\n                            case \"value[][]\":\n                            case \"value[][][]\":\n                            case \"value.value\":\n                                if (origin === \"Math\") {\n                                    retArr.push(Math[name1]);\n                                    return retArr;\n                                }\n                                switch(property){\n                                    case \"r\":\n                                        retArr.push(`user_${name1}[0]`);\n                                        return retArr;\n                                    case \"g\":\n                                        retArr.push(`user_${name1}[1]`);\n                                        return retArr;\n                                    case \"b\":\n                                        retArr.push(`user_${name1}[2]`);\n                                        return retArr;\n                                    case \"a\":\n                                        retArr.push(`user_${name1}[3]`);\n                                        return retArr;\n                                }\n                                break;\n                            case \"this.constants.value\":\n                            case \"this.constants.value[]\":\n                            case \"this.constants.value[][]\":\n                            case \"this.constants.value[][][]\":\n                                break;\n                            case \"fn()[]\":\n                                this.astGeneric(mNode.object, retArr);\n                                retArr.push(\"[\");\n                                this.astGeneric(mNode.property, retArr);\n                                retArr.push(\"]\");\n                                return retArr;\n                            case \"fn()[][]\":\n                                this.astGeneric(mNode.object.object, retArr);\n                                retArr.push(\"[\");\n                                this.astGeneric(mNode.object.property, retArr);\n                                retArr.push(\"]\");\n                                retArr.push(\"[\");\n                                this.astGeneric(mNode.property, retArr);\n                                retArr.push(\"]\");\n                                return retArr;\n                            default:\n                                throw this.astErrorOutput(\"Unexpected expression\", mNode);\n                        }\n                        if (!mNode.computed) switch(type){\n                            case \"Number\":\n                            case \"Integer\":\n                            case \"Float\":\n                            case \"Boolean\":\n                                retArr.push(`${origin}_${name1}`);\n                                return retArr;\n                        }\n                        const markupName = `${origin}_${name1}`;\n                        {\n                            type;\n                            let size;\n                            let isInput;\n                            if (origin === \"constants\") {\n                                const constant = this.constants[name1];\n                                isInput = this.constantTypes[name1] === \"Input\";\n                                size = isInput ? constant.size : null;\n                            } else {\n                                isInput = this.isInput(name1);\n                                size = isInput ? this.argumentSizes[this.argumentNames.indexOf(name1)] : null;\n                            }\n                            retArr.push(`${markupName}`);\n                            if (zProperty && yProperty) {\n                                if (isInput) {\n                                    retArr.push(\"[(\");\n                                    this.astGeneric(zProperty, retArr);\n                                    retArr.push(`*${this.dynamicArguments ? \"(outputY * outputX)\" : size[1] * size[0]})+(`);\n                                    this.astGeneric(yProperty, retArr);\n                                    retArr.push(`*${this.dynamicArguments ? \"outputX\" : size[0]})+`);\n                                    this.astGeneric(xProperty, retArr);\n                                    retArr.push(\"]\");\n                                } else {\n                                    retArr.push(\"[\");\n                                    this.astGeneric(zProperty, retArr);\n                                    retArr.push(\"]\");\n                                    retArr.push(\"[\");\n                                    this.astGeneric(yProperty, retArr);\n                                    retArr.push(\"]\");\n                                    retArr.push(\"[\");\n                                    this.astGeneric(xProperty, retArr);\n                                    retArr.push(\"]\");\n                                }\n                            } else if (yProperty) {\n                                if (isInput) {\n                                    retArr.push(\"[(\");\n                                    this.astGeneric(yProperty, retArr);\n                                    retArr.push(`*${this.dynamicArguments ? \"outputX\" : size[0]})+`);\n                                    this.astGeneric(xProperty, retArr);\n                                    retArr.push(\"]\");\n                                } else {\n                                    retArr.push(\"[\");\n                                    this.astGeneric(yProperty, retArr);\n                                    retArr.push(\"]\");\n                                    retArr.push(\"[\");\n                                    this.astGeneric(xProperty, retArr);\n                                    retArr.push(\"]\");\n                                }\n                            } else if (typeof xProperty !== \"undefined\") {\n                                retArr.push(\"[\");\n                                this.astGeneric(xProperty, retArr);\n                                retArr.push(\"]\");\n                            }\n                        }\n                        return retArr;\n                    }\n                    astCallExpression(ast, retArr) {\n                        if (ast.type !== \"CallExpression\") throw this.astErrorOutput(\"Unknown CallExpression\", ast);\n                        let functionName = this.astMemberExpressionUnroll(ast.callee);\n                        if (this.calledFunctions.indexOf(functionName) < 0) this.calledFunctions.push(functionName);\n                        const isMathFunction = this.isAstMathFunction(ast);\n                        if (this.onFunctionCall) this.onFunctionCall(this.name, functionName, ast.arguments);\n                        retArr.push(functionName);\n                        retArr.push(\"(\");\n                        const targetTypes = this.lookupFunctionArgumentTypes(functionName) || [];\n                        for(let i = 0; i < ast.arguments.length; ++i){\n                            const argument = ast.arguments[i];\n                            let argumentType = this.getType(argument);\n                            if (!targetTypes[i]) this.triggerImplyArgumentType(functionName, i, argumentType, this);\n                            if (i > 0) retArr.push(\", \");\n                            this.astGeneric(argument, retArr);\n                        }\n                        retArr.push(\")\");\n                        return retArr;\n                    }\n                    astArrayExpression(arrNode, retArr) {\n                        const returnType = this.getType(arrNode);\n                        const arrLen = arrNode.elements.length;\n                        const elements = [];\n                        for(let i = 0; i < arrLen; ++i){\n                            const element = [];\n                            this.astGeneric(arrNode.elements[i], element);\n                            elements.push(element.join(\"\"));\n                        }\n                        switch(returnType){\n                            case \"Matrix(2)\":\n                            case \"Matrix(3)\":\n                            case \"Matrix(4)\":\n                                retArr.push(`[${elements.join(\", \")}]`);\n                                break;\n                            default:\n                                retArr.push(`new Float32Array([${elements.join(\", \")}])`);\n                        }\n                        return retArr;\n                    }\n                    astDebuggerStatement(arrNode, retArr) {\n                        retArr.push(\"debugger;\");\n                        return retArr;\n                    }\n                }\n                module1.exports = {\n                    CPUFunctionNode: CPUFunctionNode\n                };\n            },\n            {\n                \"../function-node\": 10\n            }\n        ],\n        7: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../utils\");\n                function constantsToString(constants, types) {\n                    const results = [];\n                    for(const name1 in types){\n                        if (!types.hasOwnProperty(name1)) continue;\n                        const type = types[name1];\n                        const constant = constants[name1];\n                        switch(type){\n                            case \"Number\":\n                            case \"Integer\":\n                            case \"Float\":\n                            case \"Boolean\":\n                                results.push(`${name1}:${constant}`);\n                                break;\n                            case \"Array(2)\":\n                            case \"Array(3)\":\n                            case \"Array(4)\":\n                            case \"Matrix(2)\":\n                            case \"Matrix(3)\":\n                            case \"Matrix(4)\":\n                                results.push(`${name1}:new ${constant.constructor.name}(${JSON.stringify(Array.from(constant))})`);\n                                break;\n                        }\n                    }\n                    return `{ ${results.join()} }`;\n                }\n                function cpuKernelString(cpuKernel, name1) {\n                    const header = [];\n                    const thisProperties = [];\n                    const beforeReturn = [];\n                    const useFunctionKeyword = !/^function/.test(cpuKernel.color.toString());\n                    header.push(\"  const { context, canvas, constants: incomingConstants } = settings;\", `  const output = new Int32Array(${JSON.stringify(Array.from(cpuKernel.output))});`, `  const _constantTypes = ${JSON.stringify(cpuKernel.constantTypes)};`, `  const _constants = ${constantsToString(cpuKernel.constants, cpuKernel.constantTypes)};`);\n                    thisProperties.push(\"    constants: _constants,\", \"    context,\", \"    output,\", \"    thread: {x: 0, y: 0, z: 0},\");\n                    if (cpuKernel.graphical) {\n                        header.push(`  const _imageData = context.createImageData(${cpuKernel.output[0]}, ${cpuKernel.output[1]});`);\n                        header.push(`  const _colorData = new Uint8ClampedArray(${cpuKernel.output[0]} * ${cpuKernel.output[1]} * 4);`);\n                        const colorFn = utils.flattenFunctionToString((useFunctionKeyword ? \"function \" : \"\") + cpuKernel.color.toString(), {\n                            thisLookup: (propertyName)=>{\n                                switch(propertyName){\n                                    case \"_colorData\":\n                                        return \"_colorData\";\n                                    case \"_imageData\":\n                                        return \"_imageData\";\n                                    case \"output\":\n                                        return \"output\";\n                                    case \"thread\":\n                                        return \"this.thread\";\n                                }\n                                return JSON.stringify(cpuKernel[propertyName]);\n                            },\n                            findDependency: (object, name1)=>{\n                                return null;\n                            }\n                        });\n                        const getPixelsFn = utils.flattenFunctionToString((useFunctionKeyword ? \"function \" : \"\") + cpuKernel.getPixels.toString(), {\n                            thisLookup: (propertyName)=>{\n                                switch(propertyName){\n                                    case \"_colorData\":\n                                        return \"_colorData\";\n                                    case \"_imageData\":\n                                        return \"_imageData\";\n                                    case \"output\":\n                                        return \"output\";\n                                    case \"thread\":\n                                        return \"this.thread\";\n                                }\n                                return JSON.stringify(cpuKernel[propertyName]);\n                            },\n                            findDependency: ()=>{\n                                return null;\n                            }\n                        });\n                        thisProperties.push(\"    _imageData,\", \"    _colorData,\", `    color: ${colorFn},`);\n                        beforeReturn.push(`  kernel.getPixels = ${getPixelsFn};`);\n                    }\n                    const constantTypes = [];\n                    const constantKeys = Object.keys(cpuKernel.constantTypes);\n                    for(let i = 0; i < constantKeys.length; i++)constantTypes.push(cpuKernel.constantTypes[constantKeys]);\n                    if (cpuKernel.argumentTypes.indexOf(\"HTMLImageArray\") !== -1 || constantTypes.indexOf(\"HTMLImageArray\") !== -1) {\n                        const flattenedImageTo3DArray = utils.flattenFunctionToString((useFunctionKeyword ? \"function \" : \"\") + cpuKernel._imageTo3DArray.toString(), {\n                            doNotDefine: [\n                                \"canvas\"\n                            ],\n                            findDependency: (object, name1)=>{\n                                if (object === \"this\") return (useFunctionKeyword ? \"function \" : \"\") + cpuKernel[name1].toString();\n                                return null;\n                            },\n                            thisLookup: (propertyName)=>{\n                                switch(propertyName){\n                                    case \"canvas\":\n                                        return;\n                                    case \"context\":\n                                        return \"context\";\n                                }\n                            }\n                        });\n                        beforeReturn.push(flattenedImageTo3DArray);\n                        thisProperties.push(`    _mediaTo2DArray,`);\n                        thisProperties.push(`    _imageTo3DArray,`);\n                    } else if (cpuKernel.argumentTypes.indexOf(\"HTMLImage\") !== -1 || constantTypes.indexOf(\"HTMLImage\") !== -1) {\n                        const flattenedImageTo2DArray = utils.flattenFunctionToString((useFunctionKeyword ? \"function \" : \"\") + cpuKernel._mediaTo2DArray.toString(), {\n                            findDependency: (object, name1)=>{\n                                return null;\n                            },\n                            thisLookup: (propertyName)=>{\n                                switch(propertyName){\n                                    case \"canvas\":\n                                        return \"settings.canvas\";\n                                    case \"context\":\n                                        return \"settings.context\";\n                                }\n                                throw new Error(\"unhandled thisLookup\");\n                            }\n                        });\n                        beforeReturn.push(flattenedImageTo2DArray);\n                        thisProperties.push(`    _mediaTo2DArray,`);\n                    }\n                    return `function(settings) {\n${header.join(\"\\n\")}\n  for (const p in _constantTypes) {\n    if (!_constantTypes.hasOwnProperty(p)) continue;\n    const type = _constantTypes[p];\n    switch (type) {\n      case 'Number':\n      case 'Integer':\n      case 'Float':\n      case 'Boolean':\n      case 'Array(2)':\n      case 'Array(3)':\n      case 'Array(4)':\n      case 'Matrix(2)':\n      case 'Matrix(3)':\n      case 'Matrix(4)':\n        if (incomingConstants.hasOwnProperty(p)) {\n          console.warn('constant ' + p + ' of type ' + type + ' cannot be resigned');\n        }\n        continue;\n    }\n    if (!incomingConstants.hasOwnProperty(p)) {\n      throw new Error('constant ' + p + ' not found');\n    }\n    _constants[p] = incomingConstants[p];\n  }\n  const kernel = (function() {\n${cpuKernel._kernelString}\n  })\n    .apply({ ${thisProperties.join(\"\\n\")} });\n  ${beforeReturn.join(\"\\n\")}\n  return kernel;\n}`;\n                }\n                module1.exports = {\n                    cpuKernelString: cpuKernelString\n                };\n            },\n            {\n                \"../../utils\": 114\n            }\n        ],\n        8: [\n            function(require1, module1, exports) {\n                const { Kernel: Kernel  } = require1(\"../kernel\");\n                const { FunctionBuilder: FunctionBuilder  } = require1(\"../function-builder\");\n                const { CPUFunctionNode: CPUFunctionNode  } = require1(\"./function-node\");\n                const { utils: utils  } = require1(\"../../utils\");\n                const { cpuKernelString: cpuKernelString  } = require1(\"./kernel-string\");\n                class CPUKernel extends Kernel {\n                    static getFeatures() {\n                        return this.features;\n                    }\n                    static get features() {\n                        return Object.freeze({\n                            kernelMap: true,\n                            isIntegerDivisionAccurate: true\n                        });\n                    }\n                    static get isSupported() {\n                        return true;\n                    }\n                    static isContextMatch(context) {\n                        return false;\n                    }\n                    static get mode() {\n                        return \"cpu\";\n                    }\n                    static nativeFunctionArguments() {\n                        return null;\n                    }\n                    static nativeFunctionReturnType() {\n                        throw new Error(`Looking up native function return type not supported on ${this.name}`);\n                    }\n                    static combineKernels(combinedKernel) {\n                        return combinedKernel;\n                    }\n                    static getSignature(kernel, argumentTypes) {\n                        return \"cpu\" + (argumentTypes.length > 0 ? \":\" + argumentTypes.join(\",\") : \"\");\n                    }\n                    constructor(source, settings){\n                        super(source, settings);\n                        this.mergeSettings(source.settings || settings);\n                        this._imageData = null;\n                        this._colorData = null;\n                        this._kernelString = null;\n                        this._prependedString = [];\n                        this.thread = {\n                            x: 0,\n                            y: 0,\n                            z: 0\n                        };\n                        this.translatedSources = null;\n                    }\n                    initCanvas() {\n                        if (typeof document !== \"undefined\") return document.createElement(\"canvas\");\n                        else if (typeof OffscreenCanvas !== \"undefined\") return new OffscreenCanvas(0, 0);\n                    }\n                    initContext() {\n                        if (!this.canvas) return null;\n                        return this.canvas.getContext(\"2d\");\n                    }\n                    initPlugins(settings) {\n                        return [];\n                    }\n                    validateSettings(args) {\n                        if (!this.output || this.output.length === 0) {\n                            if (args.length !== 1) throw new Error(\"Auto output only supported for kernels with only one input\");\n                            const argType = utils.getVariableType(args[0], this.strictIntegers);\n                            if (argType === \"Array\") this.output = utils.getDimensions(argType);\n                            else if (argType === \"NumberTexture\" || argType === \"ArrayTexture(4)\") this.output = args[0].output;\n                            else throw new Error(\"Auto output not supported for input type: \" + argType);\n                        }\n                        if (this.graphical) {\n                            if (this.output.length !== 2) throw new Error(\"Output must have 2 dimensions on graphical mode\");\n                        }\n                        this.checkOutput();\n                    }\n                    translateSource() {\n                        this.leadingReturnStatement = this.output.length > 1 ? \"resultX[x] = \" : \"result[x] = \";\n                        if (this.subKernels) {\n                            const followingReturnStatement = [];\n                            for(let i = 0; i < this.subKernels.length; i++){\n                                const { name: name1  } = this.subKernels[i];\n                                followingReturnStatement.push(this.output.length > 1 ? `resultX_${name1}[x] = subKernelResult_${name1};\\n` : `result_${name1}[x] = subKernelResult_${name1};\\n`);\n                            }\n                            this.followingReturnStatement = followingReturnStatement.join(\"\");\n                        }\n                        const functionBuilder = FunctionBuilder.fromKernel(this, CPUFunctionNode);\n                        this.translatedSources = functionBuilder.getPrototypes(\"kernel\");\n                        if (!this.graphical && !this.returnType) this.returnType = functionBuilder.getKernelResultType();\n                    }\n                    build() {\n                        if (this.built) return;\n                        this.setupConstants();\n                        this.setupArguments(arguments);\n                        this.validateSettings(arguments);\n                        this.translateSource();\n                        if (this.graphical) {\n                            const { canvas: canvas , output: output  } = this;\n                            if (!canvas) throw new Error(\"no canvas available for using graphical output\");\n                            const width = output[0];\n                            const height = output[1] || 1;\n                            canvas.width = width;\n                            canvas.height = height;\n                            this._imageData = this.context.createImageData(width, height);\n                            this._colorData = new Uint8ClampedArray(width * height * 4);\n                        }\n                        const kernelString = this.getKernelString();\n                        this.kernelString = kernelString;\n                        if (this.debug) {\n                            console.log(\"Function output:\");\n                            console.log(kernelString);\n                        }\n                        try {\n                            this.run = new Function([], kernelString).bind(this)();\n                        } catch (e) {\n                            console.error(\"An error occurred compiling the javascript: \", e);\n                        }\n                        this.buildSignature(arguments);\n                        this.built = true;\n                    }\n                    color(r, g, b, a) {\n                        if (typeof a === \"undefined\") a = 1;\n                        r = Math.floor(r * 255);\n                        g = Math.floor(g * 255);\n                        b = Math.floor(b * 255);\n                        a = Math.floor(a * 255);\n                        const width = this.output[0];\n                        const height = this.output[1];\n                        const x = this.thread.x;\n                        const y = height - this.thread.y - 1;\n                        const index = x + y * width;\n                        this._colorData[index * 4 + 0] = r;\n                        this._colorData[index * 4 + 1] = g;\n                        this._colorData[index * 4 + 2] = b;\n                        this._colorData[index * 4 + 3] = a;\n                    }\n                    getKernelString() {\n                        if (this._kernelString !== null) return this._kernelString;\n                        let kernelThreadString = null;\n                        let { translatedSources: translatedSources  } = this;\n                        if (translatedSources.length > 1) translatedSources = translatedSources.filter((fn)=>{\n                            if (/^function/.test(fn)) return fn;\n                            kernelThreadString = fn;\n                            return false;\n                        });\n                        else kernelThreadString = translatedSources.shift();\n                        return this._kernelString = `  const LOOP_MAX = ${this._getLoopMaxString()};\n  ${this.injectedNative || \"\"}\n  const _this = this;\n  ${this._resultKernelHeader()}\n  ${this._processConstants()}\n  return (${this.argumentNames.map((argumentName)=>\"user_\" + argumentName).join(\", \")}) => {\n    ${this._prependedString.join(\"\")}\n    ${this._earlyThrows()}\n    ${this._processArguments()}\n    ${this.graphical ? this._graphicalKernelBody(kernelThreadString) : this._resultKernelBody(kernelThreadString)}\n    ${translatedSources.length > 0 ? translatedSources.join(\"\\n\") : \"\"}\n  };`;\n                    }\n                    toString() {\n                        return cpuKernelString(this);\n                    }\n                    _getLoopMaxString() {\n                        return this.loopMaxIterations ? ` ${parseInt(this.loopMaxIterations)};` : \" 1000;\";\n                    }\n                    _processConstants() {\n                        if (!this.constants) return \"\";\n                        const result = [];\n                        for(let p in this.constants){\n                            const type = this.constantTypes[p];\n                            switch(type){\n                                case \"HTMLCanvas\":\n                                case \"OffscreenCanvas\":\n                                case \"HTMLImage\":\n                                case \"ImageBitmap\":\n                                case \"ImageData\":\n                                case \"HTMLVideo\":\n                                    result.push(`    const constants_${p} = this._mediaTo2DArray(this.constants.${p});\\n`);\n                                    break;\n                                case \"HTMLImageArray\":\n                                    result.push(`    const constants_${p} = this._imageTo3DArray(this.constants.${p});\\n`);\n                                    break;\n                                case \"Input\":\n                                    result.push(`    const constants_${p} = this.constants.${p}.value;\\n`);\n                                    break;\n                                default:\n                                    result.push(`    const constants_${p} = this.constants.${p};\\n`);\n                            }\n                        }\n                        return result.join(\"\");\n                    }\n                    _earlyThrows() {\n                        if (this.graphical) return \"\";\n                        if (this.immutable) return \"\";\n                        if (!this.pipeline) return \"\";\n                        const arrayArguments = [];\n                        for(let i = 0; i < this.argumentTypes.length; i++)if (this.argumentTypes[i] === \"Array\") arrayArguments.push(this.argumentNames[i]);\n                        if (arrayArguments.length === 0) return \"\";\n                        const checks = [];\n                        for(let i = 0; i < arrayArguments.length; i++){\n                            const argumentName = arrayArguments[i];\n                            const checkSubKernels = this._mapSubKernels((subKernel)=>`user_${argumentName} === result_${subKernel.name}`).join(\" || \");\n                            checks.push(`user_${argumentName} === result${checkSubKernels ? ` || ${checkSubKernels}` : \"\"}`);\n                        }\n                        return `if (${checks.join(\" || \")}) throw new Error('Source and destination arrays are the same.  Use immutable = true');`;\n                    }\n                    _processArguments() {\n                        const result = [];\n                        for(let i = 0; i < this.argumentTypes.length; i++){\n                            const variableName = `user_${this.argumentNames[i]}`;\n                            switch(this.argumentTypes[i]){\n                                case \"HTMLCanvas\":\n                                case \"OffscreenCanvas\":\n                                case \"HTMLImage\":\n                                case \"ImageBitmap\":\n                                case \"ImageData\":\n                                case \"HTMLVideo\":\n                                    result.push(`    ${variableName} = this._mediaTo2DArray(${variableName});\\n`);\n                                    break;\n                                case \"HTMLImageArray\":\n                                    result.push(`    ${variableName} = this._imageTo3DArray(${variableName});\\n`);\n                                    break;\n                                case \"Input\":\n                                    result.push(`    ${variableName} = ${variableName}.value;\\n`);\n                                    break;\n                                case \"ArrayTexture(1)\":\n                                case \"ArrayTexture(2)\":\n                                case \"ArrayTexture(3)\":\n                                case \"ArrayTexture(4)\":\n                                case \"NumberTexture\":\n                                case \"MemoryOptimizedNumberTexture\":\n                                    result.push(`\n    if (${variableName}.toArray) {\n      if (!_this.textureCache) {\n        _this.textureCache = [];\n        _this.arrayCache = [];\n      }\n      const textureIndex = _this.textureCache.indexOf(${variableName});\n      if (textureIndex !== -1) {\n        ${variableName} = _this.arrayCache[textureIndex];\n      } else {\n        _this.textureCache.push(${variableName});\n        ${variableName} = ${variableName}.toArray();\n        _this.arrayCache.push(${variableName});\n      }\n    }`);\n                                    break;\n                            }\n                        }\n                        return result.join(\"\");\n                    }\n                    _mediaTo2DArray(media) {\n                        const canvas = this.canvas;\n                        const width = media.width > 0 ? media.width : media.videoWidth;\n                        const height = media.height > 0 ? media.height : media.videoHeight;\n                        if (canvas.width < width) canvas.width = width;\n                        if (canvas.height < height) canvas.height = height;\n                        const ctx = this.context;\n                        let pixelsData;\n                        if (media.constructor === ImageData) pixelsData = media.data;\n                        else {\n                            ctx.drawImage(media, 0, 0, width, height);\n                            pixelsData = ctx.getImageData(0, 0, width, height).data;\n                        }\n                        const imageArray = new Array(height);\n                        let index = 0;\n                        for(let y = height - 1; y >= 0; y--){\n                            const row = imageArray[y] = new Array(width);\n                            for(let x = 0; x < width; x++){\n                                const pixel = new Float32Array(4);\n                                pixel[0] = pixelsData[index++] / 255;\n                                pixel[1] = pixelsData[index++] / 255;\n                                pixel[2] = pixelsData[index++] / 255;\n                                pixel[3] = pixelsData[index++] / 255;\n                                row[x] = pixel;\n                            }\n                        }\n                        return imageArray;\n                    }\n                    getPixels(flip) {\n                        const [width, height] = this.output;\n                        return flip ? utils.flipPixels(this._imageData.data, width, height) : this._imageData.data.slice(0);\n                    }\n                    _imageTo3DArray(images) {\n                        const imagesArray = new Array(images.length);\n                        for(let i = 0; i < images.length; i++)imagesArray[i] = this._mediaTo2DArray(images[i]);\n                        return imagesArray;\n                    }\n                    _resultKernelHeader() {\n                        if (this.graphical) return \"\";\n                        if (this.immutable) return \"\";\n                        if (!this.pipeline) return \"\";\n                        switch(this.output.length){\n                            case 1:\n                                return this._mutableKernel1DResults();\n                            case 2:\n                                return this._mutableKernel2DResults();\n                            case 3:\n                                return this._mutableKernel3DResults();\n                        }\n                    }\n                    _resultKernelBody(kernelString) {\n                        switch(this.output.length){\n                            case 1:\n                                return (!this.immutable && this.pipeline ? this._resultMutableKernel1DLoop(kernelString) : this._resultImmutableKernel1DLoop(kernelString)) + this._kernelOutput();\n                            case 2:\n                                return (!this.immutable && this.pipeline ? this._resultMutableKernel2DLoop(kernelString) : this._resultImmutableKernel2DLoop(kernelString)) + this._kernelOutput();\n                            case 3:\n                                return (!this.immutable && this.pipeline ? this._resultMutableKernel3DLoop(kernelString) : this._resultImmutableKernel3DLoop(kernelString)) + this._kernelOutput();\n                            default:\n                                throw new Error(\"unsupported size kernel\");\n                        }\n                    }\n                    _graphicalKernelBody(kernelThreadString) {\n                        switch(this.output.length){\n                            case 2:\n                                return this._graphicalKernel2DLoop(kernelThreadString) + this._graphicalOutput();\n                            default:\n                                throw new Error(\"unsupported size kernel\");\n                        }\n                    }\n                    _graphicalOutput() {\n                        return `\n    this._imageData.data.set(this._colorData);\n    this.context.putImageData(this._imageData, 0, 0);\n    return;`;\n                    }\n                    _getKernelResultTypeConstructorString() {\n                        switch(this.returnType){\n                            case \"LiteralInteger\":\n                            case \"Number\":\n                            case \"Integer\":\n                            case \"Float\":\n                                return \"Float32Array\";\n                            case \"Array(2)\":\n                            case \"Array(3)\":\n                            case \"Array(4)\":\n                                return \"Array\";\n                            default:\n                                if (this.graphical) return \"Float32Array\";\n                                throw new Error(`unhandled returnType ${this.returnType}`);\n                        }\n                    }\n                    _resultImmutableKernel1DLoop(kernelString) {\n                        const constructorString = this._getKernelResultTypeConstructorString();\n                        return `  const outputX = _this.output[0];\n    const result = new ${constructorString}(outputX);\n    ${this._mapSubKernels((subKernel)=>`const result_${subKernel.name} = new ${constructorString}(outputX);\\n`).join(\"    \")}\n    ${this._mapSubKernels((subKernel)=>`let subKernelResult_${subKernel.name};\\n`).join(\"    \")}\n    for (let x = 0; x < outputX; x++) {\n      this.thread.x = x;\n      this.thread.y = 0;\n      this.thread.z = 0;\n      ${kernelString}\n    }`;\n                    }\n                    _mutableKernel1DResults() {\n                        const constructorString = this._getKernelResultTypeConstructorString();\n                        return `  const outputX = _this.output[0];\n    const result = new ${constructorString}(outputX);\n    ${this._mapSubKernels((subKernel)=>`const result_${subKernel.name} = new ${constructorString}(outputX);\\n`).join(\"    \")}\n    ${this._mapSubKernels((subKernel)=>`let subKernelResult_${subKernel.name};\\n`).join(\"    \")}`;\n                    }\n                    _resultMutableKernel1DLoop(kernelString) {\n                        return `  const outputX = _this.output[0];\n    for (let x = 0; x < outputX; x++) {\n      this.thread.x = x;\n      this.thread.y = 0;\n      this.thread.z = 0;\n      ${kernelString}\n    }`;\n                    }\n                    _resultImmutableKernel2DLoop(kernelString) {\n                        const constructorString = this._getKernelResultTypeConstructorString();\n                        return `  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    const result = new Array(outputY);\n    ${this._mapSubKernels((subKernel)=>`const result_${subKernel.name} = new Array(outputY);\\n`).join(\"    \")}\n    ${this._mapSubKernels((subKernel)=>`let subKernelResult_${subKernel.name};\\n`).join(\"    \")}\n    for (let y = 0; y < outputY; y++) {\n      this.thread.z = 0;\n      this.thread.y = y;\n      const resultX = result[y] = new ${constructorString}(outputX);\n      ${this._mapSubKernels((subKernel)=>`const resultX_${subKernel.name} = result_${subKernel.name}[y] = new ${constructorString}(outputX);\\n`).join(\"\")}\n      for (let x = 0; x < outputX; x++) {\n        this.thread.x = x;\n        ${kernelString}\n      }\n    }`;\n                    }\n                    _mutableKernel2DResults() {\n                        const constructorString = this._getKernelResultTypeConstructorString();\n                        return `  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    const result = new Array(outputY);\n    ${this._mapSubKernels((subKernel)=>`const result_${subKernel.name} = new Array(outputY);\\n`).join(\"    \")}\n    ${this._mapSubKernels((subKernel)=>`let subKernelResult_${subKernel.name};\\n`).join(\"    \")}\n    for (let y = 0; y < outputY; y++) {\n      const resultX = result[y] = new ${constructorString}(outputX);\n      ${this._mapSubKernels((subKernel)=>`const resultX_${subKernel.name} = result_${subKernel.name}[y] = new ${constructorString}(outputX);\\n`).join(\"\")}\n    }`;\n                    }\n                    _resultMutableKernel2DLoop(kernelString) {\n                        const constructorString = this._getKernelResultTypeConstructorString();\n                        return `  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    for (let y = 0; y < outputY; y++) {\n      this.thread.z = 0;\n      this.thread.y = y;\n      const resultX = result[y];\n      ${this._mapSubKernels((subKernel)=>`const resultX_${subKernel.name} = result_${subKernel.name}[y] = new ${constructorString}(outputX);\\n`).join(\"\")}\n      for (let x = 0; x < outputX; x++) {\n        this.thread.x = x;\n        ${kernelString}\n      }\n    }`;\n                    }\n                    _graphicalKernel2DLoop(kernelString) {\n                        return `  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    for (let y = 0; y < outputY; y++) {\n      this.thread.z = 0;\n      this.thread.y = y;\n      for (let x = 0; x < outputX; x++) {\n        this.thread.x = x;\n        ${kernelString}\n      }\n    }`;\n                    }\n                    _resultImmutableKernel3DLoop(kernelString) {\n                        const constructorString = this._getKernelResultTypeConstructorString();\n                        return `  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    const outputZ = _this.output[2];\n    const result = new Array(outputZ);\n    ${this._mapSubKernels((subKernel)=>`const result_${subKernel.name} = new Array(outputZ);\\n`).join(\"    \")}\n    ${this._mapSubKernels((subKernel)=>`let subKernelResult_${subKernel.name};\\n`).join(\"    \")}\n    for (let z = 0; z < outputZ; z++) {\n      this.thread.z = z;\n      const resultY = result[z] = new Array(outputY);\n      ${this._mapSubKernels((subKernel)=>`const resultY_${subKernel.name} = result_${subKernel.name}[z] = new Array(outputY);\\n`).join(\"      \")}\n      for (let y = 0; y < outputY; y++) {\n        this.thread.y = y;\n        const resultX = resultY[y] = new ${constructorString}(outputX);\n        ${this._mapSubKernels((subKernel)=>`const resultX_${subKernel.name} = resultY_${subKernel.name}[y] = new ${constructorString}(outputX);\\n`).join(\"        \")}\n        for (let x = 0; x < outputX; x++) {\n          this.thread.x = x;\n          ${kernelString}\n        }\n      }\n    }`;\n                    }\n                    _mutableKernel3DResults() {\n                        const constructorString = this._getKernelResultTypeConstructorString();\n                        return `  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    const outputZ = _this.output[2];\n    const result = new Array(outputZ);\n    ${this._mapSubKernels((subKernel)=>`const result_${subKernel.name} = new Array(outputZ);\\n`).join(\"    \")}\n    ${this._mapSubKernels((subKernel)=>`let subKernelResult_${subKernel.name};\\n`).join(\"    \")}\n    for (let z = 0; z < outputZ; z++) {\n      const resultY = result[z] = new Array(outputY);\n      ${this._mapSubKernels((subKernel)=>`const resultY_${subKernel.name} = result_${subKernel.name}[z] = new Array(outputY);\\n`).join(\"      \")}\n      for (let y = 0; y < outputY; y++) {\n        const resultX = resultY[y] = new ${constructorString}(outputX);\n        ${this._mapSubKernels((subKernel)=>`const resultX_${subKernel.name} = resultY_${subKernel.name}[y] = new ${constructorString}(outputX);\\n`).join(\"        \")}\n      }\n    }`;\n                    }\n                    _resultMutableKernel3DLoop(kernelString) {\n                        return `  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    const outputZ = _this.output[2];\n    for (let z = 0; z < outputZ; z++) {\n      this.thread.z = z;\n      const resultY = result[z];\n      for (let y = 0; y < outputY; y++) {\n        this.thread.y = y;\n        const resultX = resultY[y];\n        for (let x = 0; x < outputX; x++) {\n          this.thread.x = x;\n          ${kernelString}\n        }\n      }\n    }`;\n                    }\n                    _kernelOutput() {\n                        if (!this.subKernels) return \"\\n    return result;\";\n                        return `\\n    return {\n      result: result,\n      ${this.subKernels.map((subKernel)=>`${subKernel.property}: result_${subKernel.name}`).join(\",\\n      \")}\n    };`;\n                    }\n                    _mapSubKernels(fn) {\n                        return this.subKernels === null ? [\n                            \"\"\n                        ] : this.subKernels.map(fn);\n                    }\n                    destroy(removeCanvasReference) {\n                        if (removeCanvasReference) delete this.canvas;\n                    }\n                    static destroyContext(context) {}\n                    toJSON() {\n                        const json = super.toJSON();\n                        json.functionNodes = FunctionBuilder.fromKernel(this, CPUFunctionNode).toJSON();\n                        return json;\n                    }\n                    setOutput(output) {\n                        super.setOutput(output);\n                        const [width, height] = this.output;\n                        if (this.graphical) {\n                            this._imageData = this.context.createImageData(width, height);\n                            this._colorData = new Uint8ClampedArray(width * height * 4);\n                        }\n                    }\n                    prependString(value1) {\n                        if (this._kernelString) throw new Error(\"Kernel already built\");\n                        this._prependedString.push(value1);\n                    }\n                    hasPrependString(value1) {\n                        return this._prependedString.indexOf(value1) > -1;\n                    }\n                }\n                module1.exports = {\n                    CPUKernel: CPUKernel\n                };\n            },\n            {\n                \"../../utils\": 114,\n                \"../function-builder\": 9,\n                \"../kernel\": 36,\n                \"./function-node\": 6,\n                \"./kernel-string\": 7\n            }\n        ],\n        9: [\n            function(require1, module1, exports) {\n                class FunctionBuilder {\n                    static fromKernel(kernel, FunctionNode, extraNodeOptions) {\n                        const { kernelArguments: kernelArguments , kernelConstants: kernelConstants , argumentNames: argumentNames , argumentSizes: argumentSizes , argumentBitRatios: argumentBitRatios , constants: constants , constantBitRatios: constantBitRatios , debug: debug , loopMaxIterations: loopMaxIterations , nativeFunctions: nativeFunctions , output: output , optimizeFloatMemory: optimizeFloatMemory , precision: precision , plugins: plugins , source: source , subKernels: subKernels , functions: functions , leadingReturnStatement: leadingReturnStatement , followingReturnStatement: followingReturnStatement , dynamicArguments: dynamicArguments , dynamicOutput: dynamicOutput  } = kernel;\n                        const argumentTypes = new Array(kernelArguments.length);\n                        const constantTypes = {};\n                        for(let i = 0; i < kernelArguments.length; i++)argumentTypes[i] = kernelArguments[i].type;\n                        for(let i = 0; i < kernelConstants.length; i++){\n                            const kernelConstant = kernelConstants[i];\n                            constantTypes[kernelConstant.name] = kernelConstant.type;\n                        }\n                        const needsArgumentType = (functionName, index)=>{\n                            return functionBuilder.needsArgumentType(functionName, index);\n                        };\n                        const assignArgumentType = (functionName, index, type)=>{\n                            functionBuilder.assignArgumentType(functionName, index, type);\n                        };\n                        const lookupReturnType = (functionName, ast, requestingNode)=>{\n                            return functionBuilder.lookupReturnType(functionName, ast, requestingNode);\n                        };\n                        const lookupFunctionArgumentTypes = (functionName)=>{\n                            return functionBuilder.lookupFunctionArgumentTypes(functionName);\n                        };\n                        const lookupFunctionArgumentName = (functionName, argumentIndex)=>{\n                            return functionBuilder.lookupFunctionArgumentName(functionName, argumentIndex);\n                        };\n                        const lookupFunctionArgumentBitRatio = (functionName, argumentName)=>{\n                            return functionBuilder.lookupFunctionArgumentBitRatio(functionName, argumentName);\n                        };\n                        const triggerImplyArgumentType = (functionName, i, argumentType, requestingNode)=>{\n                            functionBuilder.assignArgumentType(functionName, i, argumentType, requestingNode);\n                        };\n                        const triggerImplyArgumentBitRatio = (functionName, argumentName, calleeFunctionName, argumentIndex)=>{\n                            functionBuilder.assignArgumentBitRatio(functionName, argumentName, calleeFunctionName, argumentIndex);\n                        };\n                        const onFunctionCall = (functionName, calleeFunctionName, args)=>{\n                            functionBuilder.trackFunctionCall(functionName, calleeFunctionName, args);\n                        };\n                        const onNestedFunction = (ast, source)=>{\n                            const argumentNames = [];\n                            for(let i = 0; i < ast.params.length; i++)argumentNames.push(ast.params[i].name);\n                            const nestedFunction = new FunctionNode(source, Object.assign({}, nodeOptions, {\n                                returnType: null,\n                                ast: ast,\n                                name: ast.id.name,\n                                argumentNames: argumentNames,\n                                lookupReturnType: lookupReturnType,\n                                lookupFunctionArgumentTypes: lookupFunctionArgumentTypes,\n                                lookupFunctionArgumentName: lookupFunctionArgumentName,\n                                lookupFunctionArgumentBitRatio: lookupFunctionArgumentBitRatio,\n                                needsArgumentType: needsArgumentType,\n                                assignArgumentType: assignArgumentType,\n                                triggerImplyArgumentType: triggerImplyArgumentType,\n                                triggerImplyArgumentBitRatio: triggerImplyArgumentBitRatio,\n                                onFunctionCall: onFunctionCall\n                            }));\n                            nestedFunction.traceFunctionAST(ast);\n                            functionBuilder.addFunctionNode(nestedFunction);\n                        };\n                        const nodeOptions = Object.assign({\n                            isRootKernel: false,\n                            onNestedFunction: onNestedFunction,\n                            lookupReturnType: lookupReturnType,\n                            lookupFunctionArgumentTypes: lookupFunctionArgumentTypes,\n                            lookupFunctionArgumentName: lookupFunctionArgumentName,\n                            lookupFunctionArgumentBitRatio: lookupFunctionArgumentBitRatio,\n                            needsArgumentType: needsArgumentType,\n                            assignArgumentType: assignArgumentType,\n                            triggerImplyArgumentType: triggerImplyArgumentType,\n                            triggerImplyArgumentBitRatio: triggerImplyArgumentBitRatio,\n                            onFunctionCall: onFunctionCall,\n                            optimizeFloatMemory: optimizeFloatMemory,\n                            precision: precision,\n                            constants: constants,\n                            constantTypes: constantTypes,\n                            constantBitRatios: constantBitRatios,\n                            debug: debug,\n                            loopMaxIterations: loopMaxIterations,\n                            output: output,\n                            plugins: plugins,\n                            dynamicArguments: dynamicArguments,\n                            dynamicOutput: dynamicOutput\n                        }, extraNodeOptions || {});\n                        const rootNodeOptions = Object.assign({}, nodeOptions, {\n                            isRootKernel: true,\n                            name: \"kernel\",\n                            argumentNames: argumentNames,\n                            argumentTypes: argumentTypes,\n                            argumentSizes: argumentSizes,\n                            argumentBitRatios: argumentBitRatios,\n                            leadingReturnStatement: leadingReturnStatement,\n                            followingReturnStatement: followingReturnStatement\n                        });\n                        if (typeof source === \"object\" && source.functionNodes) return new FunctionBuilder().fromJSON(source.functionNodes, FunctionNode);\n                        const rootNode = new FunctionNode(source, rootNodeOptions);\n                        let functionNodes = null;\n                        if (functions) functionNodes = functions.map((fn)=>new FunctionNode(fn.source, {\n                                returnType: fn.returnType,\n                                argumentTypes: fn.argumentTypes,\n                                output: output,\n                                plugins: plugins,\n                                constants: constants,\n                                constantTypes: constantTypes,\n                                constantBitRatios: constantBitRatios,\n                                optimizeFloatMemory: optimizeFloatMemory,\n                                precision: precision,\n                                lookupReturnType: lookupReturnType,\n                                lookupFunctionArgumentTypes: lookupFunctionArgumentTypes,\n                                lookupFunctionArgumentName: lookupFunctionArgumentName,\n                                lookupFunctionArgumentBitRatio: lookupFunctionArgumentBitRatio,\n                                needsArgumentType: needsArgumentType,\n                                assignArgumentType: assignArgumentType,\n                                triggerImplyArgumentType: triggerImplyArgumentType,\n                                triggerImplyArgumentBitRatio: triggerImplyArgumentBitRatio,\n                                onFunctionCall: onFunctionCall,\n                                onNestedFunction: onNestedFunction\n                            }));\n                        let subKernelNodes = null;\n                        if (subKernels) subKernelNodes = subKernels.map((subKernel)=>{\n                            const { name: name1 , source: source  } = subKernel;\n                            return new FunctionNode(source, Object.assign({}, nodeOptions, {\n                                name: name1,\n                                isSubKernel: true,\n                                isRootKernel: false\n                            }));\n                        });\n                        const functionBuilder = new FunctionBuilder({\n                            kernel: kernel,\n                            rootNode: rootNode,\n                            functionNodes: functionNodes,\n                            nativeFunctions: nativeFunctions,\n                            subKernelNodes: subKernelNodes\n                        });\n                        return functionBuilder;\n                    }\n                    constructor(settings){\n                        settings = settings || {};\n                        this.kernel = settings.kernel;\n                        this.rootNode = settings.rootNode;\n                        this.functionNodes = settings.functionNodes || [];\n                        this.subKernelNodes = settings.subKernelNodes || [];\n                        this.nativeFunctions = settings.nativeFunctions || [];\n                        this.functionMap = {};\n                        this.nativeFunctionNames = [];\n                        this.lookupChain = [];\n                        this.functionNodeDependencies = {};\n                        this.functionCalls = {};\n                        if (this.rootNode) this.functionMap[\"kernel\"] = this.rootNode;\n                        if (this.functionNodes) for(let i = 0; i < this.functionNodes.length; i++)this.functionMap[this.functionNodes[i].name] = this.functionNodes[i];\n                        if (this.subKernelNodes) for(let i = 0; i < this.subKernelNodes.length; i++)this.functionMap[this.subKernelNodes[i].name] = this.subKernelNodes[i];\n                        if (this.nativeFunctions) for(let i = 0; i < this.nativeFunctions.length; i++){\n                            const nativeFunction = this.nativeFunctions[i];\n                            this.nativeFunctionNames.push(nativeFunction.name);\n                        }\n                    }\n                    addFunctionNode(functionNode) {\n                        if (!functionNode.name) throw new Error(\"functionNode.name needs set\");\n                        this.functionMap[functionNode.name] = functionNode;\n                        if (functionNode.isRootKernel) this.rootNode = functionNode;\n                    }\n                    traceFunctionCalls(functionName, retList) {\n                        functionName = functionName || \"kernel\";\n                        retList = retList || [];\n                        if (this.nativeFunctionNames.indexOf(functionName) > -1) {\n                            const nativeFunctionIndex = retList.indexOf(functionName);\n                            if (nativeFunctionIndex === -1) retList.push(functionName);\n                            else {\n                                const dependantNativeFunctionName = retList.splice(nativeFunctionIndex, 1)[0];\n                                retList.push(dependantNativeFunctionName);\n                            }\n                            return retList;\n                        }\n                        const functionNode = this.functionMap[functionName];\n                        if (functionNode) {\n                            const functionIndex = retList.indexOf(functionName);\n                            if (functionIndex === -1) {\n                                retList.push(functionName);\n                                functionNode.toString();\n                                for(let i = 0; i < functionNode.calledFunctions.length; ++i)this.traceFunctionCalls(functionNode.calledFunctions[i], retList);\n                            } else {\n                                const dependantFunctionName = retList.splice(functionIndex, 1)[0];\n                                retList.push(dependantFunctionName);\n                            }\n                        }\n                        return retList;\n                    }\n                    getPrototypeString(functionName) {\n                        return this.getPrototypes(functionName).join(\"\\n\");\n                    }\n                    getPrototypes(functionName) {\n                        if (this.rootNode) this.rootNode.toString();\n                        if (functionName) return this.getPrototypesFromFunctionNames(this.traceFunctionCalls(functionName, []).reverse());\n                        return this.getPrototypesFromFunctionNames(Object.keys(this.functionMap));\n                    }\n                    getStringFromFunctionNames(functionList) {\n                        const ret = [];\n                        for(let i = 0; i < functionList.length; ++i){\n                            const node = this.functionMap[functionList[i]];\n                            if (node) ret.push(this.functionMap[functionList[i]].toString());\n                        }\n                        return ret.join(\"\\n\");\n                    }\n                    getPrototypesFromFunctionNames(functionList) {\n                        const ret = [];\n                        for(let i = 0; i < functionList.length; ++i){\n                            const functionName = functionList[i];\n                            const functionIndex = this.nativeFunctionNames.indexOf(functionName);\n                            if (functionIndex > -1) {\n                                ret.push(this.nativeFunctions[functionIndex].source);\n                                continue;\n                            }\n                            const node = this.functionMap[functionName];\n                            if (node) ret.push(node.toString());\n                        }\n                        return ret;\n                    }\n                    toJSON() {\n                        return this.traceFunctionCalls(this.rootNode.name).reverse().map((name1)=>{\n                            const nativeIndex = this.nativeFunctions.indexOf(name1);\n                            if (nativeIndex > -1) return {\n                                name: name1,\n                                source: this.nativeFunctions[nativeIndex].source\n                            };\n                            else if (this.functionMap[name1]) return this.functionMap[name1].toJSON();\n                            else throw new Error(`function ${name1} not found`);\n                        });\n                    }\n                    fromJSON(jsonFunctionNodes, FunctionNode) {\n                        this.functionMap = {};\n                        for(let i = 0; i < jsonFunctionNodes.length; i++){\n                            const jsonFunctionNode = jsonFunctionNodes[i];\n                            this.functionMap[jsonFunctionNode.settings.name] = new FunctionNode(jsonFunctionNode.ast, jsonFunctionNode.settings);\n                        }\n                        return this;\n                    }\n                    getString(functionName) {\n                        if (functionName) return this.getStringFromFunctionNames(this.traceFunctionCalls(functionName).reverse());\n                        return this.getStringFromFunctionNames(Object.keys(this.functionMap));\n                    }\n                    lookupReturnType(functionName, ast, requestingNode) {\n                        if (ast.type !== \"CallExpression\") throw new Error(`expected ast type of \"CallExpression\", but is ${ast.type}`);\n                        if (this._isNativeFunction(functionName)) return this._lookupNativeFunctionReturnType(functionName);\n                        else if (this._isFunction(functionName)) {\n                            const node = this._getFunction(functionName);\n                            if (node.returnType) return node.returnType;\n                            else {\n                                for(let i = 0; i < this.lookupChain.length; i++)if (this.lookupChain[i].ast === ast) {\n                                    if (node.argumentTypes.length === 0 && ast.arguments.length > 0) {\n                                        const args = ast.arguments;\n                                        for(let j = 0; j < args.length; j++){\n                                            this.lookupChain.push({\n                                                name: requestingNode.name,\n                                                ast: args[i],\n                                                requestingNode: requestingNode\n                                            });\n                                            node.argumentTypes[j] = requestingNode.getType(args[j]);\n                                            this.lookupChain.pop();\n                                        }\n                                        return node.returnType = node.getType(node.getJsAST());\n                                    }\n                                    throw new Error(\"circlical logic detected!\");\n                                }\n                                this.lookupChain.push({\n                                    name: requestingNode.name,\n                                    ast: ast,\n                                    requestingNode: requestingNode\n                                });\n                                const type = node.getType(node.getJsAST());\n                                this.lookupChain.pop();\n                                return node.returnType = type;\n                            }\n                        }\n                        return null;\n                    }\n                    _getFunction(functionName) {\n                        if (!this._isFunction(functionName)) new Error(`Function ${functionName} not found`);\n                        return this.functionMap[functionName];\n                    }\n                    _isFunction(functionName) {\n                        return Boolean(this.functionMap[functionName]);\n                    }\n                    _getNativeFunction(functionName) {\n                        for(let i = 0; i < this.nativeFunctions.length; i++){\n                            if (this.nativeFunctions[i].name === functionName) return this.nativeFunctions[i];\n                        }\n                        return null;\n                    }\n                    _isNativeFunction(functionName) {\n                        return Boolean(this._getNativeFunction(functionName));\n                    }\n                    _lookupNativeFunctionReturnType(functionName) {\n                        let nativeFunction = this._getNativeFunction(functionName);\n                        if (nativeFunction) return nativeFunction.returnType;\n                        throw new Error(`Native function ${functionName} not found`);\n                    }\n                    lookupFunctionArgumentTypes(functionName) {\n                        if (this._isNativeFunction(functionName)) return this._getNativeFunction(functionName).argumentTypes;\n                        else if (this._isFunction(functionName)) return this._getFunction(functionName).argumentTypes;\n                        return null;\n                    }\n                    lookupFunctionArgumentName(functionName, argumentIndex) {\n                        return this._getFunction(functionName).argumentNames[argumentIndex];\n                    }\n                    lookupFunctionArgumentBitRatio(functionName, argumentName) {\n                        if (!this._isFunction(functionName)) throw new Error(\"function not found\");\n                        if (this.rootNode.name === functionName) {\n                            const i = this.rootNode.argumentNames.indexOf(argumentName);\n                            if (i !== -1) return this.rootNode.argumentBitRatios[i];\n                        }\n                        const node = this._getFunction(functionName);\n                        const i = node.argumentNames.indexOf(argumentName);\n                        if (i === -1) throw new Error(\"argument not found\");\n                        const bitRatio = node.argumentBitRatios[i];\n                        if (typeof bitRatio !== \"number\") throw new Error(\"argument bit ratio not found\");\n                        return bitRatio;\n                    }\n                    needsArgumentType(functionName, i) {\n                        if (!this._isFunction(functionName)) return false;\n                        const fnNode = this._getFunction(functionName);\n                        return !fnNode.argumentTypes[i];\n                    }\n                    assignArgumentType(functionName, i, argumentType, requestingNode) {\n                        if (!this._isFunction(functionName)) return;\n                        const fnNode = this._getFunction(functionName);\n                        if (!fnNode.argumentTypes[i]) fnNode.argumentTypes[i] = argumentType;\n                    }\n                    assignArgumentBitRatio(functionName, argumentName, calleeFunctionName, argumentIndex) {\n                        const node = this._getFunction(functionName);\n                        if (this._isNativeFunction(calleeFunctionName)) return null;\n                        const calleeNode = this._getFunction(calleeFunctionName);\n                        const i = node.argumentNames.indexOf(argumentName);\n                        if (i === -1) throw new Error(`Argument ${argumentName} not found in arguments from function ${functionName}`);\n                        const bitRatio = node.argumentBitRatios[i];\n                        if (typeof bitRatio !== \"number\") throw new Error(`Bit ratio for argument ${argumentName} not found in function ${functionName}`);\n                        if (!calleeNode.argumentBitRatios) calleeNode.argumentBitRatios = new Array(calleeNode.argumentNames.length);\n                        const calleeBitRatio = calleeNode.argumentBitRatios[i];\n                        if (typeof calleeBitRatio === \"number\") {\n                            if (calleeBitRatio !== bitRatio) throw new Error(`Incompatible bit ratio found at function ${functionName} at argument ${argumentName}`);\n                            return calleeBitRatio;\n                        }\n                        calleeNode.argumentBitRatios[i] = bitRatio;\n                        return bitRatio;\n                    }\n                    trackFunctionCall(functionName, calleeFunctionName, args) {\n                        if (!this.functionNodeDependencies[functionName]) {\n                            this.functionNodeDependencies[functionName] = new Set();\n                            this.functionCalls[functionName] = [];\n                        }\n                        this.functionNodeDependencies[functionName].add(calleeFunctionName);\n                        this.functionCalls[functionName].push(args);\n                    }\n                    getKernelResultType() {\n                        return this.rootNode.returnType || this.rootNode.getType(this.rootNode.ast);\n                    }\n                    getSubKernelResultType(index) {\n                        const subKernelNode = this.subKernelNodes[index];\n                        let called = false;\n                        for(let functionCallIndex = 0; functionCallIndex < this.rootNode.functionCalls.length; functionCallIndex++){\n                            const functionCall = this.rootNode.functionCalls[functionCallIndex];\n                            if (functionCall.ast.callee.name === subKernelNode.name) called = true;\n                        }\n                        if (!called) throw new Error(`SubKernel ${subKernelNode.name} never called by kernel`);\n                        return subKernelNode.returnType || subKernelNode.getType(subKernelNode.getJsAST());\n                    }\n                    getReturnTypes() {\n                        const result = {\n                            [this.rootNode.name]: this.rootNode.getType(this.rootNode.ast)\n                        };\n                        const list = this.traceFunctionCalls(this.rootNode.name);\n                        for(let i = 0; i < list.length; i++){\n                            const functionName = list[i];\n                            const functionNode = this.functionMap[functionName];\n                            result[functionName] = functionNode.getType(functionNode.ast);\n                        }\n                        return result;\n                    }\n                }\n                module1.exports = {\n                    FunctionBuilder: FunctionBuilder\n                };\n            },\n            {}\n        ],\n        10: [\n            function(require1, module1, exports) {\n                const acorn = require1(\"acorn\");\n                const { utils: utils  } = require1(\"../utils\");\n                const { FunctionTracer: FunctionTracer  } = require1(\"./function-tracer\");\n                class FunctionNode {\n                    constructor(source, settings){\n                        if (!source && !settings.ast) throw new Error(\"source parameter is missing\");\n                        settings = settings || {};\n                        this.source = source;\n                        this.ast = null;\n                        this.name = typeof source === \"string\" ? settings.isRootKernel ? \"kernel\" : settings.name || utils.getFunctionNameFromString(source) : null;\n                        this.calledFunctions = [];\n                        this.constants = {};\n                        this.constantTypes = {};\n                        this.constantBitRatios = {};\n                        this.isRootKernel = false;\n                        this.isSubKernel = false;\n                        this.debug = null;\n                        this.functions = null;\n                        this.identifiers = null;\n                        this.contexts = null;\n                        this.functionCalls = null;\n                        this.states = [];\n                        this.needsArgumentType = null;\n                        this.assignArgumentType = null;\n                        this.lookupReturnType = null;\n                        this.lookupFunctionArgumentTypes = null;\n                        this.lookupFunctionArgumentBitRatio = null;\n                        this.triggerImplyArgumentType = null;\n                        this.triggerImplyArgumentBitRatio = null;\n                        this.onNestedFunction = null;\n                        this.onFunctionCall = null;\n                        this.optimizeFloatMemory = null;\n                        this.precision = null;\n                        this.loopMaxIterations = null;\n                        this.argumentNames = typeof this.source === \"string\" ? utils.getArgumentNamesFromString(this.source) : null;\n                        this.argumentTypes = [];\n                        this.argumentSizes = [];\n                        this.argumentBitRatios = null;\n                        this.returnType = null;\n                        this.output = [];\n                        this.plugins = null;\n                        this.leadingReturnStatement = null;\n                        this.followingReturnStatement = null;\n                        this.dynamicOutput = null;\n                        this.dynamicArguments = null;\n                        this.strictTypingChecking = false;\n                        this.fixIntegerDivisionAccuracy = null;\n                        if (settings) for(const p in settings){\n                            if (!settings.hasOwnProperty(p)) continue;\n                            if (!this.hasOwnProperty(p)) continue;\n                            this[p] = settings[p];\n                        }\n                        this.literalTypes = {};\n                        this.validate();\n                        this._string = null;\n                        this._internalVariableNames = {};\n                    }\n                    validate() {\n                        if (typeof this.source !== \"string\" && !this.ast) throw new Error(\"this.source not a string\");\n                        if (!this.ast && !utils.isFunctionString(this.source)) throw new Error(\"this.source not a function string\");\n                        if (!this.name) throw new Error(\"this.name could not be set\");\n                        if (this.argumentTypes.length > 0 && this.argumentTypes.length !== this.argumentNames.length) throw new Error(`argumentTypes count of ${this.argumentTypes.length} exceeds ${this.argumentNames.length}`);\n                        if (this.output.length < 1) throw new Error(\"this.output is not big enough\");\n                    }\n                    isIdentifierConstant(name1) {\n                        if (!this.constants) return false;\n                        return this.constants.hasOwnProperty(name1);\n                    }\n                    isInput(argumentName) {\n                        return this.argumentTypes[this.argumentNames.indexOf(argumentName)] === \"Input\";\n                    }\n                    pushState(state) {\n                        this.states.push(state);\n                    }\n                    popState(state) {\n                        if (this.state !== state) throw new Error(`Cannot popState ${state} when in ${this.state}`);\n                        this.states.pop();\n                    }\n                    isState(state) {\n                        return this.state === state;\n                    }\n                    get state() {\n                        return this.states[this.states.length - 1];\n                    }\n                    astMemberExpressionUnroll(ast) {\n                        if (ast.type === \"Identifier\") return ast.name;\n                        else if (ast.type === \"ThisExpression\") return \"this\";\n                        if (ast.type === \"MemberExpression\") {\n                            if (ast.object && ast.property) {\n                                if (ast.object.hasOwnProperty(\"name\") && ast.object.name !== \"Math\") return this.astMemberExpressionUnroll(ast.property);\n                                return this.astMemberExpressionUnroll(ast.object) + \".\" + this.astMemberExpressionUnroll(ast.property);\n                            }\n                        }\n                        if (ast.hasOwnProperty(\"expressions\")) {\n                            const firstExpression = ast.expressions[0];\n                            if (firstExpression.type === \"Literal\" && firstExpression.value === 0 && ast.expressions.length === 2) return this.astMemberExpressionUnroll(ast.expressions[1]);\n                        }\n                        throw this.astErrorOutput(\"Unknown astMemberExpressionUnroll\", ast);\n                    }\n                    getJsAST(inParser) {\n                        if (this.ast) return this.ast;\n                        if (typeof this.source === \"object\") {\n                            this.traceFunctionAST(this.source);\n                            return this.ast = this.source;\n                        }\n                        inParser = inParser || acorn;\n                        if (inParser === null) throw new Error(\"Missing JS to AST parser\");\n                        const ast = Object.freeze(inParser.parse(`const parser_${this.name} = ${this.source};`, {\n                            locations: true\n                        }));\n                        const functionAST = ast.body[0].declarations[0].init;\n                        this.traceFunctionAST(functionAST);\n                        if (!ast) throw new Error(\"Failed to parse JS code\");\n                        return this.ast = functionAST;\n                    }\n                    traceFunctionAST(ast) {\n                        const { contexts: contexts , declarations: declarations , functions: functions , identifiers: identifiers , functionCalls: functionCalls  } = new FunctionTracer(ast);\n                        this.contexts = contexts;\n                        this.identifiers = identifiers;\n                        this.functionCalls = functionCalls;\n                        this.functions = functions;\n                        for(let i = 0; i < declarations.length; i++){\n                            const declaration = declarations[i];\n                            const { ast: ast , inForLoopInit: inForLoopInit , inForLoopTest: inForLoopTest  } = declaration;\n                            const { init: init  } = ast;\n                            const dependencies = this.getDependencies(init);\n                            let valueType = null;\n                            if (inForLoopInit && inForLoopTest) valueType = \"Integer\";\n                            else if (init) {\n                                const realType = this.getType(init);\n                                switch(realType){\n                                    case \"Integer\":\n                                    case \"Float\":\n                                    case \"Number\":\n                                        if (init.type === \"MemberExpression\") valueType = realType;\n                                        else valueType = \"Number\";\n                                        break;\n                                    case \"LiteralInteger\":\n                                        valueType = \"Number\";\n                                        break;\n                                    default:\n                                        valueType = realType;\n                                }\n                            }\n                            declaration.valueType = valueType;\n                            declaration.dependencies = dependencies;\n                            declaration.isSafe = this.isSafeDependencies(dependencies);\n                        }\n                        for(let i = 0; i < functions.length; i++)this.onNestedFunction(functions[i], this.source);\n                    }\n                    getDeclaration(ast) {\n                        for(let i = 0; i < this.identifiers.length; i++){\n                            const identifier = this.identifiers[i];\n                            if (ast === identifier.ast) return identifier.declaration;\n                        }\n                        return null;\n                    }\n                    getVariableType(ast) {\n                        if (ast.type !== \"Identifier\") throw new Error(`ast of ${ast.type} not \"Identifier\"`);\n                        let type = null;\n                        const argumentIndex = this.argumentNames.indexOf(ast.name);\n                        if (argumentIndex === -1) {\n                            const declaration = this.getDeclaration(ast);\n                            if (declaration) return declaration.valueType;\n                        } else {\n                            const argumentType = this.argumentTypes[argumentIndex];\n                            if (argumentType) type = argumentType;\n                        }\n                        if (!type && this.strictTypingChecking) throw new Error(`Declaration of ${name} not found`);\n                        return type;\n                    }\n                    getLookupType(type) {\n                        if (!typeLookupMap.hasOwnProperty(type)) throw new Error(`unknown typeLookupMap ${type}`);\n                        return typeLookupMap[type];\n                    }\n                    getConstantType(constantName) {\n                        if (this.constantTypes[constantName]) {\n                            const type = this.constantTypes[constantName];\n                            if (type === \"Float\") return \"Number\";\n                            else return type;\n                        }\n                        throw new Error(`Type for constant \"${constantName}\" not declared`);\n                    }\n                    toString() {\n                        if (this._string) return this._string;\n                        return this._string = this.astGeneric(this.getJsAST(), []).join(\"\").trim();\n                    }\n                    toJSON() {\n                        const settings = {\n                            source: this.source,\n                            name: this.name,\n                            constants: this.constants,\n                            constantTypes: this.constantTypes,\n                            isRootKernel: this.isRootKernel,\n                            isSubKernel: this.isSubKernel,\n                            debug: this.debug,\n                            output: this.output,\n                            loopMaxIterations: this.loopMaxIterations,\n                            argumentNames: this.argumentNames,\n                            argumentTypes: this.argumentTypes,\n                            argumentSizes: this.argumentSizes,\n                            returnType: this.returnType,\n                            leadingReturnStatement: this.leadingReturnStatement,\n                            followingReturnStatement: this.followingReturnStatement\n                        };\n                        return {\n                            ast: this.ast,\n                            settings: settings\n                        };\n                    }\n                    getType(ast) {\n                        if (Array.isArray(ast)) return this.getType(ast[ast.length - 1]);\n                        switch(ast.type){\n                            case \"BlockStatement\":\n                                return this.getType(ast.body);\n                            case \"ArrayExpression\":\n                                const childType = this.getType(ast.elements[0]);\n                                switch(childType){\n                                    case \"Array(2)\":\n                                    case \"Array(3)\":\n                                    case \"Array(4)\":\n                                        return `Matrix(${ast.elements.length})`;\n                                }\n                                return `Array(${ast.elements.length})`;\n                            case \"Literal\":\n                                const literalKey = this.astKey(ast);\n                                if (this.literalTypes[literalKey]) return this.literalTypes[literalKey];\n                                if (Number.isInteger(ast.value)) return \"LiteralInteger\";\n                                else if (ast.value === true || ast.value === false) return \"Boolean\";\n                                else return \"Number\";\n                            case \"AssignmentExpression\":\n                                return this.getType(ast.left);\n                            case \"CallExpression\":\n                                if (this.isAstMathFunction(ast)) return \"Number\";\n                                if (!ast.callee || !ast.callee.name) {\n                                    if (ast.callee.type === \"SequenceExpression\" && ast.callee.expressions[ast.callee.expressions.length - 1].property.name) {\n                                        const functionName = ast.callee.expressions[ast.callee.expressions.length - 1].property.name;\n                                        this.inferArgumentTypesIfNeeded(functionName, ast.arguments);\n                                        return this.lookupReturnType(functionName, ast, this);\n                                    }\n                                    if (this.getVariableSignature(ast.callee, true) === \"this.color\") return null;\n                                    if (ast.callee.type === \"MemberExpression\" && ast.callee.object && ast.callee.property && ast.callee.property.name && ast.arguments) {\n                                        const functionName = ast.callee.property.name;\n                                        this.inferArgumentTypesIfNeeded(functionName, ast.arguments);\n                                        return this.lookupReturnType(functionName, ast, this);\n                                    }\n                                    throw this.astErrorOutput(\"Unknown call expression\", ast);\n                                }\n                                if (ast.callee && ast.callee.name) {\n                                    const functionName = ast.callee.name;\n                                    this.inferArgumentTypesIfNeeded(functionName, ast.arguments);\n                                    return this.lookupReturnType(functionName, ast, this);\n                                }\n                                throw this.astErrorOutput(`Unhandled getType Type \"${ast.type}\"`, ast);\n                            case \"LogicalExpression\":\n                                return \"Boolean\";\n                            case \"BinaryExpression\":\n                                switch(ast.operator){\n                                    case \"%\":\n                                    case \"/\":\n                                        if (this.fixIntegerDivisionAccuracy) return \"Number\";\n                                        else break;\n                                    case \">\":\n                                    case \"<\":\n                                        return \"Boolean\";\n                                    case \"&\":\n                                    case \"|\":\n                                    case \"^\":\n                                    case \"<<\":\n                                    case \">>\":\n                                    case \">>>\":\n                                        return \"Integer\";\n                                }\n                                const type = this.getType(ast.left);\n                                if (this.isState(\"skip-literal-correction\")) return type;\n                                if (type === \"LiteralInteger\") {\n                                    const rightType = this.getType(ast.right);\n                                    if (rightType === \"LiteralInteger\") {\n                                        if (ast.left.value % 1 === 0) return \"Integer\";\n                                        else return \"Float\";\n                                    }\n                                    return rightType;\n                                }\n                                return typeLookupMap[type] || type;\n                            case \"UpdateExpression\":\n                                return this.getType(ast.argument);\n                            case \"UnaryExpression\":\n                                if (ast.operator === \"~\") return \"Integer\";\n                                return this.getType(ast.argument);\n                            case \"VariableDeclaration\":\n                                {\n                                    const declarations = ast.declarations;\n                                    let lastType;\n                                    for(let i = 0; i < declarations.length; i++){\n                                        const declaration = declarations[i];\n                                        lastType = this.getType(declaration);\n                                    }\n                                    if (!lastType) throw this.astErrorOutput(`Unable to find type for declaration`, ast);\n                                    return lastType;\n                                }\n                            case \"VariableDeclarator\":\n                                const declaration = this.getDeclaration(ast.id);\n                                if (!declaration) throw this.astErrorOutput(`Unable to find declarator`, ast);\n                                if (!declaration.valueType) throw this.astErrorOutput(`Unable to find declarator valueType`, ast);\n                                return declaration.valueType;\n                            case \"Identifier\":\n                                if (ast.name === \"Infinity\") return \"Number\";\n                                if (this.isAstVariable(ast)) {\n                                    const signature = this.getVariableSignature(ast);\n                                    if (signature === \"value\") return this.getCheckVariableType(ast);\n                                }\n                                const origin = this.findIdentifierOrigin(ast);\n                                if (origin && origin.init) return this.getType(origin.init);\n                                return null;\n                            case \"ReturnStatement\":\n                                return this.getType(ast.argument);\n                            case \"MemberExpression\":\n                                if (this.isAstMathFunction(ast)) {\n                                    switch(ast.property.name){\n                                        case \"ceil\":\n                                            return \"Integer\";\n                                        case \"floor\":\n                                            return \"Integer\";\n                                        case \"round\":\n                                            return \"Integer\";\n                                    }\n                                    return \"Number\";\n                                }\n                                if (this.isAstVariable(ast)) {\n                                    const variableSignature = this.getVariableSignature(ast);\n                                    switch(variableSignature){\n                                        case \"value[]\":\n                                            return this.getLookupType(this.getCheckVariableType(ast.object));\n                                        case \"value[][]\":\n                                            return this.getLookupType(this.getCheckVariableType(ast.object.object));\n                                        case \"value[][][]\":\n                                            return this.getLookupType(this.getCheckVariableType(ast.object.object.object));\n                                        case \"value[][][][]\":\n                                            return this.getLookupType(this.getCheckVariableType(ast.object.object.object.object));\n                                        case \"value.thread.value\":\n                                        case \"this.thread.value\":\n                                            return \"Integer\";\n                                        case \"this.output.value\":\n                                            return this.dynamicOutput ? \"Integer\" : \"LiteralInteger\";\n                                        case \"this.constants.value\":\n                                            return this.getConstantType(ast.property.name);\n                                        case \"this.constants.value[]\":\n                                            return this.getLookupType(this.getConstantType(ast.object.property.name));\n                                        case \"this.constants.value[][]\":\n                                            return this.getLookupType(this.getConstantType(ast.object.object.property.name));\n                                        case \"this.constants.value[][][]\":\n                                            return this.getLookupType(this.getConstantType(ast.object.object.object.property.name));\n                                        case \"this.constants.value[][][][]\":\n                                            return this.getLookupType(this.getConstantType(ast.object.object.object.object.property.name));\n                                        case \"fn()[]\":\n                                        case \"fn()[][]\":\n                                        case \"fn()[][][]\":\n                                            return this.getLookupType(this.getType(ast.object));\n                                        case \"value.value\":\n                                            if (this.isAstMathVariable(ast)) return \"Number\";\n                                            switch(ast.property.name){\n                                                case \"r\":\n                                                case \"g\":\n                                                case \"b\":\n                                                case \"a\":\n                                                    return this.getLookupType(this.getCheckVariableType(ast.object));\n                                            }\n                                        case \"[][]\":\n                                            return \"Number\";\n                                    }\n                                    throw this.astErrorOutput(\"Unhandled getType MemberExpression\", ast);\n                                }\n                                throw this.astErrorOutput(\"Unhandled getType MemberExpression\", ast);\n                            case \"ConditionalExpression\":\n                                return this.getType(ast.consequent);\n                            case \"FunctionDeclaration\":\n                            case \"FunctionExpression\":\n                                const lastReturn = this.findLastReturn(ast.body);\n                                if (lastReturn) return this.getType(lastReturn);\n                                return null;\n                            case \"IfStatement\":\n                                return this.getType(ast.consequent);\n                            case \"SequenceExpression\":\n                                return this.getType(ast.expressions[ast.expressions.length - 1]);\n                            default:\n                                throw this.astErrorOutput(`Unhandled getType Type \"${ast.type}\"`, ast);\n                        }\n                    }\n                    getCheckVariableType(ast) {\n                        const type = this.getVariableType(ast);\n                        if (!type) throw this.astErrorOutput(`${ast.type} is not defined`, ast);\n                        return type;\n                    }\n                    inferArgumentTypesIfNeeded(functionName, args) {\n                        for(let i = 0; i < args.length; i++){\n                            if (!this.needsArgumentType(functionName, i)) continue;\n                            const type = this.getType(args[i]);\n                            if (!type) throw this.astErrorOutput(`Unable to infer argument ${i}`, args[i]);\n                            this.assignArgumentType(functionName, i, type);\n                        }\n                    }\n                    isAstMathVariable(ast) {\n                        const mathProperties = [\n                            \"E\",\n                            \"PI\",\n                            \"SQRT2\",\n                            \"SQRT1_2\",\n                            \"LN2\",\n                            \"LN10\",\n                            \"LOG2E\",\n                            \"LOG10E\"\n                        ];\n                        return ast.type === \"MemberExpression\" && ast.object && ast.object.type === \"Identifier\" && ast.object.name === \"Math\" && ast.property && ast.property.type === \"Identifier\" && mathProperties.indexOf(ast.property.name) > -1;\n                    }\n                    isAstMathFunction(ast) {\n                        const mathFunctions = [\n                            \"abs\",\n                            \"acos\",\n                            \"acosh\",\n                            \"asin\",\n                            \"asinh\",\n                            \"atan\",\n                            \"atan2\",\n                            \"atanh\",\n                            \"cbrt\",\n                            \"ceil\",\n                            \"clz32\",\n                            \"cos\",\n                            \"cosh\",\n                            \"expm1\",\n                            \"exp\",\n                            \"floor\",\n                            \"fround\",\n                            \"imul\",\n                            \"log\",\n                            \"log2\",\n                            \"log10\",\n                            \"log1p\",\n                            \"max\",\n                            \"min\",\n                            \"pow\",\n                            \"random\",\n                            \"round\",\n                            \"sign\",\n                            \"sin\",\n                            \"sinh\",\n                            \"sqrt\",\n                            \"tan\",\n                            \"tanh\",\n                            \"trunc\"\n                        ];\n                        return ast.type === \"CallExpression\" && ast.callee && ast.callee.type === \"MemberExpression\" && ast.callee.object && ast.callee.object.type === \"Identifier\" && ast.callee.object.name === \"Math\" && ast.callee.property && ast.callee.property.type === \"Identifier\" && mathFunctions.indexOf(ast.callee.property.name) > -1;\n                    }\n                    isAstVariable(ast) {\n                        return ast.type === \"Identifier\" || ast.type === \"MemberExpression\";\n                    }\n                    isSafe(ast) {\n                        return this.isSafeDependencies(this.getDependencies(ast));\n                    }\n                    isSafeDependencies(dependencies) {\n                        return dependencies && dependencies.every ? dependencies.every((dependency)=>dependency.isSafe) : true;\n                    }\n                    getDependencies(ast, dependencies, isNotSafe) {\n                        if (!dependencies) dependencies = [];\n                        if (!ast) return null;\n                        if (Array.isArray(ast)) {\n                            for(let i = 0; i < ast.length; i++)this.getDependencies(ast[i], dependencies, isNotSafe);\n                            return dependencies;\n                        }\n                        switch(ast.type){\n                            case \"AssignmentExpression\":\n                                this.getDependencies(ast.left, dependencies, isNotSafe);\n                                this.getDependencies(ast.right, dependencies, isNotSafe);\n                                return dependencies;\n                            case \"ConditionalExpression\":\n                                this.getDependencies(ast.test, dependencies, isNotSafe);\n                                this.getDependencies(ast.alternate, dependencies, isNotSafe);\n                                this.getDependencies(ast.consequent, dependencies, isNotSafe);\n                                return dependencies;\n                            case \"Literal\":\n                                dependencies.push({\n                                    origin: \"literal\",\n                                    value: ast.value,\n                                    isSafe: isNotSafe === true ? false : ast.value > -Infinity && ast.value < Infinity && !isNaN(ast.value)\n                                });\n                                break;\n                            case \"VariableDeclarator\":\n                                return this.getDependencies(ast.init, dependencies, isNotSafe);\n                            case \"Identifier\":\n                                const declaration = this.getDeclaration(ast);\n                                if (declaration) dependencies.push({\n                                    name: ast.name,\n                                    origin: \"declaration\",\n                                    isSafe: isNotSafe ? false : this.isSafeDependencies(declaration.dependencies)\n                                });\n                                else if (this.argumentNames.indexOf(ast.name) > -1) dependencies.push({\n                                    name: ast.name,\n                                    origin: \"argument\",\n                                    isSafe: false\n                                });\n                                else if (this.strictTypingChecking) throw new Error(`Cannot find identifier origin \"${ast.name}\"`);\n                                break;\n                            case \"FunctionDeclaration\":\n                                return this.getDependencies(ast.body.body[ast.body.body.length - 1], dependencies, isNotSafe);\n                            case \"ReturnStatement\":\n                                return this.getDependencies(ast.argument, dependencies);\n                            case \"BinaryExpression\":\n                            case \"LogicalExpression\":\n                                isNotSafe = ast.operator === \"/\" || ast.operator === \"*\";\n                                this.getDependencies(ast.left, dependencies, isNotSafe);\n                                this.getDependencies(ast.right, dependencies, isNotSafe);\n                                return dependencies;\n                            case \"UnaryExpression\":\n                            case \"UpdateExpression\":\n                                return this.getDependencies(ast.argument, dependencies, isNotSafe);\n                            case \"VariableDeclaration\":\n                                return this.getDependencies(ast.declarations, dependencies, isNotSafe);\n                            case \"ArrayExpression\":\n                                dependencies.push({\n                                    origin: \"declaration\",\n                                    isSafe: true\n                                });\n                                return dependencies;\n                            case \"CallExpression\":\n                                dependencies.push({\n                                    origin: \"function\",\n                                    isSafe: true\n                                });\n                                return dependencies;\n                            case \"MemberExpression\":\n                                const details = this.getMemberExpressionDetails(ast);\n                                switch(details.signature){\n                                    case \"value[]\":\n                                        this.getDependencies(ast.object, dependencies, isNotSafe);\n                                        break;\n                                    case \"value[][]\":\n                                        this.getDependencies(ast.object.object, dependencies, isNotSafe);\n                                        break;\n                                    case \"value[][][]\":\n                                        this.getDependencies(ast.object.object.object, dependencies, isNotSafe);\n                                        break;\n                                    case \"this.output.value\":\n                                        if (this.dynamicOutput) dependencies.push({\n                                            name: details.name,\n                                            origin: \"output\",\n                                            isSafe: false\n                                        });\n                                        break;\n                                }\n                                if (details) {\n                                    if (details.property) this.getDependencies(details.property, dependencies, isNotSafe);\n                                    if (details.xProperty) this.getDependencies(details.xProperty, dependencies, isNotSafe);\n                                    if (details.yProperty) this.getDependencies(details.yProperty, dependencies, isNotSafe);\n                                    if (details.zProperty) this.getDependencies(details.zProperty, dependencies, isNotSafe);\n                                    return dependencies;\n                                }\n                            case \"SequenceExpression\":\n                                return this.getDependencies(ast.expressions, dependencies, isNotSafe);\n                            default:\n                                throw this.astErrorOutput(`Unhandled type ${ast.type} in getDependencies`, ast);\n                        }\n                        return dependencies;\n                    }\n                    getVariableSignature(ast, returnRawValue) {\n                        if (!this.isAstVariable(ast)) throw new Error(`ast of type \"${ast.type}\" is not a variable signature`);\n                        if (ast.type === \"Identifier\") return \"value\";\n                        const signature = [];\n                        while(true){\n                            if (!ast) break;\n                            if (ast.computed) signature.push(\"[]\");\n                            else if (ast.type === \"ThisExpression\") signature.unshift(\"this\");\n                            else if (ast.property && ast.property.name) {\n                                if (ast.property.name === \"x\" || ast.property.name === \"y\" || ast.property.name === \"z\") signature.unshift(returnRawValue ? \".\" + ast.property.name : \".value\");\n                                else if (ast.property.name === \"constants\" || ast.property.name === \"thread\" || ast.property.name === \"output\") signature.unshift(\".\" + ast.property.name);\n                                else signature.unshift(returnRawValue ? \".\" + ast.property.name : \".value\");\n                            } else if (ast.name) signature.unshift(returnRawValue ? ast.name : \"value\");\n                            else if (ast.callee && ast.callee.name) signature.unshift(returnRawValue ? ast.callee.name + \"()\" : \"fn()\");\n                            else if (ast.elements) signature.unshift(\"[]\");\n                            else signature.unshift(\"unknown\");\n                            ast = ast.object;\n                        }\n                        const signatureString = signature.join(\"\");\n                        if (returnRawValue) return signatureString;\n                        const allowedExpressions = [\n                            \"value\",\n                            \"value[]\",\n                            \"value[][]\",\n                            \"value[][][]\",\n                            \"value[][][][]\",\n                            \"value.value\",\n                            \"value.thread.value\",\n                            \"this.thread.value\",\n                            \"this.output.value\",\n                            \"this.constants.value\",\n                            \"this.constants.value[]\",\n                            \"this.constants.value[][]\",\n                            \"this.constants.value[][][]\",\n                            \"this.constants.value[][][][]\",\n                            \"fn()[]\",\n                            \"fn()[][]\",\n                            \"fn()[][][]\",\n                            \"[][]\"\n                        ];\n                        if (allowedExpressions.indexOf(signatureString) > -1) return signatureString;\n                        return null;\n                    }\n                    build() {\n                        return this.toString().length > 0;\n                    }\n                    astGeneric(ast, retArr) {\n                        if (ast === null) throw this.astErrorOutput(\"NULL ast\", ast);\n                        else {\n                            if (Array.isArray(ast)) {\n                                for(let i = 0; i < ast.length; i++)this.astGeneric(ast[i], retArr);\n                                return retArr;\n                            }\n                            switch(ast.type){\n                                case \"FunctionDeclaration\":\n                                    return this.astFunctionDeclaration(ast, retArr);\n                                case \"FunctionExpression\":\n                                    return this.astFunctionExpression(ast, retArr);\n                                case \"ReturnStatement\":\n                                    return this.astReturnStatement(ast, retArr);\n                                case \"Literal\":\n                                    return this.astLiteral(ast, retArr);\n                                case \"BinaryExpression\":\n                                    return this.astBinaryExpression(ast, retArr);\n                                case \"Identifier\":\n                                    return this.astIdentifierExpression(ast, retArr);\n                                case \"AssignmentExpression\":\n                                    return this.astAssignmentExpression(ast, retArr);\n                                case \"ExpressionStatement\":\n                                    return this.astExpressionStatement(ast, retArr);\n                                case \"EmptyStatement\":\n                                    return this.astEmptyStatement(ast, retArr);\n                                case \"BlockStatement\":\n                                    return this.astBlockStatement(ast, retArr);\n                                case \"IfStatement\":\n                                    return this.astIfStatement(ast, retArr);\n                                case \"SwitchStatement\":\n                                    return this.astSwitchStatement(ast, retArr);\n                                case \"BreakStatement\":\n                                    return this.astBreakStatement(ast, retArr);\n                                case \"ContinueStatement\":\n                                    return this.astContinueStatement(ast, retArr);\n                                case \"ForStatement\":\n                                    return this.astForStatement(ast, retArr);\n                                case \"WhileStatement\":\n                                    return this.astWhileStatement(ast, retArr);\n                                case \"DoWhileStatement\":\n                                    return this.astDoWhileStatement(ast, retArr);\n                                case \"VariableDeclaration\":\n                                    return this.astVariableDeclaration(ast, retArr);\n                                case \"VariableDeclarator\":\n                                    return this.astVariableDeclarator(ast, retArr);\n                                case \"ThisExpression\":\n                                    return this.astThisExpression(ast, retArr);\n                                case \"SequenceExpression\":\n                                    return this.astSequenceExpression(ast, retArr);\n                                case \"UnaryExpression\":\n                                    return this.astUnaryExpression(ast, retArr);\n                                case \"UpdateExpression\":\n                                    return this.astUpdateExpression(ast, retArr);\n                                case \"LogicalExpression\":\n                                    return this.astLogicalExpression(ast, retArr);\n                                case \"MemberExpression\":\n                                    return this.astMemberExpression(ast, retArr);\n                                case \"CallExpression\":\n                                    return this.astCallExpression(ast, retArr);\n                                case \"ArrayExpression\":\n                                    return this.astArrayExpression(ast, retArr);\n                                case \"DebuggerStatement\":\n                                    return this.astDebuggerStatement(ast, retArr);\n                                case \"ConditionalExpression\":\n                                    return this.astConditionalExpression(ast, retArr);\n                            }\n                            throw this.astErrorOutput(\"Unknown ast type : \" + ast.type, ast);\n                        }\n                    }\n                    astErrorOutput(error, ast) {\n                        if (typeof this.source !== \"string\") return new Error(error);\n                        const debugString = utils.getAstString(this.source, ast);\n                        const leadingSource = this.source.substr(ast.start);\n                        const splitLines = leadingSource.split(/\\n/);\n                        const lineBefore = splitLines.length > 0 ? splitLines[splitLines.length - 1] : 0;\n                        return new Error(`${error} on line ${splitLines.length}, position ${lineBefore.length}:\\n ${debugString}`);\n                    }\n                    astDebuggerStatement(arrNode, retArr) {\n                        return retArr;\n                    }\n                    astConditionalExpression(ast, retArr) {\n                        if (ast.type !== \"ConditionalExpression\") throw this.astErrorOutput(\"Not a conditional expression\", ast);\n                        retArr.push(\"(\");\n                        this.astGeneric(ast.test, retArr);\n                        retArr.push(\"?\");\n                        this.astGeneric(ast.consequent, retArr);\n                        retArr.push(\":\");\n                        this.astGeneric(ast.alternate, retArr);\n                        retArr.push(\")\");\n                        return retArr;\n                    }\n                    astFunction(ast, retArr) {\n                        throw new Error(`\"astFunction\" not defined on ${this.constructor.name}`);\n                    }\n                    astFunctionDeclaration(ast, retArr) {\n                        if (this.isChildFunction(ast)) return retArr;\n                        return this.astFunction(ast, retArr);\n                    }\n                    astFunctionExpression(ast, retArr) {\n                        if (this.isChildFunction(ast)) return retArr;\n                        return this.astFunction(ast, retArr);\n                    }\n                    isChildFunction(ast) {\n                        for(let i = 0; i < this.functions.length; i++){\n                            if (this.functions[i] === ast) return true;\n                        }\n                        return false;\n                    }\n                    astReturnStatement(ast, retArr) {\n                        return retArr;\n                    }\n                    astLiteral(ast, retArr) {\n                        this.literalTypes[this.astKey(ast)] = \"Number\";\n                        return retArr;\n                    }\n                    astBinaryExpression(ast, retArr) {\n                        return retArr;\n                    }\n                    astIdentifierExpression(ast, retArr) {\n                        return retArr;\n                    }\n                    astAssignmentExpression(ast, retArr) {\n                        return retArr;\n                    }\n                    astExpressionStatement(esNode, retArr) {\n                        this.astGeneric(esNode.expression, retArr);\n                        retArr.push(\";\");\n                        return retArr;\n                    }\n                    astEmptyStatement(eNode, retArr) {\n                        return retArr;\n                    }\n                    astBlockStatement(ast, retArr) {\n                        return retArr;\n                    }\n                    astIfStatement(ast, retArr) {\n                        return retArr;\n                    }\n                    astSwitchStatement(ast, retArr) {\n                        return retArr;\n                    }\n                    astBreakStatement(brNode, retArr) {\n                        retArr.push(\"break;\");\n                        return retArr;\n                    }\n                    astContinueStatement(crNode, retArr) {\n                        retArr.push(\"continue;\\n\");\n                        return retArr;\n                    }\n                    astForStatement(ast, retArr) {\n                        return retArr;\n                    }\n                    astWhileStatement(ast, retArr) {\n                        return retArr;\n                    }\n                    astDoWhileStatement(ast, retArr) {\n                        return retArr;\n                    }\n                    astVariableDeclarator(iVarDecNode, retArr) {\n                        this.astGeneric(iVarDecNode.id, retArr);\n                        if (iVarDecNode.init !== null) {\n                            retArr.push(\"=\");\n                            this.astGeneric(iVarDecNode.init, retArr);\n                        }\n                        return retArr;\n                    }\n                    astThisExpression(ast, retArr) {\n                        return retArr;\n                    }\n                    astSequenceExpression(sNode, retArr) {\n                        const { expressions: expressions  } = sNode;\n                        const sequenceResult = [];\n                        for(let i = 0; i < expressions.length; i++){\n                            const expression = expressions[i];\n                            const expressionResult = [];\n                            this.astGeneric(expression, expressionResult);\n                            sequenceResult.push(expressionResult.join(\"\"));\n                        }\n                        if (sequenceResult.length > 1) retArr.push(\"(\", sequenceResult.join(\",\"), \")\");\n                        else retArr.push(sequenceResult[0]);\n                        return retArr;\n                    }\n                    astUnaryExpression(uNode, retArr) {\n                        const unaryResult = this.checkAndUpconvertBitwiseUnary(uNode, retArr);\n                        if (unaryResult) return retArr;\n                        if (uNode.prefix) {\n                            retArr.push(uNode.operator);\n                            this.astGeneric(uNode.argument, retArr);\n                        } else {\n                            this.astGeneric(uNode.argument, retArr);\n                            retArr.push(uNode.operator);\n                        }\n                        return retArr;\n                    }\n                    checkAndUpconvertBitwiseUnary(uNode, retArr) {}\n                    astUpdateExpression(uNode, retArr) {\n                        if (uNode.prefix) {\n                            retArr.push(uNode.operator);\n                            this.astGeneric(uNode.argument, retArr);\n                        } else {\n                            this.astGeneric(uNode.argument, retArr);\n                            retArr.push(uNode.operator);\n                        }\n                        return retArr;\n                    }\n                    astLogicalExpression(logNode, retArr) {\n                        retArr.push(\"(\");\n                        this.astGeneric(logNode.left, retArr);\n                        retArr.push(logNode.operator);\n                        this.astGeneric(logNode.right, retArr);\n                        retArr.push(\")\");\n                        return retArr;\n                    }\n                    astMemberExpression(ast, retArr) {\n                        return retArr;\n                    }\n                    astCallExpression(ast, retArr) {\n                        return retArr;\n                    }\n                    astArrayExpression(ast, retArr) {\n                        return retArr;\n                    }\n                    getMemberExpressionDetails(ast) {\n                        if (ast.type !== \"MemberExpression\") throw this.astErrorOutput(`Expression ${ast.type} not a MemberExpression`, ast);\n                        let name1 = null;\n                        let type = null;\n                        const variableSignature = this.getVariableSignature(ast);\n                        switch(variableSignature){\n                            case \"value\":\n                                return null;\n                            case \"value.thread.value\":\n                            case \"this.thread.value\":\n                            case \"this.output.value\":\n                                return {\n                                    signature: variableSignature,\n                                    type: \"Integer\",\n                                    name: ast.property.name\n                                };\n                            case \"value[]\":\n                                if (typeof ast.object.name !== \"string\") throw this.astErrorOutput(\"Unexpected expression\", ast);\n                                name1 = ast.object.name;\n                                return {\n                                    name: name1,\n                                    origin: \"user\",\n                                    signature: variableSignature,\n                                    type: this.getVariableType(ast.object),\n                                    xProperty: ast.property\n                                };\n                            case \"value[][]\":\n                                if (typeof ast.object.object.name !== \"string\") throw this.astErrorOutput(\"Unexpected expression\", ast);\n                                name1 = ast.object.object.name;\n                                return {\n                                    name: name1,\n                                    origin: \"user\",\n                                    signature: variableSignature,\n                                    type: this.getVariableType(ast.object.object),\n                                    yProperty: ast.object.property,\n                                    xProperty: ast.property\n                                };\n                            case \"value[][][]\":\n                                if (typeof ast.object.object.object.name !== \"string\") throw this.astErrorOutput(\"Unexpected expression\", ast);\n                                name1 = ast.object.object.object.name;\n                                return {\n                                    name: name1,\n                                    origin: \"user\",\n                                    signature: variableSignature,\n                                    type: this.getVariableType(ast.object.object.object),\n                                    zProperty: ast.object.object.property,\n                                    yProperty: ast.object.property,\n                                    xProperty: ast.property\n                                };\n                            case \"value[][][][]\":\n                                if (typeof ast.object.object.object.object.name !== \"string\") throw this.astErrorOutput(\"Unexpected expression\", ast);\n                                name1 = ast.object.object.object.object.name;\n                                return {\n                                    name: name1,\n                                    origin: \"user\",\n                                    signature: variableSignature,\n                                    type: this.getVariableType(ast.object.object.object.object),\n                                    zProperty: ast.object.object.property,\n                                    yProperty: ast.object.property,\n                                    xProperty: ast.property\n                                };\n                            case \"value.value\":\n                                if (typeof ast.property.name !== \"string\") throw this.astErrorOutput(\"Unexpected expression\", ast);\n                                if (this.isAstMathVariable(ast)) {\n                                    name1 = ast.property.name;\n                                    return {\n                                        name: name1,\n                                        origin: \"Math\",\n                                        type: \"Number\",\n                                        signature: variableSignature\n                                    };\n                                }\n                                switch(ast.property.name){\n                                    case \"r\":\n                                    case \"g\":\n                                    case \"b\":\n                                    case \"a\":\n                                        name1 = ast.object.name;\n                                        return {\n                                            name: name1,\n                                            property: ast.property.name,\n                                            origin: \"user\",\n                                            signature: variableSignature,\n                                            type: \"Number\"\n                                        };\n                                    default:\n                                        throw this.astErrorOutput(\"Unexpected expression\", ast);\n                                }\n                            case \"this.constants.value\":\n                                if (typeof ast.property.name !== \"string\") throw this.astErrorOutput(\"Unexpected expression\", ast);\n                                name1 = ast.property.name;\n                                type = this.getConstantType(name1);\n                                if (!type) throw this.astErrorOutput(\"Constant has no type\", ast);\n                                return {\n                                    name: name1,\n                                    type: type,\n                                    origin: \"constants\",\n                                    signature: variableSignature\n                                };\n                            case \"this.constants.value[]\":\n                                if (typeof ast.object.property.name !== \"string\") throw this.astErrorOutput(\"Unexpected expression\", ast);\n                                name1 = ast.object.property.name;\n                                type = this.getConstantType(name1);\n                                if (!type) throw this.astErrorOutput(\"Constant has no type\", ast);\n                                return {\n                                    name: name1,\n                                    type: type,\n                                    origin: \"constants\",\n                                    signature: variableSignature,\n                                    xProperty: ast.property\n                                };\n                            case \"this.constants.value[][]\":\n                                if (typeof ast.object.object.property.name !== \"string\") throw this.astErrorOutput(\"Unexpected expression\", ast);\n                                name1 = ast.object.object.property.name;\n                                type = this.getConstantType(name1);\n                                if (!type) throw this.astErrorOutput(\"Constant has no type\", ast);\n                                return {\n                                    name: name1,\n                                    type: type,\n                                    origin: \"constants\",\n                                    signature: variableSignature,\n                                    yProperty: ast.object.property,\n                                    xProperty: ast.property\n                                };\n                            case \"this.constants.value[][][]\":\n                                if (typeof ast.object.object.object.property.name !== \"string\") throw this.astErrorOutput(\"Unexpected expression\", ast);\n                                name1 = ast.object.object.object.property.name;\n                                type = this.getConstantType(name1);\n                                if (!type) throw this.astErrorOutput(\"Constant has no type\", ast);\n                                return {\n                                    name: name1,\n                                    type: type,\n                                    origin: \"constants\",\n                                    signature: variableSignature,\n                                    zProperty: ast.object.object.property,\n                                    yProperty: ast.object.property,\n                                    xProperty: ast.property\n                                };\n                            case \"fn()[]\":\n                            case \"fn()[][]\":\n                            case \"[][]\":\n                                return {\n                                    signature: variableSignature,\n                                    property: ast.property\n                                };\n                            default:\n                                throw this.astErrorOutput(\"Unexpected expression\", ast);\n                        }\n                    }\n                    findIdentifierOrigin(astToFind) {\n                        const stack = [\n                            this.ast\n                        ];\n                        while(stack.length > 0){\n                            const atNode = stack[0];\n                            if (atNode.type === \"VariableDeclarator\" && atNode.id && atNode.id.name && atNode.id.name === astToFind.name) return atNode;\n                            stack.shift();\n                            if (atNode.argument) stack.push(atNode.argument);\n                            else if (atNode.body) stack.push(atNode.body);\n                            else if (atNode.declarations) stack.push(atNode.declarations);\n                            else if (Array.isArray(atNode)) for(let i = 0; i < atNode.length; i++)stack.push(atNode[i]);\n                        }\n                        return null;\n                    }\n                    findLastReturn(ast) {\n                        const stack = [\n                            ast || this.ast\n                        ];\n                        while(stack.length > 0){\n                            const atNode = stack.pop();\n                            if (atNode.type === \"ReturnStatement\") return atNode;\n                            if (atNode.type === \"FunctionDeclaration\") continue;\n                            if (atNode.argument) stack.push(atNode.argument);\n                            else if (atNode.body) stack.push(atNode.body);\n                            else if (atNode.declarations) stack.push(atNode.declarations);\n                            else if (Array.isArray(atNode)) for(let i = 0; i < atNode.length; i++)stack.push(atNode[i]);\n                            else if (atNode.consequent) stack.push(atNode.consequent);\n                            else if (atNode.cases) stack.push(atNode.cases);\n                        }\n                        return null;\n                    }\n                    getInternalVariableName(name1) {\n                        if (!this._internalVariableNames.hasOwnProperty(name1)) this._internalVariableNames[name1] = 0;\n                        this._internalVariableNames[name1]++;\n                        if (this._internalVariableNames[name1] === 1) return name1;\n                        return name1 + this._internalVariableNames[name1];\n                    }\n                    astKey(ast, separator = \",\") {\n                        if (!ast.start || !ast.end) throw new Error(\"AST start and end needed\");\n                        return `${ast.start}${separator}${ast.end}`;\n                    }\n                }\n                const typeLookupMap = {\n                    \"Number\": \"Number\",\n                    \"Float\": \"Float\",\n                    \"Integer\": \"Integer\",\n                    \"Array\": \"Number\",\n                    \"Array(2)\": \"Number\",\n                    \"Array(3)\": \"Number\",\n                    \"Array(4)\": \"Number\",\n                    \"Matrix(2)\": \"Number\",\n                    \"Matrix(3)\": \"Number\",\n                    \"Matrix(4)\": \"Number\",\n                    \"Array2D\": \"Number\",\n                    \"Array3D\": \"Number\",\n                    \"Input\": \"Number\",\n                    \"HTMLCanvas\": \"Array(4)\",\n                    \"OffscreenCanvas\": \"Array(4)\",\n                    \"HTMLImage\": \"Array(4)\",\n                    \"ImageBitmap\": \"Array(4)\",\n                    \"ImageData\": \"Array(4)\",\n                    \"HTMLVideo\": \"Array(4)\",\n                    \"HTMLImageArray\": \"Array(4)\",\n                    \"NumberTexture\": \"Number\",\n                    \"MemoryOptimizedNumberTexture\": \"Number\",\n                    \"Array1D(2)\": \"Array(2)\",\n                    \"Array1D(3)\": \"Array(3)\",\n                    \"Array1D(4)\": \"Array(4)\",\n                    \"Array2D(2)\": \"Array(2)\",\n                    \"Array2D(3)\": \"Array(3)\",\n                    \"Array2D(4)\": \"Array(4)\",\n                    \"Array3D(2)\": \"Array(2)\",\n                    \"Array3D(3)\": \"Array(3)\",\n                    \"Array3D(4)\": \"Array(4)\",\n                    \"ArrayTexture(1)\": \"Number\",\n                    \"ArrayTexture(2)\": \"Array(2)\",\n                    \"ArrayTexture(3)\": \"Array(3)\",\n                    \"ArrayTexture(4)\": \"Array(4)\"\n                };\n                module1.exports = {\n                    FunctionNode: FunctionNode\n                };\n            },\n            {\n                \"../utils\": 114,\n                \"./function-tracer\": 11,\n                \"acorn\": 1\n            }\n        ],\n        11: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../utils\");\n                function last(array) {\n                    return array.length > 0 ? array[array.length - 1] : null;\n                }\n                const states = {\n                    trackIdentifiers: \"trackIdentifiers\",\n                    memberExpression: \"memberExpression\",\n                    inForLoopInit: \"inForLoopInit\"\n                };\n                class FunctionTracer {\n                    constructor(ast){\n                        this.runningContexts = [];\n                        this.functionContexts = [];\n                        this.contexts = [];\n                        this.functionCalls = [];\n                        this.declarations = [];\n                        this.identifiers = [];\n                        this.functions = [];\n                        this.returnStatements = [];\n                        this.trackedIdentifiers = null;\n                        this.states = [];\n                        this.newFunctionContext();\n                        this.scan(ast);\n                    }\n                    isState(state) {\n                        return this.states[this.states.length - 1] === state;\n                    }\n                    hasState(state) {\n                        return this.states.indexOf(state) > -1;\n                    }\n                    pushState(state) {\n                        this.states.push(state);\n                    }\n                    popState(state) {\n                        if (this.isState(state)) this.states.pop();\n                        else throw new Error(`Cannot pop the non-active state \"${state}\"`);\n                    }\n                    get currentFunctionContext() {\n                        return last(this.functionContexts);\n                    }\n                    get currentContext() {\n                        return last(this.runningContexts);\n                    }\n                    newFunctionContext() {\n                        const newContext = {\n                            \"@contextType\": \"function\"\n                        };\n                        this.contexts.push(newContext);\n                        this.functionContexts.push(newContext);\n                    }\n                    newContext(run) {\n                        const newContext = Object.assign({\n                            \"@contextType\": \"const/let\"\n                        }, this.currentContext);\n                        this.contexts.push(newContext);\n                        this.runningContexts.push(newContext);\n                        run();\n                        const { currentFunctionContext: currentFunctionContext  } = this;\n                        for(const p in currentFunctionContext){\n                            if (!currentFunctionContext.hasOwnProperty(p) || newContext.hasOwnProperty(p)) continue;\n                            newContext[p] = currentFunctionContext[p];\n                        }\n                        this.runningContexts.pop();\n                        return newContext;\n                    }\n                    useFunctionContext(run) {\n                        const functionContext = last(this.functionContexts);\n                        this.runningContexts.push(functionContext);\n                        run();\n                        this.runningContexts.pop();\n                    }\n                    getIdentifiers(run) {\n                        const trackedIdentifiers = this.trackedIdentifiers = [];\n                        this.pushState(states.trackIdentifiers);\n                        run();\n                        this.trackedIdentifiers = null;\n                        this.popState(states.trackIdentifiers);\n                        return trackedIdentifiers;\n                    }\n                    getDeclaration(name1) {\n                        const { currentContext: currentContext , currentFunctionContext: currentFunctionContext , runningContexts: runningContexts  } = this;\n                        const declaration = currentContext[name1] || currentFunctionContext[name1] || null;\n                        if (!declaration && currentContext === currentFunctionContext && runningContexts.length > 0) {\n                            const previousRunningContext = runningContexts[runningContexts.length - 2];\n                            if (previousRunningContext[name1]) return previousRunningContext[name1];\n                        }\n                        return declaration;\n                    }\n                    scan(ast) {\n                        if (!ast) return;\n                        if (Array.isArray(ast)) {\n                            for(let i = 0; i < ast.length; i++)this.scan(ast[i]);\n                            return;\n                        }\n                        switch(ast.type){\n                            case \"Program\":\n                                this.useFunctionContext(()=>{\n                                    this.scan(ast.body);\n                                });\n                                break;\n                            case \"BlockStatement\":\n                                this.newContext(()=>{\n                                    this.scan(ast.body);\n                                });\n                                break;\n                            case \"AssignmentExpression\":\n                            case \"LogicalExpression\":\n                                this.scan(ast.left);\n                                this.scan(ast.right);\n                                break;\n                            case \"BinaryExpression\":\n                                this.scan(ast.left);\n                                this.scan(ast.right);\n                                break;\n                            case \"UpdateExpression\":\n                                if (ast.operator === \"++\") {\n                                    const declaration = this.getDeclaration(ast.argument.name);\n                                    if (declaration) declaration.suggestedType = \"Integer\";\n                                }\n                                this.scan(ast.argument);\n                                break;\n                            case \"UnaryExpression\":\n                                this.scan(ast.argument);\n                                break;\n                            case \"VariableDeclaration\":\n                                if (ast.kind === \"var\") this.useFunctionContext(()=>{\n                                    ast.declarations = utils.normalizeDeclarations(ast);\n                                    this.scan(ast.declarations);\n                                });\n                                else {\n                                    ast.declarations = utils.normalizeDeclarations(ast);\n                                    this.scan(ast.declarations);\n                                }\n                                break;\n                            case \"VariableDeclarator\":\n                                {\n                                    const { currentContext: currentContext  } = this;\n                                    const inForLoopInit = this.hasState(states.inForLoopInit);\n                                    const declaration = {\n                                        ast: ast,\n                                        context: currentContext,\n                                        name: ast.id.name,\n                                        origin: \"declaration\",\n                                        inForLoopInit: inForLoopInit,\n                                        inForLoopTest: null,\n                                        assignable: currentContext === this.currentFunctionContext || !inForLoopInit && !currentContext.hasOwnProperty(ast.id.name),\n                                        suggestedType: null,\n                                        valueType: null,\n                                        dependencies: null,\n                                        isSafe: null\n                                    };\n                                    if (!currentContext[ast.id.name]) currentContext[ast.id.name] = declaration;\n                                    this.declarations.push(declaration);\n                                    this.scan(ast.id);\n                                    this.scan(ast.init);\n                                    break;\n                                }\n                            case \"FunctionExpression\":\n                            case \"FunctionDeclaration\":\n                                if (this.runningContexts.length === 0) this.scan(ast.body);\n                                else this.functions.push(ast);\n                                break;\n                            case \"IfStatement\":\n                                this.scan(ast.test);\n                                this.scan(ast.consequent);\n                                if (ast.alternate) this.scan(ast.alternate);\n                                break;\n                            case \"ForStatement\":\n                                {\n                                    let testIdentifiers;\n                                    const context = this.newContext(()=>{\n                                        this.pushState(states.inForLoopInit);\n                                        this.scan(ast.init);\n                                        this.popState(states.inForLoopInit);\n                                        testIdentifiers = this.getIdentifiers(()=>{\n                                            this.scan(ast.test);\n                                        });\n                                        this.scan(ast.update);\n                                        this.newContext(()=>{\n                                            this.scan(ast.body);\n                                        });\n                                    });\n                                    if (testIdentifiers) for(const p in context){\n                                        if (p === \"@contextType\") continue;\n                                        if (testIdentifiers.indexOf(p) > -1) context[p].inForLoopTest = true;\n                                    }\n                                    break;\n                                }\n                            case \"DoWhileStatement\":\n                            case \"WhileStatement\":\n                                this.newContext(()=>{\n                                    this.scan(ast.body);\n                                    this.scan(ast.test);\n                                });\n                                break;\n                            case \"Identifier\":\n                                if (this.isState(states.trackIdentifiers)) this.trackedIdentifiers.push(ast.name);\n                                this.identifiers.push({\n                                    context: this.currentContext,\n                                    declaration: this.getDeclaration(ast.name),\n                                    ast: ast\n                                });\n                                break;\n                            case \"ReturnStatement\":\n                                this.returnStatements.push(ast);\n                                this.scan(ast.argument);\n                                break;\n                            case \"MemberExpression\":\n                                this.pushState(states.memberExpression);\n                                this.scan(ast.object);\n                                this.scan(ast.property);\n                                this.popState(states.memberExpression);\n                                break;\n                            case \"ExpressionStatement\":\n                                this.scan(ast.expression);\n                                break;\n                            case \"SequenceExpression\":\n                                this.scan(ast.expressions);\n                                break;\n                            case \"CallExpression\":\n                                this.functionCalls.push({\n                                    context: this.currentContext,\n                                    ast: ast\n                                });\n                                this.scan(ast.arguments);\n                                break;\n                            case \"ArrayExpression\":\n                                this.scan(ast.elements);\n                                break;\n                            case \"ConditionalExpression\":\n                                this.scan(ast.test);\n                                this.scan(ast.alternate);\n                                this.scan(ast.consequent);\n                                break;\n                            case \"SwitchStatement\":\n                                this.scan(ast.discriminant);\n                                this.scan(ast.cases);\n                                break;\n                            case \"SwitchCase\":\n                                this.scan(ast.test);\n                                this.scan(ast.consequent);\n                                break;\n                            case \"ThisExpression\":\n                            case \"Literal\":\n                            case \"DebuggerStatement\":\n                            case \"EmptyStatement\":\n                            case \"BreakStatement\":\n                            case \"ContinueStatement\":\n                                break;\n                            default:\n                                throw new Error(`unhandled type \"${ast.type}\"`);\n                        }\n                    }\n                }\n                module1.exports = {\n                    FunctionTracer: FunctionTracer\n                };\n            },\n            {\n                \"../utils\": 114\n            }\n        ],\n        12: [\n            function(require1, module1, exports) {\n                const { glWiretap: glWiretap  } = require1(\"gl-wiretap\");\n                const { utils: utils  } = require1(\"../../utils\");\n                function toStringWithoutUtils(fn) {\n                    return fn.toString().replace(\"=>\", \"\").replace(/^function /, \"\").replace(/utils[.]/g, \"/*utils.*/\");\n                }\n                function glKernelString(Kernel, args, originKernel, setupContextString, destroyContextString) {\n                    if (!originKernel.built) originKernel.build.apply(originKernel, args);\n                    args = args ? Array.from(args).map((arg)=>{\n                        switch(typeof arg){\n                            case \"boolean\":\n                                return new Boolean(arg);\n                            case \"number\":\n                                return new Number(arg);\n                            default:\n                                return arg;\n                        }\n                    }) : null;\n                    const uploadedValues = [];\n                    const postResult = [];\n                    const context = glWiretap(originKernel.context, {\n                        useTrackablePrimitives: true,\n                        onReadPixels: (targetName)=>{\n                            if (kernel.subKernels) {\n                                if (!subKernelsResultVariableSetup) {\n                                    postResult.push(`    const result = { result: ${getRenderString(targetName, kernel)} };`);\n                                    subKernelsResultVariableSetup = true;\n                                } else {\n                                    const property = kernel.subKernels[subKernelsResultIndex++].property;\n                                    postResult.push(`    result${isNaN(property) ? \".\" + property : `[${property}]`} = ${getRenderString(targetName, kernel)};`);\n                                }\n                                if (subKernelsResultIndex === kernel.subKernels.length) postResult.push(\"    return result;\");\n                                return;\n                            }\n                            if (targetName) postResult.push(`    return ${getRenderString(targetName, kernel)};`);\n                            else postResult.push(`    return null;`);\n                        },\n                        onUnrecognizedArgumentLookup: (argument)=>{\n                            const argumentName = findKernelValue(argument, kernel.kernelArguments, [], context, uploadedValues);\n                            if (argumentName) return argumentName;\n                            const constantName = findKernelValue(argument, kernel.kernelConstants, constants ? Object.keys(constants).map((key)=>constants[key]) : [], context, uploadedValues);\n                            if (constantName) return constantName;\n                            return null;\n                        }\n                    });\n                    let subKernelsResultVariableSetup = false;\n                    let subKernelsResultIndex = 0;\n                    const { source: source , canvas: canvas , output: output , pipeline: pipeline , graphical: graphical , loopMaxIterations: loopMaxIterations , constants: constants , optimizeFloatMemory: optimizeFloatMemory , precision: precision , fixIntegerDivisionAccuracy: fixIntegerDivisionAccuracy , functions: functions , nativeFunctions: nativeFunctions , subKernels: subKernels , immutable: immutable , argumentTypes: argumentTypes , constantTypes: constantTypes , kernelArguments: kernelArguments , kernelConstants: kernelConstants , tactic: tactic  } = originKernel;\n                    const kernel = new Kernel(source, {\n                        canvas: canvas,\n                        context: context,\n                        checkContext: false,\n                        output: output,\n                        pipeline: pipeline,\n                        graphical: graphical,\n                        loopMaxIterations: loopMaxIterations,\n                        constants: constants,\n                        optimizeFloatMemory: optimizeFloatMemory,\n                        precision: precision,\n                        fixIntegerDivisionAccuracy: fixIntegerDivisionAccuracy,\n                        functions: functions,\n                        nativeFunctions: nativeFunctions,\n                        subKernels: subKernels,\n                        immutable: immutable,\n                        argumentTypes: argumentTypes,\n                        constantTypes: constantTypes,\n                        tactic: tactic\n                    });\n                    let result = [];\n                    context.setIndent(2);\n                    kernel.build.apply(kernel, args);\n                    result.push(context.toString());\n                    context.reset();\n                    kernel.kernelArguments.forEach((kernelArgument, i)=>{\n                        switch(kernelArgument.type){\n                            case \"Integer\":\n                            case \"Boolean\":\n                            case \"Number\":\n                            case \"Float\":\n                            case \"Array\":\n                            case \"Array(2)\":\n                            case \"Array(3)\":\n                            case \"Array(4)\":\n                            case \"HTMLCanvas\":\n                            case \"HTMLImage\":\n                            case \"HTMLVideo\":\n                                context.insertVariable(`uploadValue_${kernelArgument.name}`, kernelArgument.uploadValue);\n                                break;\n                            case \"HTMLImageArray\":\n                                for(let imageIndex = 0; imageIndex < args[i].length; imageIndex++){\n                                    const arg = args[i];\n                                    context.insertVariable(`uploadValue_${kernelArgument.name}[${imageIndex}]`, arg[imageIndex]);\n                                }\n                                break;\n                            case \"Input\":\n                                context.insertVariable(`uploadValue_${kernelArgument.name}`, kernelArgument.uploadValue);\n                                break;\n                            case \"MemoryOptimizedNumberTexture\":\n                            case \"NumberTexture\":\n                            case \"Array1D(2)\":\n                            case \"Array1D(3)\":\n                            case \"Array1D(4)\":\n                            case \"Array2D(2)\":\n                            case \"Array2D(3)\":\n                            case \"Array2D(4)\":\n                            case \"Array3D(2)\":\n                            case \"Array3D(3)\":\n                            case \"Array3D(4)\":\n                            case \"ArrayTexture(1)\":\n                            case \"ArrayTexture(2)\":\n                            case \"ArrayTexture(3)\":\n                            case \"ArrayTexture(4)\":\n                                context.insertVariable(`uploadValue_${kernelArgument.name}`, args[i].texture);\n                                break;\n                            default:\n                                throw new Error(`unhandled kernelArgumentType insertion for glWiretap of type ${kernelArgument.type}`);\n                        }\n                    });\n                    result.push(\"/** start of injected functions **/\");\n                    result.push(`function ${toStringWithoutUtils(utils.flattenTo)}`);\n                    result.push(`function ${toStringWithoutUtils(utils.flatten2dArrayTo)}`);\n                    result.push(`function ${toStringWithoutUtils(utils.flatten3dArrayTo)}`);\n                    result.push(`function ${toStringWithoutUtils(utils.flatten4dArrayTo)}`);\n                    result.push(`function ${toStringWithoutUtils(utils.isArray)}`);\n                    if (kernel.renderOutput !== kernel.renderTexture && kernel.formatValues) result.push(`  const renderOutput = function ${toStringWithoutUtils(kernel.formatValues)};`);\n                    result.push(\"/** end of injected functions **/\");\n                    result.push(`  const innerKernel = function (${kernel.kernelArguments.map((kernelArgument)=>kernelArgument.varName).join(\", \")}) {`);\n                    context.setIndent(4);\n                    kernel.run.apply(kernel, args);\n                    if (kernel.renderKernels) kernel.renderKernels();\n                    else if (kernel.renderOutput) kernel.renderOutput();\n                    result.push(\"    /** start setup uploads for kernel values **/\");\n                    kernel.kernelArguments.forEach((kernelArgument)=>{\n                        result.push(\"    \" + kernelArgument.getStringValueHandler().split(\"\\n\").join(\"\\n    \"));\n                    });\n                    result.push(\"    /** end setup uploads for kernel values **/\");\n                    result.push(context.toString());\n                    if (kernel.renderOutput === kernel.renderTexture) {\n                        context.reset();\n                        const framebufferName = context.getContextVariableName(kernel.framebuffer);\n                        if (kernel.renderKernels) {\n                            const results = kernel.renderKernels();\n                            const textureName = context.getContextVariableName(kernel.texture.texture);\n                            result.push(`    return {\n      result: {\n        texture: ${textureName},\n        type: '${results.result.type}',\n        toArray: ${getToArrayString(results.result, textureName, framebufferName)}\n      },`);\n                            const { subKernels: subKernels , mappedTextures: mappedTextures  } = kernel;\n                            for(let i = 0; i < subKernels.length; i++){\n                                const texture = mappedTextures[i];\n                                const subKernel = subKernels[i];\n                                const subKernelResult = results[subKernel.property];\n                                const subKernelTextureName = context.getContextVariableName(texture.texture);\n                                result.push(`\n      ${subKernel.property}: {\n        texture: ${subKernelTextureName},\n        type: '${subKernelResult.type}',\n        toArray: ${getToArrayString(subKernelResult, subKernelTextureName, framebufferName)}\n      },`);\n                            }\n                            result.push(`    };`);\n                        } else {\n                            const rendered = kernel.renderOutput();\n                            const textureName = context.getContextVariableName(kernel.texture.texture);\n                            result.push(`    return {\n        texture: ${textureName},\n        type: '${rendered.type}',\n        toArray: ${getToArrayString(rendered, textureName, framebufferName)}\n      };`);\n                        }\n                    }\n                    result.push(`    ${destroyContextString ? \"\\n\" + destroyContextString + \"    \" : \"\"}`);\n                    result.push(postResult.join(\"\\n\"));\n                    result.push(\"  };\");\n                    if (kernel.graphical) {\n                        result.push(getGetPixelsString(kernel));\n                        result.push(`  innerKernel.getPixels = getPixels;`);\n                    }\n                    result.push(\"  return innerKernel;\");\n                    let constantsUpload = [];\n                    kernelConstants.forEach((kernelConstant)=>{\n                        constantsUpload.push(`${kernelConstant.getStringValueHandler()}`);\n                    });\n                    return `function kernel(settings) {\n  const { context, constants } = settings;\n  ${constantsUpload.join(\"\")}\n  ${setupContextString ? setupContextString : \"\"}\n${result.join(\"\\n\")}\n}`;\n                }\n                function getRenderString(targetName, kernel) {\n                    const readBackValue = kernel.precision === \"single\" ? targetName : `new Float32Array(${targetName}.buffer)`;\n                    if (kernel.output[2]) return `renderOutput(${readBackValue}, ${kernel.output[0]}, ${kernel.output[1]}, ${kernel.output[2]})`;\n                    if (kernel.output[1]) return `renderOutput(${readBackValue}, ${kernel.output[0]}, ${kernel.output[1]})`;\n                    return `renderOutput(${readBackValue}, ${kernel.output[0]})`;\n                }\n                function getGetPixelsString(kernel) {\n                    const getPixels = kernel.getPixels.toString();\n                    const useFunctionKeyword = !/^function/.test(getPixels);\n                    return utils.flattenFunctionToString(`${useFunctionKeyword ? \"function \" : \"\"}${getPixels}`, {\n                        findDependency: (object, name1)=>{\n                            if (object === \"utils\") return `const ${name1} = ${utils[name1].toString()};`;\n                            return null;\n                        },\n                        thisLookup: (property)=>{\n                            if (property === \"context\") return null;\n                            if (kernel.hasOwnProperty(property)) return JSON.stringify(kernel[property]);\n                            throw new Error(`unhandled thisLookup ${property}`);\n                        }\n                    });\n                }\n                function getToArrayString(kernelResult, textureName, framebufferName) {\n                    const toArray = kernelResult.toArray.toString();\n                    const useFunctionKeyword = !/^function/.test(toArray);\n                    const flattenedFunctions = utils.flattenFunctionToString(`${useFunctionKeyword ? \"function \" : \"\"}${toArray}`, {\n                        findDependency: (object, name1)=>{\n                            if (object === \"utils\") return `const ${name1} = ${utils[name1].toString()};`;\n                            else if (object === \"this\") {\n                                if (name1 === \"framebuffer\") return \"\";\n                                return `${useFunctionKeyword ? \"function \" : \"\"}${kernelResult[name1].toString()}`;\n                            } else throw new Error(\"unhandled fromObject\");\n                        },\n                        thisLookup: (property, isDeclaration)=>{\n                            if (property === \"texture\") return textureName;\n                            if (property === \"context\") {\n                                if (isDeclaration) return null;\n                                return \"gl\";\n                            }\n                            if (kernelResult.hasOwnProperty(property)) return JSON.stringify(kernelResult[property]);\n                            throw new Error(`unhandled thisLookup ${property}`);\n                        }\n                    });\n                    return `() => {\n  function framebuffer() { return ${framebufferName}; };\n  ${flattenedFunctions}\n  return toArray();\n  }`;\n                }\n                function findKernelValue(argument, kernelValues, values, context, uploadedValues) {\n                    if (argument === null) return null;\n                    if (kernelValues === null) return null;\n                    switch(typeof argument){\n                        case \"boolean\":\n                        case \"number\":\n                            return null;\n                    }\n                    if (typeof HTMLImageElement !== \"undefined\" && argument instanceof HTMLImageElement) for(let i = 0; i < kernelValues.length; i++){\n                        const kernelValue = kernelValues[i];\n                        if (kernelValue.type !== \"HTMLImageArray\" && kernelValue) continue;\n                        if (kernelValue.uploadValue !== argument) continue;\n                        const variableIndex = values[i].indexOf(argument);\n                        if (variableIndex === -1) continue;\n                        const variableName = `uploadValue_${kernelValue.name}[${variableIndex}]`;\n                        context.insertVariable(variableName, argument);\n                        return variableName;\n                    }\n                    for(let i = 0; i < kernelValues.length; i++){\n                        const kernelValue = kernelValues[i];\n                        if (argument !== kernelValue.uploadValue) continue;\n                        const variable = `uploadValue_${kernelValue.name}`;\n                        context.insertVariable(variable, kernelValue);\n                        return variable;\n                    }\n                    return null;\n                }\n                module1.exports = {\n                    glKernelString: glKernelString\n                };\n            },\n            {\n                \"../../utils\": 114,\n                \"gl-wiretap\": 3\n            }\n        ],\n        13: [\n            function(require1, module1, exports) {\n                const { Kernel: Kernel  } = require1(\"../kernel\");\n                const { utils: utils  } = require1(\"../../utils\");\n                const { GLTextureArray2Float: GLTextureArray2Float  } = require1(\"./texture/array-2-float\");\n                const { GLTextureArray2Float2D: GLTextureArray2Float2D  } = require1(\"./texture/array-2-float-2d\");\n                const { GLTextureArray2Float3D: GLTextureArray2Float3D  } = require1(\"./texture/array-2-float-3d\");\n                const { GLTextureArray3Float: GLTextureArray3Float  } = require1(\"./texture/array-3-float\");\n                const { GLTextureArray3Float2D: GLTextureArray3Float2D  } = require1(\"./texture/array-3-float-2d\");\n                const { GLTextureArray3Float3D: GLTextureArray3Float3D  } = require1(\"./texture/array-3-float-3d\");\n                const { GLTextureArray4Float: GLTextureArray4Float  } = require1(\"./texture/array-4-float\");\n                const { GLTextureArray4Float2D: GLTextureArray4Float2D  } = require1(\"./texture/array-4-float-2d\");\n                const { GLTextureArray4Float3D: GLTextureArray4Float3D  } = require1(\"./texture/array-4-float-3d\");\n                const { GLTextureFloat: GLTextureFloat  } = require1(\"./texture/float\");\n                const { GLTextureFloat2D: GLTextureFloat2D  } = require1(\"./texture/float-2d\");\n                const { GLTextureFloat3D: GLTextureFloat3D  } = require1(\"./texture/float-3d\");\n                const { GLTextureMemoryOptimized: GLTextureMemoryOptimized  } = require1(\"./texture/memory-optimized\");\n                const { GLTextureMemoryOptimized2D: GLTextureMemoryOptimized2D  } = require1(\"./texture/memory-optimized-2d\");\n                const { GLTextureMemoryOptimized3D: GLTextureMemoryOptimized3D  } = require1(\"./texture/memory-optimized-3d\");\n                const { GLTextureUnsigned: GLTextureUnsigned  } = require1(\"./texture/unsigned\");\n                const { GLTextureUnsigned2D: GLTextureUnsigned2D  } = require1(\"./texture/unsigned-2d\");\n                const { GLTextureUnsigned3D: GLTextureUnsigned3D  } = require1(\"./texture/unsigned-3d\");\n                const { GLTextureGraphical: GLTextureGraphical  } = require1(\"./texture/graphical\");\n                class GLKernel extends Kernel {\n                    static get mode() {\n                        return \"gpu\";\n                    }\n                    static getIsFloatRead() {\n                        const kernelString = `function kernelFunction() {\n      return 1;\n    }`;\n                        const kernel = new this(kernelString, {\n                            context: this.testContext,\n                            canvas: this.testCanvas,\n                            validate: false,\n                            output: [\n                                1\n                            ],\n                            precision: \"single\",\n                            returnType: \"Number\",\n                            tactic: \"speed\"\n                        });\n                        kernel.build();\n                        kernel.run();\n                        const result = kernel.renderOutput();\n                        kernel.destroy(true);\n                        return result[0] === 1;\n                    }\n                    static getIsIntegerDivisionAccurate() {\n                        function kernelFunction(v1, v2) {\n                            return v1[this.thread.x] / v2[this.thread.x];\n                        }\n                        const kernel = new this(kernelFunction.toString(), {\n                            context: this.testContext,\n                            canvas: this.testCanvas,\n                            validate: false,\n                            output: [\n                                2\n                            ],\n                            returnType: \"Number\",\n                            precision: \"unsigned\",\n                            tactic: \"speed\"\n                        });\n                        const args = [\n                            [\n                                6,\n                                6030401\n                            ],\n                            [\n                                3,\n                                3991\n                            ]\n                        ];\n                        kernel.build.apply(kernel, args);\n                        kernel.run.apply(kernel, args);\n                        const result = kernel.renderOutput();\n                        kernel.destroy(true);\n                        return result[0] === 2 && result[1] === 1511;\n                    }\n                    static getIsSpeedTacticSupported() {\n                        function kernelFunction(value1) {\n                            return value1[this.thread.x];\n                        }\n                        const kernel = new this(kernelFunction.toString(), {\n                            context: this.testContext,\n                            canvas: this.testCanvas,\n                            validate: false,\n                            output: [\n                                4\n                            ],\n                            returnType: \"Number\",\n                            precision: \"unsigned\",\n                            tactic: \"speed\"\n                        });\n                        const args = [\n                            [\n                                0,\n                                1,\n                                2,\n                                3\n                            ]\n                        ];\n                        kernel.build.apply(kernel, args);\n                        kernel.run.apply(kernel, args);\n                        const result = kernel.renderOutput();\n                        kernel.destroy(true);\n                        return Math.round(result[0]) === 0 && Math.round(result[1]) === 1 && Math.round(result[2]) === 2 && Math.round(result[3]) === 3;\n                    }\n                    static get testCanvas() {\n                        throw new Error(`\"testCanvas\" not defined on ${this.name}`);\n                    }\n                    static get testContext() {\n                        throw new Error(`\"testContext\" not defined on ${this.name}`);\n                    }\n                    static getFeatures() {\n                        const gl = this.testContext;\n                        const isDrawBuffers = this.getIsDrawBuffers();\n                        return Object.freeze({\n                            isFloatRead: this.getIsFloatRead(),\n                            isIntegerDivisionAccurate: this.getIsIntegerDivisionAccurate(),\n                            isSpeedTacticSupported: this.getIsSpeedTacticSupported(),\n                            isTextureFloat: this.getIsTextureFloat(),\n                            isDrawBuffers: isDrawBuffers,\n                            kernelMap: isDrawBuffers,\n                            channelCount: this.getChannelCount(),\n                            maxTextureSize: this.getMaxTextureSize(),\n                            lowIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT),\n                            lowFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT),\n                            mediumIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT),\n                            mediumFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT),\n                            highIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT),\n                            highFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT)\n                        });\n                    }\n                    static setupFeatureChecks() {\n                        throw new Error(`\"setupFeatureChecks\" not defined on ${this.name}`);\n                    }\n                    static getSignature(kernel, argumentTypes) {\n                        return kernel.getVariablePrecisionString() + (argumentTypes.length > 0 ? \":\" + argumentTypes.join(\",\") : \"\");\n                    }\n                    setFixIntegerDivisionAccuracy(fix) {\n                        this.fixIntegerDivisionAccuracy = fix;\n                        return this;\n                    }\n                    setPrecision(flag) {\n                        this.precision = flag;\n                        return this;\n                    }\n                    setFloatTextures(flag) {\n                        utils.warnDeprecated(\"method\", \"setFloatTextures\", \"setOptimizeFloatMemory\");\n                        this.floatTextures = flag;\n                        return this;\n                    }\n                    static nativeFunctionArguments(source) {\n                        const argumentTypes = [];\n                        const argumentNames = [];\n                        const states = [];\n                        const isStartingVariableName = /^[a-zA-Z_]/;\n                        const isVariableChar = /[a-zA-Z_0-9]/;\n                        let i = 0;\n                        let argumentName = null;\n                        let argumentType = null;\n                        while(i < source.length){\n                            const char = source[i];\n                            const nextChar = source[i + 1];\n                            const state = states.length > 0 ? states[states.length - 1] : null;\n                            if (state === \"FUNCTION_ARGUMENTS\" && char === \"/\" && nextChar === \"*\") {\n                                states.push(\"MULTI_LINE_COMMENT\");\n                                i += 2;\n                                continue;\n                            } else if (state === \"MULTI_LINE_COMMENT\" && char === \"*\" && nextChar === \"/\") {\n                                states.pop();\n                                i += 2;\n                                continue;\n                            } else if (state === \"FUNCTION_ARGUMENTS\" && char === \"/\" && nextChar === \"/\") {\n                                states.push(\"COMMENT\");\n                                i += 2;\n                                continue;\n                            } else if (state === \"COMMENT\" && char === \"\\n\") {\n                                states.pop();\n                                i++;\n                                continue;\n                            } else if (state === null && char === \"(\") {\n                                states.push(\"FUNCTION_ARGUMENTS\");\n                                i++;\n                                continue;\n                            } else if (state === \"FUNCTION_ARGUMENTS\") {\n                                if (char === \")\") {\n                                    states.pop();\n                                    break;\n                                }\n                                if (char === \"f\" && nextChar === \"l\" && source[i + 2] === \"o\" && source[i + 3] === \"a\" && source[i + 4] === \"t\" && source[i + 5] === \" \") {\n                                    states.push(\"DECLARE_VARIABLE\");\n                                    argumentType = \"float\";\n                                    argumentName = \"\";\n                                    i += 6;\n                                    continue;\n                                } else if (char === \"i\" && nextChar === \"n\" && source[i + 2] === \"t\" && source[i + 3] === \" \") {\n                                    states.push(\"DECLARE_VARIABLE\");\n                                    argumentType = \"int\";\n                                    argumentName = \"\";\n                                    i += 4;\n                                    continue;\n                                } else if (char === \"v\" && nextChar === \"e\" && source[i + 2] === \"c\" && source[i + 3] === \"2\" && source[i + 4] === \" \") {\n                                    states.push(\"DECLARE_VARIABLE\");\n                                    argumentType = \"vec2\";\n                                    argumentName = \"\";\n                                    i += 5;\n                                    continue;\n                                } else if (char === \"v\" && nextChar === \"e\" && source[i + 2] === \"c\" && source[i + 3] === \"3\" && source[i + 4] === \" \") {\n                                    states.push(\"DECLARE_VARIABLE\");\n                                    argumentType = \"vec3\";\n                                    argumentName = \"\";\n                                    i += 5;\n                                    continue;\n                                } else if (char === \"v\" && nextChar === \"e\" && source[i + 2] === \"c\" && source[i + 3] === \"4\" && source[i + 4] === \" \") {\n                                    states.push(\"DECLARE_VARIABLE\");\n                                    argumentType = \"vec4\";\n                                    argumentName = \"\";\n                                    i += 5;\n                                    continue;\n                                }\n                            } else if (state === \"DECLARE_VARIABLE\") {\n                                if (argumentName === \"\") {\n                                    if (char === \" \") {\n                                        i++;\n                                        continue;\n                                    }\n                                    if (!isStartingVariableName.test(char)) throw new Error(\"variable name is not expected string\");\n                                }\n                                argumentName += char;\n                                if (!isVariableChar.test(nextChar)) {\n                                    states.pop();\n                                    argumentNames.push(argumentName);\n                                    argumentTypes.push(typeMap[argumentType]);\n                                }\n                            }\n                            i++;\n                        }\n                        if (states.length > 0) throw new Error(\"GLSL function was not parsable\");\n                        return {\n                            argumentNames: argumentNames,\n                            argumentTypes: argumentTypes\n                        };\n                    }\n                    static nativeFunctionReturnType(source) {\n                        return typeMap[source.match(/int|float|vec[2-4]/)[0]];\n                    }\n                    static combineKernels(combinedKernel, lastKernel) {\n                        combinedKernel.apply(null, arguments);\n                        const { texSize: texSize , context: context , threadDim: threadDim  } = lastKernel.texSize;\n                        let result;\n                        if (lastKernel.precision === \"single\") {\n                            const w = texSize[0];\n                            const h = Math.ceil(texSize[1] / 4);\n                            result = new Float32Array(w * h * 16);\n                            context.readPixels(0, 0, w, h * 4, context.RGBA, context.FLOAT, result);\n                        } else {\n                            const bytes = new Uint8Array(texSize[0] * texSize[1] * 4);\n                            context.readPixels(0, 0, texSize[0], texSize[1], context.RGBA, context.UNSIGNED_BYTE, bytes);\n                            result = new Float32Array(bytes.buffer);\n                        }\n                        result = result.subarray(0, threadDim[0] * threadDim[1] * threadDim[2]);\n                        if (lastKernel.output.length === 1) return result;\n                        else if (lastKernel.output.length === 2) return utils.splitArray(result, lastKernel.output[0]);\n                        else if (lastKernel.output.length === 3) {\n                            const cube = utils.splitArray(result, lastKernel.output[0] * lastKernel.output[1]);\n                            return cube.map(function(x) {\n                                return utils.splitArray(x, lastKernel.output[0]);\n                            });\n                        }\n                    }\n                    constructor(source, settings){\n                        super(source, settings);\n                        this.transferValues = null;\n                        this.formatValues = null;\n                        this.TextureConstructor = null;\n                        this.renderOutput = null;\n                        this.renderRawOutput = null;\n                        this.texSize = null;\n                        this.translatedSource = null;\n                        this.compiledFragmentShader = null;\n                        this.compiledVertexShader = null;\n                        this.switchingKernels = null;\n                        this._textureSwitched = null;\n                        this._mappedTextureSwitched = null;\n                    }\n                    checkTextureSize() {\n                        const { features: features  } = this.constructor;\n                        if (this.texSize[0] > features.maxTextureSize || this.texSize[1] > features.maxTextureSize) throw new Error(`Texture size [${this.texSize[0]},${this.texSize[1]}] generated by kernel is larger than supported size [${features.maxTextureSize},${features.maxTextureSize}]`);\n                    }\n                    translateSource() {\n                        throw new Error(`\"translateSource\" not defined on ${this.constructor.name}`);\n                    }\n                    pickRenderStrategy(args) {\n                        if (this.graphical) {\n                            this.renderRawOutput = this.readPackedPixelsToUint8Array;\n                            this.transferValues = (pixels)=>pixels;\n                            this.TextureConstructor = GLTextureGraphical;\n                            return null;\n                        }\n                        if (this.precision === \"unsigned\") {\n                            this.renderRawOutput = this.readPackedPixelsToUint8Array;\n                            this.transferValues = this.readPackedPixelsToFloat32Array;\n                            if (this.pipeline) {\n                                this.renderOutput = this.renderTexture;\n                                if (this.subKernels !== null) this.renderKernels = this.renderKernelsToTextures;\n                                switch(this.returnType){\n                                    case \"LiteralInteger\":\n                                    case \"Float\":\n                                    case \"Number\":\n                                    case \"Integer\":\n                                        if (this.output[2] > 0) {\n                                            this.TextureConstructor = GLTextureUnsigned3D;\n                                            return null;\n                                        } else if (this.output[1] > 0) {\n                                            this.TextureConstructor = GLTextureUnsigned2D;\n                                            return null;\n                                        } else {\n                                            this.TextureConstructor = GLTextureUnsigned;\n                                            return null;\n                                        }\n                                    case \"Array(2)\":\n                                    case \"Array(3)\":\n                                    case \"Array(4)\":\n                                        return this.requestFallback(args);\n                                }\n                            } else {\n                                if (this.subKernels !== null) this.renderKernels = this.renderKernelsToArrays;\n                                switch(this.returnType){\n                                    case \"LiteralInteger\":\n                                    case \"Float\":\n                                    case \"Number\":\n                                    case \"Integer\":\n                                        this.renderOutput = this.renderValues;\n                                        if (this.output[2] > 0) {\n                                            this.TextureConstructor = GLTextureUnsigned3D;\n                                            this.formatValues = utils.erect3DPackedFloat;\n                                            return null;\n                                        } else if (this.output[1] > 0) {\n                                            this.TextureConstructor = GLTextureUnsigned2D;\n                                            this.formatValues = utils.erect2DPackedFloat;\n                                            return null;\n                                        } else {\n                                            this.TextureConstructor = GLTextureUnsigned;\n                                            this.formatValues = utils.erectPackedFloat;\n                                            return null;\n                                        }\n                                    case \"Array(2)\":\n                                    case \"Array(3)\":\n                                    case \"Array(4)\":\n                                        return this.requestFallback(args);\n                                }\n                            }\n                        } else if (this.precision === \"single\") {\n                            this.renderRawOutput = this.readFloatPixelsToFloat32Array;\n                            this.transferValues = this.readFloatPixelsToFloat32Array;\n                            if (this.pipeline) {\n                                this.renderOutput = this.renderTexture;\n                                if (this.subKernels !== null) this.renderKernels = this.renderKernelsToTextures;\n                                switch(this.returnType){\n                                    case \"LiteralInteger\":\n                                    case \"Float\":\n                                    case \"Number\":\n                                    case \"Integer\":\n                                        if (this.optimizeFloatMemory) {\n                                            if (this.output[2] > 0) {\n                                                this.TextureConstructor = GLTextureMemoryOptimized3D;\n                                                return null;\n                                            } else if (this.output[1] > 0) {\n                                                this.TextureConstructor = GLTextureMemoryOptimized2D;\n                                                return null;\n                                            } else {\n                                                this.TextureConstructor = GLTextureMemoryOptimized;\n                                                return null;\n                                            }\n                                        } else {\n                                            if (this.output[2] > 0) {\n                                                this.TextureConstructor = GLTextureFloat3D;\n                                                return null;\n                                            } else if (this.output[1] > 0) {\n                                                this.TextureConstructor = GLTextureFloat2D;\n                                                return null;\n                                            } else {\n                                                this.TextureConstructor = GLTextureFloat;\n                                                return null;\n                                            }\n                                        }\n                                    case \"Array(2)\":\n                                        if (this.output[2] > 0) {\n                                            this.TextureConstructor = GLTextureArray2Float3D;\n                                            return null;\n                                        } else if (this.output[1] > 0) {\n                                            this.TextureConstructor = GLTextureArray2Float2D;\n                                            return null;\n                                        } else {\n                                            this.TextureConstructor = GLTextureArray2Float;\n                                            return null;\n                                        }\n                                    case \"Array(3)\":\n                                        if (this.output[2] > 0) {\n                                            this.TextureConstructor = GLTextureArray3Float3D;\n                                            return null;\n                                        } else if (this.output[1] > 0) {\n                                            this.TextureConstructor = GLTextureArray3Float2D;\n                                            return null;\n                                        } else {\n                                            this.TextureConstructor = GLTextureArray3Float;\n                                            return null;\n                                        }\n                                    case \"Array(4)\":\n                                        if (this.output[2] > 0) {\n                                            this.TextureConstructor = GLTextureArray4Float3D;\n                                            return null;\n                                        } else if (this.output[1] > 0) {\n                                            this.TextureConstructor = GLTextureArray4Float2D;\n                                            return null;\n                                        } else {\n                                            this.TextureConstructor = GLTextureArray4Float;\n                                            return null;\n                                        }\n                                }\n                            }\n                            this.renderOutput = this.renderValues;\n                            if (this.subKernels !== null) this.renderKernels = this.renderKernelsToArrays;\n                            if (this.optimizeFloatMemory) switch(this.returnType){\n                                case \"LiteralInteger\":\n                                case \"Float\":\n                                case \"Number\":\n                                case \"Integer\":\n                                    if (this.output[2] > 0) {\n                                        this.TextureConstructor = GLTextureMemoryOptimized3D;\n                                        this.formatValues = utils.erectMemoryOptimized3DFloat;\n                                        return null;\n                                    } else if (this.output[1] > 0) {\n                                        this.TextureConstructor = GLTextureMemoryOptimized2D;\n                                        this.formatValues = utils.erectMemoryOptimized2DFloat;\n                                        return null;\n                                    } else {\n                                        this.TextureConstructor = GLTextureMemoryOptimized;\n                                        this.formatValues = utils.erectMemoryOptimizedFloat;\n                                        return null;\n                                    }\n                                case \"Array(2)\":\n                                    if (this.output[2] > 0) {\n                                        this.TextureConstructor = GLTextureArray2Float3D;\n                                        this.formatValues = utils.erect3DArray2;\n                                        return null;\n                                    } else if (this.output[1] > 0) {\n                                        this.TextureConstructor = GLTextureArray2Float2D;\n                                        this.formatValues = utils.erect2DArray2;\n                                        return null;\n                                    } else {\n                                        this.TextureConstructor = GLTextureArray2Float;\n                                        this.formatValues = utils.erectArray2;\n                                        return null;\n                                    }\n                                case \"Array(3)\":\n                                    if (this.output[2] > 0) {\n                                        this.TextureConstructor = GLTextureArray3Float3D;\n                                        this.formatValues = utils.erect3DArray3;\n                                        return null;\n                                    } else if (this.output[1] > 0) {\n                                        this.TextureConstructor = GLTextureArray3Float2D;\n                                        this.formatValues = utils.erect2DArray3;\n                                        return null;\n                                    } else {\n                                        this.TextureConstructor = GLTextureArray3Float;\n                                        this.formatValues = utils.erectArray3;\n                                        return null;\n                                    }\n                                case \"Array(4)\":\n                                    if (this.output[2] > 0) {\n                                        this.TextureConstructor = GLTextureArray4Float3D;\n                                        this.formatValues = utils.erect3DArray4;\n                                        return null;\n                                    } else if (this.output[1] > 0) {\n                                        this.TextureConstructor = GLTextureArray4Float2D;\n                                        this.formatValues = utils.erect2DArray4;\n                                        return null;\n                                    } else {\n                                        this.TextureConstructor = GLTextureArray4Float;\n                                        this.formatValues = utils.erectArray4;\n                                        return null;\n                                    }\n                            }\n                            else switch(this.returnType){\n                                case \"LiteralInteger\":\n                                case \"Float\":\n                                case \"Number\":\n                                case \"Integer\":\n                                    if (this.output[2] > 0) {\n                                        this.TextureConstructor = GLTextureFloat3D;\n                                        this.formatValues = utils.erect3DFloat;\n                                        return null;\n                                    } else if (this.output[1] > 0) {\n                                        this.TextureConstructor = GLTextureFloat2D;\n                                        this.formatValues = utils.erect2DFloat;\n                                        return null;\n                                    } else {\n                                        this.TextureConstructor = GLTextureFloat;\n                                        this.formatValues = utils.erectFloat;\n                                        return null;\n                                    }\n                                case \"Array(2)\":\n                                    if (this.output[2] > 0) {\n                                        this.TextureConstructor = GLTextureArray2Float3D;\n                                        this.formatValues = utils.erect3DArray2;\n                                        return null;\n                                    } else if (this.output[1] > 0) {\n                                        this.TextureConstructor = GLTextureArray2Float2D;\n                                        this.formatValues = utils.erect2DArray2;\n                                        return null;\n                                    } else {\n                                        this.TextureConstructor = GLTextureArray2Float;\n                                        this.formatValues = utils.erectArray2;\n                                        return null;\n                                    }\n                                case \"Array(3)\":\n                                    if (this.output[2] > 0) {\n                                        this.TextureConstructor = GLTextureArray3Float3D;\n                                        this.formatValues = utils.erect3DArray3;\n                                        return null;\n                                    } else if (this.output[1] > 0) {\n                                        this.TextureConstructor = GLTextureArray3Float2D;\n                                        this.formatValues = utils.erect2DArray3;\n                                        return null;\n                                    } else {\n                                        this.TextureConstructor = GLTextureArray3Float;\n                                        this.formatValues = utils.erectArray3;\n                                        return null;\n                                    }\n                                case \"Array(4)\":\n                                    if (this.output[2] > 0) {\n                                        this.TextureConstructor = GLTextureArray4Float3D;\n                                        this.formatValues = utils.erect3DArray4;\n                                        return null;\n                                    } else if (this.output[1] > 0) {\n                                        this.TextureConstructor = GLTextureArray4Float2D;\n                                        this.formatValues = utils.erect2DArray4;\n                                        return null;\n                                    } else {\n                                        this.TextureConstructor = GLTextureArray4Float;\n                                        this.formatValues = utils.erectArray4;\n                                        return null;\n                                    }\n                            }\n                        } else throw new Error(`unhandled precision of \"${this.precision}\"`);\n                        throw new Error(`unhandled return type \"${this.returnType}\"`);\n                    }\n                    getKernelString() {\n                        throw new Error(`abstract method call`);\n                    }\n                    getMainResultTexture() {\n                        switch(this.returnType){\n                            case \"LiteralInteger\":\n                            case \"Float\":\n                            case \"Integer\":\n                            case \"Number\":\n                                return this.getMainResultNumberTexture();\n                            case \"Array(2)\":\n                                return this.getMainResultArray2Texture();\n                            case \"Array(3)\":\n                                return this.getMainResultArray3Texture();\n                            case \"Array(4)\":\n                                return this.getMainResultArray4Texture();\n                            default:\n                                throw new Error(`unhandled returnType type ${this.returnType}`);\n                        }\n                    }\n                    getMainResultKernelNumberTexture() {\n                        throw new Error(`abstract method call`);\n                    }\n                    getMainResultSubKernelNumberTexture() {\n                        throw new Error(`abstract method call`);\n                    }\n                    getMainResultKernelArray2Texture() {\n                        throw new Error(`abstract method call`);\n                    }\n                    getMainResultSubKernelArray2Texture() {\n                        throw new Error(`abstract method call`);\n                    }\n                    getMainResultKernelArray3Texture() {\n                        throw new Error(`abstract method call`);\n                    }\n                    getMainResultSubKernelArray3Texture() {\n                        throw new Error(`abstract method call`);\n                    }\n                    getMainResultKernelArray4Texture() {\n                        throw new Error(`abstract method call`);\n                    }\n                    getMainResultSubKernelArray4Texture() {\n                        throw new Error(`abstract method call`);\n                    }\n                    getMainResultGraphical() {\n                        throw new Error(`abstract method call`);\n                    }\n                    getMainResultMemoryOptimizedFloats() {\n                        throw new Error(`abstract method call`);\n                    }\n                    getMainResultPackedPixels() {\n                        throw new Error(`abstract method call`);\n                    }\n                    getMainResultString() {\n                        if (this.graphical) return this.getMainResultGraphical();\n                        else if (this.precision === \"single\") {\n                            if (this.optimizeFloatMemory) return this.getMainResultMemoryOptimizedFloats();\n                            return this.getMainResultTexture();\n                        } else return this.getMainResultPackedPixels();\n                    }\n                    getMainResultNumberTexture() {\n                        return utils.linesToString(this.getMainResultKernelNumberTexture()) + utils.linesToString(this.getMainResultSubKernelNumberTexture());\n                    }\n                    getMainResultArray2Texture() {\n                        return utils.linesToString(this.getMainResultKernelArray2Texture()) + utils.linesToString(this.getMainResultSubKernelArray2Texture());\n                    }\n                    getMainResultArray3Texture() {\n                        return utils.linesToString(this.getMainResultKernelArray3Texture()) + utils.linesToString(this.getMainResultSubKernelArray3Texture());\n                    }\n                    getMainResultArray4Texture() {\n                        return utils.linesToString(this.getMainResultKernelArray4Texture()) + utils.linesToString(this.getMainResultSubKernelArray4Texture());\n                    }\n                    getFloatTacticDeclaration() {\n                        const variablePrecision = this.getVariablePrecisionString(this.texSize, this.tactic);\n                        return `precision ${variablePrecision} float;\\n`;\n                    }\n                    getIntTacticDeclaration() {\n                        return `precision ${this.getVariablePrecisionString(this.texSize, this.tactic, true)} int;\\n`;\n                    }\n                    getSampler2DTacticDeclaration() {\n                        return `precision ${this.getVariablePrecisionString(this.texSize, this.tactic)} sampler2D;\\n`;\n                    }\n                    getSampler2DArrayTacticDeclaration() {\n                        return `precision ${this.getVariablePrecisionString(this.texSize, this.tactic)} sampler2DArray;\\n`;\n                    }\n                    renderTexture() {\n                        return this.immutable ? this.texture.clone() : this.texture;\n                    }\n                    readPackedPixelsToUint8Array() {\n                        if (this.precision !== \"unsigned\") throw new Error('Requires this.precision to be \"unsigned\"');\n                        const { texSize: texSize , context: gl  } = this;\n                        const result = new Uint8Array(texSize[0] * texSize[1] * 4);\n                        gl.readPixels(0, 0, texSize[0], texSize[1], gl.RGBA, gl.UNSIGNED_BYTE, result);\n                        return result;\n                    }\n                    readPackedPixelsToFloat32Array() {\n                        return new Float32Array(this.readPackedPixelsToUint8Array().buffer);\n                    }\n                    readFloatPixelsToFloat32Array() {\n                        if (this.precision !== \"single\") throw new Error('Requires this.precision to be \"single\"');\n                        const { texSize: texSize , context: gl  } = this;\n                        const w = texSize[0];\n                        const h = texSize[1];\n                        const result = new Float32Array(w * h * 4);\n                        gl.readPixels(0, 0, w, h, gl.RGBA, gl.FLOAT, result);\n                        return result;\n                    }\n                    getPixels(flip) {\n                        const { context: gl , output: output  } = this;\n                        const [width, height] = output;\n                        const pixels = new Uint8Array(width * height * 4);\n                        gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n                        return new Uint8ClampedArray((flip ? pixels : utils.flipPixels(pixels, width, height)).buffer);\n                    }\n                    renderKernelsToArrays() {\n                        const result = {\n                            result: this.renderOutput()\n                        };\n                        for(let i = 0; i < this.subKernels.length; i++)result[this.subKernels[i].property] = this.mappedTextures[i].toArray();\n                        return result;\n                    }\n                    renderKernelsToTextures() {\n                        const result = {\n                            result: this.renderOutput()\n                        };\n                        if (this.immutable) for(let i = 0; i < this.subKernels.length; i++)result[this.subKernels[i].property] = this.mappedTextures[i].clone();\n                        else for(let i = 0; i < this.subKernels.length; i++)result[this.subKernels[i].property] = this.mappedTextures[i];\n                        return result;\n                    }\n                    resetSwitchingKernels() {\n                        const existingValue = this.switchingKernels;\n                        this.switchingKernels = null;\n                        return existingValue;\n                    }\n                    setOutput(output) {\n                        const newOutput = this.toKernelOutput(output);\n                        if (this.program) {\n                            if (!this.dynamicOutput) throw new Error(\"Resizing a kernel with dynamicOutput: false is not possible\");\n                            const newThreadDim = [\n                                newOutput[0],\n                                newOutput[1] || 1,\n                                newOutput[2] || 1\n                            ];\n                            const newTexSize = utils.getKernelTextureSize({\n                                optimizeFloatMemory: this.optimizeFloatMemory,\n                                precision: this.precision\n                            }, newThreadDim);\n                            const oldTexSize = this.texSize;\n                            if (oldTexSize) {\n                                const oldPrecision = this.getVariablePrecisionString(oldTexSize, this.tactic);\n                                const newPrecision = this.getVariablePrecisionString(newTexSize, this.tactic);\n                                if (oldPrecision !== newPrecision) {\n                                    if (this.debug) console.warn(\"Precision requirement changed, asking GPU instance to recompile\");\n                                    this.switchKernels({\n                                        type: \"outputPrecisionMismatch\",\n                                        precision: newPrecision,\n                                        needed: output\n                                    });\n                                    return;\n                                }\n                            }\n                            this.output = newOutput;\n                            this.threadDim = newThreadDim;\n                            this.texSize = newTexSize;\n                            const { context: gl  } = this;\n                            gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n                            this.updateMaxTexSize();\n                            this.framebuffer.width = this.texSize[0];\n                            this.framebuffer.height = this.texSize[1];\n                            gl.viewport(0, 0, this.maxTexSize[0], this.maxTexSize[1]);\n                            this.canvas.width = this.maxTexSize[0];\n                            this.canvas.height = this.maxTexSize[1];\n                            if (this.texture) this.texture.delete();\n                            this.texture = null;\n                            this._setupOutputTexture();\n                            if (this.mappedTextures && this.mappedTextures.length > 0) {\n                                for(let i = 0; i < this.mappedTextures.length; i++)this.mappedTextures[i].delete();\n                                this.mappedTextures = null;\n                                this._setupSubOutputTextures();\n                            }\n                        } else this.output = newOutput;\n                        return this;\n                    }\n                    renderValues() {\n                        return this.formatValues(this.transferValues(), this.output[0], this.output[1], this.output[2]);\n                    }\n                    switchKernels(reason) {\n                        if (this.switchingKernels) this.switchingKernels.push(reason);\n                        else this.switchingKernels = [\n                            reason\n                        ];\n                    }\n                    getVariablePrecisionString(textureSize = this.texSize, tactic = this.tactic, isInt = false) {\n                        if (!tactic) {\n                            if (!this.constructor.features.isSpeedTacticSupported) return \"highp\";\n                            const low = this.constructor.features[isInt ? \"lowIntPrecision\" : \"lowFloatPrecision\"];\n                            const medium = this.constructor.features[isInt ? \"mediumIntPrecision\" : \"mediumFloatPrecision\"];\n                            const high = this.constructor.features[isInt ? \"highIntPrecision\" : \"highFloatPrecision\"];\n                            const requiredSize = Math.log2(textureSize[0] * textureSize[1]);\n                            if (requiredSize <= low.rangeMax) return \"lowp\";\n                            else if (requiredSize <= medium.rangeMax) return \"mediump\";\n                            else if (requiredSize <= high.rangeMax) return \"highp\";\n                            else throw new Error(`The required size exceeds that of the ability of your system`);\n                        }\n                        switch(tactic){\n                            case \"speed\":\n                                return \"lowp\";\n                            case \"balanced\":\n                                return \"mediump\";\n                            case \"precision\":\n                                return \"highp\";\n                            default:\n                                throw new Error(`Unknown tactic \"${tactic}\" use \"speed\", \"balanced\", \"precision\", or empty for auto`);\n                        }\n                    }\n                    updateTextureArgumentRefs(kernelValue, arg) {\n                        if (!this.immutable) return;\n                        if (this.texture.texture === arg.texture) {\n                            const { prevArg: prevArg  } = kernelValue;\n                            if (prevArg) {\n                                if (prevArg.texture._refs === 1) {\n                                    this.texture.delete();\n                                    this.texture = prevArg.clone();\n                                    this._textureSwitched = true;\n                                }\n                                prevArg.delete();\n                            }\n                            kernelValue.prevArg = arg.clone();\n                        } else if (this.mappedTextures && this.mappedTextures.length > 0) {\n                            const { mappedTextures: mappedTextures  } = this;\n                            for(let i = 0; i < mappedTextures.length; i++){\n                                const mappedTexture = mappedTextures[i];\n                                if (mappedTexture.texture === arg.texture) {\n                                    const { prevArg: prevArg  } = kernelValue;\n                                    if (prevArg) {\n                                        if (prevArg.texture._refs === 1) {\n                                            mappedTexture.delete();\n                                            mappedTextures[i] = prevArg.clone();\n                                            this._mappedTextureSwitched[i] = true;\n                                        }\n                                        prevArg.delete();\n                                    }\n                                    kernelValue.prevArg = arg.clone();\n                                    return;\n                                }\n                            }\n                        }\n                    }\n                    onActivate(previousKernel) {\n                        this._textureSwitched = true;\n                        this.texture = previousKernel.texture;\n                        if (this.mappedTextures) {\n                            for(let i = 0; i < this.mappedTextures.length; i++)this._mappedTextureSwitched[i] = true;\n                            this.mappedTextures = previousKernel.mappedTextures;\n                        }\n                    }\n                    initCanvas() {}\n                }\n                const typeMap = {\n                    int: \"Integer\",\n                    float: \"Number\",\n                    vec2: \"Array(2)\",\n                    vec3: \"Array(3)\",\n                    vec4: \"Array(4)\"\n                };\n                module1.exports = {\n                    GLKernel: GLKernel\n                };\n            },\n            {\n                \"../../utils\": 114,\n                \"../kernel\": 36,\n                \"./texture/array-2-float\": 16,\n                \"./texture/array-2-float-2d\": 14,\n                \"./texture/array-2-float-3d\": 15,\n                \"./texture/array-3-float\": 19,\n                \"./texture/array-3-float-2d\": 17,\n                \"./texture/array-3-float-3d\": 18,\n                \"./texture/array-4-float\": 22,\n                \"./texture/array-4-float-2d\": 20,\n                \"./texture/array-4-float-3d\": 21,\n                \"./texture/float\": 25,\n                \"./texture/float-2d\": 23,\n                \"./texture/float-3d\": 24,\n                \"./texture/graphical\": 26,\n                \"./texture/memory-optimized\": 30,\n                \"./texture/memory-optimized-2d\": 28,\n                \"./texture/memory-optimized-3d\": 29,\n                \"./texture/unsigned\": 33,\n                \"./texture/unsigned-2d\": 31,\n                \"./texture/unsigned-3d\": 32\n            }\n        ],\n        14: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { GLTextureFloat: GLTextureFloat  } = require1(\"./float\");\n                class GLTextureArray2Float2D extends GLTextureFloat {\n                    constructor(settings){\n                        super(settings);\n                        this.type = \"ArrayTexture(2)\";\n                    }\n                    toArray() {\n                        return utils.erect2DArray2(this.renderValues(), this.output[0], this.output[1]);\n                    }\n                }\n                module1.exports = {\n                    GLTextureArray2Float2D: GLTextureArray2Float2D\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./float\": 25\n            }\n        ],\n        15: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { GLTextureFloat: GLTextureFloat  } = require1(\"./float\");\n                class GLTextureArray2Float3D extends GLTextureFloat {\n                    constructor(settings){\n                        super(settings);\n                        this.type = \"ArrayTexture(2)\";\n                    }\n                    toArray() {\n                        return utils.erect3DArray2(this.renderValues(), this.output[0], this.output[1], this.output[2]);\n                    }\n                }\n                module1.exports = {\n                    GLTextureArray2Float3D: GLTextureArray2Float3D\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./float\": 25\n            }\n        ],\n        16: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { GLTextureFloat: GLTextureFloat  } = require1(\"./float\");\n                class GLTextureArray2Float extends GLTextureFloat {\n                    constructor(settings){\n                        super(settings);\n                        this.type = \"ArrayTexture(2)\";\n                    }\n                    toArray() {\n                        return utils.erectArray2(this.renderValues(), this.output[0], this.output[1]);\n                    }\n                }\n                module1.exports = {\n                    GLTextureArray2Float: GLTextureArray2Float\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./float\": 25\n            }\n        ],\n        17: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { GLTextureFloat: GLTextureFloat  } = require1(\"./float\");\n                class GLTextureArray3Float2D extends GLTextureFloat {\n                    constructor(settings){\n                        super(settings);\n                        this.type = \"ArrayTexture(3)\";\n                    }\n                    toArray() {\n                        return utils.erect2DArray3(this.renderValues(), this.output[0], this.output[1]);\n                    }\n                }\n                module1.exports = {\n                    GLTextureArray3Float2D: GLTextureArray3Float2D\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./float\": 25\n            }\n        ],\n        18: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { GLTextureFloat: GLTextureFloat  } = require1(\"./float\");\n                class GLTextureArray3Float3D extends GLTextureFloat {\n                    constructor(settings){\n                        super(settings);\n                        this.type = \"ArrayTexture(3)\";\n                    }\n                    toArray() {\n                        return utils.erect3DArray3(this.renderValues(), this.output[0], this.output[1], this.output[2]);\n                    }\n                }\n                module1.exports = {\n                    GLTextureArray3Float3D: GLTextureArray3Float3D\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./float\": 25\n            }\n        ],\n        19: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { GLTextureFloat: GLTextureFloat  } = require1(\"./float\");\n                class GLTextureArray3Float extends GLTextureFloat {\n                    constructor(settings){\n                        super(settings);\n                        this.type = \"ArrayTexture(3)\";\n                    }\n                    toArray() {\n                        return utils.erectArray3(this.renderValues(), this.output[0]);\n                    }\n                }\n                module1.exports = {\n                    GLTextureArray3Float: GLTextureArray3Float\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./float\": 25\n            }\n        ],\n        20: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { GLTextureFloat: GLTextureFloat  } = require1(\"./float\");\n                class GLTextureArray4Float2D extends GLTextureFloat {\n                    constructor(settings){\n                        super(settings);\n                        this.type = \"ArrayTexture(4)\";\n                    }\n                    toArray() {\n                        return utils.erect2DArray4(this.renderValues(), this.output[0], this.output[1]);\n                    }\n                }\n                module1.exports = {\n                    GLTextureArray4Float2D: GLTextureArray4Float2D\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./float\": 25\n            }\n        ],\n        21: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { GLTextureFloat: GLTextureFloat  } = require1(\"./float\");\n                class GLTextureArray4Float3D extends GLTextureFloat {\n                    constructor(settings){\n                        super(settings);\n                        this.type = \"ArrayTexture(4)\";\n                    }\n                    toArray() {\n                        return utils.erect3DArray4(this.renderValues(), this.output[0], this.output[1], this.output[2]);\n                    }\n                }\n                module1.exports = {\n                    GLTextureArray4Float3D: GLTextureArray4Float3D\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./float\": 25\n            }\n        ],\n        22: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { GLTextureFloat: GLTextureFloat  } = require1(\"./float\");\n                class GLTextureArray4Float extends GLTextureFloat {\n                    constructor(settings){\n                        super(settings);\n                        this.type = \"ArrayTexture(4)\";\n                    }\n                    toArray() {\n                        return utils.erectArray4(this.renderValues(), this.output[0]);\n                    }\n                }\n                module1.exports = {\n                    GLTextureArray4Float: GLTextureArray4Float\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./float\": 25\n            }\n        ],\n        23: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { GLTextureFloat: GLTextureFloat  } = require1(\"./float\");\n                class GLTextureFloat2D extends GLTextureFloat {\n                    constructor(settings){\n                        super(settings);\n                        this.type = \"ArrayTexture(1)\";\n                    }\n                    toArray() {\n                        return utils.erect2DFloat(this.renderValues(), this.output[0], this.output[1]);\n                    }\n                }\n                module1.exports = {\n                    GLTextureFloat2D: GLTextureFloat2D\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./float\": 25\n            }\n        ],\n        24: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { GLTextureFloat: GLTextureFloat  } = require1(\"./float\");\n                class GLTextureFloat3D extends GLTextureFloat {\n                    constructor(settings){\n                        super(settings);\n                        this.type = \"ArrayTexture(1)\";\n                    }\n                    toArray() {\n                        return utils.erect3DFloat(this.renderValues(), this.output[0], this.output[1], this.output[2]);\n                    }\n                }\n                module1.exports = {\n                    GLTextureFloat3D: GLTextureFloat3D\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./float\": 25\n            }\n        ],\n        25: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { GLTexture: GLTexture  } = require1(\"./index\");\n                class GLTextureFloat extends GLTexture {\n                    get textureType() {\n                        return this.context.FLOAT;\n                    }\n                    constructor(settings){\n                        super(settings);\n                        this.type = \"ArrayTexture(1)\";\n                    }\n                    renderRawOutput() {\n                        const gl = this.context;\n                        const size = this.size;\n                        gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer());\n                        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture, 0);\n                        const result = new Float32Array(size[0] * size[1] * 4);\n                        gl.readPixels(0, 0, size[0], size[1], gl.RGBA, gl.FLOAT, result);\n                        return result;\n                    }\n                    renderValues() {\n                        if (this._deleted) return null;\n                        return this.renderRawOutput();\n                    }\n                    toArray() {\n                        return utils.erectFloat(this.renderValues(), this.output[0]);\n                    }\n                }\n                module1.exports = {\n                    GLTextureFloat: GLTextureFloat\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./index\": 27\n            }\n        ],\n        26: [\n            function(require1, module1, exports) {\n                const { GLTextureUnsigned: GLTextureUnsigned  } = require1(\"./unsigned\");\n                class GLTextureGraphical extends GLTextureUnsigned {\n                    constructor(settings){\n                        super(settings);\n                        this.type = \"ArrayTexture(4)\";\n                    }\n                    toArray() {\n                        return this.renderValues();\n                    }\n                }\n                module1.exports = {\n                    GLTextureGraphical: GLTextureGraphical\n                };\n            },\n            {\n                \"./unsigned\": 33\n            }\n        ],\n        27: [\n            function(require1, module1, exports) {\n                const { Texture: Texture  } = require1(\"../../../texture\");\n                class GLTexture extends Texture {\n                    get textureType() {\n                        throw new Error(`\"textureType\" not implemented on ${this.name}`);\n                    }\n                    clone() {\n                        return new this.constructor(this);\n                    }\n                    beforeMutate() {\n                        if (this.texture._refs > 1) {\n                            this.newTexture();\n                            return true;\n                        }\n                        return false;\n                    }\n                    cloneTexture() {\n                        this.texture._refs--;\n                        const { context: gl , size: size , texture: texture , kernel: kernel  } = this;\n                        if (kernel.debug) console.warn(\"cloning internal texture\");\n                        gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer());\n                        selectTexture(gl, texture);\n                        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n                        const target = gl.createTexture();\n                        selectTexture(gl, target);\n                        gl.texImage2D(gl.TEXTURE_2D, 0, this.internalFormat, size[0], size[1], 0, this.textureFormat, this.textureType, null);\n                        gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 0, 0, size[0], size[1]);\n                        target._refs = 1;\n                        this.texture = target;\n                    }\n                    newTexture() {\n                        this.texture._refs--;\n                        const gl = this.context;\n                        const size = this.size;\n                        const kernel = this.kernel;\n                        if (kernel.debug) console.warn(\"new internal texture\");\n                        const target = gl.createTexture();\n                        selectTexture(gl, target);\n                        gl.texImage2D(gl.TEXTURE_2D, 0, this.internalFormat, size[0], size[1], 0, this.textureFormat, this.textureType, null);\n                        target._refs = 1;\n                        this.texture = target;\n                    }\n                    clear() {\n                        if (this.texture._refs) {\n                            this.texture._refs--;\n                            const gl = this.context;\n                            const target = this.texture = gl.createTexture();\n                            selectTexture(gl, target);\n                            const size = this.size;\n                            target._refs = 1;\n                            gl.texImage2D(gl.TEXTURE_2D, 0, this.internalFormat, size[0], size[1], 0, this.textureFormat, this.textureType, null);\n                        }\n                        const { context: gl , texture: texture  } = this;\n                        gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer());\n                        gl.bindTexture(gl.TEXTURE_2D, texture);\n                        selectTexture(gl, texture);\n                        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n                        gl.clearColor(0, 0, 0, 0);\n                        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n                    }\n                    delete() {\n                        if (this._deleted) return;\n                        this._deleted = true;\n                        if (this.texture._refs) {\n                            this.texture._refs--;\n                            if (this.texture._refs) return;\n                        }\n                        this.context.deleteTexture(this.texture);\n                    }\n                    framebuffer() {\n                        if (!this._framebuffer) this._framebuffer = this.kernel.getRawValueFramebuffer(this.size[0], this.size[1]);\n                        return this._framebuffer;\n                    }\n                }\n                function selectTexture(gl, texture) {\n                    gl.activeTexture(gl.TEXTURE15);\n                    gl.bindTexture(gl.TEXTURE_2D, texture);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n                }\n                module1.exports = {\n                    GLTexture: GLTexture\n                };\n            },\n            {\n                \"../../../texture\": 113\n            }\n        ],\n        28: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { GLTextureFloat: GLTextureFloat  } = require1(\"./float\");\n                class GLTextureMemoryOptimized2D extends GLTextureFloat {\n                    constructor(settings){\n                        super(settings);\n                        this.type = \"MemoryOptimizedNumberTexture\";\n                    }\n                    toArray() {\n                        return utils.erectMemoryOptimized2DFloat(this.renderValues(), this.output[0], this.output[1]);\n                    }\n                }\n                module1.exports = {\n                    GLTextureMemoryOptimized2D: GLTextureMemoryOptimized2D\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./float\": 25\n            }\n        ],\n        29: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { GLTextureFloat: GLTextureFloat  } = require1(\"./float\");\n                class GLTextureMemoryOptimized3D extends GLTextureFloat {\n                    constructor(settings){\n                        super(settings);\n                        this.type = \"MemoryOptimizedNumberTexture\";\n                    }\n                    toArray() {\n                        return utils.erectMemoryOptimized3DFloat(this.renderValues(), this.output[0], this.output[1], this.output[2]);\n                    }\n                }\n                module1.exports = {\n                    GLTextureMemoryOptimized3D: GLTextureMemoryOptimized3D\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./float\": 25\n            }\n        ],\n        30: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { GLTextureFloat: GLTextureFloat  } = require1(\"./float\");\n                class GLTextureMemoryOptimized extends GLTextureFloat {\n                    constructor(settings){\n                        super(settings);\n                        this.type = \"MemoryOptimizedNumberTexture\";\n                    }\n                    toArray() {\n                        return utils.erectMemoryOptimizedFloat(this.renderValues(), this.output[0]);\n                    }\n                }\n                module1.exports = {\n                    GLTextureMemoryOptimized: GLTextureMemoryOptimized\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./float\": 25\n            }\n        ],\n        31: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { GLTextureUnsigned: GLTextureUnsigned  } = require1(\"./unsigned\");\n                class GLTextureUnsigned2D extends GLTextureUnsigned {\n                    constructor(settings){\n                        super(settings);\n                        this.type = \"NumberTexture\";\n                    }\n                    toArray() {\n                        return utils.erect2DPackedFloat(this.renderValues(), this.output[0], this.output[1]);\n                    }\n                }\n                module1.exports = {\n                    GLTextureUnsigned2D: GLTextureUnsigned2D\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./unsigned\": 33\n            }\n        ],\n        32: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { GLTextureUnsigned: GLTextureUnsigned  } = require1(\"./unsigned\");\n                class GLTextureUnsigned3D extends GLTextureUnsigned {\n                    constructor(settings){\n                        super(settings);\n                        this.type = \"NumberTexture\";\n                    }\n                    toArray() {\n                        return utils.erect3DPackedFloat(this.renderValues(), this.output[0], this.output[1], this.output[2]);\n                    }\n                }\n                module1.exports = {\n                    GLTextureUnsigned3D: GLTextureUnsigned3D\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./unsigned\": 33\n            }\n        ],\n        33: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { GLTexture: GLTexture  } = require1(\"./index\");\n                class GLTextureUnsigned extends GLTexture {\n                    get textureType() {\n                        return this.context.UNSIGNED_BYTE;\n                    }\n                    constructor(settings){\n                        super(settings);\n                        this.type = \"NumberTexture\";\n                    }\n                    renderRawOutput() {\n                        const { context: gl  } = this;\n                        gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer());\n                        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture, 0);\n                        const result = new Uint8Array(this.size[0] * this.size[1] * 4);\n                        gl.readPixels(0, 0, this.size[0], this.size[1], gl.RGBA, gl.UNSIGNED_BYTE, result);\n                        return result;\n                    }\n                    renderValues() {\n                        if (this._deleted) return null;\n                        return new Float32Array(this.renderRawOutput().buffer);\n                    }\n                    toArray() {\n                        return utils.erectPackedFloat(this.renderValues(), this.output[0]);\n                    }\n                }\n                module1.exports = {\n                    GLTextureUnsigned: GLTextureUnsigned\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./index\": 27\n            }\n        ],\n        34: [\n            function(require1, module1, exports) {\n                const getContext = require1(\"gl\");\n                const { WebGLKernel: WebGLKernel  } = require1(\"../web-gl/kernel\");\n                const { glKernelString: glKernelString  } = require1(\"../gl/kernel-string\");\n                let isSupported = null;\n                let testCanvas = null;\n                let testContext = null;\n                let testExtensions = null;\n                let features = null;\n                class HeadlessGLKernel extends WebGLKernel {\n                    static get isSupported() {\n                        if (isSupported !== null) return isSupported;\n                        this.setupFeatureChecks();\n                        isSupported = testContext !== null;\n                        return isSupported;\n                    }\n                    static setupFeatureChecks() {\n                        testCanvas = null;\n                        testExtensions = null;\n                        if (typeof getContext !== \"function\") return;\n                        try {\n                            testContext = getContext(2, 2, {\n                                preserveDrawingBuffer: true\n                            });\n                            if (!testContext || !testContext.getExtension) return;\n                            testExtensions = {\n                                STACKGL_resize_drawingbuffer: testContext.getExtension(\"STACKGL_resize_drawingbuffer\"),\n                                STACKGL_destroy_context: testContext.getExtension(\"STACKGL_destroy_context\"),\n                                OES_texture_float: testContext.getExtension(\"OES_texture_float\"),\n                                OES_texture_float_linear: testContext.getExtension(\"OES_texture_float_linear\"),\n                                OES_element_index_uint: testContext.getExtension(\"OES_element_index_uint\"),\n                                WEBGL_draw_buffers: testContext.getExtension(\"WEBGL_draw_buffers\"),\n                                WEBGL_color_buffer_float: testContext.getExtension(\"WEBGL_color_buffer_float\")\n                            };\n                            features = this.getFeatures();\n                        } catch (e) {\n                            console.warn(e);\n                        }\n                    }\n                    static isContextMatch(context) {\n                        try {\n                            return context.getParameter(context.RENDERER) === \"ANGLE\";\n                        } catch (e) {\n                            return false;\n                        }\n                    }\n                    static getIsTextureFloat() {\n                        return Boolean(testExtensions.OES_texture_float);\n                    }\n                    static getIsDrawBuffers() {\n                        return Boolean(testExtensions.WEBGL_draw_buffers);\n                    }\n                    static getChannelCount() {\n                        return testExtensions.WEBGL_draw_buffers ? testContext.getParameter(testExtensions.WEBGL_draw_buffers.MAX_DRAW_BUFFERS_WEBGL) : 1;\n                    }\n                    static getMaxTextureSize() {\n                        return testContext.getParameter(testContext.MAX_TEXTURE_SIZE);\n                    }\n                    static get testCanvas() {\n                        return testCanvas;\n                    }\n                    static get testContext() {\n                        return testContext;\n                    }\n                    static get features() {\n                        return features;\n                    }\n                    initCanvas() {\n                        return {};\n                    }\n                    initContext() {\n                        return getContext(2, 2, {\n                            preserveDrawingBuffer: true\n                        });\n                    }\n                    initExtensions() {\n                        this.extensions = {\n                            STACKGL_resize_drawingbuffer: this.context.getExtension(\"STACKGL_resize_drawingbuffer\"),\n                            STACKGL_destroy_context: this.context.getExtension(\"STACKGL_destroy_context\"),\n                            OES_texture_float: this.context.getExtension(\"OES_texture_float\"),\n                            OES_texture_float_linear: this.context.getExtension(\"OES_texture_float_linear\"),\n                            OES_element_index_uint: this.context.getExtension(\"OES_element_index_uint\"),\n                            WEBGL_draw_buffers: this.context.getExtension(\"WEBGL_draw_buffers\")\n                        };\n                    }\n                    build() {\n                        super.build.apply(this, arguments);\n                        if (!this.fallbackRequested) this.extensions.STACKGL_resize_drawingbuffer.resize(this.maxTexSize[0], this.maxTexSize[1]);\n                    }\n                    destroyExtensions() {\n                        this.extensions.STACKGL_resize_drawingbuffer = null;\n                        this.extensions.STACKGL_destroy_context = null;\n                        this.extensions.OES_texture_float = null;\n                        this.extensions.OES_texture_float_linear = null;\n                        this.extensions.OES_element_index_uint = null;\n                        this.extensions.WEBGL_draw_buffers = null;\n                    }\n                    static destroyContext(context) {\n                        const extension = context.getExtension(\"STACKGL_destroy_context\");\n                        if (extension && extension.destroy) extension.destroy();\n                    }\n                    toString() {\n                        const setupContextString = `const gl = context || require('gl')(1, 1);\\n`;\n                        const destroyContextString = `    if (!context) { gl.getExtension('STACKGL_destroy_context').destroy(); }\\n`;\n                        return glKernelString(this.constructor, arguments, this, setupContextString, destroyContextString);\n                    }\n                    setOutput(output) {\n                        super.setOutput(output);\n                        if (this.graphical && this.extensions.STACKGL_resize_drawingbuffer) this.extensions.STACKGL_resize_drawingbuffer.resize(this.maxTexSize[0], this.maxTexSize[1]);\n                        return this;\n                    }\n                }\n                module1.exports = {\n                    HeadlessGLKernel: HeadlessGLKernel\n                };\n            },\n            {\n                \"../gl/kernel-string\": 12,\n                \"../web-gl/kernel\": 70,\n                \"gl\": 2\n            }\n        ],\n        35: [\n            function(require1, module1, exports) {\n                class KernelValue {\n                    constructor(value1, settings){\n                        const { name: name1 , kernel: kernel , context: context , checkContext: checkContext , onRequestContextHandle: onRequestContextHandle , onUpdateValueMismatch: onUpdateValueMismatch , origin: origin , strictIntegers: strictIntegers , type: type , tactic: tactic  } = settings;\n                        if (!name1) throw new Error(\"name not set\");\n                        if (!type) throw new Error(\"type not set\");\n                        if (!origin) throw new Error(\"origin not set\");\n                        if (origin !== \"user\" && origin !== \"constants\") throw new Error(`origin must be \"user\" or \"constants\" value is \"${origin}\"`);\n                        if (!onRequestContextHandle) throw new Error(\"onRequestContextHandle is not set\");\n                        this.name = name1;\n                        this.origin = origin;\n                        this.tactic = tactic;\n                        this.varName = origin === \"constants\" ? `constants.${name1}` : name1;\n                        this.kernel = kernel;\n                        this.strictIntegers = strictIntegers;\n                        this.type = value1.type || type;\n                        this.size = value1.size || null;\n                        this.index = null;\n                        this.context = context;\n                        this.checkContext = checkContext !== null && checkContext !== undefined ? checkContext : true;\n                        this.contextHandle = null;\n                        this.onRequestContextHandle = onRequestContextHandle;\n                        this.onUpdateValueMismatch = onUpdateValueMismatch;\n                        this.forceUploadEachRun = null;\n                    }\n                    get id() {\n                        return `${this.origin}_${name}`;\n                    }\n                    getSource() {\n                        throw new Error(`\"getSource\" not defined on ${this.constructor.name}`);\n                    }\n                    updateValue(value1) {\n                        throw new Error(`\"updateValue\" not defined on ${this.constructor.name}`);\n                    }\n                }\n                module1.exports = {\n                    KernelValue: KernelValue\n                };\n            },\n            {}\n        ],\n        36: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../utils\");\n                const { Input: Input  } = require1(\"../input\");\n                class Kernel {\n                    static get isSupported() {\n                        throw new Error(`\"isSupported\" not implemented on ${this.name}`);\n                    }\n                    static isContextMatch(context) {\n                        throw new Error(`\"isContextMatch\" not implemented on ${this.name}`);\n                    }\n                    static getFeatures() {\n                        throw new Error(`\"getFeatures\" not implemented on ${this.name}`);\n                    }\n                    static destroyContext(context) {\n                        throw new Error(`\"destroyContext\" called on ${this.name}`);\n                    }\n                    static nativeFunctionArguments() {\n                        throw new Error(`\"nativeFunctionArguments\" called on ${this.name}`);\n                    }\n                    static nativeFunctionReturnType() {\n                        throw new Error(`\"nativeFunctionReturnType\" called on ${this.name}`);\n                    }\n                    static combineKernels() {\n                        throw new Error(`\"combineKernels\" called on ${this.name}`);\n                    }\n                    constructor(source, settings){\n                        if (typeof source !== \"object\") {\n                            if (typeof source !== \"string\") throw new Error(\"source not a string\");\n                            if (!utils.isFunctionString(source)) throw new Error(\"source not a function string\");\n                        }\n                        this.useLegacyEncoder = false;\n                        this.fallbackRequested = false;\n                        this.onRequestFallback = null;\n                        this.argumentNames = typeof source === \"string\" ? utils.getArgumentNamesFromString(source) : null;\n                        this.argumentTypes = null;\n                        this.argumentSizes = null;\n                        this.argumentBitRatios = null;\n                        this.kernelArguments = null;\n                        this.kernelConstants = null;\n                        this.forceUploadKernelConstants = null;\n                        this.source = source;\n                        this.output = null;\n                        this.debug = false;\n                        this.graphical = false;\n                        this.loopMaxIterations = 0;\n                        this.constants = null;\n                        this.constantTypes = null;\n                        this.constantBitRatios = null;\n                        this.dynamicArguments = false;\n                        this.dynamicOutput = false;\n                        this.canvas = null;\n                        this.context = null;\n                        this.checkContext = null;\n                        this.gpu = null;\n                        this.functions = null;\n                        this.nativeFunctions = null;\n                        this.injectedNative = null;\n                        this.subKernels = null;\n                        this.validate = true;\n                        this.immutable = false;\n                        this.pipeline = false;\n                        this.precision = null;\n                        this.tactic = null;\n                        this.plugins = null;\n                        this.returnType = null;\n                        this.leadingReturnStatement = null;\n                        this.followingReturnStatement = null;\n                        this.optimizeFloatMemory = null;\n                        this.strictIntegers = false;\n                        this.fixIntegerDivisionAccuracy = null;\n                        this.built = false;\n                        this.signature = null;\n                    }\n                    mergeSettings(settings) {\n                        for(let p in settings){\n                            if (!settings.hasOwnProperty(p) || !this.hasOwnProperty(p)) continue;\n                            switch(p){\n                                case \"output\":\n                                    if (!Array.isArray(settings.output)) {\n                                        this.setOutput(settings.output);\n                                        continue;\n                                    }\n                                    break;\n                                case \"functions\":\n                                    this.functions = [];\n                                    for(let i = 0; i < settings.functions.length; i++)this.addFunction(settings.functions[i]);\n                                    continue;\n                                case \"graphical\":\n                                    if (settings[p] && !settings.hasOwnProperty(\"precision\")) this.precision = \"unsigned\";\n                                    this[p] = settings[p];\n                                    continue;\n                                case \"nativeFunctions\":\n                                    if (!settings.nativeFunctions) continue;\n                                    this.nativeFunctions = [];\n                                    for(let i = 0; i < settings.nativeFunctions.length; i++){\n                                        const s = settings.nativeFunctions[i];\n                                        const { name: name1 , source: source  } = s;\n                                        this.addNativeFunction(name1, source, s);\n                                    }\n                                    continue;\n                            }\n                            this[p] = settings[p];\n                        }\n                        if (!this.canvas) this.canvas = this.initCanvas();\n                        if (!this.context) this.context = this.initContext();\n                        if (!this.plugins) this.plugins = this.initPlugins(settings);\n                    }\n                    build() {\n                        throw new Error(`\"build\" not defined on ${this.constructor.name}`);\n                    }\n                    run() {\n                        throw new Error(`\"run\" not defined on ${this.constructor.name}`);\n                    }\n                    initCanvas() {\n                        throw new Error(`\"initCanvas\" not defined on ${this.constructor.name}`);\n                    }\n                    initContext() {\n                        throw new Error(`\"initContext\" not defined on ${this.constructor.name}`);\n                    }\n                    initPlugins(settings) {\n                        throw new Error(`\"initPlugins\" not defined on ${this.constructor.name}`);\n                    }\n                    addFunction(source, settings = {}) {\n                        if (source.name && source.source && source.argumentTypes && \"returnType\" in source) this.functions.push(source);\n                        else if (\"settings\" in source && \"source\" in source) this.functions.push(this.functionToIGPUFunction(source.source, source.settings));\n                        else if (typeof source === \"string\" || typeof source === \"function\") this.functions.push(this.functionToIGPUFunction(source, settings));\n                        else throw new Error(`function not properly defined`);\n                        return this;\n                    }\n                    addNativeFunction(name1, source, settings = {}) {\n                        const { argumentTypes: argumentTypes , argumentNames: argumentNames  } = settings.argumentTypes ? splitArgumentTypes(settings.argumentTypes) : this.constructor.nativeFunctionArguments(source) || {};\n                        this.nativeFunctions.push({\n                            name: name1,\n                            source: source,\n                            settings: settings,\n                            argumentTypes: argumentTypes,\n                            argumentNames: argumentNames,\n                            returnType: settings.returnType || this.constructor.nativeFunctionReturnType(source)\n                        });\n                        return this;\n                    }\n                    setupArguments(args) {\n                        this.kernelArguments = [];\n                        if (!this.argumentTypes) {\n                            if (!this.argumentTypes) {\n                                this.argumentTypes = [];\n                                for(let i = 0; i < args.length; i++){\n                                    const argType = utils.getVariableType(args[i], this.strictIntegers);\n                                    const type = argType === \"Integer\" ? \"Number\" : argType;\n                                    this.argumentTypes.push(type);\n                                    this.kernelArguments.push({\n                                        type: type\n                                    });\n                                }\n                            }\n                        } else for(let i = 0; i < this.argumentTypes.length; i++)this.kernelArguments.push({\n                            type: this.argumentTypes[i]\n                        });\n                        this.argumentSizes = new Array(args.length);\n                        this.argumentBitRatios = new Int32Array(args.length);\n                        for(let i = 0; i < args.length; i++){\n                            const arg = args[i];\n                            this.argumentSizes[i] = arg.constructor === Input ? arg.size : null;\n                            this.argumentBitRatios[i] = this.getBitRatio(arg);\n                        }\n                        if (this.argumentNames.length !== args.length) throw new Error(`arguments are miss-aligned`);\n                    }\n                    setupConstants() {\n                        this.kernelConstants = [];\n                        let needsConstantTypes = this.constantTypes === null;\n                        if (needsConstantTypes) this.constantTypes = {};\n                        this.constantBitRatios = {};\n                        if (this.constants) for(let name1 in this.constants){\n                            if (needsConstantTypes) {\n                                const type = utils.getVariableType(this.constants[name1], this.strictIntegers);\n                                this.constantTypes[name1] = type;\n                                this.kernelConstants.push({\n                                    name: name1,\n                                    type: type\n                                });\n                            } else this.kernelConstants.push({\n                                name: name1,\n                                type: this.constantTypes[name1]\n                            });\n                            this.constantBitRatios[name1] = this.getBitRatio(this.constants[name1]);\n                        }\n                    }\n                    setOptimizeFloatMemory(flag) {\n                        this.optimizeFloatMemory = flag;\n                        return this;\n                    }\n                    toKernelOutput(output) {\n                        if (output.hasOwnProperty(\"x\")) {\n                            if (output.hasOwnProperty(\"y\")) {\n                                if (output.hasOwnProperty(\"z\")) return [\n                                    output.x,\n                                    output.y,\n                                    output.z\n                                ];\n                                else return [\n                                    output.x,\n                                    output.y\n                                ];\n                            } else return [\n                                output.x\n                            ];\n                        } else return output;\n                    }\n                    setOutput(output) {\n                        this.output = this.toKernelOutput(output);\n                        return this;\n                    }\n                    setDebug(flag) {\n                        this.debug = flag;\n                        return this;\n                    }\n                    setGraphical(flag) {\n                        this.graphical = flag;\n                        this.precision = \"unsigned\";\n                        return this;\n                    }\n                    setLoopMaxIterations(max) {\n                        this.loopMaxIterations = max;\n                        return this;\n                    }\n                    setConstants(constants) {\n                        this.constants = constants;\n                        return this;\n                    }\n                    setConstantTypes(constantTypes) {\n                        this.constantTypes = constantTypes;\n                        return this;\n                    }\n                    setFunctions(functions) {\n                        for(let i = 0; i < functions.length; i++)this.addFunction(functions[i]);\n                        return this;\n                    }\n                    setNativeFunctions(nativeFunctions) {\n                        for(let i = 0; i < nativeFunctions.length; i++){\n                            const settings = nativeFunctions[i];\n                            const { name: name1 , source: source  } = settings;\n                            this.addNativeFunction(name1, source, settings);\n                        }\n                        return this;\n                    }\n                    setInjectedNative(injectedNative) {\n                        this.injectedNative = injectedNative;\n                        return this;\n                    }\n                    setPipeline(flag) {\n                        this.pipeline = flag;\n                        return this;\n                    }\n                    setPrecision(flag) {\n                        this.precision = flag;\n                        return this;\n                    }\n                    setDimensions(flag) {\n                        utils.warnDeprecated(\"method\", \"setDimensions\", \"setOutput\");\n                        this.output = flag;\n                        return this;\n                    }\n                    setOutputToTexture(flag) {\n                        utils.warnDeprecated(\"method\", \"setOutputToTexture\", \"setPipeline\");\n                        this.pipeline = flag;\n                        return this;\n                    }\n                    setImmutable(flag) {\n                        this.immutable = flag;\n                        return this;\n                    }\n                    setCanvas(canvas) {\n                        this.canvas = canvas;\n                        return this;\n                    }\n                    setStrictIntegers(flag) {\n                        this.strictIntegers = flag;\n                        return this;\n                    }\n                    setDynamicOutput(flag) {\n                        this.dynamicOutput = flag;\n                        return this;\n                    }\n                    setHardcodeConstants(flag) {\n                        utils.warnDeprecated(\"method\", \"setHardcodeConstants\");\n                        this.setDynamicOutput(flag);\n                        this.setDynamicArguments(flag);\n                        return this;\n                    }\n                    setDynamicArguments(flag) {\n                        this.dynamicArguments = flag;\n                        return this;\n                    }\n                    setUseLegacyEncoder(flag) {\n                        this.useLegacyEncoder = flag;\n                        return this;\n                    }\n                    setWarnVarUsage(flag) {\n                        utils.warnDeprecated(\"method\", \"setWarnVarUsage\");\n                        return this;\n                    }\n                    getCanvas() {\n                        utils.warnDeprecated(\"method\", \"getCanvas\");\n                        return this.canvas;\n                    }\n                    getWebGl() {\n                        utils.warnDeprecated(\"method\", \"getWebGl\");\n                        return this.context;\n                    }\n                    setContext(context) {\n                        this.context = context;\n                        return this;\n                    }\n                    setArgumentTypes(argumentTypes) {\n                        if (Array.isArray(argumentTypes)) this.argumentTypes = argumentTypes;\n                        else {\n                            this.argumentTypes = [];\n                            for(const p in argumentTypes){\n                                if (!argumentTypes.hasOwnProperty(p)) continue;\n                                const argumentIndex = this.argumentNames.indexOf(p);\n                                if (argumentIndex === -1) throw new Error(`unable to find argument ${p}`);\n                                this.argumentTypes[argumentIndex] = argumentTypes[p];\n                            }\n                        }\n                        return this;\n                    }\n                    setTactic(tactic) {\n                        this.tactic = tactic;\n                        return this;\n                    }\n                    requestFallback(args) {\n                        if (!this.onRequestFallback) throw new Error(`\"onRequestFallback\" not defined on ${this.constructor.name}`);\n                        this.fallbackRequested = true;\n                        return this.onRequestFallback(args);\n                    }\n                    validateSettings() {\n                        throw new Error(`\"validateSettings\" not defined on ${this.constructor.name}`);\n                    }\n                    addSubKernel(subKernel) {\n                        if (this.subKernels === null) this.subKernels = [];\n                        if (!subKernel.source) throw new Error('subKernel missing \"source\" property');\n                        if (!subKernel.property && isNaN(subKernel.property)) throw new Error('subKernel missing \"property\" property');\n                        if (!subKernel.name) throw new Error('subKernel missing \"name\" property');\n                        this.subKernels.push(subKernel);\n                        return this;\n                    }\n                    destroy(removeCanvasReferences) {\n                        throw new Error(`\"destroy\" called on ${this.constructor.name}`);\n                    }\n                    getBitRatio(value1) {\n                        if (this.precision === \"single\") return 4;\n                        else if (Array.isArray(value1[0])) return this.getBitRatio(value1[0]);\n                        else if (value1.constructor === Input) return this.getBitRatio(value1.value);\n                        switch(value1.constructor){\n                            case Uint8ClampedArray:\n                            case Uint8Array:\n                            case Int8Array:\n                                return 1;\n                            case Uint16Array:\n                            case Int16Array:\n                                return 2;\n                            case Float32Array:\n                            case Int32Array:\n                            default:\n                                return 4;\n                        }\n                    }\n                    getPixels(flip) {\n                        throw new Error(`\"getPixels\" called on ${this.constructor.name}`);\n                    }\n                    checkOutput() {\n                        if (!this.output || !utils.isArray(this.output)) throw new Error(\"kernel.output not an array\");\n                        if (this.output.length < 1) throw new Error(\"kernel.output is empty, needs at least 1 value\");\n                        for(let i = 0; i < this.output.length; i++){\n                            if (isNaN(this.output[i]) || this.output[i] < 1) throw new Error(`${this.constructor.name}.output[${i}] incorrectly defined as \\`${this.output[i]}\\`, needs to be numeric, and greater than 0`);\n                        }\n                    }\n                    prependString(value1) {\n                        throw new Error(`\"prependString\" called on ${this.constructor.name}`);\n                    }\n                    hasPrependString(value1) {\n                        throw new Error(`\"hasPrependString\" called on ${this.constructor.name}`);\n                    }\n                    toJSON() {\n                        return {\n                            settings: {\n                                output: this.output,\n                                pipeline: this.pipeline,\n                                argumentNames: this.argumentNames,\n                                argumentsTypes: this.argumentTypes,\n                                constants: this.constants,\n                                pluginNames: this.plugins ? this.plugins.map((plugin)=>plugin.name) : null,\n                                returnType: this.returnType\n                            }\n                        };\n                    }\n                    buildSignature(args) {\n                        const Constructor = this.constructor;\n                        this.signature = Constructor.getSignature(this, Constructor.getArgumentTypes(this, args));\n                    }\n                    static getArgumentTypes(kernel, args) {\n                        const argumentTypes = new Array(args.length);\n                        for(let i = 0; i < args.length; i++){\n                            const arg = args[i];\n                            const type = kernel.argumentTypes[i];\n                            if (arg.type) argumentTypes[i] = arg.type;\n                            else switch(type){\n                                case \"Number\":\n                                case \"Integer\":\n                                case \"Float\":\n                                case \"ArrayTexture(1)\":\n                                    argumentTypes[i] = utils.getVariableType(arg);\n                                    break;\n                                default:\n                                    argumentTypes[i] = type;\n                            }\n                        }\n                        return argumentTypes;\n                    }\n                    static getSignature(kernel, argumentTypes) {\n                        throw new Error(`\"getSignature\" not implemented on ${this.name}`);\n                    }\n                    functionToIGPUFunction(source, settings = {}) {\n                        if (typeof source !== \"string\" && typeof source !== \"function\") throw new Error(\"source not a string or function\");\n                        const sourceString = typeof source === \"string\" ? source : source.toString();\n                        let argumentTypes = [];\n                        if (Array.isArray(settings.argumentTypes)) argumentTypes = settings.argumentTypes;\n                        else if (typeof settings.argumentTypes === \"object\") argumentTypes = utils.getArgumentNamesFromString(sourceString).map((name1)=>settings.argumentTypes[name1]) || [];\n                        else argumentTypes = settings.argumentTypes || [];\n                        return {\n                            name: utils.getFunctionNameFromString(sourceString) || null,\n                            source: sourceString,\n                            argumentTypes: argumentTypes,\n                            returnType: settings.returnType || null\n                        };\n                    }\n                    onActivate(previousKernel) {}\n                }\n                function splitArgumentTypes(argumentTypesObject) {\n                    const argumentNames = Object.keys(argumentTypesObject);\n                    const argumentTypes = [];\n                    for(let i = 0; i < argumentNames.length; i++){\n                        const argumentName = argumentNames[i];\n                        argumentTypes.push(argumentTypesObject[argumentName]);\n                    }\n                    return {\n                        argumentTypes: argumentTypes,\n                        argumentNames: argumentNames\n                    };\n                }\n                module1.exports = {\n                    Kernel: Kernel\n                };\n            },\n            {\n                \"../input\": 110,\n                \"../utils\": 114\n            }\n        ],\n        37: [\n            function(require1, module1, exports) {\n                const fragmentShader = `__HEADER__;\n__FLOAT_TACTIC_DECLARATION__;\n__INT_TACTIC_DECLARATION__;\n__SAMPLER_2D_TACTIC_DECLARATION__;\n\nconst int LOOP_MAX = __LOOP_MAX__;\n\n__PLUGINS__;\n__CONSTANTS__;\n\nvarying vec2 vTexCoord;\n\nfloat acosh(float x) {\n  return log(x + sqrt(x * x - 1.0));\n}\n\nfloat sinh(float x) {\n  return (pow(${Math.E}, x) - pow(${Math.E}, -x)) / 2.0;\n}\n\nfloat asinh(float x) {\n  return log(x + sqrt(x * x + 1.0));\n}\n\nfloat atan2(float v1, float v2) {\n  if (v1 == 0.0 || v2 == 0.0) return 0.0;\n  return atan(v1 / v2);\n}\n\nfloat atanh(float x) {\n  x = (x + 1.0) / (x - 1.0);\n  if (x < 0.0) {\n    return 0.5 * log(-x);\n  }\n  return 0.5 * log(x);\n}\n\nfloat cbrt(float x) {\n  if (x >= 0.0) {\n    return pow(x, 1.0 / 3.0);\n  } else {\n    return -pow(x, 1.0 / 3.0);\n  }\n}\n\nfloat cosh(float x) {\n  return (pow(${Math.E}, x) + pow(${Math.E}, -x)) / 2.0; \n}\n\nfloat expm1(float x) {\n  return pow(${Math.E}, x) - 1.0; \n}\n\nfloat fround(highp float x) {\n  return x;\n}\n\nfloat imul(float v1, float v2) {\n  return float(int(v1) * int(v2));\n}\n\nfloat log10(float x) {\n  return log2(x) * (1.0 / log2(10.0));\n}\n\nfloat log1p(float x) {\n  return log(1.0 + x);\n}\n\nfloat _pow(float v1, float v2) {\n  if (v2 == 0.0) return 1.0;\n  return pow(v1, v2);\n}\n\nfloat tanh(float x) {\n  float e = exp(2.0 * x);\n  return (e - 1.0) / (e + 1.0);\n}\n\nfloat trunc(float x) {\n  if (x >= 0.0) {\n    return floor(x); \n  } else {\n    return ceil(x);\n  }\n}\n\nvec4 _round(vec4 x) {\n  return floor(x + 0.5);\n}\n\nfloat _round(float x) {\n  return floor(x + 0.5);\n}\n\nconst int BIT_COUNT = 32;\nint modi(int x, int y) {\n  return x - y * (x / y);\n}\n\nint bitwiseOr(int a, int b) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) || (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 || b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseXOR(int a, int b) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) != (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 || b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseAnd(int a, int b) {\n  int result = 0;\n  int n = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) && (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 && b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseNot(int a) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (modi(a, 2) == 0) {\n      result += n;    \n    }\n    a = a / 2;\n    n = n * 2;\n  }\n  return result;\n}\nint bitwiseZeroFillLeftShift(int n, int shift) {\n  int maxBytes = BIT_COUNT;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (maxBytes >= n) {\n      break;\n    }\n    maxBytes *= 2;\n  }\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= shift) {\n      break;\n    }\n    n *= 2;\n  }\n\n  int result = 0;\n  int byteVal = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= maxBytes) break;\n    if (modi(n, 2) > 0) { result += byteVal; }\n    n = int(n / 2);\n    byteVal *= 2;\n  }\n  return result;\n}\n\nint bitwiseSignedRightShift(int num, int shifts) {\n  return int(floor(float(num) / pow(2.0, float(shifts))));\n}\n\nint bitwiseZeroFillRightShift(int n, int shift) {\n  int maxBytes = BIT_COUNT;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (maxBytes >= n) {\n      break;\n    }\n    maxBytes *= 2;\n  }\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= shift) {\n      break;\n    }\n    n /= 2;\n  }\n  int result = 0;\n  int byteVal = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= maxBytes) break;\n    if (modi(n, 2) > 0) { result += byteVal; }\n    n = int(n / 2);\n    byteVal *= 2;\n  }\n  return result;\n}\n\nvec2 integerMod(vec2 x, float y) {\n  vec2 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec3 integerMod(vec3 x, float y) {\n  vec3 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec4 integerMod(vec4 x, vec4 y) {\n  vec4 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nfloat integerMod(float x, float y) {\n  float res = floor(mod(x, y));\n  return res * (res > floor(y) - 1.0 ? 0.0 : 1.0);\n}\n\nint integerMod(int x, int y) {\n  return x - (y * int(x / y));\n}\n\n__DIVIDE_WITH_INTEGER_CHECK__;\n\n// Here be dragons!\n// DO NOT OPTIMIZE THIS CODE\n// YOU WILL BREAK SOMETHING ON SOMEBODY\\'S MACHINE\n// LEAVE IT AS IT IS, LEST YOU WASTE YOUR OWN TIME\nconst vec2 MAGIC_VEC = vec2(1.0, -256.0);\nconst vec4 SCALE_FACTOR = vec4(1.0, 256.0, 65536.0, 0.0);\nconst vec4 SCALE_FACTOR_INV = vec4(1.0, 0.00390625, 0.0000152587890625, 0.0); // 1, 1/256, 1/65536\nfloat decode32(vec4 texel) {\n  __DECODE32_ENDIANNESS__;\n  texel *= 255.0;\n  vec2 gte128;\n  gte128.x = texel.b >= 128.0 ? 1.0 : 0.0;\n  gte128.y = texel.a >= 128.0 ? 1.0 : 0.0;\n  float exponent = 2.0 * texel.a - 127.0 + dot(gte128, MAGIC_VEC);\n  float res = exp2(_round(exponent));\n  texel.b = texel.b - 128.0 * gte128.x;\n  res = dot(texel, SCALE_FACTOR) * exp2(_round(exponent-23.0)) + res;\n  res *= gte128.y * -2.0 + 1.0;\n  return res;\n}\n\nfloat decode16(vec4 texel, int index) {\n  int channel = integerMod(index, 2);\n  if (channel == 0) return texel.r * 255.0 + texel.g * 65280.0;\n  if (channel == 1) return texel.b * 255.0 + texel.a * 65280.0;\n  return 0.0;\n}\n\nfloat decode8(vec4 texel, int index) {\n  int channel = integerMod(index, 4);\n  if (channel == 0) return texel.r * 255.0;\n  if (channel == 1) return texel.g * 255.0;\n  if (channel == 2) return texel.b * 255.0;\n  if (channel == 3) return texel.a * 255.0;\n  return 0.0;\n}\n\nvec4 legacyEncode32(float f) {\n  float F = abs(f);\n  float sign = f < 0.0 ? 1.0 : 0.0;\n  float exponent = floor(log2(F));\n  float mantissa = (exp2(-exponent) * F);\n  // exponent += floor(log2(mantissa));\n  vec4 texel = vec4(F * exp2(23.0-exponent)) * SCALE_FACTOR_INV;\n  texel.rg = integerMod(texel.rg, 256.0);\n  texel.b = integerMod(texel.b, 128.0);\n  texel.a = exponent*0.5 + 63.5;\n  texel.ba += vec2(integerMod(exponent+127.0, 2.0), sign) * 128.0;\n  texel = floor(texel);\n  texel *= 0.003921569; // 1/255\n  __ENCODE32_ENDIANNESS__;\n  return texel;\n}\n\n// https://github.com/gpujs/gpu.js/wiki/Encoder-details\nvec4 encode32(float value) {\n  if (value == 0.0) return vec4(0, 0, 0, 0);\n\n  float exponent;\n  float mantissa;\n  vec4  result;\n  float sgn;\n\n  sgn = step(0.0, -value);\n  value = abs(value);\n\n  exponent = floor(log2(value));\n\n  mantissa = value*pow(2.0, -exponent)-1.0;\n  exponent = exponent+127.0;\n  result   = vec4(0,0,0,0);\n\n  result.a = floor(exponent/2.0);\n  exponent = exponent - result.a*2.0;\n  result.a = result.a + 128.0*sgn;\n\n  result.b = floor(mantissa * 128.0);\n  mantissa = mantissa - result.b / 128.0;\n  result.b = result.b + exponent*128.0;\n\n  result.g = floor(mantissa*32768.0);\n  mantissa = mantissa - result.g/32768.0;\n\n  result.r = floor(mantissa*8388608.0);\n  return result/255.0;\n}\n// Dragons end here\n\nint index;\nivec3 threadId;\n\nivec3 indexTo3D(int idx, ivec3 texDim) {\n  int z = int(idx / (texDim.x * texDim.y));\n  idx -= z * int(texDim.x * texDim.y);\n  int y = int(idx / texDim.x);\n  int x = int(integerMod(idx, texDim.x));\n  return ivec3(x, y, z);\n}\n\nfloat get32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize));\n  return decode32(texel);\n}\n\nfloat get16(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x * 2;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize.x * 2, texSize.y));\n  return decode16(texel, index);\n}\n\nfloat get8(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x * 4;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize.x * 4, texSize.y));\n  return decode8(texel, index);\n}\n\nfloat getMemoryOptimized32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int channel = integerMod(index, 4);\n  index = index / 4;\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize));\n  if (channel == 0) return texel.r;\n  if (channel == 1) return texel.g;\n  if (channel == 2) return texel.b;\n  if (channel == 3) return texel.a;\n  return 0.0;\n}\n\nvec4 getImage2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  return texture2D(tex, st / vec2(texSize));\n}\n\nfloat getFloatFromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return result[0];\n}\n\nvec2 getVec2FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return vec2(result[0], result[1]);\n}\n\nvec2 getMemoryOptimizedVec2(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + (texDim.x * (y + (texDim.y * z)));\n  int channel = integerMod(index, 2);\n  index = index / 2;\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize));\n  if (channel == 0) return vec2(texel.r, texel.g);\n  if (channel == 1) return vec2(texel.b, texel.a);\n  return vec2(0.0, 0.0);\n}\n\nvec3 getVec3FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return vec3(result[0], result[1], result[2]);\n}\n\nvec3 getMemoryOptimizedVec3(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int fieldIndex = 3 * (x + texDim.x * (y + texDim.y * z));\n  int vectorIndex = fieldIndex / 4;\n  int vectorOffset = fieldIndex - vectorIndex * 4;\n  int readY = vectorIndex / texSize.x;\n  int readX = vectorIndex - readY * texSize.x;\n  vec4 tex1 = texture2D(tex, (vec2(readX, readY) + 0.5) / vec2(texSize));\n  \n  if (vectorOffset == 0) {\n    return tex1.xyz;\n  } else if (vectorOffset == 1) {\n    return tex1.yzw;\n  } else {\n    readX++;\n    if (readX >= texSize.x) {\n      readX = 0;\n      readY++;\n    }\n    vec4 tex2 = texture2D(tex, vec2(readX, readY) / vec2(texSize));\n    if (vectorOffset == 2) {\n      return vec3(tex1.z, tex1.w, tex2.x);\n    } else {\n      return vec3(tex1.w, tex2.x, tex2.y);\n    }\n  }\n}\n\nvec4 getVec4FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  return getImage2D(tex, texSize, texDim, z, y, x);\n}\n\nvec4 getMemoryOptimizedVec4(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int channel = integerMod(index, 2);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize));\n  return vec4(texel.r, texel.g, texel.b, texel.a);\n}\n\nvec4 actualColor;\nvoid color(float r, float g, float b, float a) {\n  actualColor = vec4(r,g,b,a);\n}\n\nvoid color(float r, float g, float b) {\n  color(r,g,b,1.0);\n}\n\nvoid color(sampler2D image) {\n  actualColor = texture2D(image, vTexCoord);\n}\n\nfloat modulo(float number, float divisor) {\n  if (number < 0.0) {\n    number = abs(number);\n    if (divisor < 0.0) {\n      divisor = abs(divisor);\n    }\n    return -mod(number, divisor);\n  }\n  if (divisor < 0.0) {\n    divisor = abs(divisor);\n  }\n  return mod(number, divisor);\n}\n\n__INJECTED_NATIVE__;\n__MAIN_CONSTANTS__;\n__MAIN_ARGUMENTS__;\n__KERNEL__;\n\nvoid main(void) {\n  index = int(vTexCoord.s * float(uTexSize.x)) + int(vTexCoord.t * float(uTexSize.y)) * uTexSize.x;\n  __MAIN_RESULT__;\n}`;\n                module1.exports = {\n                    fragmentShader: fragmentShader\n                };\n            },\n            {}\n        ],\n        38: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../utils\");\n                const { FunctionNode: FunctionNode  } = require1(\"../function-node\");\n                class WebGLFunctionNode extends FunctionNode {\n                    constructor(source, settings){\n                        super(source, settings);\n                        if (settings && settings.hasOwnProperty(\"fixIntegerDivisionAccuracy\")) this.fixIntegerDivisionAccuracy = settings.fixIntegerDivisionAccuracy;\n                    }\n                    astConditionalExpression(ast, retArr) {\n                        if (ast.type !== \"ConditionalExpression\") throw this.astErrorOutput(\"Not a conditional expression\", ast);\n                        const consequentType = this.getType(ast.consequent);\n                        const alternateType = this.getType(ast.alternate);\n                        if (consequentType === null && alternateType === null) {\n                            retArr.push(\"if (\");\n                            this.astGeneric(ast.test, retArr);\n                            retArr.push(\") {\");\n                            this.astGeneric(ast.consequent, retArr);\n                            retArr.push(\";\");\n                            retArr.push(\"} else {\");\n                            this.astGeneric(ast.alternate, retArr);\n                            retArr.push(\";\");\n                            retArr.push(\"}\");\n                            return retArr;\n                        }\n                        retArr.push(\"(\");\n                        this.astGeneric(ast.test, retArr);\n                        retArr.push(\"?\");\n                        this.astGeneric(ast.consequent, retArr);\n                        retArr.push(\":\");\n                        this.astGeneric(ast.alternate, retArr);\n                        retArr.push(\")\");\n                        return retArr;\n                    }\n                    astFunction(ast, retArr) {\n                        if (this.isRootKernel) retArr.push(\"void\");\n                        else {\n                            if (!this.returnType) {\n                                const lastReturn = this.findLastReturn();\n                                if (lastReturn) {\n                                    this.returnType = this.getType(ast.body);\n                                    if (this.returnType === \"LiteralInteger\") this.returnType = \"Number\";\n                                }\n                            }\n                            const { returnType: returnType  } = this;\n                            if (!returnType) retArr.push(\"void\");\n                            else {\n                                const type = typeMap[returnType];\n                                if (!type) throw new Error(`unknown type ${returnType}`);\n                                retArr.push(type);\n                            }\n                        }\n                        retArr.push(\" \");\n                        retArr.push(this.name);\n                        retArr.push(\"(\");\n                        if (!this.isRootKernel) for(let i = 0; i < this.argumentNames.length; ++i){\n                            const argumentName = this.argumentNames[i];\n                            if (i > 0) retArr.push(\", \");\n                            let argumentType = this.argumentTypes[this.argumentNames.indexOf(argumentName)];\n                            if (!argumentType) throw this.astErrorOutput(`Unknown argument ${argumentName} type`, ast);\n                            if (argumentType === \"LiteralInteger\") this.argumentTypes[i] = argumentType = \"Number\";\n                            const type = typeMap[argumentType];\n                            if (!type) throw this.astErrorOutput(\"Unexpected expression\", ast);\n                            const name1 = utils.sanitizeName(argumentName);\n                            if (type === \"sampler2D\" || type === \"sampler2DArray\") retArr.push(`${type} user_${name1},ivec2 user_${name1}Size,ivec3 user_${name1}Dim`);\n                            else retArr.push(`${type} user_${name1}`);\n                        }\n                        retArr.push(\") {\\n\");\n                        for(let i = 0; i < ast.body.body.length; ++i){\n                            this.astGeneric(ast.body.body[i], retArr);\n                            retArr.push(\"\\n\");\n                        }\n                        retArr.push(\"}\\n\");\n                        return retArr;\n                    }\n                    astReturnStatement(ast, retArr) {\n                        if (!ast.argument) throw this.astErrorOutput(\"Unexpected return statement\", ast);\n                        this.pushState(\"skip-literal-correction\");\n                        const type = this.getType(ast.argument);\n                        this.popState(\"skip-literal-correction\");\n                        const result = [];\n                        if (!this.returnType) {\n                            if (type === \"LiteralInteger\" || type === \"Integer\") this.returnType = \"Number\";\n                            else this.returnType = type;\n                        }\n                        switch(this.returnType){\n                            case \"LiteralInteger\":\n                            case \"Number\":\n                            case \"Float\":\n                                switch(type){\n                                    case \"Integer\":\n                                        result.push(\"float(\");\n                                        this.astGeneric(ast.argument, result);\n                                        result.push(\")\");\n                                        break;\n                                    case \"LiteralInteger\":\n                                        this.castLiteralToFloat(ast.argument, result);\n                                        if (this.getType(ast) === \"Integer\") {\n                                            result.unshift(\"float(\");\n                                            result.push(\")\");\n                                        }\n                                        break;\n                                    default:\n                                        this.astGeneric(ast.argument, result);\n                                }\n                                break;\n                            case \"Integer\":\n                                switch(type){\n                                    case \"Float\":\n                                    case \"Number\":\n                                        this.castValueToInteger(ast.argument, result);\n                                        break;\n                                    case \"LiteralInteger\":\n                                        this.castLiteralToInteger(ast.argument, result);\n                                        break;\n                                    default:\n                                        this.astGeneric(ast.argument, result);\n                                }\n                                break;\n                            case \"Array(4)\":\n                            case \"Array(3)\":\n                            case \"Array(2)\":\n                            case \"Matrix(2)\":\n                            case \"Matrix(3)\":\n                            case \"Matrix(4)\":\n                            case \"Input\":\n                                this.astGeneric(ast.argument, result);\n                                break;\n                            default:\n                                throw this.astErrorOutput(`unhandled return type ${this.returnType}`, ast);\n                        }\n                        if (this.isRootKernel) {\n                            retArr.push(`kernelResult = ${result.join(\"\")};`);\n                            retArr.push(\"return;\");\n                        } else if (this.isSubKernel) {\n                            retArr.push(`subKernelResult_${this.name} = ${result.join(\"\")};`);\n                            retArr.push(`return subKernelResult_${this.name};`);\n                        } else retArr.push(`return ${result.join(\"\")};`);\n                        return retArr;\n                    }\n                    astLiteral(ast, retArr) {\n                        if (isNaN(ast.value)) throw this.astErrorOutput(\"Non-numeric literal not supported : \" + ast.value, ast);\n                        const key = this.astKey(ast);\n                        if (Number.isInteger(ast.value)) {\n                            if (this.isState(\"casting-to-integer\") || this.isState(\"building-integer\")) {\n                                this.literalTypes[key] = \"Integer\";\n                                retArr.push(`${ast.value}`);\n                            } else if (this.isState(\"casting-to-float\") || this.isState(\"building-float\")) {\n                                this.literalTypes[key] = \"Number\";\n                                retArr.push(`${ast.value}.0`);\n                            } else {\n                                this.literalTypes[key] = \"Number\";\n                                retArr.push(`${ast.value}.0`);\n                            }\n                        } else if (this.isState(\"casting-to-integer\") || this.isState(\"building-integer\")) {\n                            this.literalTypes[key] = \"Integer\";\n                            retArr.push(Math.round(ast.value));\n                        } else {\n                            this.literalTypes[key] = \"Number\";\n                            retArr.push(`${ast.value}`);\n                        }\n                        return retArr;\n                    }\n                    astBinaryExpression(ast, retArr) {\n                        if (this.checkAndUpconvertOperator(ast, retArr)) return retArr;\n                        if (this.fixIntegerDivisionAccuracy && ast.operator === \"/\") {\n                            retArr.push(\"divWithIntCheck(\");\n                            this.pushState(\"building-float\");\n                            switch(this.getType(ast.left)){\n                                case \"Integer\":\n                                    this.castValueToFloat(ast.left, retArr);\n                                    break;\n                                case \"LiteralInteger\":\n                                    this.castLiteralToFloat(ast.left, retArr);\n                                    break;\n                                default:\n                                    this.astGeneric(ast.left, retArr);\n                            }\n                            retArr.push(\", \");\n                            switch(this.getType(ast.right)){\n                                case \"Integer\":\n                                    this.castValueToFloat(ast.right, retArr);\n                                    break;\n                                case \"LiteralInteger\":\n                                    this.castLiteralToFloat(ast.right, retArr);\n                                    break;\n                                default:\n                                    this.astGeneric(ast.right, retArr);\n                            }\n                            this.popState(\"building-float\");\n                            retArr.push(\")\");\n                            return retArr;\n                        }\n                        retArr.push(\"(\");\n                        const leftType = this.getType(ast.left) || \"Number\";\n                        const rightType = this.getType(ast.right) || \"Number\";\n                        if (!leftType || !rightType) throw this.astErrorOutput(`Unhandled binary expression`, ast);\n                        const key = leftType + \" & \" + rightType;\n                        switch(key){\n                            case \"Integer & Integer\":\n                                this.pushState(\"building-integer\");\n                                this.astGeneric(ast.left, retArr);\n                                retArr.push(operatorMap[ast.operator] || ast.operator);\n                                this.astGeneric(ast.right, retArr);\n                                this.popState(\"building-integer\");\n                                break;\n                            case \"Number & Float\":\n                            case \"Float & Number\":\n                            case \"Float & Float\":\n                            case \"Number & Number\":\n                                this.pushState(\"building-float\");\n                                this.astGeneric(ast.left, retArr);\n                                retArr.push(operatorMap[ast.operator] || ast.operator);\n                                this.astGeneric(ast.right, retArr);\n                                this.popState(\"building-float\");\n                                break;\n                            case \"LiteralInteger & LiteralInteger\":\n                                if (this.isState(\"casting-to-integer\") || this.isState(\"building-integer\")) {\n                                    this.pushState(\"building-integer\");\n                                    this.astGeneric(ast.left, retArr);\n                                    retArr.push(operatorMap[ast.operator] || ast.operator);\n                                    this.astGeneric(ast.right, retArr);\n                                    this.popState(\"building-integer\");\n                                } else {\n                                    this.pushState(\"building-float\");\n                                    this.castLiteralToFloat(ast.left, retArr);\n                                    retArr.push(operatorMap[ast.operator] || ast.operator);\n                                    this.castLiteralToFloat(ast.right, retArr);\n                                    this.popState(\"building-float\");\n                                }\n                                break;\n                            case \"Integer & Float\":\n                            case \"Integer & Number\":\n                                if (ast.operator === \">\" || ast.operator === \"<\" && ast.right.type === \"Literal\") {\n                                    if (!Number.isInteger(ast.right.value)) {\n                                        this.pushState(\"building-float\");\n                                        this.castValueToFloat(ast.left, retArr);\n                                        retArr.push(operatorMap[ast.operator] || ast.operator);\n                                        this.astGeneric(ast.right, retArr);\n                                        this.popState(\"building-float\");\n                                        break;\n                                    }\n                                }\n                                this.pushState(\"building-integer\");\n                                this.astGeneric(ast.left, retArr);\n                                retArr.push(operatorMap[ast.operator] || ast.operator);\n                                this.pushState(\"casting-to-integer\");\n                                if (ast.right.type === \"Literal\") {\n                                    const literalResult = [];\n                                    this.astGeneric(ast.right, literalResult);\n                                    const literalType = this.getType(ast.right);\n                                    if (literalType === \"Integer\") retArr.push(literalResult.join(\"\"));\n                                    else throw this.astErrorOutput(`Unhandled binary expression with literal`, ast);\n                                } else {\n                                    retArr.push(\"int(\");\n                                    this.astGeneric(ast.right, retArr);\n                                    retArr.push(\")\");\n                                }\n                                this.popState(\"casting-to-integer\");\n                                this.popState(\"building-integer\");\n                                break;\n                            case \"Integer & LiteralInteger\":\n                                this.pushState(\"building-integer\");\n                                this.astGeneric(ast.left, retArr);\n                                retArr.push(operatorMap[ast.operator] || ast.operator);\n                                this.castLiteralToInteger(ast.right, retArr);\n                                this.popState(\"building-integer\");\n                                break;\n                            case \"Number & Integer\":\n                                this.pushState(\"building-float\");\n                                this.astGeneric(ast.left, retArr);\n                                retArr.push(operatorMap[ast.operator] || ast.operator);\n                                this.castValueToFloat(ast.right, retArr);\n                                this.popState(\"building-float\");\n                                break;\n                            case \"Float & LiteralInteger\":\n                            case \"Number & LiteralInteger\":\n                                this.pushState(\"building-float\");\n                                this.astGeneric(ast.left, retArr);\n                                retArr.push(operatorMap[ast.operator] || ast.operator);\n                                this.castLiteralToFloat(ast.right, retArr);\n                                this.popState(\"building-float\");\n                                break;\n                            case \"LiteralInteger & Float\":\n                            case \"LiteralInteger & Number\":\n                                if (this.isState(\"casting-to-integer\")) {\n                                    this.pushState(\"building-integer\");\n                                    this.castLiteralToInteger(ast.left, retArr);\n                                    retArr.push(operatorMap[ast.operator] || ast.operator);\n                                    this.castValueToInteger(ast.right, retArr);\n                                    this.popState(\"building-integer\");\n                                } else {\n                                    this.pushState(\"building-float\");\n                                    this.astGeneric(ast.left, retArr);\n                                    retArr.push(operatorMap[ast.operator] || ast.operator);\n                                    this.pushState(\"casting-to-float\");\n                                    this.astGeneric(ast.right, retArr);\n                                    this.popState(\"casting-to-float\");\n                                    this.popState(\"building-float\");\n                                }\n                                break;\n                            case \"LiteralInteger & Integer\":\n                                this.pushState(\"building-integer\");\n                                this.castLiteralToInteger(ast.left, retArr);\n                                retArr.push(operatorMap[ast.operator] || ast.operator);\n                                this.astGeneric(ast.right, retArr);\n                                this.popState(\"building-integer\");\n                                break;\n                            case \"Boolean & Boolean\":\n                                this.pushState(\"building-boolean\");\n                                this.astGeneric(ast.left, retArr);\n                                retArr.push(operatorMap[ast.operator] || ast.operator);\n                                this.astGeneric(ast.right, retArr);\n                                this.popState(\"building-boolean\");\n                                break;\n                            case \"Float & Integer\":\n                                this.pushState(\"building-float\");\n                                this.astGeneric(ast.left, retArr);\n                                retArr.push(operatorMap[ast.operator] || ast.operator);\n                                this.castValueToFloat(ast.right, retArr);\n                                this.popState(\"building-float\");\n                                break;\n                            default:\n                                throw this.astErrorOutput(`Unhandled binary expression between ${key}`, ast);\n                        }\n                        retArr.push(\")\");\n                        return retArr;\n                    }\n                    checkAndUpconvertOperator(ast, retArr) {\n                        const bitwiseResult = this.checkAndUpconvertBitwiseOperators(ast, retArr);\n                        if (bitwiseResult) return bitwiseResult;\n                        const upconvertableOperators = {\n                            \"%\": this.fixIntegerDivisionAccuracy ? \"integerCorrectionModulo\" : \"modulo\",\n                            \"**\": \"pow\"\n                        };\n                        const foundOperator = upconvertableOperators[ast.operator];\n                        if (!foundOperator) return null;\n                        retArr.push(foundOperator);\n                        retArr.push(\"(\");\n                        switch(this.getType(ast.left)){\n                            case \"Integer\":\n                                this.castValueToFloat(ast.left, retArr);\n                                break;\n                            case \"LiteralInteger\":\n                                this.castLiteralToFloat(ast.left, retArr);\n                                break;\n                            default:\n                                this.astGeneric(ast.left, retArr);\n                        }\n                        retArr.push(\",\");\n                        switch(this.getType(ast.right)){\n                            case \"Integer\":\n                                this.castValueToFloat(ast.right, retArr);\n                                break;\n                            case \"LiteralInteger\":\n                                this.castLiteralToFloat(ast.right, retArr);\n                                break;\n                            default:\n                                this.astGeneric(ast.right, retArr);\n                        }\n                        retArr.push(\")\");\n                        return retArr;\n                    }\n                    checkAndUpconvertBitwiseOperators(ast, retArr) {\n                        const upconvertableOperators = {\n                            \"&\": \"bitwiseAnd\",\n                            \"|\": \"bitwiseOr\",\n                            \"^\": \"bitwiseXOR\",\n                            \"<<\": \"bitwiseZeroFillLeftShift\",\n                            \">>\": \"bitwiseSignedRightShift\",\n                            \">>>\": \"bitwiseZeroFillRightShift\"\n                        };\n                        const foundOperator = upconvertableOperators[ast.operator];\n                        if (!foundOperator) return null;\n                        retArr.push(foundOperator);\n                        retArr.push(\"(\");\n                        const leftType = this.getType(ast.left);\n                        switch(leftType){\n                            case \"Number\":\n                            case \"Float\":\n                                this.castValueToInteger(ast.left, retArr);\n                                break;\n                            case \"LiteralInteger\":\n                                this.castLiteralToInteger(ast.left, retArr);\n                                break;\n                            default:\n                                this.astGeneric(ast.left, retArr);\n                        }\n                        retArr.push(\",\");\n                        const rightType = this.getType(ast.right);\n                        switch(rightType){\n                            case \"Number\":\n                            case \"Float\":\n                                this.castValueToInteger(ast.right, retArr);\n                                break;\n                            case \"LiteralInteger\":\n                                this.castLiteralToInteger(ast.right, retArr);\n                                break;\n                            default:\n                                this.astGeneric(ast.right, retArr);\n                        }\n                        retArr.push(\")\");\n                        return retArr;\n                    }\n                    checkAndUpconvertBitwiseUnary(ast, retArr) {\n                        const upconvertableOperators = {\n                            \"~\": \"bitwiseNot\"\n                        };\n                        const foundOperator = upconvertableOperators[ast.operator];\n                        if (!foundOperator) return null;\n                        retArr.push(foundOperator);\n                        retArr.push(\"(\");\n                        switch(this.getType(ast.argument)){\n                            case \"Number\":\n                            case \"Float\":\n                                this.castValueToInteger(ast.argument, retArr);\n                                break;\n                            case \"LiteralInteger\":\n                                this.castLiteralToInteger(ast.argument, retArr);\n                                break;\n                            default:\n                                this.astGeneric(ast.argument, retArr);\n                        }\n                        retArr.push(\")\");\n                        return retArr;\n                    }\n                    castLiteralToInteger(ast, retArr) {\n                        this.pushState(\"casting-to-integer\");\n                        this.astGeneric(ast, retArr);\n                        this.popState(\"casting-to-integer\");\n                        return retArr;\n                    }\n                    castLiteralToFloat(ast, retArr) {\n                        this.pushState(\"casting-to-float\");\n                        this.astGeneric(ast, retArr);\n                        this.popState(\"casting-to-float\");\n                        return retArr;\n                    }\n                    castValueToInteger(ast, retArr) {\n                        this.pushState(\"casting-to-integer\");\n                        retArr.push(\"int(\");\n                        this.astGeneric(ast, retArr);\n                        retArr.push(\")\");\n                        this.popState(\"casting-to-integer\");\n                        return retArr;\n                    }\n                    castValueToFloat(ast, retArr) {\n                        this.pushState(\"casting-to-float\");\n                        retArr.push(\"float(\");\n                        this.astGeneric(ast, retArr);\n                        retArr.push(\")\");\n                        this.popState(\"casting-to-float\");\n                        return retArr;\n                    }\n                    astIdentifierExpression(idtNode, retArr) {\n                        if (idtNode.type !== \"Identifier\") throw this.astErrorOutput(\"IdentifierExpression - not an Identifier\", idtNode);\n                        const type = this.getType(idtNode);\n                        const name1 = utils.sanitizeName(idtNode.name);\n                        if (idtNode.name === \"Infinity\") retArr.push(\"3.402823466e+38\");\n                        else if (type === \"Boolean\") {\n                            if (this.argumentNames.indexOf(name1) > -1) retArr.push(`bool(user_${name1})`);\n                            else retArr.push(`user_${name1}`);\n                        } else retArr.push(`user_${name1}`);\n                        return retArr;\n                    }\n                    astForStatement(forNode, retArr) {\n                        if (forNode.type !== \"ForStatement\") throw this.astErrorOutput(\"Invalid for statement\", forNode);\n                        const initArr = [];\n                        const testArr = [];\n                        const updateArr = [];\n                        const bodyArr = [];\n                        let isSafe = null;\n                        if (forNode.init) {\n                            const { declarations: declarations  } = forNode.init;\n                            if (declarations.length > 1) isSafe = false;\n                            this.astGeneric(forNode.init, initArr);\n                            for(let i = 0; i < declarations.length; i++)if (declarations[i].init && declarations[i].init.type !== \"Literal\") isSafe = false;\n                        } else isSafe = false;\n                        if (forNode.test) this.astGeneric(forNode.test, testArr);\n                        else isSafe = false;\n                        if (forNode.update) this.astGeneric(forNode.update, updateArr);\n                        else isSafe = false;\n                        if (forNode.body) {\n                            this.pushState(\"loop-body\");\n                            this.astGeneric(forNode.body, bodyArr);\n                            this.popState(\"loop-body\");\n                        }\n                        if (isSafe === null) isSafe = this.isSafe(forNode.init) && this.isSafe(forNode.test);\n                        if (isSafe) {\n                            const initString = initArr.join(\"\");\n                            const initNeedsSemiColon = initString[initString.length - 1] !== \";\";\n                            retArr.push(`for (${initString}${initNeedsSemiColon ? \";\" : \"\"}${testArr.join(\"\")};${updateArr.join(\"\")}){\\n`);\n                            retArr.push(bodyArr.join(\"\"));\n                            retArr.push(\"}\\n\");\n                        } else {\n                            const iVariableName = this.getInternalVariableName(\"safeI\");\n                            if (initArr.length > 0) retArr.push(initArr.join(\"\"), \"\\n\");\n                            retArr.push(`for (int ${iVariableName}=0;${iVariableName}<LOOP_MAX;${iVariableName}++){\\n`);\n                            if (testArr.length > 0) retArr.push(`if (!${testArr.join(\"\")}) break;\\n`);\n                            retArr.push(bodyArr.join(\"\"));\n                            retArr.push(`\\n${updateArr.join(\"\")};`);\n                            retArr.push(\"}\\n\");\n                        }\n                        return retArr;\n                    }\n                    astWhileStatement(whileNode, retArr) {\n                        if (whileNode.type !== \"WhileStatement\") throw this.astErrorOutput(\"Invalid while statement\", whileNode);\n                        const iVariableName = this.getInternalVariableName(\"safeI\");\n                        retArr.push(`for (int ${iVariableName}=0;${iVariableName}<LOOP_MAX;${iVariableName}++){\\n`);\n                        retArr.push(\"if (!\");\n                        this.astGeneric(whileNode.test, retArr);\n                        retArr.push(\") break;\\n\");\n                        this.astGeneric(whileNode.body, retArr);\n                        retArr.push(\"}\\n\");\n                        return retArr;\n                    }\n                    astDoWhileStatement(doWhileNode, retArr) {\n                        if (doWhileNode.type !== \"DoWhileStatement\") throw this.astErrorOutput(\"Invalid while statement\", doWhileNode);\n                        const iVariableName = this.getInternalVariableName(\"safeI\");\n                        retArr.push(`for (int ${iVariableName}=0;${iVariableName}<LOOP_MAX;${iVariableName}++){\\n`);\n                        this.astGeneric(doWhileNode.body, retArr);\n                        retArr.push(\"if (!\");\n                        this.astGeneric(doWhileNode.test, retArr);\n                        retArr.push(\") break;\\n\");\n                        retArr.push(\"}\\n\");\n                        return retArr;\n                    }\n                    astAssignmentExpression(assNode, retArr) {\n                        if (assNode.operator === \"%=\") {\n                            this.astGeneric(assNode.left, retArr);\n                            retArr.push(\"=\");\n                            retArr.push(\"mod(\");\n                            this.astGeneric(assNode.left, retArr);\n                            retArr.push(\",\");\n                            this.astGeneric(assNode.right, retArr);\n                            retArr.push(\")\");\n                        } else if (assNode.operator === \"**=\") {\n                            this.astGeneric(assNode.left, retArr);\n                            retArr.push(\"=\");\n                            retArr.push(\"pow(\");\n                            this.astGeneric(assNode.left, retArr);\n                            retArr.push(\",\");\n                            this.astGeneric(assNode.right, retArr);\n                            retArr.push(\")\");\n                        } else {\n                            const leftType = this.getType(assNode.left);\n                            const rightType = this.getType(assNode.right);\n                            this.astGeneric(assNode.left, retArr);\n                            retArr.push(assNode.operator);\n                            if (leftType !== \"Integer\" && rightType === \"Integer\") {\n                                retArr.push(\"float(\");\n                                this.astGeneric(assNode.right, retArr);\n                                retArr.push(\")\");\n                            } else this.astGeneric(assNode.right, retArr);\n                            return retArr;\n                        }\n                    }\n                    astBlockStatement(bNode, retArr) {\n                        if (this.isState(\"loop-body\")) {\n                            this.pushState(\"block-body\");\n                            for(let i = 0; i < bNode.body.length; i++)this.astGeneric(bNode.body[i], retArr);\n                            this.popState(\"block-body\");\n                        } else {\n                            retArr.push(\"{\\n\");\n                            for(let i = 0; i < bNode.body.length; i++)this.astGeneric(bNode.body[i], retArr);\n                            retArr.push(\"}\\n\");\n                        }\n                        return retArr;\n                    }\n                    astVariableDeclaration(varDecNode, retArr) {\n                        const declarations = varDecNode.declarations;\n                        if (!declarations || !declarations[0] || !declarations[0].init) throw this.astErrorOutput(\"Unexpected expression\", varDecNode);\n                        const result = [];\n                        let lastType = null;\n                        const declarationSets = [];\n                        let declarationSet = [];\n                        for(let i = 0; i < declarations.length; i++){\n                            const declaration = declarations[i];\n                            const init = declaration.init;\n                            const info = this.getDeclaration(declaration.id);\n                            const actualType = this.getType(declaration.init);\n                            let type = actualType;\n                            if (type === \"LiteralInteger\") {\n                                if (info.suggestedType === \"Integer\") type = \"Integer\";\n                                else type = \"Number\";\n                            }\n                            const markupType = typeMap[type];\n                            if (!markupType) throw this.astErrorOutput(`Markup type ${type} not handled`, varDecNode);\n                            const declarationResult = [];\n                            if (actualType === \"Integer\" && type === \"Integer\") {\n                                info.valueType = \"Number\";\n                                if (i === 0 || lastType === null) declarationResult.push(\"float \");\n                                else if (type !== lastType) throw new Error(\"Unhandled declaration\");\n                                lastType = type;\n                                declarationResult.push(`user_${utils.sanitizeName(declaration.id.name)}=`);\n                                declarationResult.push(\"float(\");\n                                this.astGeneric(init, declarationResult);\n                                declarationResult.push(\")\");\n                            } else {\n                                info.valueType = type;\n                                if (i === 0 || lastType === null) declarationResult.push(`${markupType} `);\n                                else if (type !== lastType) {\n                                    declarationSets.push(declarationSet.join(\",\"));\n                                    declarationSet = [];\n                                    declarationResult.push(`${markupType} `);\n                                }\n                                lastType = type;\n                                declarationResult.push(`user_${utils.sanitizeName(declaration.id.name)}=`);\n                                if (actualType === \"Number\" && type === \"Integer\") {\n                                    if (init.left && init.left.type === \"Literal\") this.astGeneric(init, declarationResult);\n                                    else {\n                                        declarationResult.push(\"int(\");\n                                        this.astGeneric(init, declarationResult);\n                                        declarationResult.push(\")\");\n                                    }\n                                } else if (actualType === \"LiteralInteger\" && type === \"Integer\") this.castLiteralToInteger(init, declarationResult);\n                                else this.astGeneric(init, declarationResult);\n                            }\n                            declarationSet.push(declarationResult.join(\"\"));\n                        }\n                        if (declarationSet.length > 0) declarationSets.push(declarationSet.join(\",\"));\n                        result.push(declarationSets.join(\";\"));\n                        retArr.push(result.join(\"\"));\n                        retArr.push(\";\");\n                        return retArr;\n                    }\n                    astIfStatement(ifNode, retArr) {\n                        retArr.push(\"if (\");\n                        this.astGeneric(ifNode.test, retArr);\n                        retArr.push(\")\");\n                        if (ifNode.consequent.type === \"BlockStatement\") this.astGeneric(ifNode.consequent, retArr);\n                        else {\n                            retArr.push(\" {\\n\");\n                            this.astGeneric(ifNode.consequent, retArr);\n                            retArr.push(\"\\n}\\n\");\n                        }\n                        if (ifNode.alternate) {\n                            retArr.push(\"else \");\n                            if (ifNode.alternate.type === \"BlockStatement\" || ifNode.alternate.type === \"IfStatement\") this.astGeneric(ifNode.alternate, retArr);\n                            else {\n                                retArr.push(\" {\\n\");\n                                this.astGeneric(ifNode.alternate, retArr);\n                                retArr.push(\"\\n}\\n\");\n                            }\n                        }\n                        return retArr;\n                    }\n                    astSwitchStatement(ast, retArr) {\n                        if (ast.type !== \"SwitchStatement\") throw this.astErrorOutput(\"Invalid switch statement\", ast);\n                        const { discriminant: discriminant , cases: cases  } = ast;\n                        const type = this.getType(discriminant);\n                        const varName = `switchDiscriminant${this.astKey(ast, \"_\")}`;\n                        switch(type){\n                            case \"Float\":\n                            case \"Number\":\n                                retArr.push(`float ${varName} = `);\n                                this.astGeneric(discriminant, retArr);\n                                retArr.push(\";\\n\");\n                                break;\n                            case \"Integer\":\n                                retArr.push(`int ${varName} = `);\n                                this.astGeneric(discriminant, retArr);\n                                retArr.push(\";\\n\");\n                                break;\n                        }\n                        if (cases.length === 1 && !cases[0].test) {\n                            this.astGeneric(cases[0].consequent, retArr);\n                            return retArr;\n                        }\n                        let fallingThrough = false;\n                        let defaultResult = [];\n                        let movingDefaultToEnd = false;\n                        let pastFirstIf = false;\n                        for(let i = 0; i < cases.length; i++){\n                            if (!cases[i].test) {\n                                if (cases.length > i + 1) {\n                                    movingDefaultToEnd = true;\n                                    this.astGeneric(cases[i].consequent, defaultResult);\n                                    continue;\n                                } else retArr.push(\" else {\\n\");\n                            } else {\n                                if (i === 0 || !pastFirstIf) {\n                                    pastFirstIf = true;\n                                    retArr.push(`if (${varName} == `);\n                                } else if (fallingThrough) {\n                                    retArr.push(`${varName} == `);\n                                    fallingThrough = false;\n                                } else retArr.push(` else if (${varName} == `);\n                                if (type === \"Integer\") {\n                                    const testType = this.getType(cases[i].test);\n                                    switch(testType){\n                                        case \"Number\":\n                                        case \"Float\":\n                                            this.castValueToInteger(cases[i].test, retArr);\n                                            break;\n                                        case \"LiteralInteger\":\n                                            this.castLiteralToInteger(cases[i].test, retArr);\n                                            break;\n                                    }\n                                } else if (type === \"Float\") {\n                                    const testType = this.getType(cases[i].test);\n                                    switch(testType){\n                                        case \"LiteralInteger\":\n                                            this.castLiteralToFloat(cases[i].test, retArr);\n                                            break;\n                                        case \"Integer\":\n                                            this.castValueToFloat(cases[i].test, retArr);\n                                            break;\n                                    }\n                                } else throw new Error(\"unhanlded\");\n                                if (!cases[i].consequent || cases[i].consequent.length === 0) {\n                                    fallingThrough = true;\n                                    retArr.push(\" || \");\n                                    continue;\n                                }\n                                retArr.push(`) {\\n`);\n                            }\n                            this.astGeneric(cases[i].consequent, retArr);\n                            retArr.push(\"\\n}\");\n                        }\n                        if (movingDefaultToEnd) {\n                            retArr.push(\" else {\");\n                            retArr.push(defaultResult.join(\"\"));\n                            retArr.push(\"}\");\n                        }\n                        return retArr;\n                    }\n                    astThisExpression(tNode, retArr) {\n                        retArr.push(\"this\");\n                        return retArr;\n                    }\n                    astMemberExpression(mNode, retArr) {\n                        const { property: property , name: name1 , signature: signature , origin: origin , type: type , xProperty: xProperty , yProperty: yProperty , zProperty: zProperty  } = this.getMemberExpressionDetails(mNode);\n                        switch(signature){\n                            case \"value.thread.value\":\n                            case \"this.thread.value\":\n                                if (name1 !== \"x\" && name1 !== \"y\" && name1 !== \"z\") throw this.astErrorOutput(\"Unexpected expression, expected `this.thread.x`, `this.thread.y`, or `this.thread.z`\", mNode);\n                                retArr.push(`threadId.${name1}`);\n                                return retArr;\n                            case \"this.output.value\":\n                                if (this.dynamicOutput) switch(name1){\n                                    case \"x\":\n                                        if (this.isState(\"casting-to-float\")) retArr.push(\"float(uOutputDim.x)\");\n                                        else retArr.push(\"uOutputDim.x\");\n                                        break;\n                                    case \"y\":\n                                        if (this.isState(\"casting-to-float\")) retArr.push(\"float(uOutputDim.y)\");\n                                        else retArr.push(\"uOutputDim.y\");\n                                        break;\n                                    case \"z\":\n                                        if (this.isState(\"casting-to-float\")) retArr.push(\"float(uOutputDim.z)\");\n                                        else retArr.push(\"uOutputDim.z\");\n                                        break;\n                                    default:\n                                        throw this.astErrorOutput(\"Unexpected expression\", mNode);\n                                }\n                                else switch(name1){\n                                    case \"x\":\n                                        if (this.isState(\"casting-to-integer\")) retArr.push(this.output[0]);\n                                        else retArr.push(this.output[0], \".0\");\n                                        break;\n                                    case \"y\":\n                                        if (this.isState(\"casting-to-integer\")) retArr.push(this.output[1]);\n                                        else retArr.push(this.output[1], \".0\");\n                                        break;\n                                    case \"z\":\n                                        if (this.isState(\"casting-to-integer\")) retArr.push(this.output[2]);\n                                        else retArr.push(this.output[2], \".0\");\n                                        break;\n                                    default:\n                                        throw this.astErrorOutput(\"Unexpected expression\", mNode);\n                                }\n                                return retArr;\n                            case \"value\":\n                                throw this.astErrorOutput(\"Unexpected expression\", mNode);\n                            case \"value[]\":\n                            case \"value[][]\":\n                            case \"value[][][]\":\n                            case \"value[][][][]\":\n                            case \"value.value\":\n                                if (origin === \"Math\") {\n                                    retArr.push(Math[name1]);\n                                    return retArr;\n                                }\n                                const cleanName = utils.sanitizeName(name1);\n                                switch(property){\n                                    case \"r\":\n                                        retArr.push(`user_${cleanName}.r`);\n                                        return retArr;\n                                    case \"g\":\n                                        retArr.push(`user_${cleanName}.g`);\n                                        return retArr;\n                                    case \"b\":\n                                        retArr.push(`user_${cleanName}.b`);\n                                        return retArr;\n                                    case \"a\":\n                                        retArr.push(`user_${cleanName}.a`);\n                                        return retArr;\n                                }\n                                break;\n                            case \"this.constants.value\":\n                                if (typeof xProperty === \"undefined\") switch(type){\n                                    case \"Array(2)\":\n                                    case \"Array(3)\":\n                                    case \"Array(4)\":\n                                        retArr.push(`constants_${utils.sanitizeName(name1)}`);\n                                        return retArr;\n                                }\n                            case \"this.constants.value[]\":\n                            case \"this.constants.value[][]\":\n                            case \"this.constants.value[][][]\":\n                            case \"this.constants.value[][][][]\":\n                                break;\n                            case \"fn()[]\":\n                                this.astCallExpression(mNode.object, retArr);\n                                retArr.push(\"[\");\n                                retArr.push(this.memberExpressionPropertyMarkup(property));\n                                retArr.push(\"]\");\n                                return retArr;\n                            case \"fn()[][]\":\n                                this.astCallExpression(mNode.object.object, retArr);\n                                retArr.push(\"[\");\n                                retArr.push(this.memberExpressionPropertyMarkup(mNode.object.property));\n                                retArr.push(\"]\");\n                                retArr.push(\"[\");\n                                retArr.push(this.memberExpressionPropertyMarkup(mNode.property));\n                                retArr.push(\"]\");\n                                return retArr;\n                            case \"[][]\":\n                                this.astArrayExpression(mNode.object, retArr);\n                                retArr.push(\"[\");\n                                retArr.push(this.memberExpressionPropertyMarkup(property));\n                                retArr.push(\"]\");\n                                return retArr;\n                            default:\n                                throw this.astErrorOutput(\"Unexpected expression\", mNode);\n                        }\n                        if (mNode.computed === false) switch(type){\n                            case \"Number\":\n                            case \"Integer\":\n                            case \"Float\":\n                            case \"Boolean\":\n                                retArr.push(`${origin}_${utils.sanitizeName(name1)}`);\n                                return retArr;\n                        }\n                        const markupName = `${origin}_${utils.sanitizeName(name1)}`;\n                        switch(type){\n                            case \"Array(2)\":\n                            case \"Array(3)\":\n                            case \"Array(4)\":\n                                this.astGeneric(mNode.object, retArr);\n                                retArr.push(\"[\");\n                                retArr.push(this.memberExpressionPropertyMarkup(xProperty));\n                                retArr.push(\"]\");\n                                break;\n                            case \"HTMLImageArray\":\n                                retArr.push(`getImage3D(${markupName}, ${markupName}Size, ${markupName}Dim, `);\n                                this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n                                retArr.push(\")\");\n                                break;\n                            case \"ArrayTexture(1)\":\n                                retArr.push(`getFloatFromSampler2D(${markupName}, ${markupName}Size, ${markupName}Dim, `);\n                                this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n                                retArr.push(\")\");\n                                break;\n                            case \"Array1D(2)\":\n                            case \"Array2D(2)\":\n                            case \"Array3D(2)\":\n                                retArr.push(`getMemoryOptimizedVec2(${markupName}, ${markupName}Size, ${markupName}Dim, `);\n                                this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n                                retArr.push(\")\");\n                                break;\n                            case \"ArrayTexture(2)\":\n                                retArr.push(`getVec2FromSampler2D(${markupName}, ${markupName}Size, ${markupName}Dim, `);\n                                this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n                                retArr.push(\")\");\n                                break;\n                            case \"Array1D(3)\":\n                            case \"Array2D(3)\":\n                            case \"Array3D(3)\":\n                                retArr.push(`getMemoryOptimizedVec3(${markupName}, ${markupName}Size, ${markupName}Dim, `);\n                                this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n                                retArr.push(\")\");\n                                break;\n                            case \"ArrayTexture(3)\":\n                                retArr.push(`getVec3FromSampler2D(${markupName}, ${markupName}Size, ${markupName}Dim, `);\n                                this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n                                retArr.push(\")\");\n                                break;\n                            case \"Array1D(4)\":\n                            case \"Array2D(4)\":\n                            case \"Array3D(4)\":\n                                retArr.push(`getMemoryOptimizedVec4(${markupName}, ${markupName}Size, ${markupName}Dim, `);\n                                this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n                                retArr.push(\")\");\n                                break;\n                            case \"ArrayTexture(4)\":\n                            case \"HTMLCanvas\":\n                            case \"OffscreenCanvas\":\n                            case \"HTMLImage\":\n                            case \"ImageBitmap\":\n                            case \"ImageData\":\n                            case \"HTMLVideo\":\n                                retArr.push(`getVec4FromSampler2D(${markupName}, ${markupName}Size, ${markupName}Dim, `);\n                                this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n                                retArr.push(\")\");\n                                break;\n                            case \"NumberTexture\":\n                            case \"Array\":\n                            case \"Array2D\":\n                            case \"Array3D\":\n                            case \"Array4D\":\n                            case \"Input\":\n                            case \"Number\":\n                            case \"Float\":\n                            case \"Integer\":\n                                if (this.precision === \"single\") {\n                                    retArr.push(`getMemoryOptimized32(${markupName}, ${markupName}Size, ${markupName}Dim, `);\n                                    this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n                                    retArr.push(\")\");\n                                } else {\n                                    const bitRatio = origin === \"user\" ? this.lookupFunctionArgumentBitRatio(this.name, name1) : this.constantBitRatios[name1];\n                                    switch(bitRatio){\n                                        case 1:\n                                            retArr.push(`get8(${markupName}, ${markupName}Size, ${markupName}Dim, `);\n                                            break;\n                                        case 2:\n                                            retArr.push(`get16(${markupName}, ${markupName}Size, ${markupName}Dim, `);\n                                            break;\n                                        case 4:\n                                        case 0:\n                                            retArr.push(`get32(${markupName}, ${markupName}Size, ${markupName}Dim, `);\n                                            break;\n                                        default:\n                                            throw new Error(`unhandled bit ratio of ${bitRatio}`);\n                                    }\n                                    this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n                                    retArr.push(\")\");\n                                }\n                                break;\n                            case \"MemoryOptimizedNumberTexture\":\n                                retArr.push(`getMemoryOptimized32(${markupName}, ${markupName}Size, ${markupName}Dim, `);\n                                this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n                                retArr.push(\")\");\n                                break;\n                            case \"Matrix(2)\":\n                            case \"Matrix(3)\":\n                            case \"Matrix(4)\":\n                                retArr.push(`${markupName}[${this.memberExpressionPropertyMarkup(yProperty)}]`);\n                                if (yProperty) retArr.push(`[${this.memberExpressionPropertyMarkup(xProperty)}]`);\n                                break;\n                            default:\n                                throw new Error(`unhandled member expression \"${type}\"`);\n                        }\n                        return retArr;\n                    }\n                    astCallExpression(ast, retArr) {\n                        if (!ast.callee) throw this.astErrorOutput(\"Unknown CallExpression\", ast);\n                        let functionName = null;\n                        const isMathFunction = this.isAstMathFunction(ast);\n                        if (isMathFunction || ast.callee.object && ast.callee.object.type === \"ThisExpression\") functionName = ast.callee.property.name;\n                        else if (ast.callee.type === \"SequenceExpression\" && ast.callee.expressions[0].type === \"Literal\" && !isNaN(ast.callee.expressions[0].raw)) functionName = ast.callee.expressions[1].property.name;\n                        else functionName = ast.callee.name;\n                        if (!functionName) throw this.astErrorOutput(`Unhandled function, couldn't find name`, ast);\n                        switch(functionName){\n                            case \"pow\":\n                                functionName = \"_pow\";\n                                break;\n                            case \"round\":\n                                functionName = \"_round\";\n                                break;\n                        }\n                        if (this.calledFunctions.indexOf(functionName) < 0) this.calledFunctions.push(functionName);\n                        if (functionName === \"random\" && this.plugins && this.plugins.length > 0) for(let i = 0; i < this.plugins.length; i++){\n                            const plugin = this.plugins[i];\n                            if (plugin.functionMatch === \"Math.random()\" && plugin.functionReplace) {\n                                retArr.push(plugin.functionReplace);\n                                return retArr;\n                            }\n                        }\n                        if (this.onFunctionCall) this.onFunctionCall(this.name, functionName, ast.arguments);\n                        retArr.push(functionName);\n                        retArr.push(\"(\");\n                        if (isMathFunction) for(let i = 0; i < ast.arguments.length; ++i){\n                            const argument = ast.arguments[i];\n                            const argumentType = this.getType(argument);\n                            if (i > 0) retArr.push(\", \");\n                            switch(argumentType){\n                                case \"Integer\":\n                                    this.castValueToFloat(argument, retArr);\n                                    break;\n                                default:\n                                    this.astGeneric(argument, retArr);\n                                    break;\n                            }\n                        }\n                        else {\n                            const targetTypes = this.lookupFunctionArgumentTypes(functionName) || [];\n                            for(let i = 0; i < ast.arguments.length; ++i){\n                                const argument = ast.arguments[i];\n                                let targetType = targetTypes[i];\n                                if (i > 0) retArr.push(\", \");\n                                const argumentType = this.getType(argument);\n                                if (!targetType) {\n                                    this.triggerImplyArgumentType(functionName, i, argumentType, this);\n                                    targetType = argumentType;\n                                }\n                                switch(argumentType){\n                                    case \"Boolean\":\n                                        this.astGeneric(argument, retArr);\n                                        continue;\n                                    case \"Number\":\n                                    case \"Float\":\n                                        if (targetType === \"Integer\") {\n                                            retArr.push(\"int(\");\n                                            this.astGeneric(argument, retArr);\n                                            retArr.push(\")\");\n                                            continue;\n                                        } else if (targetType === \"Number\" || targetType === \"Float\") {\n                                            this.astGeneric(argument, retArr);\n                                            continue;\n                                        } else if (targetType === \"LiteralInteger\") {\n                                            this.castLiteralToFloat(argument, retArr);\n                                            continue;\n                                        }\n                                        break;\n                                    case \"Integer\":\n                                        if (targetType === \"Number\" || targetType === \"Float\") {\n                                            retArr.push(\"float(\");\n                                            this.astGeneric(argument, retArr);\n                                            retArr.push(\")\");\n                                            continue;\n                                        } else if (targetType === \"Integer\") {\n                                            this.astGeneric(argument, retArr);\n                                            continue;\n                                        }\n                                        break;\n                                    case \"LiteralInteger\":\n                                        if (targetType === \"Integer\") {\n                                            this.castLiteralToInteger(argument, retArr);\n                                            continue;\n                                        } else if (targetType === \"Number\" || targetType === \"Float\") {\n                                            this.castLiteralToFloat(argument, retArr);\n                                            continue;\n                                        } else if (targetType === \"LiteralInteger\") {\n                                            this.astGeneric(argument, retArr);\n                                            continue;\n                                        }\n                                        break;\n                                    case \"Array(2)\":\n                                    case \"Array(3)\":\n                                    case \"Array(4)\":\n                                        if (targetType === argumentType) {\n                                            if (argument.type === \"Identifier\") retArr.push(`user_${utils.sanitizeName(argument.name)}`);\n                                            else if (argument.type === \"ArrayExpression\" || argument.type === \"MemberExpression\" || argument.type === \"CallExpression\") this.astGeneric(argument, retArr);\n                                            else throw this.astErrorOutput(`Unhandled argument type ${argument.type}`, ast);\n                                            continue;\n                                        }\n                                        break;\n                                    case \"HTMLCanvas\":\n                                    case \"OffscreenCanvas\":\n                                    case \"HTMLImage\":\n                                    case \"ImageBitmap\":\n                                    case \"ImageData\":\n                                    case \"HTMLImageArray\":\n                                    case \"HTMLVideo\":\n                                    case \"ArrayTexture(1)\":\n                                    case \"ArrayTexture(2)\":\n                                    case \"ArrayTexture(3)\":\n                                    case \"ArrayTexture(4)\":\n                                    case \"Array\":\n                                    case \"Input\":\n                                        if (targetType === argumentType) {\n                                            if (argument.type !== \"Identifier\") throw this.astErrorOutput(`Unhandled argument type ${argument.type}`, ast);\n                                            this.triggerImplyArgumentBitRatio(this.name, argument.name, functionName, i);\n                                            const name1 = utils.sanitizeName(argument.name);\n                                            retArr.push(`user_${name1},user_${name1}Size,user_${name1}Dim`);\n                                            continue;\n                                        }\n                                        break;\n                                }\n                                throw this.astErrorOutput(`Unhandled argument combination of ${argumentType} and ${targetType} for argument named \"${argument.name}\"`, ast);\n                            }\n                        }\n                        retArr.push(\")\");\n                        return retArr;\n                    }\n                    astArrayExpression(arrNode, retArr) {\n                        const returnType = this.getType(arrNode);\n                        const arrLen = arrNode.elements.length;\n                        switch(returnType){\n                            case \"Matrix(2)\":\n                            case \"Matrix(3)\":\n                            case \"Matrix(4)\":\n                                retArr.push(`mat${arrLen}(`);\n                                break;\n                            default:\n                                retArr.push(`vec${arrLen}(`);\n                        }\n                        for(let i = 0; i < arrLen; ++i){\n                            if (i > 0) retArr.push(\", \");\n                            const subNode = arrNode.elements[i];\n                            this.astGeneric(subNode, retArr);\n                        }\n                        retArr.push(\")\");\n                        return retArr;\n                    }\n                    memberExpressionXYZ(x, y, z, retArr) {\n                        if (z) retArr.push(this.memberExpressionPropertyMarkup(z), \", \");\n                        else retArr.push(\"0, \");\n                        if (y) retArr.push(this.memberExpressionPropertyMarkup(y), \", \");\n                        else retArr.push(\"0, \");\n                        retArr.push(this.memberExpressionPropertyMarkup(x));\n                        return retArr;\n                    }\n                    memberExpressionPropertyMarkup(property) {\n                        if (!property) throw new Error(\"Property not set\");\n                        const type = this.getType(property);\n                        const result = [];\n                        switch(type){\n                            case \"Number\":\n                            case \"Float\":\n                                this.castValueToInteger(property, result);\n                                break;\n                            case \"LiteralInteger\":\n                                this.castLiteralToInteger(property, result);\n                                break;\n                            default:\n                                this.astGeneric(property, result);\n                        }\n                        return result.join(\"\");\n                    }\n                }\n                const typeMap = {\n                    \"Array\": \"sampler2D\",\n                    \"Array(2)\": \"vec2\",\n                    \"Array(3)\": \"vec3\",\n                    \"Array(4)\": \"vec4\",\n                    \"Matrix(2)\": \"mat2\",\n                    \"Matrix(3)\": \"mat3\",\n                    \"Matrix(4)\": \"mat4\",\n                    \"Array2D\": \"sampler2D\",\n                    \"Array3D\": \"sampler2D\",\n                    \"Boolean\": \"bool\",\n                    \"Float\": \"float\",\n                    \"Input\": \"sampler2D\",\n                    \"Integer\": \"int\",\n                    \"Number\": \"float\",\n                    \"LiteralInteger\": \"float\",\n                    \"NumberTexture\": \"sampler2D\",\n                    \"MemoryOptimizedNumberTexture\": \"sampler2D\",\n                    \"ArrayTexture(1)\": \"sampler2D\",\n                    \"ArrayTexture(2)\": \"sampler2D\",\n                    \"ArrayTexture(3)\": \"sampler2D\",\n                    \"ArrayTexture(4)\": \"sampler2D\",\n                    \"HTMLVideo\": \"sampler2D\",\n                    \"HTMLCanvas\": \"sampler2D\",\n                    \"OffscreenCanvas\": \"sampler2D\",\n                    \"HTMLImage\": \"sampler2D\",\n                    \"ImageBitmap\": \"sampler2D\",\n                    \"ImageData\": \"sampler2D\",\n                    \"HTMLImageArray\": \"sampler2DArray\"\n                };\n                const operatorMap = {\n                    \"===\": \"==\",\n                    \"!==\": \"!=\"\n                };\n                module1.exports = {\n                    WebGLFunctionNode: WebGLFunctionNode\n                };\n            },\n            {\n                \"../../utils\": 114,\n                \"../function-node\": 10\n            }\n        ],\n        39: [\n            function(require1, module1, exports) {\n                const { WebGLKernelValueBoolean: WebGLKernelValueBoolean  } = require1(\"./kernel-value/boolean\");\n                const { WebGLKernelValueFloat: WebGLKernelValueFloat  } = require1(\"./kernel-value/float\");\n                const { WebGLKernelValueInteger: WebGLKernelValueInteger  } = require1(\"./kernel-value/integer\");\n                const { WebGLKernelValueHTMLImage: WebGLKernelValueHTMLImage  } = require1(\"./kernel-value/html-image\");\n                const { WebGLKernelValueDynamicHTMLImage: WebGLKernelValueDynamicHTMLImage  } = require1(\"./kernel-value/dynamic-html-image\");\n                const { WebGLKernelValueHTMLVideo: WebGLKernelValueHTMLVideo  } = require1(\"./kernel-value/html-video\");\n                const { WebGLKernelValueDynamicHTMLVideo: WebGLKernelValueDynamicHTMLVideo  } = require1(\"./kernel-value/dynamic-html-video\");\n                const { WebGLKernelValueSingleInput: WebGLKernelValueSingleInput  } = require1(\"./kernel-value/single-input\");\n                const { WebGLKernelValueDynamicSingleInput: WebGLKernelValueDynamicSingleInput  } = require1(\"./kernel-value/dynamic-single-input\");\n                const { WebGLKernelValueUnsignedInput: WebGLKernelValueUnsignedInput  } = require1(\"./kernel-value/unsigned-input\");\n                const { WebGLKernelValueDynamicUnsignedInput: WebGLKernelValueDynamicUnsignedInput  } = require1(\"./kernel-value/dynamic-unsigned-input\");\n                const { WebGLKernelValueMemoryOptimizedNumberTexture: WebGLKernelValueMemoryOptimizedNumberTexture  } = require1(\"./kernel-value/memory-optimized-number-texture\");\n                const { WebGLKernelValueDynamicMemoryOptimizedNumberTexture: WebGLKernelValueDynamicMemoryOptimizedNumberTexture  } = require1(\"./kernel-value/dynamic-memory-optimized-number-texture\");\n                const { WebGLKernelValueNumberTexture: WebGLKernelValueNumberTexture  } = require1(\"./kernel-value/number-texture\");\n                const { WebGLKernelValueDynamicNumberTexture: WebGLKernelValueDynamicNumberTexture  } = require1(\"./kernel-value/dynamic-number-texture\");\n                const { WebGLKernelValueSingleArray: WebGLKernelValueSingleArray  } = require1(\"./kernel-value/single-array\");\n                const { WebGLKernelValueDynamicSingleArray: WebGLKernelValueDynamicSingleArray  } = require1(\"./kernel-value/dynamic-single-array\");\n                const { WebGLKernelValueSingleArray1DI: WebGLKernelValueSingleArray1DI  } = require1(\"./kernel-value/single-array1d-i\");\n                const { WebGLKernelValueDynamicSingleArray1DI: WebGLKernelValueDynamicSingleArray1DI  } = require1(\"./kernel-value/dynamic-single-array1d-i\");\n                const { WebGLKernelValueSingleArray2DI: WebGLKernelValueSingleArray2DI  } = require1(\"./kernel-value/single-array2d-i\");\n                const { WebGLKernelValueDynamicSingleArray2DI: WebGLKernelValueDynamicSingleArray2DI  } = require1(\"./kernel-value/dynamic-single-array2d-i\");\n                const { WebGLKernelValueSingleArray3DI: WebGLKernelValueSingleArray3DI  } = require1(\"./kernel-value/single-array3d-i\");\n                const { WebGLKernelValueDynamicSingleArray3DI: WebGLKernelValueDynamicSingleArray3DI  } = require1(\"./kernel-value/dynamic-single-array3d-i\");\n                const { WebGLKernelValueArray2: WebGLKernelValueArray2  } = require1(\"./kernel-value/array2\");\n                const { WebGLKernelValueArray3: WebGLKernelValueArray3  } = require1(\"./kernel-value/array3\");\n                const { WebGLKernelValueArray4: WebGLKernelValueArray4  } = require1(\"./kernel-value/array4\");\n                const { WebGLKernelValueUnsignedArray: WebGLKernelValueUnsignedArray  } = require1(\"./kernel-value/unsigned-array\");\n                const { WebGLKernelValueDynamicUnsignedArray: WebGLKernelValueDynamicUnsignedArray  } = require1(\"./kernel-value/dynamic-unsigned-array\");\n                const kernelValueMaps = {\n                    unsigned: {\n                        dynamic: {\n                            \"Boolean\": WebGLKernelValueBoolean,\n                            \"Integer\": WebGLKernelValueInteger,\n                            \"Float\": WebGLKernelValueFloat,\n                            \"Array\": WebGLKernelValueDynamicUnsignedArray,\n                            \"Array(2)\": WebGLKernelValueArray2,\n                            \"Array(3)\": WebGLKernelValueArray3,\n                            \"Array(4)\": WebGLKernelValueArray4,\n                            \"Array1D(2)\": false,\n                            \"Array1D(3)\": false,\n                            \"Array1D(4)\": false,\n                            \"Array2D(2)\": false,\n                            \"Array2D(3)\": false,\n                            \"Array2D(4)\": false,\n                            \"Array3D(2)\": false,\n                            \"Array3D(3)\": false,\n                            \"Array3D(4)\": false,\n                            \"Input\": WebGLKernelValueDynamicUnsignedInput,\n                            \"NumberTexture\": WebGLKernelValueDynamicNumberTexture,\n                            \"ArrayTexture(1)\": WebGLKernelValueDynamicNumberTexture,\n                            \"ArrayTexture(2)\": WebGLKernelValueDynamicNumberTexture,\n                            \"ArrayTexture(3)\": WebGLKernelValueDynamicNumberTexture,\n                            \"ArrayTexture(4)\": WebGLKernelValueDynamicNumberTexture,\n                            \"MemoryOptimizedNumberTexture\": WebGLKernelValueDynamicMemoryOptimizedNumberTexture,\n                            \"HTMLCanvas\": WebGLKernelValueDynamicHTMLImage,\n                            \"OffscreenCanvas\": WebGLKernelValueDynamicHTMLImage,\n                            \"HTMLImage\": WebGLKernelValueDynamicHTMLImage,\n                            \"ImageBitmap\": WebGLKernelValueDynamicHTMLImage,\n                            \"ImageData\": WebGLKernelValueDynamicHTMLImage,\n                            \"HTMLImageArray\": false,\n                            \"HTMLVideo\": WebGLKernelValueDynamicHTMLVideo\n                        },\n                        static: {\n                            \"Boolean\": WebGLKernelValueBoolean,\n                            \"Float\": WebGLKernelValueFloat,\n                            \"Integer\": WebGLKernelValueInteger,\n                            \"Array\": WebGLKernelValueUnsignedArray,\n                            \"Array(2)\": WebGLKernelValueArray2,\n                            \"Array(3)\": WebGLKernelValueArray3,\n                            \"Array(4)\": WebGLKernelValueArray4,\n                            \"Array1D(2)\": false,\n                            \"Array1D(3)\": false,\n                            \"Array1D(4)\": false,\n                            \"Array2D(2)\": false,\n                            \"Array2D(3)\": false,\n                            \"Array2D(4)\": false,\n                            \"Array3D(2)\": false,\n                            \"Array3D(3)\": false,\n                            \"Array3D(4)\": false,\n                            \"Input\": WebGLKernelValueUnsignedInput,\n                            \"NumberTexture\": WebGLKernelValueNumberTexture,\n                            \"ArrayTexture(1)\": WebGLKernelValueNumberTexture,\n                            \"ArrayTexture(2)\": WebGLKernelValueNumberTexture,\n                            \"ArrayTexture(3)\": WebGLKernelValueNumberTexture,\n                            \"ArrayTexture(4)\": WebGLKernelValueNumberTexture,\n                            \"MemoryOptimizedNumberTexture\": WebGLKernelValueMemoryOptimizedNumberTexture,\n                            \"HTMLCanvas\": WebGLKernelValueHTMLImage,\n                            \"OffscreenCanvas\": WebGLKernelValueHTMLImage,\n                            \"HTMLImage\": WebGLKernelValueHTMLImage,\n                            \"ImageBitmap\": WebGLKernelValueHTMLImage,\n                            \"ImageData\": WebGLKernelValueHTMLImage,\n                            \"HTMLImageArray\": false,\n                            \"HTMLVideo\": WebGLKernelValueHTMLVideo\n                        }\n                    },\n                    single: {\n                        dynamic: {\n                            \"Boolean\": WebGLKernelValueBoolean,\n                            \"Integer\": WebGLKernelValueInteger,\n                            \"Float\": WebGLKernelValueFloat,\n                            \"Array\": WebGLKernelValueDynamicSingleArray,\n                            \"Array(2)\": WebGLKernelValueArray2,\n                            \"Array(3)\": WebGLKernelValueArray3,\n                            \"Array(4)\": WebGLKernelValueArray4,\n                            \"Array1D(2)\": WebGLKernelValueDynamicSingleArray1DI,\n                            \"Array1D(3)\": WebGLKernelValueDynamicSingleArray1DI,\n                            \"Array1D(4)\": WebGLKernelValueDynamicSingleArray1DI,\n                            \"Array2D(2)\": WebGLKernelValueDynamicSingleArray2DI,\n                            \"Array2D(3)\": WebGLKernelValueDynamicSingleArray2DI,\n                            \"Array2D(4)\": WebGLKernelValueDynamicSingleArray2DI,\n                            \"Array3D(2)\": WebGLKernelValueDynamicSingleArray3DI,\n                            \"Array3D(3)\": WebGLKernelValueDynamicSingleArray3DI,\n                            \"Array3D(4)\": WebGLKernelValueDynamicSingleArray3DI,\n                            \"Input\": WebGLKernelValueDynamicSingleInput,\n                            \"NumberTexture\": WebGLKernelValueDynamicNumberTexture,\n                            \"ArrayTexture(1)\": WebGLKernelValueDynamicNumberTexture,\n                            \"ArrayTexture(2)\": WebGLKernelValueDynamicNumberTexture,\n                            \"ArrayTexture(3)\": WebGLKernelValueDynamicNumberTexture,\n                            \"ArrayTexture(4)\": WebGLKernelValueDynamicNumberTexture,\n                            \"MemoryOptimizedNumberTexture\": WebGLKernelValueDynamicMemoryOptimizedNumberTexture,\n                            \"HTMLCanvas\": WebGLKernelValueDynamicHTMLImage,\n                            \"OffscreenCanvas\": WebGLKernelValueDynamicHTMLImage,\n                            \"HTMLImage\": WebGLKernelValueDynamicHTMLImage,\n                            \"ImageBitmap\": WebGLKernelValueDynamicHTMLImage,\n                            \"ImageData\": WebGLKernelValueDynamicHTMLImage,\n                            \"HTMLImageArray\": false,\n                            \"HTMLVideo\": WebGLKernelValueDynamicHTMLVideo\n                        },\n                        static: {\n                            \"Boolean\": WebGLKernelValueBoolean,\n                            \"Float\": WebGLKernelValueFloat,\n                            \"Integer\": WebGLKernelValueInteger,\n                            \"Array\": WebGLKernelValueSingleArray,\n                            \"Array(2)\": WebGLKernelValueArray2,\n                            \"Array(3)\": WebGLKernelValueArray3,\n                            \"Array(4)\": WebGLKernelValueArray4,\n                            \"Array1D(2)\": WebGLKernelValueSingleArray1DI,\n                            \"Array1D(3)\": WebGLKernelValueSingleArray1DI,\n                            \"Array1D(4)\": WebGLKernelValueSingleArray1DI,\n                            \"Array2D(2)\": WebGLKernelValueSingleArray2DI,\n                            \"Array2D(3)\": WebGLKernelValueSingleArray2DI,\n                            \"Array2D(4)\": WebGLKernelValueSingleArray2DI,\n                            \"Array3D(2)\": WebGLKernelValueSingleArray3DI,\n                            \"Array3D(3)\": WebGLKernelValueSingleArray3DI,\n                            \"Array3D(4)\": WebGLKernelValueSingleArray3DI,\n                            \"Input\": WebGLKernelValueSingleInput,\n                            \"NumberTexture\": WebGLKernelValueNumberTexture,\n                            \"ArrayTexture(1)\": WebGLKernelValueNumberTexture,\n                            \"ArrayTexture(2)\": WebGLKernelValueNumberTexture,\n                            \"ArrayTexture(3)\": WebGLKernelValueNumberTexture,\n                            \"ArrayTexture(4)\": WebGLKernelValueNumberTexture,\n                            \"MemoryOptimizedNumberTexture\": WebGLKernelValueMemoryOptimizedNumberTexture,\n                            \"HTMLCanvas\": WebGLKernelValueHTMLImage,\n                            \"OffscreenCanvas\": WebGLKernelValueHTMLImage,\n                            \"HTMLImage\": WebGLKernelValueHTMLImage,\n                            \"ImageBitmap\": WebGLKernelValueHTMLImage,\n                            \"ImageData\": WebGLKernelValueHTMLImage,\n                            \"HTMLImageArray\": false,\n                            \"HTMLVideo\": WebGLKernelValueHTMLVideo\n                        }\n                    }\n                };\n                function lookupKernelValueType(type, dynamic, precision, value1) {\n                    if (!type) throw new Error(\"type missing\");\n                    if (!dynamic) throw new Error(\"dynamic missing\");\n                    if (!precision) throw new Error(\"precision missing\");\n                    if (value1.type) type = value1.type;\n                    const types = kernelValueMaps[precision][dynamic];\n                    if (types[type] === false) return null;\n                    else if (types[type] === undefined) throw new Error(`Could not find a KernelValue for ${type}`);\n                    return types[type];\n                }\n                module1.exports = {\n                    lookupKernelValueType: lookupKernelValueType,\n                    kernelValueMaps: kernelValueMaps\n                };\n            },\n            {\n                \"./kernel-value/array2\": 41,\n                \"./kernel-value/array3\": 42,\n                \"./kernel-value/array4\": 43,\n                \"./kernel-value/boolean\": 44,\n                \"./kernel-value/dynamic-html-image\": 45,\n                \"./kernel-value/dynamic-html-video\": 46,\n                \"./kernel-value/dynamic-memory-optimized-number-texture\": 47,\n                \"./kernel-value/dynamic-number-texture\": 48,\n                \"./kernel-value/dynamic-single-array\": 49,\n                \"./kernel-value/dynamic-single-array1d-i\": 50,\n                \"./kernel-value/dynamic-single-array2d-i\": 51,\n                \"./kernel-value/dynamic-single-array3d-i\": 52,\n                \"./kernel-value/dynamic-single-input\": 53,\n                \"./kernel-value/dynamic-unsigned-array\": 54,\n                \"./kernel-value/dynamic-unsigned-input\": 55,\n                \"./kernel-value/float\": 56,\n                \"./kernel-value/html-image\": 57,\n                \"./kernel-value/html-video\": 58,\n                \"./kernel-value/integer\": 60,\n                \"./kernel-value/memory-optimized-number-texture\": 61,\n                \"./kernel-value/number-texture\": 62,\n                \"./kernel-value/single-array\": 63,\n                \"./kernel-value/single-array1d-i\": 64,\n                \"./kernel-value/single-array2d-i\": 65,\n                \"./kernel-value/single-array3d-i\": 66,\n                \"./kernel-value/single-input\": 67,\n                \"./kernel-value/unsigned-array\": 68,\n                \"./kernel-value/unsigned-input\": 69\n            }\n        ],\n        40: [\n            function(require1, module1, exports) {\n                const { WebGLKernelValue: WebGLKernelValue  } = require1(\"./index\");\n                const { Input: Input  } = require1(\"../../../input\");\n                class WebGLKernelArray extends WebGLKernelValue {\n                    checkSize(width, height) {\n                        if (!this.kernel.validate) return;\n                        const { maxTextureSize: maxTextureSize  } = this.kernel.constructor.features;\n                        if (width > maxTextureSize || height > maxTextureSize) {\n                            if (width > height) throw new Error(`Argument texture width of ${width} larger than maximum size of ${maxTextureSize} for your GPU`);\n                            else if (width < height) throw new Error(`Argument texture height of ${height} larger than maximum size of ${maxTextureSize} for your GPU`);\n                            else throw new Error(`Argument texture height and width of ${height} larger than maximum size of ${maxTextureSize} for your GPU`);\n                        }\n                    }\n                    setup() {\n                        this.requestTexture();\n                        this.setupTexture();\n                        this.defineTexture();\n                    }\n                    requestTexture() {\n                        this.texture = this.onRequestTexture();\n                    }\n                    defineTexture() {\n                        const { context: gl  } = this;\n                        gl.activeTexture(this.contextHandle);\n                        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n                    }\n                    setupTexture() {\n                        this.contextHandle = this.onRequestContextHandle();\n                        this.index = this.onRequestIndex();\n                        this.dimensionsId = this.id + \"Dim\";\n                        this.sizeId = this.id + \"Size\";\n                    }\n                    getBitRatio(value1) {\n                        if (Array.isArray(value1[0])) return this.getBitRatio(value1[0]);\n                        else if (value1.constructor === Input) return this.getBitRatio(value1.value);\n                        switch(value1.constructor){\n                            case Uint8ClampedArray:\n                            case Uint8Array:\n                            case Int8Array:\n                                return 1;\n                            case Uint16Array:\n                            case Int16Array:\n                                return 2;\n                            case Float32Array:\n                            case Int32Array:\n                            default:\n                                return 4;\n                        }\n                    }\n                    destroy() {\n                        if (this.prevArg) this.prevArg.delete();\n                        this.context.deleteTexture(this.texture);\n                    }\n                }\n                module1.exports = {\n                    WebGLKernelArray: WebGLKernelArray\n                };\n            },\n            {\n                \"../../../input\": 110,\n                \"./index\": 59\n            }\n        ],\n        41: [\n            function(require1, module1, exports) {\n                const { WebGLKernelValue: WebGLKernelValue  } = require1(\"./index\");\n                class WebGLKernelValueArray2 extends WebGLKernelValue {\n                    constructor(value1, settings){\n                        super(value1, settings);\n                        this.uploadValue = value1;\n                    }\n                    getSource(value1) {\n                        if (this.origin === \"constants\") return `const vec2 ${this.id} = vec2(${value1[0]},${value1[1]});\\n`;\n                        return `uniform vec2 ${this.id};\\n`;\n                    }\n                    getStringValueHandler() {\n                        if (this.origin === \"constants\") return \"\";\n                        return `const uploadValue_${this.name} = ${this.varName};\\n`;\n                    }\n                    updateValue(value1) {\n                        if (this.origin === \"constants\") return;\n                        this.kernel.setUniform2fv(this.id, this.uploadValue = value1);\n                    }\n                }\n                module1.exports = {\n                    WebGLKernelValueArray2: WebGLKernelValueArray2\n                };\n            },\n            {\n                \"./index\": 59\n            }\n        ],\n        42: [\n            function(require1, module1, exports) {\n                const { WebGLKernelValue: WebGLKernelValue  } = require1(\"./index\");\n                class WebGLKernelValueArray3 extends WebGLKernelValue {\n                    constructor(value1, settings){\n                        super(value1, settings);\n                        this.uploadValue = value1;\n                    }\n                    getSource(value1) {\n                        if (this.origin === \"constants\") return `const vec3 ${this.id} = vec3(${value1[0]},${value1[1]},${value1[2]});\\n`;\n                        return `uniform vec3 ${this.id};\\n`;\n                    }\n                    getStringValueHandler() {\n                        if (this.origin === \"constants\") return \"\";\n                        return `const uploadValue_${this.name} = ${this.varName};\\n`;\n                    }\n                    updateValue(value1) {\n                        if (this.origin === \"constants\") return;\n                        this.kernel.setUniform3fv(this.id, this.uploadValue = value1);\n                    }\n                }\n                module1.exports = {\n                    WebGLKernelValueArray3: WebGLKernelValueArray3\n                };\n            },\n            {\n                \"./index\": 59\n            }\n        ],\n        43: [\n            function(require1, module1, exports) {\n                const { WebGLKernelValue: WebGLKernelValue  } = require1(\"./index\");\n                class WebGLKernelValueArray4 extends WebGLKernelValue {\n                    constructor(value1, settings){\n                        super(value1, settings);\n                        this.uploadValue = value1;\n                    }\n                    getSource(value1) {\n                        if (this.origin === \"constants\") return `const vec4 ${this.id} = vec4(${value1[0]},${value1[1]},${value1[2]},${value1[3]});\\n`;\n                        return `uniform vec4 ${this.id};\\n`;\n                    }\n                    getStringValueHandler() {\n                        if (this.origin === \"constants\") return \"\";\n                        return `const uploadValue_${this.name} = ${this.varName};\\n`;\n                    }\n                    updateValue(value1) {\n                        if (this.origin === \"constants\") return;\n                        this.kernel.setUniform4fv(this.id, this.uploadValue = value1);\n                    }\n                }\n                module1.exports = {\n                    WebGLKernelValueArray4: WebGLKernelValueArray4\n                };\n            },\n            {\n                \"./index\": 59\n            }\n        ],\n        44: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelValue: WebGLKernelValue  } = require1(\"./index\");\n                class WebGLKernelValueBoolean extends WebGLKernelValue {\n                    constructor(value1, settings){\n                        super(value1, settings);\n                        this.uploadValue = value1;\n                    }\n                    getSource(value1) {\n                        if (this.origin === \"constants\") return `const bool ${this.id} = ${value1};\\n`;\n                        return `uniform bool ${this.id};\\n`;\n                    }\n                    getStringValueHandler() {\n                        return `const uploadValue_${this.name} = ${this.varName};\\n`;\n                    }\n                    updateValue(value1) {\n                        if (this.origin === \"constants\") return;\n                        this.kernel.setUniform1i(this.id, this.uploadValue = value1);\n                    }\n                }\n                module1.exports = {\n                    WebGLKernelValueBoolean: WebGLKernelValueBoolean\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./index\": 59\n            }\n        ],\n        45: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelValueHTMLImage: WebGLKernelValueHTMLImage  } = require1(\"./html-image\");\n                class WebGLKernelValueDynamicHTMLImage extends WebGLKernelValueHTMLImage {\n                    getSource() {\n                        return utils.linesToString([\n                            `uniform sampler2D ${this.id}`,\n                            `uniform ivec2 ${this.sizeId}`,\n                            `uniform ivec3 ${this.dimensionsId}`\n                        ]);\n                    }\n                    updateValue(value1) {\n                        const { width: width , height: height  } = value1;\n                        this.checkSize(width, height);\n                        this.dimensions = [\n                            width,\n                            height,\n                            1\n                        ];\n                        this.textureSize = [\n                            width,\n                            height\n                        ];\n                        this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n                        this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n                        super.updateValue(value1);\n                    }\n                }\n                module1.exports = {\n                    WebGLKernelValueDynamicHTMLImage: WebGLKernelValueDynamicHTMLImage\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./html-image\": 57\n            }\n        ],\n        46: [\n            function(require1, module1, exports) {\n                const { WebGLKernelValueDynamicHTMLImage: WebGLKernelValueDynamicHTMLImage  } = require1(\"./dynamic-html-image\");\n                class WebGLKernelValueDynamicHTMLVideo extends WebGLKernelValueDynamicHTMLImage {\n                }\n                module1.exports = {\n                    WebGLKernelValueDynamicHTMLVideo: WebGLKernelValueDynamicHTMLVideo\n                };\n            },\n            {\n                \"./dynamic-html-image\": 45\n            }\n        ],\n        47: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelValueMemoryOptimizedNumberTexture: WebGLKernelValueMemoryOptimizedNumberTexture  } = require1(\"./memory-optimized-number-texture\");\n                class WebGLKernelValueDynamicMemoryOptimizedNumberTexture extends WebGLKernelValueMemoryOptimizedNumberTexture {\n                    getSource() {\n                        return utils.linesToString([\n                            `uniform sampler2D ${this.id}`,\n                            `uniform ivec2 ${this.sizeId}`,\n                            `uniform ivec3 ${this.dimensionsId}`\n                        ]);\n                    }\n                    updateValue(inputTexture) {\n                        this.dimensions = inputTexture.dimensions;\n                        this.checkSize(inputTexture.size[0], inputTexture.size[1]);\n                        this.textureSize = inputTexture.size;\n                        this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n                        this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n                        super.updateValue(inputTexture);\n                    }\n                }\n                module1.exports = {\n                    WebGLKernelValueDynamicMemoryOptimizedNumberTexture: WebGLKernelValueDynamicMemoryOptimizedNumberTexture\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./memory-optimized-number-texture\": 61\n            }\n        ],\n        48: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelValueNumberTexture: WebGLKernelValueNumberTexture  } = require1(\"./number-texture\");\n                class WebGLKernelValueDynamicNumberTexture extends WebGLKernelValueNumberTexture {\n                    getSource() {\n                        return utils.linesToString([\n                            `uniform sampler2D ${this.id}`,\n                            `uniform ivec2 ${this.sizeId}`,\n                            `uniform ivec3 ${this.dimensionsId}`\n                        ]);\n                    }\n                    updateValue(value1) {\n                        this.dimensions = value1.dimensions;\n                        this.checkSize(value1.size[0], value1.size[1]);\n                        this.textureSize = value1.size;\n                        this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n                        this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n                        super.updateValue(value1);\n                    }\n                }\n                module1.exports = {\n                    WebGLKernelValueDynamicNumberTexture: WebGLKernelValueDynamicNumberTexture\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./number-texture\": 62\n            }\n        ],\n        49: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelValueSingleArray: WebGLKernelValueSingleArray  } = require1(\"./single-array\");\n                class WebGLKernelValueDynamicSingleArray extends WebGLKernelValueSingleArray {\n                    getSource() {\n                        return utils.linesToString([\n                            `uniform sampler2D ${this.id}`,\n                            `uniform ivec2 ${this.sizeId}`,\n                            `uniform ivec3 ${this.dimensionsId}`\n                        ]);\n                    }\n                    updateValue(value1) {\n                        this.dimensions = utils.getDimensions(value1, true);\n                        this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);\n                        this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;\n                        this.checkSize(this.textureSize[0], this.textureSize[1]);\n                        this.uploadValue = new Float32Array(this.uploadArrayLength);\n                        this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n                        this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n                        super.updateValue(value1);\n                    }\n                }\n                module1.exports = {\n                    WebGLKernelValueDynamicSingleArray: WebGLKernelValueDynamicSingleArray\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./single-array\": 63\n            }\n        ],\n        50: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelValueSingleArray1DI: WebGLKernelValueSingleArray1DI  } = require1(\"./single-array1d-i\");\n                class WebGLKernelValueDynamicSingleArray1DI extends WebGLKernelValueSingleArray1DI {\n                    getSource() {\n                        return utils.linesToString([\n                            `uniform sampler2D ${this.id}`,\n                            `uniform ivec2 ${this.sizeId}`,\n                            `uniform ivec3 ${this.dimensionsId}`\n                        ]);\n                    }\n                    updateValue(value1) {\n                        this.setShape(value1);\n                        this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n                        this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n                        super.updateValue(value1);\n                    }\n                }\n                module1.exports = {\n                    WebGLKernelValueDynamicSingleArray1DI: WebGLKernelValueDynamicSingleArray1DI\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./single-array1d-i\": 64\n            }\n        ],\n        51: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelValueSingleArray2DI: WebGLKernelValueSingleArray2DI  } = require1(\"./single-array2d-i\");\n                class WebGLKernelValueDynamicSingleArray2DI extends WebGLKernelValueSingleArray2DI {\n                    getSource() {\n                        return utils.linesToString([\n                            `uniform sampler2D ${this.id}`,\n                            `uniform ivec2 ${this.sizeId}`,\n                            `uniform ivec3 ${this.dimensionsId}`\n                        ]);\n                    }\n                    updateValue(value1) {\n                        this.setShape(value1);\n                        this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n                        this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n                        super.updateValue(value1);\n                    }\n                }\n                module1.exports = {\n                    WebGLKernelValueDynamicSingleArray2DI: WebGLKernelValueDynamicSingleArray2DI\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./single-array2d-i\": 65\n            }\n        ],\n        52: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelValueSingleArray3DI: WebGLKernelValueSingleArray3DI  } = require1(\"./single-array3d-i\");\n                class WebGLKernelValueDynamicSingleArray3DI extends WebGLKernelValueSingleArray3DI {\n                    getSource() {\n                        return utils.linesToString([\n                            `uniform sampler2D ${this.id}`,\n                            `uniform ivec2 ${this.sizeId}`,\n                            `uniform ivec3 ${this.dimensionsId}`\n                        ]);\n                    }\n                    updateValue(value1) {\n                        this.setShape(value1);\n                        this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n                        this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n                        super.updateValue(value1);\n                    }\n                }\n                module1.exports = {\n                    WebGLKernelValueDynamicSingleArray3DI: WebGLKernelValueDynamicSingleArray3DI\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./single-array3d-i\": 66\n            }\n        ],\n        53: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelValueSingleInput: WebGLKernelValueSingleInput  } = require1(\"./single-input\");\n                class WebGLKernelValueDynamicSingleInput extends WebGLKernelValueSingleInput {\n                    getSource() {\n                        return utils.linesToString([\n                            `uniform sampler2D ${this.id}`,\n                            `uniform ivec2 ${this.sizeId}`,\n                            `uniform ivec3 ${this.dimensionsId}`\n                        ]);\n                    }\n                    updateValue(value1) {\n                        let [w, h, d] = value1.size;\n                        this.dimensions = new Int32Array([\n                            w || 1,\n                            h || 1,\n                            d || 1\n                        ]);\n                        this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);\n                        this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;\n                        this.checkSize(this.textureSize[0], this.textureSize[1]);\n                        this.uploadValue = new Float32Array(this.uploadArrayLength);\n                        this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n                        this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n                        super.updateValue(value1);\n                    }\n                }\n                module1.exports = {\n                    WebGLKernelValueDynamicSingleInput: WebGLKernelValueDynamicSingleInput\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./single-input\": 67\n            }\n        ],\n        54: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelValueUnsignedArray: WebGLKernelValueUnsignedArray  } = require1(\"./unsigned-array\");\n                class WebGLKernelValueDynamicUnsignedArray extends WebGLKernelValueUnsignedArray {\n                    getSource() {\n                        return utils.linesToString([\n                            `uniform sampler2D ${this.id}`,\n                            `uniform ivec2 ${this.sizeId}`,\n                            `uniform ivec3 ${this.dimensionsId}`\n                        ]);\n                    }\n                    updateValue(value1) {\n                        this.dimensions = utils.getDimensions(value1, true);\n                        this.textureSize = utils.getMemoryOptimizedPackedTextureSize(this.dimensions, this.bitRatio);\n                        this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * (4 / this.bitRatio);\n                        this.checkSize(this.textureSize[0], this.textureSize[1]);\n                        const Type = this.getTransferArrayType(value1);\n                        this.preUploadValue = new Type(this.uploadArrayLength);\n                        this.uploadValue = new Uint8Array(this.preUploadValue.buffer);\n                        this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n                        this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n                        super.updateValue(value1);\n                    }\n                }\n                module1.exports = {\n                    WebGLKernelValueDynamicUnsignedArray: WebGLKernelValueDynamicUnsignedArray\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./unsigned-array\": 68\n            }\n        ],\n        55: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelValueUnsignedInput: WebGLKernelValueUnsignedInput  } = require1(\"./unsigned-input\");\n                class WebGLKernelValueDynamicUnsignedInput extends WebGLKernelValueUnsignedInput {\n                    getSource() {\n                        return utils.linesToString([\n                            `uniform sampler2D ${this.id}`,\n                            `uniform ivec2 ${this.sizeId}`,\n                            `uniform ivec3 ${this.dimensionsId}`\n                        ]);\n                    }\n                    updateValue(value1) {\n                        let [w, h, d] = value1.size;\n                        this.dimensions = new Int32Array([\n                            w || 1,\n                            h || 1,\n                            d || 1\n                        ]);\n                        this.textureSize = utils.getMemoryOptimizedPackedTextureSize(this.dimensions, this.bitRatio);\n                        this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * (4 / this.bitRatio);\n                        this.checkSize(this.textureSize[0], this.textureSize[1]);\n                        const Type = this.getTransferArrayType(value1.value);\n                        this.preUploadValue = new Type(this.uploadArrayLength);\n                        this.uploadValue = new Uint8Array(this.preUploadValue.buffer);\n                        this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n                        this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n                        super.updateValue(value1);\n                    }\n                }\n                module1.exports = {\n                    WebGLKernelValueDynamicUnsignedInput: WebGLKernelValueDynamicUnsignedInput\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./unsigned-input\": 69\n            }\n        ],\n        56: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelValue: WebGLKernelValue  } = require1(\"./index\");\n                class WebGLKernelValueFloat extends WebGLKernelValue {\n                    constructor(value1, settings){\n                        super(value1, settings);\n                        this.uploadValue = value1;\n                    }\n                    getStringValueHandler() {\n                        return `const uploadValue_${this.name} = ${this.varName};\\n`;\n                    }\n                    getSource(value1) {\n                        if (this.origin === \"constants\") {\n                            if (Number.isInteger(value1)) return `const float ${this.id} = ${value1}.0;\\n`;\n                            return `const float ${this.id} = ${value1};\\n`;\n                        }\n                        return `uniform float ${this.id};\\n`;\n                    }\n                    updateValue(value1) {\n                        if (this.origin === \"constants\") return;\n                        this.kernel.setUniform1f(this.id, this.uploadValue = value1);\n                    }\n                }\n                module1.exports = {\n                    WebGLKernelValueFloat: WebGLKernelValueFloat\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./index\": 59\n            }\n        ],\n        57: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelArray: WebGLKernelArray  } = require1(\"./array\");\n                class WebGLKernelValueHTMLImage extends WebGLKernelArray {\n                    constructor(value1, settings){\n                        super(value1, settings);\n                        const { width: width , height: height  } = value1;\n                        this.checkSize(width, height);\n                        this.dimensions = [\n                            width,\n                            height,\n                            1\n                        ];\n                        this.textureSize = [\n                            width,\n                            height\n                        ];\n                        this.uploadValue = value1;\n                    }\n                    getStringValueHandler() {\n                        return `const uploadValue_${this.name} = ${this.varName};\\n`;\n                    }\n                    getSource() {\n                        return utils.linesToString([\n                            `uniform sampler2D ${this.id}`,\n                            `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n                            `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`\n                        ]);\n                    }\n                    updateValue(inputImage) {\n                        if (inputImage.constructor !== this.initialValueConstructor) {\n                            this.onUpdateValueMismatch(inputImage.constructor);\n                            return;\n                        }\n                        const { context: gl  } = this;\n                        gl.activeTexture(this.contextHandle);\n                        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n                        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n                        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this.uploadValue = inputImage);\n                        this.kernel.setUniform1i(this.id, this.index);\n                    }\n                }\n                module1.exports = {\n                    WebGLKernelValueHTMLImage: WebGLKernelValueHTMLImage\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./array\": 40\n            }\n        ],\n        58: [\n            function(require1, module1, exports) {\n                const { WebGLKernelValueHTMLImage: WebGLKernelValueHTMLImage  } = require1(\"./html-image\");\n                class WebGLKernelValueHTMLVideo extends WebGLKernelValueHTMLImage {\n                }\n                module1.exports = {\n                    WebGLKernelValueHTMLVideo: WebGLKernelValueHTMLVideo\n                };\n            },\n            {\n                \"./html-image\": 57\n            }\n        ],\n        59: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { KernelValue: KernelValue  } = require1(\"../../kernel-value\");\n                class WebGLKernelValue extends KernelValue {\n                    constructor(value1, settings){\n                        super(value1, settings);\n                        this.dimensionsId = null;\n                        this.sizeId = null;\n                        this.initialValueConstructor = value1.constructor;\n                        this.onRequestTexture = settings.onRequestTexture;\n                        this.onRequestIndex = settings.onRequestIndex;\n                        this.uploadValue = null;\n                        this.textureSize = null;\n                        this.bitRatio = null;\n                        this.prevArg = null;\n                    }\n                    get id() {\n                        return `${this.origin}_${utils.sanitizeName(this.name)}`;\n                    }\n                    setup() {}\n                    getTransferArrayType(value1) {\n                        if (Array.isArray(value1[0])) return this.getTransferArrayType(value1[0]);\n                        switch(value1.constructor){\n                            case Array:\n                            case Int32Array:\n                            case Int16Array:\n                            case Int8Array:\n                                return Float32Array;\n                            case Uint8ClampedArray:\n                            case Uint8Array:\n                            case Uint16Array:\n                            case Uint32Array:\n                            case Float32Array:\n                            case Float64Array:\n                                return value1.constructor;\n                        }\n                        console.warn(\"Unfamiliar constructor type.  Will go ahead and use, but likley this may result in a transfer of zeros\");\n                        return value1.constructor;\n                    }\n                    getStringValueHandler() {\n                        throw new Error(`\"getStringValueHandler\" not implemented on ${this.constructor.name}`);\n                    }\n                    getVariablePrecisionString() {\n                        return this.kernel.getVariablePrecisionString(this.textureSize || undefined, this.tactic || undefined);\n                    }\n                    destroy() {}\n                }\n                module1.exports = {\n                    WebGLKernelValue: WebGLKernelValue\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"../../kernel-value\": 35\n            }\n        ],\n        60: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelValue: WebGLKernelValue  } = require1(\"./index\");\n                class WebGLKernelValueInteger extends WebGLKernelValue {\n                    constructor(value1, settings){\n                        super(value1, settings);\n                        this.uploadValue = value1;\n                    }\n                    getStringValueHandler() {\n                        return `const uploadValue_${this.name} = ${this.varName};\\n`;\n                    }\n                    getSource(value1) {\n                        if (this.origin === \"constants\") return `const int ${this.id} = ${parseInt(value1)};\\n`;\n                        return `uniform int ${this.id};\\n`;\n                    }\n                    updateValue(value1) {\n                        if (this.origin === \"constants\") return;\n                        this.kernel.setUniform1i(this.id, this.uploadValue = value1);\n                    }\n                }\n                module1.exports = {\n                    WebGLKernelValueInteger: WebGLKernelValueInteger\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./index\": 59\n            }\n        ],\n        61: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelArray: WebGLKernelArray  } = require1(\"./array\");\n                const sameError = `Source and destination textures are the same.  Use immutable = true and manually cleanup kernel output texture memory with texture.delete()`;\n                class WebGLKernelValueMemoryOptimizedNumberTexture extends WebGLKernelArray {\n                    constructor(value1, settings){\n                        super(value1, settings);\n                        const [width, height] = value1.size;\n                        this.checkSize(width, height);\n                        this.dimensions = value1.dimensions;\n                        this.textureSize = value1.size;\n                        this.uploadValue = value1.texture;\n                        this.forceUploadEachRun = true;\n                    }\n                    setup() {\n                        this.setupTexture();\n                    }\n                    getStringValueHandler() {\n                        return `const uploadValue_${this.name} = ${this.varName}.texture;\\n`;\n                    }\n                    getSource() {\n                        return utils.linesToString([\n                            `uniform sampler2D ${this.id}`,\n                            `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n                            `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`\n                        ]);\n                    }\n                    updateValue(inputTexture) {\n                        if (inputTexture.constructor !== this.initialValueConstructor) {\n                            this.onUpdateValueMismatch(inputTexture.constructor);\n                            return;\n                        }\n                        if (this.checkContext && inputTexture.context !== this.context) throw new Error(`Value ${this.name} (${this.type}) must be from same context`);\n                        const { kernel: kernel , context: gl  } = this;\n                        if (kernel.pipeline) {\n                            if (kernel.immutable) kernel.updateTextureArgumentRefs(this, inputTexture);\n                            else {\n                                if (kernel.texture && kernel.texture.texture === inputTexture.texture) throw new Error(sameError);\n                                else if (kernel.mappedTextures) {\n                                    const { mappedTextures: mappedTextures  } = kernel;\n                                    for(let i = 0; i < mappedTextures.length; i++){\n                                        if (mappedTextures[i].texture === inputTexture.texture) throw new Error(sameError);\n                                    }\n                                }\n                            }\n                        }\n                        gl.activeTexture(this.contextHandle);\n                        gl.bindTexture(gl.TEXTURE_2D, this.uploadValue = inputTexture.texture);\n                        this.kernel.setUniform1i(this.id, this.index);\n                    }\n                }\n                module1.exports = {\n                    WebGLKernelValueMemoryOptimizedNumberTexture: WebGLKernelValueMemoryOptimizedNumberTexture,\n                    sameError: sameError\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./array\": 40\n            }\n        ],\n        62: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelArray: WebGLKernelArray  } = require1(\"./array\");\n                const { sameError: sameError  } = require1(\"./memory-optimized-number-texture\");\n                class WebGLKernelValueNumberTexture extends WebGLKernelArray {\n                    constructor(value1, settings){\n                        super(value1, settings);\n                        const [width, height] = value1.size;\n                        this.checkSize(width, height);\n                        const { size: textureSize , dimensions: dimensions  } = value1;\n                        this.bitRatio = this.getBitRatio(value1);\n                        this.dimensions = dimensions;\n                        this.textureSize = textureSize;\n                        this.uploadValue = value1.texture;\n                        this.forceUploadEachRun = true;\n                    }\n                    setup() {\n                        this.setupTexture();\n                    }\n                    getStringValueHandler() {\n                        return `const uploadValue_${this.name} = ${this.varName}.texture;\\n`;\n                    }\n                    getSource() {\n                        return utils.linesToString([\n                            `uniform sampler2D ${this.id}`,\n                            `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n                            `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`\n                        ]);\n                    }\n                    updateValue(inputTexture) {\n                        if (inputTexture.constructor !== this.initialValueConstructor) {\n                            this.onUpdateValueMismatch(inputTexture.constructor);\n                            return;\n                        }\n                        if (this.checkContext && inputTexture.context !== this.context) throw new Error(`Value ${this.name} (${this.type}) must be from same context`);\n                        const { kernel: kernel , context: gl  } = this;\n                        if (kernel.pipeline) {\n                            if (kernel.immutable) kernel.updateTextureArgumentRefs(this, inputTexture);\n                            else {\n                                if (kernel.texture && kernel.texture.texture === inputTexture.texture) throw new Error(sameError);\n                                else if (kernel.mappedTextures) {\n                                    const { mappedTextures: mappedTextures  } = kernel;\n                                    for(let i = 0; i < mappedTextures.length; i++){\n                                        if (mappedTextures[i].texture === inputTexture.texture) throw new Error(sameError);\n                                    }\n                                }\n                            }\n                        }\n                        gl.activeTexture(this.contextHandle);\n                        gl.bindTexture(gl.TEXTURE_2D, this.uploadValue = inputTexture.texture);\n                        this.kernel.setUniform1i(this.id, this.index);\n                    }\n                }\n                module1.exports = {\n                    WebGLKernelValueNumberTexture: WebGLKernelValueNumberTexture\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./array\": 40,\n                \"./memory-optimized-number-texture\": 61\n            }\n        ],\n        63: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelArray: WebGLKernelArray  } = require1(\"./array\");\n                class WebGLKernelValueSingleArray extends WebGLKernelArray {\n                    constructor(value1, settings){\n                        super(value1, settings);\n                        this.bitRatio = 4;\n                        this.dimensions = utils.getDimensions(value1, true);\n                        this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);\n                        this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;\n                        this.checkSize(this.textureSize[0], this.textureSize[1]);\n                        this.uploadValue = new Float32Array(this.uploadArrayLength);\n                    }\n                    getStringValueHandler() {\n                        return utils.linesToString([\n                            `const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})`,\n                            `flattenTo(${this.varName}, uploadValue_${this.name})`\n                        ]);\n                    }\n                    getSource() {\n                        return utils.linesToString([\n                            `uniform sampler2D ${this.id}`,\n                            `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n                            `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`\n                        ]);\n                    }\n                    updateValue(value1) {\n                        if (value1.constructor !== this.initialValueConstructor) {\n                            this.onUpdateValueMismatch(value1.constructor);\n                            return;\n                        }\n                        const { context: gl  } = this;\n                        utils.flattenTo(value1, this.uploadValue);\n                        gl.activeTexture(this.contextHandle);\n                        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n                        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n                        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\n                        this.kernel.setUniform1i(this.id, this.index);\n                    }\n                }\n                module1.exports = {\n                    WebGLKernelValueSingleArray: WebGLKernelValueSingleArray\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./array\": 40\n            }\n        ],\n        64: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelArray: WebGLKernelArray  } = require1(\"./array\");\n                class WebGLKernelValueSingleArray1DI extends WebGLKernelArray {\n                    constructor(value1, settings){\n                        super(value1, settings);\n                        this.bitRatio = 4;\n                        this.setShape(value1);\n                    }\n                    setShape(value1) {\n                        const valueDimensions = utils.getDimensions(value1, true);\n                        this.textureSize = utils.getMemoryOptimizedFloatTextureSize(valueDimensions, this.bitRatio);\n                        this.dimensions = new Int32Array([\n                            valueDimensions[1],\n                            1,\n                            1\n                        ]);\n                        this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;\n                        this.checkSize(this.textureSize[0], this.textureSize[1]);\n                        this.uploadValue = new Float32Array(this.uploadArrayLength);\n                    }\n                    getStringValueHandler() {\n                        return utils.linesToString([\n                            `const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})`,\n                            `flattenTo(${this.varName}, uploadValue_${this.name})`\n                        ]);\n                    }\n                    getSource() {\n                        return utils.linesToString([\n                            `uniform sampler2D ${this.id}`,\n                            `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n                            `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`\n                        ]);\n                    }\n                    updateValue(value1) {\n                        if (value1.constructor !== this.initialValueConstructor) {\n                            this.onUpdateValueMismatch(value1.constructor);\n                            return;\n                        }\n                        const { context: gl  } = this;\n                        utils.flatten2dArrayTo(value1, this.uploadValue);\n                        gl.activeTexture(this.contextHandle);\n                        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n                        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n                        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\n                        this.kernel.setUniform1i(this.id, this.index);\n                    }\n                }\n                module1.exports = {\n                    WebGLKernelValueSingleArray1DI: WebGLKernelValueSingleArray1DI\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./array\": 40\n            }\n        ],\n        65: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelArray: WebGLKernelArray  } = require1(\"./array\");\n                class WebGLKernelValueSingleArray2DI extends WebGLKernelArray {\n                    constructor(value1, settings){\n                        super(value1, settings);\n                        this.bitRatio = 4;\n                        this.setShape(value1);\n                    }\n                    setShape(value1) {\n                        const valueDimensions = utils.getDimensions(value1, true);\n                        this.textureSize = utils.getMemoryOptimizedFloatTextureSize(valueDimensions, this.bitRatio);\n                        this.dimensions = new Int32Array([\n                            valueDimensions[1],\n                            valueDimensions[2],\n                            1\n                        ]);\n                        this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;\n                        this.checkSize(this.textureSize[0], this.textureSize[1]);\n                        this.uploadValue = new Float32Array(this.uploadArrayLength);\n                    }\n                    getStringValueHandler() {\n                        return utils.linesToString([\n                            `const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})`,\n                            `flattenTo(${this.varName}, uploadValue_${this.name})`\n                        ]);\n                    }\n                    getSource() {\n                        return utils.linesToString([\n                            `uniform sampler2D ${this.id}`,\n                            `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n                            `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`\n                        ]);\n                    }\n                    updateValue(value1) {\n                        if (value1.constructor !== this.initialValueConstructor) {\n                            this.onUpdateValueMismatch(value1.constructor);\n                            return;\n                        }\n                        const { context: gl  } = this;\n                        utils.flatten3dArrayTo(value1, this.uploadValue);\n                        gl.activeTexture(this.contextHandle);\n                        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n                        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n                        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\n                        this.kernel.setUniform1i(this.id, this.index);\n                    }\n                }\n                module1.exports = {\n                    WebGLKernelValueSingleArray2DI: WebGLKernelValueSingleArray2DI\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./array\": 40\n            }\n        ],\n        66: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelArray: WebGLKernelArray  } = require1(\"./array\");\n                class WebGLKernelValueSingleArray3DI extends WebGLKernelArray {\n                    constructor(value1, settings){\n                        super(value1, settings);\n                        this.bitRatio = 4;\n                        this.setShape(value1);\n                    }\n                    setShape(value1) {\n                        const valueDimensions = utils.getDimensions(value1, true);\n                        this.textureSize = utils.getMemoryOptimizedFloatTextureSize(valueDimensions, this.bitRatio);\n                        this.dimensions = new Int32Array([\n                            valueDimensions[1],\n                            valueDimensions[2],\n                            valueDimensions[3]\n                        ]);\n                        this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;\n                        this.checkSize(this.textureSize[0], this.textureSize[1]);\n                        this.uploadValue = new Float32Array(this.uploadArrayLength);\n                    }\n                    getStringValueHandler() {\n                        return utils.linesToString([\n                            `const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})`,\n                            `flattenTo(${this.varName}, uploadValue_${this.name})`\n                        ]);\n                    }\n                    getSource() {\n                        return utils.linesToString([\n                            `uniform sampler2D ${this.id}`,\n                            `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n                            `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`\n                        ]);\n                    }\n                    updateValue(value1) {\n                        if (value1.constructor !== this.initialValueConstructor) {\n                            this.onUpdateValueMismatch(value1.constructor);\n                            return;\n                        }\n                        const { context: gl  } = this;\n                        utils.flatten4dArrayTo(value1, this.uploadValue);\n                        gl.activeTexture(this.contextHandle);\n                        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n                        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n                        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\n                        this.kernel.setUniform1i(this.id, this.index);\n                    }\n                }\n                module1.exports = {\n                    WebGLKernelValueSingleArray3DI: WebGLKernelValueSingleArray3DI\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./array\": 40\n            }\n        ],\n        67: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelArray: WebGLKernelArray  } = require1(\"./array\");\n                class WebGLKernelValueSingleInput extends WebGLKernelArray {\n                    constructor(value1, settings){\n                        super(value1, settings);\n                        this.bitRatio = 4;\n                        let [w, h, d] = value1.size;\n                        this.dimensions = new Int32Array([\n                            w || 1,\n                            h || 1,\n                            d || 1\n                        ]);\n                        this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);\n                        this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;\n                        this.checkSize(this.textureSize[0], this.textureSize[1]);\n                        this.uploadValue = new Float32Array(this.uploadArrayLength);\n                    }\n                    getStringValueHandler() {\n                        return utils.linesToString([\n                            `const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})`,\n                            `flattenTo(${this.varName}.value, uploadValue_${this.name})`\n                        ]);\n                    }\n                    getSource() {\n                        return utils.linesToString([\n                            `uniform sampler2D ${this.id}`,\n                            `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n                            `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`\n                        ]);\n                    }\n                    updateValue(input) {\n                        if (input.constructor !== this.initialValueConstructor) {\n                            this.onUpdateValueMismatch(input.constructor);\n                            return;\n                        }\n                        const { context: gl  } = this;\n                        utils.flattenTo(input.value, this.uploadValue);\n                        gl.activeTexture(this.contextHandle);\n                        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n                        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n                        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\n                        this.kernel.setUniform1i(this.id, this.index);\n                    }\n                }\n                module1.exports = {\n                    WebGLKernelValueSingleInput: WebGLKernelValueSingleInput\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./array\": 40\n            }\n        ],\n        68: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelArray: WebGLKernelArray  } = require1(\"./array\");\n                class WebGLKernelValueUnsignedArray extends WebGLKernelArray {\n                    constructor(value1, settings){\n                        super(value1, settings);\n                        this.bitRatio = this.getBitRatio(value1);\n                        this.dimensions = utils.getDimensions(value1, true);\n                        this.textureSize = utils.getMemoryOptimizedPackedTextureSize(this.dimensions, this.bitRatio);\n                        this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * (4 / this.bitRatio);\n                        this.checkSize(this.textureSize[0], this.textureSize[1]);\n                        this.TranserArrayType = this.getTransferArrayType(value1);\n                        this.preUploadValue = new this.TranserArrayType(this.uploadArrayLength);\n                        this.uploadValue = new Uint8Array(this.preUploadValue.buffer);\n                    }\n                    getStringValueHandler() {\n                        return utils.linesToString([\n                            `const preUploadValue_${this.name} = new ${this.TranserArrayType.name}(${this.uploadArrayLength})`,\n                            `const uploadValue_${this.name} = new Uint8Array(preUploadValue_${this.name}.buffer)`,\n                            `flattenTo(${this.varName}, preUploadValue_${this.name})`\n                        ]);\n                    }\n                    getSource() {\n                        return utils.linesToString([\n                            `uniform sampler2D ${this.id}`,\n                            `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n                            `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`\n                        ]);\n                    }\n                    updateValue(value1) {\n                        if (value1.constructor !== this.initialValueConstructor) {\n                            this.onUpdateValueMismatch(value1.constructor);\n                            return;\n                        }\n                        const { context: gl  } = this;\n                        utils.flattenTo(value1, this.preUploadValue);\n                        gl.activeTexture(this.contextHandle);\n                        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n                        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n                        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.uploadValue);\n                        this.kernel.setUniform1i(this.id, this.index);\n                    }\n                }\n                module1.exports = {\n                    WebGLKernelValueUnsignedArray: WebGLKernelValueUnsignedArray\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./array\": 40\n            }\n        ],\n        69: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelArray: WebGLKernelArray  } = require1(\"./array\");\n                class WebGLKernelValueUnsignedInput extends WebGLKernelArray {\n                    constructor(value1, settings){\n                        super(value1, settings);\n                        this.bitRatio = this.getBitRatio(value1);\n                        const [w, h, d] = value1.size;\n                        this.dimensions = new Int32Array([\n                            w || 1,\n                            h || 1,\n                            d || 1\n                        ]);\n                        this.textureSize = utils.getMemoryOptimizedPackedTextureSize(this.dimensions, this.bitRatio);\n                        this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * (4 / this.bitRatio);\n                        this.checkSize(this.textureSize[0], this.textureSize[1]);\n                        this.TranserArrayType = this.getTransferArrayType(value1.value);\n                        this.preUploadValue = new this.TranserArrayType(this.uploadArrayLength);\n                        this.uploadValue = new Uint8Array(this.preUploadValue.buffer);\n                    }\n                    getStringValueHandler() {\n                        return utils.linesToString([\n                            `const preUploadValue_${this.name} = new ${this.TranserArrayType.name}(${this.uploadArrayLength})`,\n                            `const uploadValue_${this.name} = new Uint8Array(preUploadValue_${this.name}.buffer)`,\n                            `flattenTo(${this.varName}.value, preUploadValue_${this.name})`\n                        ]);\n                    }\n                    getSource() {\n                        return utils.linesToString([\n                            `uniform sampler2D ${this.id}`,\n                            `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n                            `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`\n                        ]);\n                    }\n                    updateValue(input) {\n                        if (input.constructor !== this.initialValueConstructor) {\n                            this.onUpdateValueMismatch(value.constructor);\n                            return;\n                        }\n                        const { context: gl  } = this;\n                        utils.flattenTo(input.value, this.preUploadValue);\n                        gl.activeTexture(this.contextHandle);\n                        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n                        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n                        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.uploadValue);\n                        this.kernel.setUniform1i(this.id, this.index);\n                    }\n                }\n                module1.exports = {\n                    WebGLKernelValueUnsignedInput: WebGLKernelValueUnsignedInput\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./array\": 40\n            }\n        ],\n        70: [\n            function(require1, module1, exports) {\n                const { GLKernel: GLKernel  } = require1(\"../gl/kernel\");\n                const { FunctionBuilder: FunctionBuilder  } = require1(\"../function-builder\");\n                const { WebGLFunctionNode: WebGLFunctionNode  } = require1(\"./function-node\");\n                const { utils: utils  } = require1(\"../../utils\");\n                const mrud = require1(\"../../plugins/math-random-uniformly-distributed\");\n                const { fragmentShader: fragmentShader  } = require1(\"./fragment-shader\");\n                const { vertexShader: vertexShader  } = require1(\"./vertex-shader\");\n                const { glKernelString: glKernelString  } = require1(\"../gl/kernel-string\");\n                const { lookupKernelValueType: lookupKernelValueType  } = require1(\"./kernel-value-maps\");\n                let isSupported = null;\n                let testCanvas = null;\n                let testContext = null;\n                let testExtensions = null;\n                let features = null;\n                const plugins = [\n                    mrud\n                ];\n                const canvases = [];\n                const maxTexSizes = {};\n                class WebGLKernel extends GLKernel {\n                    static get isSupported() {\n                        if (isSupported !== null) return isSupported;\n                        this.setupFeatureChecks();\n                        isSupported = this.isContextMatch(testContext);\n                        return isSupported;\n                    }\n                    static setupFeatureChecks() {\n                        if (typeof document !== \"undefined\") testCanvas = document.createElement(\"canvas\");\n                        else if (typeof OffscreenCanvas !== \"undefined\") testCanvas = new OffscreenCanvas(0, 0);\n                        if (!testCanvas) return;\n                        testContext = testCanvas.getContext(\"webgl\") || testCanvas.getContext(\"experimental-webgl\");\n                        if (!testContext || !testContext.getExtension) return;\n                        testExtensions = {\n                            OES_texture_float: testContext.getExtension(\"OES_texture_float\"),\n                            OES_texture_float_linear: testContext.getExtension(\"OES_texture_float_linear\"),\n                            OES_element_index_uint: testContext.getExtension(\"OES_element_index_uint\"),\n                            WEBGL_draw_buffers: testContext.getExtension(\"WEBGL_draw_buffers\")\n                        };\n                        features = this.getFeatures();\n                    }\n                    static isContextMatch(context) {\n                        if (typeof WebGLRenderingContext !== \"undefined\") return context instanceof WebGLRenderingContext;\n                        return false;\n                    }\n                    static getIsTextureFloat() {\n                        return Boolean(testExtensions.OES_texture_float);\n                    }\n                    static getIsDrawBuffers() {\n                        return Boolean(testExtensions.WEBGL_draw_buffers);\n                    }\n                    static getChannelCount() {\n                        return testExtensions.WEBGL_draw_buffers ? testContext.getParameter(testExtensions.WEBGL_draw_buffers.MAX_DRAW_BUFFERS_WEBGL) : 1;\n                    }\n                    static getMaxTextureSize() {\n                        return testContext.getParameter(testContext.MAX_TEXTURE_SIZE);\n                    }\n                    static lookupKernelValueType(type, dynamic, precision, value1) {\n                        return lookupKernelValueType(type, dynamic, precision, value1);\n                    }\n                    static get testCanvas() {\n                        return testCanvas;\n                    }\n                    static get testContext() {\n                        return testContext;\n                    }\n                    static get features() {\n                        return features;\n                    }\n                    static get fragmentShader() {\n                        return fragmentShader;\n                    }\n                    static get vertexShader() {\n                        return vertexShader;\n                    }\n                    constructor(source, settings){\n                        super(source, settings);\n                        this.program = null;\n                        this.pipeline = settings.pipeline;\n                        this.endianness = utils.systemEndianness();\n                        this.extensions = {};\n                        this.argumentTextureCount = 0;\n                        this.constantTextureCount = 0;\n                        this.fragShader = null;\n                        this.vertShader = null;\n                        this.drawBuffersMap = null;\n                        this.maxTexSize = null;\n                        this.onRequestSwitchKernel = null;\n                        this.texture = null;\n                        this.mappedTextures = null;\n                        this.mergeSettings(source.settings || settings);\n                        this.threadDim = null;\n                        this.framebuffer = null;\n                        this.buffer = null;\n                        this.textureCache = [];\n                        this.programUniformLocationCache = {};\n                        this.uniform1fCache = {};\n                        this.uniform1iCache = {};\n                        this.uniform2fCache = {};\n                        this.uniform2fvCache = {};\n                        this.uniform2ivCache = {};\n                        this.uniform3fvCache = {};\n                        this.uniform3ivCache = {};\n                        this.uniform4fvCache = {};\n                        this.uniform4ivCache = {};\n                    }\n                    initCanvas() {\n                        if (typeof document !== \"undefined\") {\n                            const canvas = document.createElement(\"canvas\");\n                            canvas.width = 2;\n                            canvas.height = 2;\n                            return canvas;\n                        } else if (typeof OffscreenCanvas !== \"undefined\") return new OffscreenCanvas(0, 0);\n                    }\n                    initContext() {\n                        const settings = {\n                            alpha: false,\n                            depth: false,\n                            antialias: false\n                        };\n                        return this.canvas.getContext(\"webgl\", settings) || this.canvas.getContext(\"experimental-webgl\", settings);\n                    }\n                    initPlugins(settings) {\n                        const pluginsToUse = [];\n                        const { source: source  } = this;\n                        if (typeof source === \"string\") for(let i = 0; i < plugins.length; i++){\n                            const plugin = plugins[i];\n                            if (source.match(plugin.functionMatch)) pluginsToUse.push(plugin);\n                        }\n                        else if (typeof source === \"object\") {\n                            if (settings.pluginNames) for(let i = 0; i < plugins.length; i++){\n                                const plugin = plugins[i];\n                                const usePlugin = settings.pluginNames.some((pluginName)=>pluginName === plugin.name);\n                                if (usePlugin) pluginsToUse.push(plugin);\n                            }\n                        }\n                        return pluginsToUse;\n                    }\n                    initExtensions() {\n                        this.extensions = {\n                            OES_texture_float: this.context.getExtension(\"OES_texture_float\"),\n                            OES_texture_float_linear: this.context.getExtension(\"OES_texture_float_linear\"),\n                            OES_element_index_uint: this.context.getExtension(\"OES_element_index_uint\"),\n                            WEBGL_draw_buffers: this.context.getExtension(\"WEBGL_draw_buffers\"),\n                            WEBGL_color_buffer_float: this.context.getExtension(\"WEBGL_color_buffer_float\")\n                        };\n                    }\n                    validateSettings(args) {\n                        if (!this.validate) {\n                            this.texSize = utils.getKernelTextureSize({\n                                optimizeFloatMemory: this.optimizeFloatMemory,\n                                precision: this.precision\n                            }, this.output);\n                            return;\n                        }\n                        const { features: features  } = this.constructor;\n                        if (this.optimizeFloatMemory === true && !features.isTextureFloat) throw new Error(\"Float textures are not supported\");\n                        else if (this.precision === \"single\" && !features.isFloatRead) throw new Error(\"Single precision not supported\");\n                        else if (!this.graphical && this.precision === null && features.isTextureFloat) this.precision = features.isFloatRead ? \"single\" : \"unsigned\";\n                        if (this.subKernels && this.subKernels.length > 0 && !this.extensions.WEBGL_draw_buffers) throw new Error(\"could not instantiate draw buffers extension\");\n                        if (this.fixIntegerDivisionAccuracy === null) this.fixIntegerDivisionAccuracy = !features.isIntegerDivisionAccurate;\n                        else if (this.fixIntegerDivisionAccuracy && features.isIntegerDivisionAccurate) this.fixIntegerDivisionAccuracy = false;\n                        this.checkOutput();\n                        if (!this.output || this.output.length === 0) {\n                            if (args.length !== 1) throw new Error(\"Auto output only supported for kernels with only one input\");\n                            const argType = utils.getVariableType(args[0], this.strictIntegers);\n                            switch(argType){\n                                case \"Array\":\n                                    this.output = utils.getDimensions(argType);\n                                    break;\n                                case \"NumberTexture\":\n                                case \"MemoryOptimizedNumberTexture\":\n                                case \"ArrayTexture(1)\":\n                                case \"ArrayTexture(2)\":\n                                case \"ArrayTexture(3)\":\n                                case \"ArrayTexture(4)\":\n                                    this.output = args[0].output;\n                                    break;\n                                default:\n                                    throw new Error(\"Auto output not supported for input type: \" + argType);\n                            }\n                        }\n                        if (this.graphical) {\n                            if (this.output.length !== 2) throw new Error(\"Output must have 2 dimensions on graphical mode\");\n                            if (this.precision === \"precision\") {\n                                this.precision = \"unsigned\";\n                                console.warn(\"Cannot use graphical mode and single precision at the same time\");\n                            }\n                            this.texSize = utils.clone(this.output);\n                            return;\n                        } else if (this.precision === null && features.isTextureFloat) this.precision = \"single\";\n                        this.texSize = utils.getKernelTextureSize({\n                            optimizeFloatMemory: this.optimizeFloatMemory,\n                            precision: this.precision\n                        }, this.output);\n                        this.checkTextureSize();\n                    }\n                    updateMaxTexSize() {\n                        const { texSize: texSize , canvas: canvas  } = this;\n                        if (this.maxTexSize === null) {\n                            let canvasIndex = canvases.indexOf(canvas);\n                            if (canvasIndex === -1) {\n                                canvasIndex = canvases.length;\n                                canvases.push(canvas);\n                                maxTexSizes[canvasIndex] = [\n                                    texSize[0],\n                                    texSize[1]\n                                ];\n                            }\n                            this.maxTexSize = maxTexSizes[canvasIndex];\n                        }\n                        if (this.maxTexSize[0] < texSize[0]) this.maxTexSize[0] = texSize[0];\n                        if (this.maxTexSize[1] < texSize[1]) this.maxTexSize[1] = texSize[1];\n                    }\n                    setupArguments(args) {\n                        this.kernelArguments = [];\n                        this.argumentTextureCount = 0;\n                        const needsArgumentTypes = this.argumentTypes === null;\n                        if (needsArgumentTypes) this.argumentTypes = [];\n                        this.argumentSizes = [];\n                        this.argumentBitRatios = [];\n                        if (args.length < this.argumentNames.length) throw new Error(\"not enough arguments for kernel\");\n                        else if (args.length > this.argumentNames.length) throw new Error(\"too many arguments for kernel\");\n                        const { context: gl  } = this;\n                        let textureIndexes = 0;\n                        const onRequestTexture = ()=>{\n                            return this.createTexture();\n                        };\n                        const onRequestIndex = ()=>{\n                            return this.constantTextureCount + textureIndexes++;\n                        };\n                        const onUpdateValueMismatch = (constructor)=>{\n                            this.switchKernels({\n                                type: \"argumentMismatch\",\n                                needed: constructor\n                            });\n                        };\n                        const onRequestContextHandle = ()=>{\n                            return gl.TEXTURE0 + this.constantTextureCount + this.argumentTextureCount++;\n                        };\n                        for(let index = 0; index < args.length; index++){\n                            const value1 = args[index];\n                            const name1 = this.argumentNames[index];\n                            let type;\n                            if (needsArgumentTypes) {\n                                type = utils.getVariableType(value1, this.strictIntegers);\n                                this.argumentTypes.push(type);\n                            } else type = this.argumentTypes[index];\n                            const KernelValue = this.constructor.lookupKernelValueType(type, this.dynamicArguments ? \"dynamic\" : \"static\", this.precision, args[index]);\n                            if (KernelValue === null) return this.requestFallback(args);\n                            const kernelArgument = new KernelValue(value1, {\n                                name: name1,\n                                type: type,\n                                tactic: this.tactic,\n                                origin: \"user\",\n                                context: gl,\n                                checkContext: this.checkContext,\n                                kernel: this,\n                                strictIntegers: this.strictIntegers,\n                                onRequestTexture: onRequestTexture,\n                                onRequestIndex: onRequestIndex,\n                                onUpdateValueMismatch: onUpdateValueMismatch,\n                                onRequestContextHandle: onRequestContextHandle\n                            });\n                            this.kernelArguments.push(kernelArgument);\n                            kernelArgument.setup();\n                            this.argumentSizes.push(kernelArgument.textureSize);\n                            this.argumentBitRatios[index] = kernelArgument.bitRatio;\n                        }\n                    }\n                    createTexture() {\n                        const texture = this.context.createTexture();\n                        this.textureCache.push(texture);\n                        return texture;\n                    }\n                    setupConstants(args) {\n                        const { context: gl  } = this;\n                        this.kernelConstants = [];\n                        this.forceUploadKernelConstants = [];\n                        let needsConstantTypes = this.constantTypes === null;\n                        if (needsConstantTypes) this.constantTypes = {};\n                        this.constantBitRatios = {};\n                        let textureIndexes = 0;\n                        for(const name1 in this.constants){\n                            const value1 = this.constants[name1];\n                            let type;\n                            if (needsConstantTypes) {\n                                type = utils.getVariableType(value1, this.strictIntegers);\n                                this.constantTypes[name1] = type;\n                            } else type = this.constantTypes[name1];\n                            const KernelValue = this.constructor.lookupKernelValueType(type, \"static\", this.precision, value1);\n                            if (KernelValue === null) return this.requestFallback(args);\n                            const kernelValue = new KernelValue(value1, {\n                                name: name1,\n                                type: type,\n                                tactic: this.tactic,\n                                origin: \"constants\",\n                                context: this.context,\n                                checkContext: this.checkContext,\n                                kernel: this,\n                                strictIntegers: this.strictIntegers,\n                                onRequestTexture: ()=>{\n                                    return this.createTexture();\n                                },\n                                onRequestIndex: ()=>{\n                                    return textureIndexes++;\n                                },\n                                onRequestContextHandle: ()=>{\n                                    return gl.TEXTURE0 + this.constantTextureCount++;\n                                }\n                            });\n                            this.constantBitRatios[name1] = kernelValue.bitRatio;\n                            this.kernelConstants.push(kernelValue);\n                            kernelValue.setup();\n                            if (kernelValue.forceUploadEachRun) this.forceUploadKernelConstants.push(kernelValue);\n                        }\n                    }\n                    build() {\n                        if (this.built) return;\n                        this.initExtensions();\n                        this.validateSettings(arguments);\n                        this.setupConstants(arguments);\n                        if (this.fallbackRequested) return;\n                        this.setupArguments(arguments);\n                        if (this.fallbackRequested) return;\n                        this.updateMaxTexSize();\n                        this.translateSource();\n                        const failureResult = this.pickRenderStrategy(arguments);\n                        if (failureResult) return failureResult;\n                        const { texSize: texSize , context: gl , canvas: canvas  } = this;\n                        gl.enable(gl.SCISSOR_TEST);\n                        if (this.pipeline && this.precision === \"single\") {\n                            gl.viewport(0, 0, this.maxTexSize[0], this.maxTexSize[1]);\n                            canvas.width = this.maxTexSize[0];\n                            canvas.height = this.maxTexSize[1];\n                        } else {\n                            gl.viewport(0, 0, this.maxTexSize[0], this.maxTexSize[1]);\n                            canvas.width = this.maxTexSize[0];\n                            canvas.height = this.maxTexSize[1];\n                        }\n                        const threadDim = this.threadDim = Array.from(this.output);\n                        while(threadDim.length < 3)threadDim.push(1);\n                        const compiledVertexShader = this.getVertexShader(arguments);\n                        const vertShader = gl.createShader(gl.VERTEX_SHADER);\n                        gl.shaderSource(vertShader, compiledVertexShader);\n                        gl.compileShader(vertShader);\n                        this.vertShader = vertShader;\n                        const compiledFragmentShader = this.getFragmentShader(arguments);\n                        const fragShader = gl.createShader(gl.FRAGMENT_SHADER);\n                        gl.shaderSource(fragShader, compiledFragmentShader);\n                        gl.compileShader(fragShader);\n                        this.fragShader = fragShader;\n                        if (this.debug) {\n                            console.log(\"GLSL Shader Output:\");\n                            console.log(compiledFragmentShader);\n                        }\n                        if (!gl.getShaderParameter(vertShader, gl.COMPILE_STATUS)) throw new Error(\"Error compiling vertex shader: \" + gl.getShaderInfoLog(vertShader));\n                        if (!gl.getShaderParameter(fragShader, gl.COMPILE_STATUS)) throw new Error(\"Error compiling fragment shader: \" + gl.getShaderInfoLog(fragShader));\n                        const program = this.program = gl.createProgram();\n                        gl.attachShader(program, vertShader);\n                        gl.attachShader(program, fragShader);\n                        gl.linkProgram(program);\n                        this.framebuffer = gl.createFramebuffer();\n                        this.framebuffer.width = texSize[0];\n                        this.framebuffer.height = texSize[1];\n                        this.rawValueFramebuffers = {};\n                        const vertices = new Float32Array([\n                            -1,\n                            -1,\n                            1,\n                            -1,\n                            -1,\n                            1,\n                            1,\n                            1\n                        ]);\n                        const texCoords = new Float32Array([\n                            0,\n                            0,\n                            1,\n                            0,\n                            0,\n                            1,\n                            1,\n                            1\n                        ]);\n                        const texCoordOffset = vertices.byteLength;\n                        let buffer = this.buffer;\n                        if (!buffer) {\n                            buffer = this.buffer = gl.createBuffer();\n                            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n                            gl.bufferData(gl.ARRAY_BUFFER, vertices.byteLength + texCoords.byteLength, gl.STATIC_DRAW);\n                        } else gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n                        gl.bufferSubData(gl.ARRAY_BUFFER, 0, vertices);\n                        gl.bufferSubData(gl.ARRAY_BUFFER, texCoordOffset, texCoords);\n                        const aPosLoc = gl.getAttribLocation(this.program, \"aPos\");\n                        gl.enableVertexAttribArray(aPosLoc);\n                        gl.vertexAttribPointer(aPosLoc, 2, gl.FLOAT, false, 0, 0);\n                        const aTexCoordLoc = gl.getAttribLocation(this.program, \"aTexCoord\");\n                        gl.enableVertexAttribArray(aTexCoordLoc);\n                        gl.vertexAttribPointer(aTexCoordLoc, 2, gl.FLOAT, false, 0, texCoordOffset);\n                        gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n                        let i = 0;\n                        gl.useProgram(this.program);\n                        for(let p in this.constants)this.kernelConstants[i++].updateValue(this.constants[p]);\n                        this._setupOutputTexture();\n                        if (this.subKernels !== null && this.subKernels.length > 0) {\n                            this._mappedTextureSwitched = {};\n                            this._setupSubOutputTextures();\n                        }\n                        this.buildSignature(arguments);\n                        this.built = true;\n                    }\n                    translateSource() {\n                        const functionBuilder = FunctionBuilder.fromKernel(this, WebGLFunctionNode, {\n                            fixIntegerDivisionAccuracy: this.fixIntegerDivisionAccuracy\n                        });\n                        this.translatedSource = functionBuilder.getPrototypeString(\"kernel\");\n                        this.setupReturnTypes(functionBuilder);\n                    }\n                    setupReturnTypes(functionBuilder) {\n                        if (!this.graphical && !this.returnType) this.returnType = functionBuilder.getKernelResultType();\n                        if (this.subKernels && this.subKernels.length > 0) for(let i = 0; i < this.subKernels.length; i++){\n                            const subKernel = this.subKernels[i];\n                            if (!subKernel.returnType) subKernel.returnType = functionBuilder.getSubKernelResultType(i);\n                        }\n                    }\n                    run() {\n                        const { kernelArguments: kernelArguments , texSize: texSize , forceUploadKernelConstants: forceUploadKernelConstants , context: gl  } = this;\n                        gl.useProgram(this.program);\n                        gl.scissor(0, 0, texSize[0], texSize[1]);\n                        if (this.dynamicOutput) {\n                            this.setUniform3iv(\"uOutputDim\", new Int32Array(this.threadDim));\n                            this.setUniform2iv(\"uTexSize\", texSize);\n                        }\n                        this.setUniform2f(\"ratio\", texSize[0] / this.maxTexSize[0], texSize[1] / this.maxTexSize[1]);\n                        for(let i = 0; i < forceUploadKernelConstants.length; i++){\n                            const constant = forceUploadKernelConstants[i];\n                            constant.updateValue(this.constants[constant.name]);\n                            if (this.switchingKernels) return;\n                        }\n                        for(let i = 0; i < kernelArguments.length; i++){\n                            kernelArguments[i].updateValue(arguments[i]);\n                            if (this.switchingKernels) return;\n                        }\n                        if (this.plugins) for(let i = 0; i < this.plugins.length; i++){\n                            const plugin = this.plugins[i];\n                            if (plugin.onBeforeRun) plugin.onBeforeRun(this);\n                        }\n                        if (this.graphical) {\n                            if (this.pipeline) {\n                                gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n                                gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n                                if (this.immutable) this._replaceOutputTexture();\n                                gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n                                return this.immutable ? this.texture.clone() : this.texture;\n                            }\n                            gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n                            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n                            gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n                            return;\n                        }\n                        gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n                        if (this.immutable) this._replaceOutputTexture();\n                        if (this.subKernels !== null) {\n                            if (this.immutable) this._replaceSubOutputTextures();\n                            this.drawBuffers();\n                        }\n                        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n                    }\n                    drawBuffers() {\n                        this.extensions.WEBGL_draw_buffers.drawBuffersWEBGL(this.drawBuffersMap);\n                    }\n                    getInternalFormat() {\n                        return this.context.RGBA;\n                    }\n                    getTextureFormat() {\n                        const { context: gl  } = this;\n                        switch(this.getInternalFormat()){\n                            case gl.RGBA:\n                                return gl.RGBA;\n                            default:\n                                throw new Error(\"Unknown internal format\");\n                        }\n                    }\n                    _replaceOutputTexture() {\n                        if (this.texture.beforeMutate() || this._textureSwitched) {\n                            const gl = this.context;\n                            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture.texture, 0);\n                            this._textureSwitched = false;\n                        }\n                    }\n                    _setupOutputTexture() {\n                        const gl = this.context;\n                        const texSize = this.texSize;\n                        if (this.texture) {\n                            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture.texture, 0);\n                            return;\n                        }\n                        const texture = this.createTexture();\n                        gl.activeTexture(gl.TEXTURE0 + this.constantTextureCount + this.argumentTextureCount);\n                        gl.bindTexture(gl.TEXTURE_2D, texture);\n                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n                        const format = this.getInternalFormat();\n                        if (this.precision === \"single\") gl.texImage2D(gl.TEXTURE_2D, 0, format, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);\n                        else gl.texImage2D(gl.TEXTURE_2D, 0, format, texSize[0], texSize[1], 0, format, gl.UNSIGNED_BYTE, null);\n                        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n                        this.texture = new this.TextureConstructor({\n                            texture: texture,\n                            size: texSize,\n                            dimensions: this.threadDim,\n                            output: this.output,\n                            context: this.context,\n                            internalFormat: this.getInternalFormat(),\n                            textureFormat: this.getTextureFormat(),\n                            kernel: this\n                        });\n                    }\n                    _replaceSubOutputTextures() {\n                        const gl = this.context;\n                        for(let i = 0; i < this.mappedTextures.length; i++){\n                            const mappedTexture = this.mappedTextures[i];\n                            if (mappedTexture.beforeMutate() || this._mappedTextureSwitched[i]) {\n                                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i + 1, gl.TEXTURE_2D, mappedTexture.texture, 0);\n                                this._mappedTextureSwitched[i] = false;\n                            }\n                        }\n                    }\n                    _setupSubOutputTextures() {\n                        const gl = this.context;\n                        if (this.mappedTextures) {\n                            for(let i = 0; i < this.subKernels.length; i++)gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i + 1, gl.TEXTURE_2D, this.mappedTextures[i].texture, 0);\n                            return;\n                        }\n                        const texSize = this.texSize;\n                        this.drawBuffersMap = [\n                            gl.COLOR_ATTACHMENT0\n                        ];\n                        this.mappedTextures = [];\n                        for(let i = 0; i < this.subKernels.length; i++){\n                            const texture = this.createTexture();\n                            this.drawBuffersMap.push(gl.COLOR_ATTACHMENT0 + i + 1);\n                            gl.activeTexture(gl.TEXTURE0 + this.constantTextureCount + this.argumentTextureCount + i);\n                            gl.bindTexture(gl.TEXTURE_2D, texture);\n                            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n                            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n                            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n                            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n                            if (this.precision === \"single\") gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);\n                            else gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n                            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i + 1, gl.TEXTURE_2D, texture, 0);\n                            this.mappedTextures.push(new this.TextureConstructor({\n                                texture: texture,\n                                size: texSize,\n                                dimensions: this.threadDim,\n                                output: this.output,\n                                context: this.context,\n                                internalFormat: this.getInternalFormat(),\n                                textureFormat: this.getTextureFormat(),\n                                kernel: this\n                            }));\n                        }\n                    }\n                    setUniform1f(name1, value1) {\n                        if (this.uniform1fCache.hasOwnProperty(name1)) {\n                            const cache = this.uniform1fCache[name1];\n                            if (value1 === cache) return;\n                        }\n                        this.uniform1fCache[name1] = value1;\n                        const loc = this.getUniformLocation(name1);\n                        this.context.uniform1f(loc, value1);\n                    }\n                    setUniform1i(name1, value1) {\n                        if (this.uniform1iCache.hasOwnProperty(name1)) {\n                            const cache = this.uniform1iCache[name1];\n                            if (value1 === cache) return;\n                        }\n                        this.uniform1iCache[name1] = value1;\n                        const loc = this.getUniformLocation(name1);\n                        this.context.uniform1i(loc, value1);\n                    }\n                    setUniform2f(name1, value1, value2) {\n                        if (this.uniform2fCache.hasOwnProperty(name1)) {\n                            const cache = this.uniform2fCache[name1];\n                            if (value1 === cache[0] && value2 === cache[1]) return;\n                        }\n                        this.uniform2fCache[name1] = [\n                            value1,\n                            value2\n                        ];\n                        const loc = this.getUniformLocation(name1);\n                        this.context.uniform2f(loc, value1, value2);\n                    }\n                    setUniform2fv(name1, value1) {\n                        if (this.uniform2fvCache.hasOwnProperty(name1)) {\n                            const cache = this.uniform2fvCache[name1];\n                            if (value1[0] === cache[0] && value1[1] === cache[1]) return;\n                        }\n                        this.uniform2fvCache[name1] = value1;\n                        const loc = this.getUniformLocation(name1);\n                        this.context.uniform2fv(loc, value1);\n                    }\n                    setUniform2iv(name1, value1) {\n                        if (this.uniform2ivCache.hasOwnProperty(name1)) {\n                            const cache = this.uniform2ivCache[name1];\n                            if (value1[0] === cache[0] && value1[1] === cache[1]) return;\n                        }\n                        this.uniform2ivCache[name1] = value1;\n                        const loc = this.getUniformLocation(name1);\n                        this.context.uniform2iv(loc, value1);\n                    }\n                    setUniform3fv(name1, value1) {\n                        if (this.uniform3fvCache.hasOwnProperty(name1)) {\n                            const cache = this.uniform3fvCache[name1];\n                            if (value1[0] === cache[0] && value1[1] === cache[1] && value1[2] === cache[2]) return;\n                        }\n                        this.uniform3fvCache[name1] = value1;\n                        const loc = this.getUniformLocation(name1);\n                        this.context.uniform3fv(loc, value1);\n                    }\n                    setUniform3iv(name1, value1) {\n                        if (this.uniform3ivCache.hasOwnProperty(name1)) {\n                            const cache = this.uniform3ivCache[name1];\n                            if (value1[0] === cache[0] && value1[1] === cache[1] && value1[2] === cache[2]) return;\n                        }\n                        this.uniform3ivCache[name1] = value1;\n                        const loc = this.getUniformLocation(name1);\n                        this.context.uniform3iv(loc, value1);\n                    }\n                    setUniform4fv(name1, value1) {\n                        if (this.uniform4fvCache.hasOwnProperty(name1)) {\n                            const cache = this.uniform4fvCache[name1];\n                            if (value1[0] === cache[0] && value1[1] === cache[1] && value1[2] === cache[2] && value1[3] === cache[3]) return;\n                        }\n                        this.uniform4fvCache[name1] = value1;\n                        const loc = this.getUniformLocation(name1);\n                        this.context.uniform4fv(loc, value1);\n                    }\n                    setUniform4iv(name1, value1) {\n                        if (this.uniform4ivCache.hasOwnProperty(name1)) {\n                            const cache = this.uniform4ivCache[name1];\n                            if (value1[0] === cache[0] && value1[1] === cache[1] && value1[2] === cache[2] && value1[3] === cache[3]) return;\n                        }\n                        this.uniform4ivCache[name1] = value1;\n                        const loc = this.getUniformLocation(name1);\n                        this.context.uniform4iv(loc, value1);\n                    }\n                    getUniformLocation(name1) {\n                        if (this.programUniformLocationCache.hasOwnProperty(name1)) return this.programUniformLocationCache[name1];\n                        return this.programUniformLocationCache[name1] = this.context.getUniformLocation(this.program, name1);\n                    }\n                    _getFragShaderArtifactMap(args) {\n                        return {\n                            HEADER: this._getHeaderString(),\n                            LOOP_MAX: this._getLoopMaxString(),\n                            PLUGINS: this._getPluginsString(),\n                            CONSTANTS: this._getConstantsString(),\n                            DECODE32_ENDIANNESS: this._getDecode32EndiannessString(),\n                            ENCODE32_ENDIANNESS: this._getEncode32EndiannessString(),\n                            DIVIDE_WITH_INTEGER_CHECK: this._getDivideWithIntegerCheckString(),\n                            INJECTED_NATIVE: this._getInjectedNative(),\n                            MAIN_CONSTANTS: this._getMainConstantsString(),\n                            MAIN_ARGUMENTS: this._getMainArgumentsString(args),\n                            KERNEL: this.getKernelString(),\n                            MAIN_RESULT: this.getMainResultString(),\n                            FLOAT_TACTIC_DECLARATION: this.getFloatTacticDeclaration(),\n                            INT_TACTIC_DECLARATION: this.getIntTacticDeclaration(),\n                            SAMPLER_2D_TACTIC_DECLARATION: this.getSampler2DTacticDeclaration(),\n                            SAMPLER_2D_ARRAY_TACTIC_DECLARATION: this.getSampler2DArrayTacticDeclaration()\n                        };\n                    }\n                    _getVertShaderArtifactMap(args) {\n                        return {\n                            FLOAT_TACTIC_DECLARATION: this.getFloatTacticDeclaration(),\n                            INT_TACTIC_DECLARATION: this.getIntTacticDeclaration(),\n                            SAMPLER_2D_TACTIC_DECLARATION: this.getSampler2DTacticDeclaration(),\n                            SAMPLER_2D_ARRAY_TACTIC_DECLARATION: this.getSampler2DArrayTacticDeclaration()\n                        };\n                    }\n                    _getHeaderString() {\n                        return this.subKernels !== null ? \"#extension GL_EXT_draw_buffers : require\\n\" : \"\";\n                    }\n                    _getLoopMaxString() {\n                        return this.loopMaxIterations ? ` ${parseInt(this.loopMaxIterations)};\\n` : \" 1000;\\n\";\n                    }\n                    _getPluginsString() {\n                        if (!this.plugins) return \"\\n\";\n                        return this.plugins.map((plugin)=>plugin.source && this.source.match(plugin.functionMatch) ? plugin.source : \"\").join(\"\\n\");\n                    }\n                    _getConstantsString() {\n                        const result = [];\n                        const { threadDim: threadDim , texSize: texSize  } = this;\n                        if (this.dynamicOutput) result.push(\"uniform ivec3 uOutputDim\", \"uniform ivec2 uTexSize\");\n                        else result.push(`ivec3 uOutputDim = ivec3(${threadDim[0]}, ${threadDim[1]}, ${threadDim[2]})`, `ivec2 uTexSize = ivec2(${texSize[0]}, ${texSize[1]})`);\n                        return utils.linesToString(result);\n                    }\n                    _getTextureCoordinate() {\n                        const subKernels = this.subKernels;\n                        if (subKernels === null || subKernels.length < 1) return \"varying vec2 vTexCoord;\\n\";\n                        else return \"out vec2 vTexCoord;\\n\";\n                    }\n                    _getDecode32EndiannessString() {\n                        return this.endianness === \"LE\" ? \"\" : \"  texel.rgba = texel.abgr;\\n\";\n                    }\n                    _getEncode32EndiannessString() {\n                        return this.endianness === \"LE\" ? \"\" : \"  texel.rgba = texel.abgr;\\n\";\n                    }\n                    _getDivideWithIntegerCheckString() {\n                        return this.fixIntegerDivisionAccuracy ? `float divWithIntCheck(float x, float y) {\n  if (floor(x) == x && floor(y) == y && integerMod(x, y) == 0.0) {\n    return float(int(x) / int(y));\n  }\n  return x / y;\n}\n\nfloat integerCorrectionModulo(float number, float divisor) {\n  if (number < 0.0) {\n    number = abs(number);\n    if (divisor < 0.0) {\n      divisor = abs(divisor);\n    }\n    return -(number - (divisor * floor(divWithIntCheck(number, divisor))));\n  }\n  if (divisor < 0.0) {\n    divisor = abs(divisor);\n  }\n  return number - (divisor * floor(divWithIntCheck(number, divisor)));\n}` : \"\";\n                    }\n                    _getMainArgumentsString(args) {\n                        const results = [];\n                        const { argumentNames: argumentNames  } = this;\n                        for(let i = 0; i < argumentNames.length; i++)results.push(this.kernelArguments[i].getSource(args[i]));\n                        return results.join(\"\");\n                    }\n                    _getInjectedNative() {\n                        return this.injectedNative || \"\";\n                    }\n                    _getMainConstantsString() {\n                        const result = [];\n                        const { constants: constants  } = this;\n                        if (constants) {\n                            let i = 0;\n                            for(const name1 in constants){\n                                if (!this.constants.hasOwnProperty(name1)) continue;\n                                result.push(this.kernelConstants[i++].getSource(this.constants[name1]));\n                            }\n                        }\n                        return result.join(\"\");\n                    }\n                    getRawValueFramebuffer(width, height) {\n                        if (!this.rawValueFramebuffers[width]) this.rawValueFramebuffers[width] = {};\n                        if (!this.rawValueFramebuffers[width][height]) {\n                            const framebuffer = this.context.createFramebuffer();\n                            framebuffer.width = width;\n                            framebuffer.height = height;\n                            this.rawValueFramebuffers[width][height] = framebuffer;\n                        }\n                        return this.rawValueFramebuffers[width][height];\n                    }\n                    getKernelResultDeclaration() {\n                        switch(this.returnType){\n                            case \"Array(2)\":\n                                return \"vec2 kernelResult\";\n                            case \"Array(3)\":\n                                return \"vec3 kernelResult\";\n                            case \"Array(4)\":\n                                return \"vec4 kernelResult\";\n                            case \"LiteralInteger\":\n                            case \"Float\":\n                            case \"Number\":\n                            case \"Integer\":\n                                return \"float kernelResult\";\n                            default:\n                                if (this.graphical) return \"float kernelResult\";\n                                else throw new Error(`unrecognized output type \"${this.returnType}\"`);\n                        }\n                    }\n                    getKernelString() {\n                        const result = [\n                            this.getKernelResultDeclaration()\n                        ];\n                        const { subKernels: subKernels  } = this;\n                        if (subKernels !== null) switch(this.returnType){\n                            case \"Number\":\n                            case \"Float\":\n                            case \"Integer\":\n                                for(let i = 0; i < subKernels.length; i++){\n                                    const subKernel = subKernels[i];\n                                    result.push(subKernel.returnType === \"Integer\" ? `int subKernelResult_${subKernel.name} = 0` : `float subKernelResult_${subKernel.name} = 0.0`);\n                                }\n                                break;\n                            case \"Array(2)\":\n                                for(let i = 0; i < subKernels.length; i++)result.push(`vec2 subKernelResult_${subKernels[i].name}`);\n                                break;\n                            case \"Array(3)\":\n                                for(let i = 0; i < subKernels.length; i++)result.push(`vec3 subKernelResult_${subKernels[i].name}`);\n                                break;\n                            case \"Array(4)\":\n                                for(let i = 0; i < subKernels.length; i++)result.push(`vec4 subKernelResult_${subKernels[i].name}`);\n                                break;\n                        }\n                        return utils.linesToString(result) + this.translatedSource;\n                    }\n                    getMainResultGraphical() {\n                        return utils.linesToString([\n                            \"  threadId = indexTo3D(index, uOutputDim)\",\n                            \"  kernel()\",\n                            \"  gl_FragColor = actualColor\"\n                        ]);\n                    }\n                    getMainResultPackedPixels() {\n                        switch(this.returnType){\n                            case \"LiteralInteger\":\n                            case \"Number\":\n                            case \"Integer\":\n                            case \"Float\":\n                                return this.getMainResultKernelPackedPixels() + this.getMainResultSubKernelPackedPixels();\n                            default:\n                                throw new Error(`packed output only usable with Numbers, \"${this.returnType}\" specified`);\n                        }\n                    }\n                    getMainResultKernelPackedPixels() {\n                        return utils.linesToString([\n                            \"  threadId = indexTo3D(index, uOutputDim)\",\n                            \"  kernel()\",\n                            `  gl_FragData[0] = ${this.useLegacyEncoder ? \"legacyEncode32\" : \"encode32\"}(kernelResult)`\n                        ]);\n                    }\n                    getMainResultSubKernelPackedPixels() {\n                        const result = [];\n                        if (!this.subKernels) return \"\";\n                        for(let i = 0; i < this.subKernels.length; i++){\n                            const subKernel = this.subKernels[i];\n                            if (subKernel.returnType === \"Integer\") result.push(`  gl_FragData[${i + 1}] = ${this.useLegacyEncoder ? \"legacyEncode32\" : \"encode32\"}(float(subKernelResult_${this.subKernels[i].name}))`);\n                            else result.push(`  gl_FragData[${i + 1}] = ${this.useLegacyEncoder ? \"legacyEncode32\" : \"encode32\"}(subKernelResult_${this.subKernels[i].name})`);\n                        }\n                        return utils.linesToString(result);\n                    }\n                    getMainResultMemoryOptimizedFloats() {\n                        const result = [\n                            \"  index *= 4\"\n                        ];\n                        switch(this.returnType){\n                            case \"Number\":\n                            case \"Integer\":\n                            case \"Float\":\n                                const channels = [\n                                    \"r\",\n                                    \"g\",\n                                    \"b\",\n                                    \"a\"\n                                ];\n                                for(let i = 0; i < channels.length; i++){\n                                    const channel = channels[i];\n                                    this.getMainResultKernelMemoryOptimizedFloats(result, channel);\n                                    this.getMainResultSubKernelMemoryOptimizedFloats(result, channel);\n                                    if (i + 1 < channels.length) result.push(\"  index += 1\");\n                                }\n                                break;\n                            default:\n                                throw new Error(`optimized output only usable with Numbers, ${this.returnType} specified`);\n                        }\n                        return utils.linesToString(result);\n                    }\n                    getMainResultKernelMemoryOptimizedFloats(result, channel) {\n                        result.push(\"  threadId = indexTo3D(index, uOutputDim)\", \"  kernel()\", `  gl_FragData[0].${channel} = kernelResult`);\n                    }\n                    getMainResultSubKernelMemoryOptimizedFloats(result, channel) {\n                        if (!this.subKernels) return result;\n                        for(let i = 0; i < this.subKernels.length; i++){\n                            const subKernel = this.subKernels[i];\n                            if (subKernel.returnType === \"Integer\") result.push(`  gl_FragData[${i + 1}].${channel} = float(subKernelResult_${this.subKernels[i].name})`);\n                            else result.push(`  gl_FragData[${i + 1}].${channel} = subKernelResult_${this.subKernels[i].name}`);\n                        }\n                    }\n                    getMainResultKernelNumberTexture() {\n                        return [\n                            \"  threadId = indexTo3D(index, uOutputDim)\",\n                            \"  kernel()\",\n                            \"  gl_FragData[0][0] = kernelResult\"\n                        ];\n                    }\n                    getMainResultSubKernelNumberTexture() {\n                        const result = [];\n                        if (!this.subKernels) return result;\n                        for(let i = 0; i < this.subKernels.length; ++i){\n                            const subKernel = this.subKernels[i];\n                            if (subKernel.returnType === \"Integer\") result.push(`  gl_FragData[${i + 1}][0] = float(subKernelResult_${subKernel.name})`);\n                            else result.push(`  gl_FragData[${i + 1}][0] = subKernelResult_${subKernel.name}`);\n                        }\n                        return result;\n                    }\n                    getMainResultKernelArray2Texture() {\n                        return [\n                            \"  threadId = indexTo3D(index, uOutputDim)\",\n                            \"  kernel()\",\n                            \"  gl_FragData[0][0] = kernelResult[0]\",\n                            \"  gl_FragData[0][1] = kernelResult[1]\"\n                        ];\n                    }\n                    getMainResultSubKernelArray2Texture() {\n                        const result = [];\n                        if (!this.subKernels) return result;\n                        for(let i = 0; i < this.subKernels.length; ++i)result.push(`  gl_FragData[${i + 1}][0] = subKernelResult_${this.subKernels[i].name}[0]`, `  gl_FragData[${i + 1}][1] = subKernelResult_${this.subKernels[i].name}[1]`);\n                        return result;\n                    }\n                    getMainResultKernelArray3Texture() {\n                        return [\n                            \"  threadId = indexTo3D(index, uOutputDim)\",\n                            \"  kernel()\",\n                            \"  gl_FragData[0][0] = kernelResult[0]\",\n                            \"  gl_FragData[0][1] = kernelResult[1]\",\n                            \"  gl_FragData[0][2] = kernelResult[2]\"\n                        ];\n                    }\n                    getMainResultSubKernelArray3Texture() {\n                        const result = [];\n                        if (!this.subKernels) return result;\n                        for(let i = 0; i < this.subKernels.length; ++i)result.push(`  gl_FragData[${i + 1}][0] = subKernelResult_${this.subKernels[i].name}[0]`, `  gl_FragData[${i + 1}][1] = subKernelResult_${this.subKernels[i].name}[1]`, `  gl_FragData[${i + 1}][2] = subKernelResult_${this.subKernels[i].name}[2]`);\n                        return result;\n                    }\n                    getMainResultKernelArray4Texture() {\n                        return [\n                            \"  threadId = indexTo3D(index, uOutputDim)\",\n                            \"  kernel()\",\n                            \"  gl_FragData[0] = kernelResult\"\n                        ];\n                    }\n                    getMainResultSubKernelArray4Texture() {\n                        const result = [];\n                        if (!this.subKernels) return result;\n                        switch(this.returnType){\n                            case \"Number\":\n                            case \"Float\":\n                            case \"Integer\":\n                                for(let i = 0; i < this.subKernels.length; ++i){\n                                    const subKernel = this.subKernels[i];\n                                    if (subKernel.returnType === \"Integer\") result.push(`  gl_FragData[${i + 1}] = float(subKernelResult_${this.subKernels[i].name})`);\n                                    else result.push(`  gl_FragData[${i + 1}] = subKernelResult_${this.subKernels[i].name}`);\n                                }\n                                break;\n                            case \"Array(2)\":\n                                for(let i = 0; i < this.subKernels.length; ++i)result.push(`  gl_FragData[${i + 1}][0] = subKernelResult_${this.subKernels[i].name}[0]`, `  gl_FragData[${i + 1}][1] = subKernelResult_${this.subKernels[i].name}[1]`);\n                                break;\n                            case \"Array(3)\":\n                                for(let i = 0; i < this.subKernels.length; ++i)result.push(`  gl_FragData[${i + 1}][0] = subKernelResult_${this.subKernels[i].name}[0]`, `  gl_FragData[${i + 1}][1] = subKernelResult_${this.subKernels[i].name}[1]`, `  gl_FragData[${i + 1}][2] = subKernelResult_${this.subKernels[i].name}[2]`);\n                                break;\n                            case \"Array(4)\":\n                                for(let i = 0; i < this.subKernels.length; ++i)result.push(`  gl_FragData[${i + 1}][0] = subKernelResult_${this.subKernels[i].name}[0]`, `  gl_FragData[${i + 1}][1] = subKernelResult_${this.subKernels[i].name}[1]`, `  gl_FragData[${i + 1}][2] = subKernelResult_${this.subKernels[i].name}[2]`, `  gl_FragData[${i + 1}][3] = subKernelResult_${this.subKernels[i].name}[3]`);\n                                break;\n                        }\n                        return result;\n                    }\n                    replaceArtifacts(src, map) {\n                        return src.replace(/[ ]*__([A-Z]+[0-9]*([_]?[A-Z]*[0-9]?)*)__;\\n/g, (match, artifact)=>{\n                            if (map.hasOwnProperty(artifact)) return map[artifact];\n                            throw `unhandled artifact ${artifact}`;\n                        });\n                    }\n                    getFragmentShader(args) {\n                        if (this.compiledFragmentShader !== null) return this.compiledFragmentShader;\n                        return this.compiledFragmentShader = this.replaceArtifacts(this.constructor.fragmentShader, this._getFragShaderArtifactMap(args));\n                    }\n                    getVertexShader(args) {\n                        if (this.compiledVertexShader !== null) return this.compiledVertexShader;\n                        return this.compiledVertexShader = this.replaceArtifacts(this.constructor.vertexShader, this._getVertShaderArtifactMap(args));\n                    }\n                    toString() {\n                        const setupContextString = utils.linesToString([\n                            `const gl = context`\n                        ]);\n                        return glKernelString(this.constructor, arguments, this, setupContextString);\n                    }\n                    destroy(removeCanvasReferences) {\n                        if (!this.context) return;\n                        if (this.buffer) this.context.deleteBuffer(this.buffer);\n                        if (this.framebuffer) this.context.deleteFramebuffer(this.framebuffer);\n                        for(const width in this.rawValueFramebuffers){\n                            for(const height in this.rawValueFramebuffers[width]){\n                                this.context.deleteFramebuffer(this.rawValueFramebuffers[width][height]);\n                                delete this.rawValueFramebuffers[width][height];\n                            }\n                            delete this.rawValueFramebuffers[width];\n                        }\n                        if (this.vertShader) this.context.deleteShader(this.vertShader);\n                        if (this.fragShader) this.context.deleteShader(this.fragShader);\n                        if (this.program) this.context.deleteProgram(this.program);\n                        if (this.texture) {\n                            this.texture.delete();\n                            const textureCacheIndex = this.textureCache.indexOf(this.texture.texture);\n                            if (textureCacheIndex > -1) this.textureCache.splice(textureCacheIndex, 1);\n                            this.texture = null;\n                        }\n                        if (this.mappedTextures && this.mappedTextures.length) {\n                            for(let i = 0; i < this.mappedTextures.length; i++){\n                                const mappedTexture = this.mappedTextures[i];\n                                mappedTexture.delete();\n                                const textureCacheIndex = this.textureCache.indexOf(mappedTexture.texture);\n                                if (textureCacheIndex > -1) this.textureCache.splice(textureCacheIndex, 1);\n                            }\n                            this.mappedTextures = null;\n                        }\n                        if (this.kernelArguments) for(let i = 0; i < this.kernelArguments.length; i++)this.kernelArguments[i].destroy();\n                        if (this.kernelConstants) for(let i = 0; i < this.kernelConstants.length; i++)this.kernelConstants[i].destroy();\n                        while(this.textureCache.length > 0){\n                            const texture = this.textureCache.pop();\n                            this.context.deleteTexture(texture);\n                        }\n                        if (removeCanvasReferences) {\n                            const idx = canvases.indexOf(this.canvas);\n                            if (idx >= 0) {\n                                canvases[idx] = null;\n                                maxTexSizes[idx] = null;\n                            }\n                        }\n                        this.destroyExtensions();\n                        delete this.context;\n                        delete this.canvas;\n                        if (!this.gpu) return;\n                        const i = this.gpu.kernels.indexOf(this);\n                        if (i === -1) return;\n                        this.gpu.kernels.splice(i, 1);\n                    }\n                    destroyExtensions() {\n                        this.extensions.OES_texture_float = null;\n                        this.extensions.OES_texture_float_linear = null;\n                        this.extensions.OES_element_index_uint = null;\n                        this.extensions.WEBGL_draw_buffers = null;\n                    }\n                    static destroyContext(context) {\n                        const extension = context.getExtension(\"WEBGL_lose_context\");\n                        if (extension) extension.loseContext();\n                    }\n                    toJSON() {\n                        const json = super.toJSON();\n                        json.functionNodes = FunctionBuilder.fromKernel(this, WebGLFunctionNode).toJSON();\n                        json.settings.threadDim = this.threadDim;\n                        return json;\n                    }\n                }\n                module1.exports = {\n                    WebGLKernel: WebGLKernel\n                };\n            },\n            {\n                \"../../plugins/math-random-uniformly-distributed\": 112,\n                \"../../utils\": 114,\n                \"../function-builder\": 9,\n                \"../gl/kernel\": 13,\n                \"../gl/kernel-string\": 12,\n                \"./fragment-shader\": 37,\n                \"./function-node\": 38,\n                \"./kernel-value-maps\": 39,\n                \"./vertex-shader\": 71\n            }\n        ],\n        71: [\n            function(require1, module1, exports) {\n                const vertexShader = `__FLOAT_TACTIC_DECLARATION__;\n__INT_TACTIC_DECLARATION__;\n__SAMPLER_2D_TACTIC_DECLARATION__;\n\nattribute vec2 aPos;\nattribute vec2 aTexCoord;\n\nvarying vec2 vTexCoord;\nuniform vec2 ratio;\n\nvoid main(void) {\n  gl_Position = vec4((aPos + vec2(1)) * ratio + vec2(-1), 0, 1);\n  vTexCoord = aTexCoord;\n}`;\n                module1.exports = {\n                    vertexShader: vertexShader\n                };\n            },\n            {}\n        ],\n        72: [\n            function(require1, module1, exports) {\n                const fragmentShader = `#version 300 es\n__HEADER__;\n__FLOAT_TACTIC_DECLARATION__;\n__INT_TACTIC_DECLARATION__;\n__SAMPLER_2D_TACTIC_DECLARATION__;\n__SAMPLER_2D_ARRAY_TACTIC_DECLARATION__;\n\nconst int LOOP_MAX = __LOOP_MAX__;\n\n__PLUGINS__;\n__CONSTANTS__;\n\nin vec2 vTexCoord;\n\nfloat atan2(float v1, float v2) {\n  if (v1 == 0.0 || v2 == 0.0) return 0.0;\n  return atan(v1 / v2);\n}\n\nfloat cbrt(float x) {\n  if (x >= 0.0) {\n    return pow(x, 1.0 / 3.0);\n  } else {\n    return -pow(x, 1.0 / 3.0);\n  }\n}\n\nfloat expm1(float x) {\n  return pow(${Math.E}, x) - 1.0; \n}\n\nfloat fround(highp float x) {\n  return x;\n}\n\nfloat imul(float v1, float v2) {\n  return float(int(v1) * int(v2));\n}\n\nfloat log10(float x) {\n  return log2(x) * (1.0 / log2(10.0));\n}\n\nfloat log1p(float x) {\n  return log(1.0 + x);\n}\n\nfloat _pow(float v1, float v2) {\n  if (v2 == 0.0) return 1.0;\n  return pow(v1, v2);\n}\n\nfloat _round(float x) {\n  return floor(x + 0.5);\n}\n\n\nconst int BIT_COUNT = 32;\nint modi(int x, int y) {\n  return x - y * (x / y);\n}\n\nint bitwiseOr(int a, int b) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) || (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 || b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseXOR(int a, int b) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) != (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 || b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseAnd(int a, int b) {\n  int result = 0;\n  int n = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) && (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 && b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseNot(int a) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (modi(a, 2) == 0) {\n      result += n;    \n    }\n    a = a / 2;\n    n = n * 2;\n  }\n  return result;\n}\nint bitwiseZeroFillLeftShift(int n, int shift) {\n  int maxBytes = BIT_COUNT;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (maxBytes >= n) {\n      break;\n    }\n    maxBytes *= 2;\n  }\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= shift) {\n      break;\n    }\n    n *= 2;\n  }\n\n  int result = 0;\n  int byteVal = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= maxBytes) break;\n    if (modi(n, 2) > 0) { result += byteVal; }\n    n = int(n / 2);\n    byteVal *= 2;\n  }\n  return result;\n}\n\nint bitwiseSignedRightShift(int num, int shifts) {\n  return int(floor(float(num) / pow(2.0, float(shifts))));\n}\n\nint bitwiseZeroFillRightShift(int n, int shift) {\n  int maxBytes = BIT_COUNT;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (maxBytes >= n) {\n      break;\n    }\n    maxBytes *= 2;\n  }\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= shift) {\n      break;\n    }\n    n /= 2;\n  }\n  int result = 0;\n  int byteVal = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= maxBytes) break;\n    if (modi(n, 2) > 0) { result += byteVal; }\n    n = int(n / 2);\n    byteVal *= 2;\n  }\n  return result;\n}\n\nvec2 integerMod(vec2 x, float y) {\n  vec2 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec3 integerMod(vec3 x, float y) {\n  vec3 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec4 integerMod(vec4 x, vec4 y) {\n  vec4 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nfloat integerMod(float x, float y) {\n  float res = floor(mod(x, y));\n  return res * (res > floor(y) - 1.0 ? 0.0 : 1.0);\n}\n\nint integerMod(int x, int y) {\n  return x - (y * int(x/y));\n}\n\n__DIVIDE_WITH_INTEGER_CHECK__;\n\n// Here be dragons!\n// DO NOT OPTIMIZE THIS CODE\n// YOU WILL BREAK SOMETHING ON SOMEBODY\\'S MACHINE\n// LEAVE IT AS IT IS, LEST YOU WASTE YOUR OWN TIME\nconst vec2 MAGIC_VEC = vec2(1.0, -256.0);\nconst vec4 SCALE_FACTOR = vec4(1.0, 256.0, 65536.0, 0.0);\nconst vec4 SCALE_FACTOR_INV = vec4(1.0, 0.00390625, 0.0000152587890625, 0.0); // 1, 1/256, 1/65536\nfloat decode32(vec4 texel) {\n  __DECODE32_ENDIANNESS__;\n  texel *= 255.0;\n  vec2 gte128;\n  gte128.x = texel.b >= 128.0 ? 1.0 : 0.0;\n  gte128.y = texel.a >= 128.0 ? 1.0 : 0.0;\n  float exponent = 2.0 * texel.a - 127.0 + dot(gte128, MAGIC_VEC);\n  float res = exp2(round(exponent));\n  texel.b = texel.b - 128.0 * gte128.x;\n  res = dot(texel, SCALE_FACTOR) * exp2(round(exponent-23.0)) + res;\n  res *= gte128.y * -2.0 + 1.0;\n  return res;\n}\n\nfloat decode16(vec4 texel, int index) {\n  int channel = integerMod(index, 2);\n  return texel[channel*2] * 255.0 + texel[channel*2 + 1] * 65280.0;\n}\n\nfloat decode8(vec4 texel, int index) {\n  int channel = integerMod(index, 4);\n  return texel[channel] * 255.0;\n}\n\nvec4 legacyEncode32(float f) {\n  float F = abs(f);\n  float sign = f < 0.0 ? 1.0 : 0.0;\n  float exponent = floor(log2(F));\n  float mantissa = (exp2(-exponent) * F);\n  // exponent += floor(log2(mantissa));\n  vec4 texel = vec4(F * exp2(23.0-exponent)) * SCALE_FACTOR_INV;\n  texel.rg = integerMod(texel.rg, 256.0);\n  texel.b = integerMod(texel.b, 128.0);\n  texel.a = exponent*0.5 + 63.5;\n  texel.ba += vec2(integerMod(exponent+127.0, 2.0), sign) * 128.0;\n  texel = floor(texel);\n  texel *= 0.003921569; // 1/255\n  __ENCODE32_ENDIANNESS__;\n  return texel;\n}\n\n// https://github.com/gpujs/gpu.js/wiki/Encoder-details\nvec4 encode32(float value) {\n  if (value == 0.0) return vec4(0, 0, 0, 0);\n\n  float exponent;\n  float mantissa;\n  vec4  result;\n  float sgn;\n\n  sgn = step(0.0, -value);\n  value = abs(value);\n\n  exponent = floor(log2(value));\n\n  mantissa = value*pow(2.0, -exponent)-1.0;\n  exponent = exponent+127.0;\n  result   = vec4(0,0,0,0);\n\n  result.a = floor(exponent/2.0);\n  exponent = exponent - result.a*2.0;\n  result.a = result.a + 128.0*sgn;\n\n  result.b = floor(mantissa * 128.0);\n  mantissa = mantissa - result.b / 128.0;\n  result.b = result.b + exponent*128.0;\n\n  result.g = floor(mantissa*32768.0);\n  mantissa = mantissa - result.g/32768.0;\n\n  result.r = floor(mantissa*8388608.0);\n  return result/255.0;\n}\n// Dragons end here\n\nint index;\nivec3 threadId;\n\nivec3 indexTo3D(int idx, ivec3 texDim) {\n  int z = int(idx / (texDim.x * texDim.y));\n  idx -= z * int(texDim.x * texDim.y);\n  int y = int(idx / texDim.x);\n  int x = int(integerMod(idx, texDim.x));\n  return ivec3(x, y, z);\n}\n\nfloat get32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize));\n  return decode32(texel);\n}\n\nfloat get16(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + (texDim.x * (y + (texDim.y * z)));\n  int w = texSize.x * 2;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize.x * 2, texSize.y));\n  return decode16(texel, index);\n}\n\nfloat get8(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + (texDim.x * (y + (texDim.y * z)));\n  int w = texSize.x * 4;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize.x * 4, texSize.y));\n  return decode8(texel, index);\n}\n\nfloat getMemoryOptimized32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + (texDim.x * (y + (texDim.y * z)));\n  int channel = integerMod(index, 4);\n  index = index / 4;\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  index = index / 4;\n  vec4 texel = texture(tex, st / vec2(texSize));\n  return texel[channel];\n}\n\nvec4 getImage2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  return texture(tex, st / vec2(texSize));\n}\n\nvec4 getImage3D(sampler2DArray tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  return texture(tex, vec3(st / vec2(texSize), z));\n}\n\nfloat getFloatFromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return result[0];\n}\n\nvec2 getVec2FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return vec2(result[0], result[1]);\n}\n\nvec2 getMemoryOptimizedVec2(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int channel = integerMod(index, 2);\n  index = index / 2;\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize));\n  if (channel == 0) return vec2(texel.r, texel.g);\n  if (channel == 1) return vec2(texel.b, texel.a);\n  return vec2(0.0, 0.0);\n}\n\nvec3 getVec3FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return vec3(result[0], result[1], result[2]);\n}\n\nvec3 getMemoryOptimizedVec3(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int fieldIndex = 3 * (x + texDim.x * (y + texDim.y * z));\n  int vectorIndex = fieldIndex / 4;\n  int vectorOffset = fieldIndex - vectorIndex * 4;\n  int readY = vectorIndex / texSize.x;\n  int readX = vectorIndex - readY * texSize.x;\n  vec4 tex1 = texture(tex, (vec2(readX, readY) + 0.5) / vec2(texSize));\n\n  if (vectorOffset == 0) {\n    return tex1.xyz;\n  } else if (vectorOffset == 1) {\n    return tex1.yzw;\n  } else {\n    readX++;\n    if (readX >= texSize.x) {\n      readX = 0;\n      readY++;\n    }\n    vec4 tex2 = texture(tex, vec2(readX, readY) / vec2(texSize));\n    if (vectorOffset == 2) {\n      return vec3(tex1.z, tex1.w, tex2.x);\n    } else {\n      return vec3(tex1.w, tex2.x, tex2.y);\n    }\n  }\n}\n\nvec4 getVec4FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  return getImage2D(tex, texSize, texDim, z, y, x);\n}\n\nvec4 getMemoryOptimizedVec4(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int channel = integerMod(index, 2);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize));\n  return vec4(texel.r, texel.g, texel.b, texel.a);\n}\n\nvec4 actualColor;\nvoid color(float r, float g, float b, float a) {\n  actualColor = vec4(r,g,b,a);\n}\n\nvoid color(float r, float g, float b) {\n  color(r,g,b,1.0);\n}\n\nfloat modulo(float number, float divisor) {\n  if (number < 0.0) {\n    number = abs(number);\n    if (divisor < 0.0) {\n      divisor = abs(divisor);\n    }\n    return -mod(number, divisor);\n  }\n  if (divisor < 0.0) {\n    divisor = abs(divisor);\n  }\n  return mod(number, divisor);\n}\n\n__INJECTED_NATIVE__;\n__MAIN_CONSTANTS__;\n__MAIN_ARGUMENTS__;\n__KERNEL__;\n\nvoid main(void) {\n  index = int(vTexCoord.s * float(uTexSize.x)) + int(vTexCoord.t * float(uTexSize.y)) * uTexSize.x;\n  __MAIN_RESULT__;\n}`;\n                module1.exports = {\n                    fragmentShader: fragmentShader\n                };\n            },\n            {}\n        ],\n        73: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../utils\");\n                const { WebGLFunctionNode: WebGLFunctionNode  } = require1(\"../web-gl/function-node\");\n                class WebGL2FunctionNode extends WebGLFunctionNode {\n                    astIdentifierExpression(idtNode, retArr) {\n                        if (idtNode.type !== \"Identifier\") throw this.astErrorOutput(\"IdentifierExpression - not an Identifier\", idtNode);\n                        const type = this.getType(idtNode);\n                        const name1 = utils.sanitizeName(idtNode.name);\n                        if (idtNode.name === \"Infinity\") retArr.push(\"intBitsToFloat(2139095039)\");\n                        else if (type === \"Boolean\") {\n                            if (this.argumentNames.indexOf(name1) > -1) retArr.push(`bool(user_${name1})`);\n                            else retArr.push(`user_${name1}`);\n                        } else retArr.push(`user_${name1}`);\n                        return retArr;\n                    }\n                }\n                module1.exports = {\n                    WebGL2FunctionNode: WebGL2FunctionNode\n                };\n            },\n            {\n                \"../../utils\": 114,\n                \"../web-gl/function-node\": 38\n            }\n        ],\n        74: [\n            function(require1, module1, exports) {\n                const { WebGL2KernelValueBoolean: WebGL2KernelValueBoolean  } = require1(\"./kernel-value/boolean\");\n                const { WebGL2KernelValueFloat: WebGL2KernelValueFloat  } = require1(\"./kernel-value/float\");\n                const { WebGL2KernelValueInteger: WebGL2KernelValueInteger  } = require1(\"./kernel-value/integer\");\n                const { WebGL2KernelValueHTMLImage: WebGL2KernelValueHTMLImage  } = require1(\"./kernel-value/html-image\");\n                const { WebGL2KernelValueDynamicHTMLImage: WebGL2KernelValueDynamicHTMLImage  } = require1(\"./kernel-value/dynamic-html-image\");\n                const { WebGL2KernelValueHTMLImageArray: WebGL2KernelValueHTMLImageArray  } = require1(\"./kernel-value/html-image-array\");\n                const { WebGL2KernelValueDynamicHTMLImageArray: WebGL2KernelValueDynamicHTMLImageArray  } = require1(\"./kernel-value/dynamic-html-image-array\");\n                const { WebGL2KernelValueHTMLVideo: WebGL2KernelValueHTMLVideo  } = require1(\"./kernel-value/html-video\");\n                const { WebGL2KernelValueDynamicHTMLVideo: WebGL2KernelValueDynamicHTMLVideo  } = require1(\"./kernel-value/dynamic-html-video\");\n                const { WebGL2KernelValueSingleInput: WebGL2KernelValueSingleInput  } = require1(\"./kernel-value/single-input\");\n                const { WebGL2KernelValueDynamicSingleInput: WebGL2KernelValueDynamicSingleInput  } = require1(\"./kernel-value/dynamic-single-input\");\n                const { WebGL2KernelValueUnsignedInput: WebGL2KernelValueUnsignedInput  } = require1(\"./kernel-value/unsigned-input\");\n                const { WebGL2KernelValueDynamicUnsignedInput: WebGL2KernelValueDynamicUnsignedInput  } = require1(\"./kernel-value/dynamic-unsigned-input\");\n                const { WebGL2KernelValueMemoryOptimizedNumberTexture: WebGL2KernelValueMemoryOptimizedNumberTexture  } = require1(\"./kernel-value/memory-optimized-number-texture\");\n                const { WebGL2KernelValueDynamicMemoryOptimizedNumberTexture: WebGL2KernelValueDynamicMemoryOptimizedNumberTexture  } = require1(\"./kernel-value/dynamic-memory-optimized-number-texture\");\n                const { WebGL2KernelValueNumberTexture: WebGL2KernelValueNumberTexture  } = require1(\"./kernel-value/number-texture\");\n                const { WebGL2KernelValueDynamicNumberTexture: WebGL2KernelValueDynamicNumberTexture  } = require1(\"./kernel-value/dynamic-number-texture\");\n                const { WebGL2KernelValueSingleArray: WebGL2KernelValueSingleArray  } = require1(\"./kernel-value/single-array\");\n                const { WebGL2KernelValueDynamicSingleArray: WebGL2KernelValueDynamicSingleArray  } = require1(\"./kernel-value/dynamic-single-array\");\n                const { WebGL2KernelValueSingleArray1DI: WebGL2KernelValueSingleArray1DI  } = require1(\"./kernel-value/single-array1d-i\");\n                const { WebGL2KernelValueDynamicSingleArray1DI: WebGL2KernelValueDynamicSingleArray1DI  } = require1(\"./kernel-value/dynamic-single-array1d-i\");\n                const { WebGL2KernelValueSingleArray2DI: WebGL2KernelValueSingleArray2DI  } = require1(\"./kernel-value/single-array2d-i\");\n                const { WebGL2KernelValueDynamicSingleArray2DI: WebGL2KernelValueDynamicSingleArray2DI  } = require1(\"./kernel-value/dynamic-single-array2d-i\");\n                const { WebGL2KernelValueSingleArray3DI: WebGL2KernelValueSingleArray3DI  } = require1(\"./kernel-value/single-array3d-i\");\n                const { WebGL2KernelValueDynamicSingleArray3DI: WebGL2KernelValueDynamicSingleArray3DI  } = require1(\"./kernel-value/dynamic-single-array3d-i\");\n                const { WebGL2KernelValueArray2: WebGL2KernelValueArray2  } = require1(\"./kernel-value/array2\");\n                const { WebGL2KernelValueArray3: WebGL2KernelValueArray3  } = require1(\"./kernel-value/array3\");\n                const { WebGL2KernelValueArray4: WebGL2KernelValueArray4  } = require1(\"./kernel-value/array4\");\n                const { WebGL2KernelValueUnsignedArray: WebGL2KernelValueUnsignedArray  } = require1(\"./kernel-value/unsigned-array\");\n                const { WebGL2KernelValueDynamicUnsignedArray: WebGL2KernelValueDynamicUnsignedArray  } = require1(\"./kernel-value/dynamic-unsigned-array\");\n                const kernelValueMaps = {\n                    unsigned: {\n                        dynamic: {\n                            \"Boolean\": WebGL2KernelValueBoolean,\n                            \"Integer\": WebGL2KernelValueInteger,\n                            \"Float\": WebGL2KernelValueFloat,\n                            \"Array\": WebGL2KernelValueDynamicUnsignedArray,\n                            \"Array(2)\": WebGL2KernelValueArray2,\n                            \"Array(3)\": WebGL2KernelValueArray3,\n                            \"Array(4)\": WebGL2KernelValueArray4,\n                            \"Array1D(2)\": false,\n                            \"Array1D(3)\": false,\n                            \"Array1D(4)\": false,\n                            \"Array2D(2)\": false,\n                            \"Array2D(3)\": false,\n                            \"Array2D(4)\": false,\n                            \"Array3D(2)\": false,\n                            \"Array3D(3)\": false,\n                            \"Array3D(4)\": false,\n                            \"Input\": WebGL2KernelValueDynamicUnsignedInput,\n                            \"NumberTexture\": WebGL2KernelValueDynamicNumberTexture,\n                            \"ArrayTexture(1)\": WebGL2KernelValueDynamicNumberTexture,\n                            \"ArrayTexture(2)\": WebGL2KernelValueDynamicNumberTexture,\n                            \"ArrayTexture(3)\": WebGL2KernelValueDynamicNumberTexture,\n                            \"ArrayTexture(4)\": WebGL2KernelValueDynamicNumberTexture,\n                            \"MemoryOptimizedNumberTexture\": WebGL2KernelValueDynamicMemoryOptimizedNumberTexture,\n                            \"HTMLCanvas\": WebGL2KernelValueDynamicHTMLImage,\n                            \"OffscreenCanvas\": WebGL2KernelValueDynamicHTMLImage,\n                            \"HTMLImage\": WebGL2KernelValueDynamicHTMLImage,\n                            \"ImageBitmap\": WebGL2KernelValueDynamicHTMLImage,\n                            \"ImageData\": WebGL2KernelValueDynamicHTMLImage,\n                            \"HTMLImageArray\": WebGL2KernelValueDynamicHTMLImageArray,\n                            \"HTMLVideo\": WebGL2KernelValueDynamicHTMLVideo\n                        },\n                        static: {\n                            \"Boolean\": WebGL2KernelValueBoolean,\n                            \"Float\": WebGL2KernelValueFloat,\n                            \"Integer\": WebGL2KernelValueInteger,\n                            \"Array\": WebGL2KernelValueUnsignedArray,\n                            \"Array(2)\": WebGL2KernelValueArray2,\n                            \"Array(3)\": WebGL2KernelValueArray3,\n                            \"Array(4)\": WebGL2KernelValueArray4,\n                            \"Array1D(2)\": false,\n                            \"Array1D(3)\": false,\n                            \"Array1D(4)\": false,\n                            \"Array2D(2)\": false,\n                            \"Array2D(3)\": false,\n                            \"Array2D(4)\": false,\n                            \"Array3D(2)\": false,\n                            \"Array3D(3)\": false,\n                            \"Array3D(4)\": false,\n                            \"Input\": WebGL2KernelValueUnsignedInput,\n                            \"NumberTexture\": WebGL2KernelValueNumberTexture,\n                            \"ArrayTexture(1)\": WebGL2KernelValueNumberTexture,\n                            \"ArrayTexture(2)\": WebGL2KernelValueNumberTexture,\n                            \"ArrayTexture(3)\": WebGL2KernelValueNumberTexture,\n                            \"ArrayTexture(4)\": WebGL2KernelValueNumberTexture,\n                            \"MemoryOptimizedNumberTexture\": WebGL2KernelValueDynamicMemoryOptimizedNumberTexture,\n                            \"HTMLCanvas\": WebGL2KernelValueHTMLImage,\n                            \"OffscreenCanvas\": WebGL2KernelValueHTMLImage,\n                            \"HTMLImage\": WebGL2KernelValueHTMLImage,\n                            \"ImageBitmap\": WebGL2KernelValueHTMLImage,\n                            \"ImageData\": WebGL2KernelValueHTMLImage,\n                            \"HTMLImageArray\": WebGL2KernelValueHTMLImageArray,\n                            \"HTMLVideo\": WebGL2KernelValueHTMLVideo\n                        }\n                    },\n                    single: {\n                        dynamic: {\n                            \"Boolean\": WebGL2KernelValueBoolean,\n                            \"Integer\": WebGL2KernelValueInteger,\n                            \"Float\": WebGL2KernelValueFloat,\n                            \"Array\": WebGL2KernelValueDynamicSingleArray,\n                            \"Array(2)\": WebGL2KernelValueArray2,\n                            \"Array(3)\": WebGL2KernelValueArray3,\n                            \"Array(4)\": WebGL2KernelValueArray4,\n                            \"Array1D(2)\": WebGL2KernelValueDynamicSingleArray1DI,\n                            \"Array1D(3)\": WebGL2KernelValueDynamicSingleArray1DI,\n                            \"Array1D(4)\": WebGL2KernelValueDynamicSingleArray1DI,\n                            \"Array2D(2)\": WebGL2KernelValueDynamicSingleArray2DI,\n                            \"Array2D(3)\": WebGL2KernelValueDynamicSingleArray2DI,\n                            \"Array2D(4)\": WebGL2KernelValueDynamicSingleArray2DI,\n                            \"Array3D(2)\": WebGL2KernelValueDynamicSingleArray3DI,\n                            \"Array3D(3)\": WebGL2KernelValueDynamicSingleArray3DI,\n                            \"Array3D(4)\": WebGL2KernelValueDynamicSingleArray3DI,\n                            \"Input\": WebGL2KernelValueDynamicSingleInput,\n                            \"NumberTexture\": WebGL2KernelValueDynamicNumberTexture,\n                            \"ArrayTexture(1)\": WebGL2KernelValueDynamicNumberTexture,\n                            \"ArrayTexture(2)\": WebGL2KernelValueDynamicNumberTexture,\n                            \"ArrayTexture(3)\": WebGL2KernelValueDynamicNumberTexture,\n                            \"ArrayTexture(4)\": WebGL2KernelValueDynamicNumberTexture,\n                            \"MemoryOptimizedNumberTexture\": WebGL2KernelValueDynamicMemoryOptimizedNumberTexture,\n                            \"HTMLCanvas\": WebGL2KernelValueDynamicHTMLImage,\n                            \"OffscreenCanvas\": WebGL2KernelValueDynamicHTMLImage,\n                            \"HTMLImage\": WebGL2KernelValueDynamicHTMLImage,\n                            \"ImageBitmap\": WebGL2KernelValueDynamicHTMLImage,\n                            \"ImageData\": WebGL2KernelValueDynamicHTMLImage,\n                            \"HTMLImageArray\": WebGL2KernelValueDynamicHTMLImageArray,\n                            \"HTMLVideo\": WebGL2KernelValueDynamicHTMLVideo\n                        },\n                        static: {\n                            \"Boolean\": WebGL2KernelValueBoolean,\n                            \"Float\": WebGL2KernelValueFloat,\n                            \"Integer\": WebGL2KernelValueInteger,\n                            \"Array\": WebGL2KernelValueSingleArray,\n                            \"Array(2)\": WebGL2KernelValueArray2,\n                            \"Array(3)\": WebGL2KernelValueArray3,\n                            \"Array(4)\": WebGL2KernelValueArray4,\n                            \"Array1D(2)\": WebGL2KernelValueSingleArray1DI,\n                            \"Array1D(3)\": WebGL2KernelValueSingleArray1DI,\n                            \"Array1D(4)\": WebGL2KernelValueSingleArray1DI,\n                            \"Array2D(2)\": WebGL2KernelValueSingleArray2DI,\n                            \"Array2D(3)\": WebGL2KernelValueSingleArray2DI,\n                            \"Array2D(4)\": WebGL2KernelValueSingleArray2DI,\n                            \"Array3D(2)\": WebGL2KernelValueSingleArray3DI,\n                            \"Array3D(3)\": WebGL2KernelValueSingleArray3DI,\n                            \"Array3D(4)\": WebGL2KernelValueSingleArray3DI,\n                            \"Input\": WebGL2KernelValueSingleInput,\n                            \"NumberTexture\": WebGL2KernelValueNumberTexture,\n                            \"ArrayTexture(1)\": WebGL2KernelValueNumberTexture,\n                            \"ArrayTexture(2)\": WebGL2KernelValueNumberTexture,\n                            \"ArrayTexture(3)\": WebGL2KernelValueNumberTexture,\n                            \"ArrayTexture(4)\": WebGL2KernelValueNumberTexture,\n                            \"MemoryOptimizedNumberTexture\": WebGL2KernelValueMemoryOptimizedNumberTexture,\n                            \"HTMLCanvas\": WebGL2KernelValueHTMLImage,\n                            \"OffscreenCanvas\": WebGL2KernelValueHTMLImage,\n                            \"HTMLImage\": WebGL2KernelValueHTMLImage,\n                            \"ImageBitmap\": WebGL2KernelValueHTMLImage,\n                            \"ImageData\": WebGL2KernelValueHTMLImage,\n                            \"HTMLImageArray\": WebGL2KernelValueHTMLImageArray,\n                            \"HTMLVideo\": WebGL2KernelValueHTMLVideo\n                        }\n                    }\n                };\n                function lookupKernelValueType(type, dynamic, precision, value1) {\n                    if (!type) throw new Error(\"type missing\");\n                    if (!dynamic) throw new Error(\"dynamic missing\");\n                    if (!precision) throw new Error(\"precision missing\");\n                    if (value1.type) type = value1.type;\n                    const types = kernelValueMaps[precision][dynamic];\n                    if (types[type] === false) return null;\n                    else if (types[type] === undefined) throw new Error(`Could not find a KernelValue for ${type}`);\n                    return types[type];\n                }\n                module1.exports = {\n                    kernelValueMaps: kernelValueMaps,\n                    lookupKernelValueType: lookupKernelValueType\n                };\n            },\n            {\n                \"./kernel-value/array2\": 75,\n                \"./kernel-value/array3\": 76,\n                \"./kernel-value/array4\": 77,\n                \"./kernel-value/boolean\": 78,\n                \"./kernel-value/dynamic-html-image\": 80,\n                \"./kernel-value/dynamic-html-image-array\": 79,\n                \"./kernel-value/dynamic-html-video\": 81,\n                \"./kernel-value/dynamic-memory-optimized-number-texture\": 82,\n                \"./kernel-value/dynamic-number-texture\": 83,\n                \"./kernel-value/dynamic-single-array\": 84,\n                \"./kernel-value/dynamic-single-array1d-i\": 85,\n                \"./kernel-value/dynamic-single-array2d-i\": 86,\n                \"./kernel-value/dynamic-single-array3d-i\": 87,\n                \"./kernel-value/dynamic-single-input\": 88,\n                \"./kernel-value/dynamic-unsigned-array\": 89,\n                \"./kernel-value/dynamic-unsigned-input\": 90,\n                \"./kernel-value/float\": 91,\n                \"./kernel-value/html-image\": 93,\n                \"./kernel-value/html-image-array\": 92,\n                \"./kernel-value/html-video\": 94,\n                \"./kernel-value/integer\": 95,\n                \"./kernel-value/memory-optimized-number-texture\": 96,\n                \"./kernel-value/number-texture\": 97,\n                \"./kernel-value/single-array\": 98,\n                \"./kernel-value/single-array1d-i\": 99,\n                \"./kernel-value/single-array2d-i\": 100,\n                \"./kernel-value/single-array3d-i\": 101,\n                \"./kernel-value/single-input\": 102,\n                \"./kernel-value/unsigned-array\": 103,\n                \"./kernel-value/unsigned-input\": 104\n            }\n        ],\n        75: [\n            function(require1, module1, exports) {\n                const { WebGLKernelValueArray2: WebGLKernelValueArray2  } = require1(\"../../web-gl/kernel-value/array2\");\n                class WebGL2KernelValueArray2 extends WebGLKernelValueArray2 {\n                }\n                module1.exports = {\n                    WebGL2KernelValueArray2: WebGL2KernelValueArray2\n                };\n            },\n            {\n                \"../../web-gl/kernel-value/array2\": 41\n            }\n        ],\n        76: [\n            function(require1, module1, exports) {\n                const { WebGLKernelValueArray3: WebGLKernelValueArray3  } = require1(\"../../web-gl/kernel-value/array3\");\n                class WebGL2KernelValueArray3 extends WebGLKernelValueArray3 {\n                }\n                module1.exports = {\n                    WebGL2KernelValueArray3: WebGL2KernelValueArray3\n                };\n            },\n            {\n                \"../../web-gl/kernel-value/array3\": 42\n            }\n        ],\n        77: [\n            function(require1, module1, exports) {\n                const { WebGLKernelValueArray4: WebGLKernelValueArray4  } = require1(\"../../web-gl/kernel-value/array4\");\n                class WebGL2KernelValueArray4 extends WebGLKernelValueArray4 {\n                }\n                module1.exports = {\n                    WebGL2KernelValueArray4: WebGL2KernelValueArray4\n                };\n            },\n            {\n                \"../../web-gl/kernel-value/array4\": 43\n            }\n        ],\n        78: [\n            function(require1, module1, exports) {\n                const { WebGLKernelValueBoolean: WebGLKernelValueBoolean  } = require1(\"../../web-gl/kernel-value/boolean\");\n                class WebGL2KernelValueBoolean extends WebGLKernelValueBoolean {\n                }\n                module1.exports = {\n                    WebGL2KernelValueBoolean: WebGL2KernelValueBoolean\n                };\n            },\n            {\n                \"../../web-gl/kernel-value/boolean\": 44\n            }\n        ],\n        79: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGL2KernelValueHTMLImageArray: WebGL2KernelValueHTMLImageArray  } = require1(\"./html-image-array\");\n                class WebGL2KernelValueDynamicHTMLImageArray extends WebGL2KernelValueHTMLImageArray {\n                    getSource() {\n                        const variablePrecision = this.getVariablePrecisionString();\n                        return utils.linesToString([\n                            `uniform ${variablePrecision} sampler2DArray ${this.id}`,\n                            `uniform ${variablePrecision} ivec2 ${this.sizeId}`,\n                            `uniform ${variablePrecision} ivec3 ${this.dimensionsId}`\n                        ]);\n                    }\n                    updateValue(images) {\n                        const { width: width , height: height  } = images[0];\n                        this.checkSize(width, height);\n                        this.dimensions = [\n                            width,\n                            height,\n                            images.length\n                        ];\n                        this.textureSize = [\n                            width,\n                            height\n                        ];\n                        this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n                        this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n                        super.updateValue(images);\n                    }\n                }\n                module1.exports = {\n                    WebGL2KernelValueDynamicHTMLImageArray: WebGL2KernelValueDynamicHTMLImageArray\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./html-image-array\": 92\n            }\n        ],\n        80: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelValueDynamicHTMLImage: WebGLKernelValueDynamicHTMLImage  } = require1(\"../../web-gl/kernel-value/dynamic-html-image\");\n                class WebGL2KernelValueDynamicHTMLImage extends WebGLKernelValueDynamicHTMLImage {\n                    getSource() {\n                        const variablePrecision = this.getVariablePrecisionString();\n                        return utils.linesToString([\n                            `uniform ${variablePrecision} sampler2D ${this.id}`,\n                            `uniform ${variablePrecision} ivec2 ${this.sizeId}`,\n                            `uniform ${variablePrecision} ivec3 ${this.dimensionsId}`\n                        ]);\n                    }\n                }\n                module1.exports = {\n                    WebGL2KernelValueDynamicHTMLImage: WebGL2KernelValueDynamicHTMLImage\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"../../web-gl/kernel-value/dynamic-html-image\": 45\n            }\n        ],\n        81: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGL2KernelValueDynamicHTMLImage: WebGL2KernelValueDynamicHTMLImage  } = require1(\"./dynamic-html-image\");\n                class WebGL2KernelValueDynamicHTMLVideo extends WebGL2KernelValueDynamicHTMLImage {\n                }\n                module1.exports = {\n                    WebGL2KernelValueDynamicHTMLVideo: WebGL2KernelValueDynamicHTMLVideo\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./dynamic-html-image\": 80\n            }\n        ],\n        82: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelValueDynamicMemoryOptimizedNumberTexture: WebGLKernelValueDynamicMemoryOptimizedNumberTexture  } = require1(\"../../web-gl/kernel-value/dynamic-memory-optimized-number-texture\");\n                class WebGL2KernelValueDynamicMemoryOptimizedNumberTexture extends WebGLKernelValueDynamicMemoryOptimizedNumberTexture {\n                    getSource() {\n                        return utils.linesToString([\n                            `uniform sampler2D ${this.id}`,\n                            `uniform ivec2 ${this.sizeId}`,\n                            `uniform ivec3 ${this.dimensionsId}`\n                        ]);\n                    }\n                }\n                module1.exports = {\n                    WebGL2KernelValueDynamicMemoryOptimizedNumberTexture: WebGL2KernelValueDynamicMemoryOptimizedNumberTexture\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"../../web-gl/kernel-value/dynamic-memory-optimized-number-texture\": 47\n            }\n        ],\n        83: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelValueDynamicNumberTexture: WebGLKernelValueDynamicNumberTexture  } = require1(\"../../web-gl/kernel-value/dynamic-number-texture\");\n                class WebGL2KernelValueDynamicNumberTexture extends WebGLKernelValueDynamicNumberTexture {\n                    getSource() {\n                        const variablePrecision = this.getVariablePrecisionString();\n                        return utils.linesToString([\n                            `uniform ${variablePrecision} sampler2D ${this.id}`,\n                            `uniform ${variablePrecision} ivec2 ${this.sizeId}`,\n                            `uniform ${variablePrecision} ivec3 ${this.dimensionsId}`\n                        ]);\n                    }\n                }\n                module1.exports = {\n                    WebGL2KernelValueDynamicNumberTexture: WebGL2KernelValueDynamicNumberTexture\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"../../web-gl/kernel-value/dynamic-number-texture\": 48\n            }\n        ],\n        84: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGL2KernelValueSingleArray: WebGL2KernelValueSingleArray  } = require1(\"../../web-gl2/kernel-value/single-array\");\n                class WebGL2KernelValueDynamicSingleArray extends WebGL2KernelValueSingleArray {\n                    getSource() {\n                        const variablePrecision = this.getVariablePrecisionString();\n                        return utils.linesToString([\n                            `uniform ${variablePrecision} sampler2D ${this.id}`,\n                            `uniform ${variablePrecision} ivec2 ${this.sizeId}`,\n                            `uniform ${variablePrecision} ivec3 ${this.dimensionsId}`\n                        ]);\n                    }\n                    updateValue(value1) {\n                        this.dimensions = utils.getDimensions(value1, true);\n                        this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);\n                        this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;\n                        this.checkSize(this.textureSize[0], this.textureSize[1]);\n                        this.uploadValue = new Float32Array(this.uploadArrayLength);\n                        this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n                        this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n                        super.updateValue(value1);\n                    }\n                }\n                module1.exports = {\n                    WebGL2KernelValueDynamicSingleArray: WebGL2KernelValueDynamicSingleArray\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"../../web-gl2/kernel-value/single-array\": 98\n            }\n        ],\n        85: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGL2KernelValueSingleArray1DI: WebGL2KernelValueSingleArray1DI  } = require1(\"../../web-gl2/kernel-value/single-array1d-i\");\n                class WebGL2KernelValueDynamicSingleArray1DI extends WebGL2KernelValueSingleArray1DI {\n                    getSource() {\n                        const variablePrecision = this.getVariablePrecisionString();\n                        return utils.linesToString([\n                            `uniform ${variablePrecision} sampler2D ${this.id}`,\n                            `uniform ${variablePrecision} ivec2 ${this.sizeId}`,\n                            `uniform ${variablePrecision} ivec3 ${this.dimensionsId}`\n                        ]);\n                    }\n                    updateValue(value1) {\n                        this.setShape(value1);\n                        this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n                        this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n                        super.updateValue(value1);\n                    }\n                }\n                module1.exports = {\n                    WebGL2KernelValueDynamicSingleArray1DI: WebGL2KernelValueDynamicSingleArray1DI\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"../../web-gl2/kernel-value/single-array1d-i\": 99\n            }\n        ],\n        86: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGL2KernelValueSingleArray2DI: WebGL2KernelValueSingleArray2DI  } = require1(\"../../web-gl2/kernel-value/single-array2d-i\");\n                class WebGL2KernelValueDynamicSingleArray2DI extends WebGL2KernelValueSingleArray2DI {\n                    getSource() {\n                        const variablePrecision = this.getVariablePrecisionString();\n                        return utils.linesToString([\n                            `uniform ${variablePrecision} sampler2D ${this.id}`,\n                            `uniform ${variablePrecision} ivec2 ${this.sizeId}`,\n                            `uniform ${variablePrecision} ivec3 ${this.dimensionsId}`\n                        ]);\n                    }\n                    updateValue(value1) {\n                        this.setShape(value1);\n                        this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n                        this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n                        super.updateValue(value1);\n                    }\n                }\n                module1.exports = {\n                    WebGL2KernelValueDynamicSingleArray2DI: WebGL2KernelValueDynamicSingleArray2DI\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"../../web-gl2/kernel-value/single-array2d-i\": 100\n            }\n        ],\n        87: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGL2KernelValueSingleArray3DI: WebGL2KernelValueSingleArray3DI  } = require1(\"../../web-gl2/kernel-value/single-array3d-i\");\n                class WebGL2KernelValueDynamicSingleArray3DI extends WebGL2KernelValueSingleArray3DI {\n                    getSource() {\n                        const variablePrecision = this.getVariablePrecisionString();\n                        return utils.linesToString([\n                            `uniform ${variablePrecision} sampler2D ${this.id}`,\n                            `uniform ${variablePrecision} ivec2 ${this.sizeId}`,\n                            `uniform ${variablePrecision} ivec3 ${this.dimensionsId}`\n                        ]);\n                    }\n                    updateValue(value1) {\n                        this.setShape(value1);\n                        this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n                        this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n                        super.updateValue(value1);\n                    }\n                }\n                module1.exports = {\n                    WebGL2KernelValueDynamicSingleArray3DI: WebGL2KernelValueDynamicSingleArray3DI\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"../../web-gl2/kernel-value/single-array3d-i\": 101\n            }\n        ],\n        88: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGL2KernelValueSingleInput: WebGL2KernelValueSingleInput  } = require1(\"../../web-gl2/kernel-value/single-input\");\n                class WebGL2KernelValueDynamicSingleInput extends WebGL2KernelValueSingleInput {\n                    getSource() {\n                        const variablePrecision = this.getVariablePrecisionString();\n                        return utils.linesToString([\n                            `uniform ${variablePrecision} sampler2D ${this.id}`,\n                            `uniform ${variablePrecision} ivec2 ${this.sizeId}`,\n                            `uniform ${variablePrecision} ivec3 ${this.dimensionsId}`\n                        ]);\n                    }\n                    updateValue(value1) {\n                        let [w, h, d] = value1.size;\n                        this.dimensions = new Int32Array([\n                            w || 1,\n                            h || 1,\n                            d || 1\n                        ]);\n                        this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);\n                        this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;\n                        this.checkSize(this.textureSize[0], this.textureSize[1]);\n                        this.uploadValue = new Float32Array(this.uploadArrayLength);\n                        this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n                        this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n                        super.updateValue(value1);\n                    }\n                }\n                module1.exports = {\n                    WebGL2KernelValueDynamicSingleInput: WebGL2KernelValueDynamicSingleInput\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"../../web-gl2/kernel-value/single-input\": 102\n            }\n        ],\n        89: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelValueDynamicUnsignedArray: WebGLKernelValueDynamicUnsignedArray  } = require1(\"../../web-gl/kernel-value/dynamic-unsigned-array\");\n                class WebGL2KernelValueDynamicUnsignedArray extends WebGLKernelValueDynamicUnsignedArray {\n                    getSource() {\n                        const variablePrecision = this.getVariablePrecisionString();\n                        return utils.linesToString([\n                            `uniform ${variablePrecision} sampler2D ${this.id}`,\n                            `uniform ${variablePrecision} ivec2 ${this.sizeId}`,\n                            `uniform ${variablePrecision} ivec3 ${this.dimensionsId}`\n                        ]);\n                    }\n                }\n                module1.exports = {\n                    WebGL2KernelValueDynamicUnsignedArray: WebGL2KernelValueDynamicUnsignedArray\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"../../web-gl/kernel-value/dynamic-unsigned-array\": 54\n            }\n        ],\n        90: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelValueDynamicUnsignedInput: WebGLKernelValueDynamicUnsignedInput  } = require1(\"../../web-gl/kernel-value/dynamic-unsigned-input\");\n                class WebGL2KernelValueDynamicUnsignedInput extends WebGLKernelValueDynamicUnsignedInput {\n                    getSource() {\n                        const variablePrecision = this.getVariablePrecisionString();\n                        return utils.linesToString([\n                            `uniform ${variablePrecision} sampler2D ${this.id}`,\n                            `uniform ${variablePrecision} ivec2 ${this.sizeId}`,\n                            `uniform ${variablePrecision} ivec3 ${this.dimensionsId}`\n                        ]);\n                    }\n                }\n                module1.exports = {\n                    WebGL2KernelValueDynamicUnsignedInput: WebGL2KernelValueDynamicUnsignedInput\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"../../web-gl/kernel-value/dynamic-unsigned-input\": 55\n            }\n        ],\n        91: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelValueFloat: WebGLKernelValueFloat  } = require1(\"../../web-gl/kernel-value/float\");\n                class WebGL2KernelValueFloat extends WebGLKernelValueFloat {\n                }\n                module1.exports = {\n                    WebGL2KernelValueFloat: WebGL2KernelValueFloat\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"../../web-gl/kernel-value/float\": 56\n            }\n        ],\n        92: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelArray: WebGLKernelArray  } = require1(\"../../web-gl/kernel-value/array\");\n                class WebGL2KernelValueHTMLImageArray extends WebGLKernelArray {\n                    constructor(value1, settings){\n                        super(value1, settings);\n                        this.checkSize(value1[0].width, value1[0].height);\n                        this.dimensions = [\n                            value1[0].width,\n                            value1[0].height,\n                            value1.length\n                        ];\n                        this.textureSize = [\n                            value1[0].width,\n                            value1[0].height\n                        ];\n                    }\n                    defineTexture() {\n                        const { context: gl  } = this;\n                        gl.activeTexture(this.contextHandle);\n                        gl.bindTexture(gl.TEXTURE_2D_ARRAY, this.texture);\n                        gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n                        gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n                    }\n                    getStringValueHandler() {\n                        return `const uploadValue_${this.name} = ${this.varName};\\n`;\n                    }\n                    getSource() {\n                        const variablePrecision = this.getVariablePrecisionString();\n                        return utils.linesToString([\n                            `uniform ${variablePrecision} sampler2DArray ${this.id}`,\n                            `${variablePrecision} ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n                            `${variablePrecision} ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`\n                        ]);\n                    }\n                    updateValue(images) {\n                        const { context: gl  } = this;\n                        gl.activeTexture(this.contextHandle);\n                        gl.bindTexture(gl.TEXTURE_2D_ARRAY, this.texture);\n                        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n                        gl.texImage3D(gl.TEXTURE_2D_ARRAY, 0, gl.RGBA, images[0].width, images[0].height, images.length, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n                        for(let i = 0; i < images.length; i++){\n                            const xOffset = 0;\n                            const yOffset = 0;\n                            const imageDepth = 1;\n                            gl.texSubImage3D(gl.TEXTURE_2D_ARRAY, 0, xOffset, yOffset, i, images[i].width, images[i].height, imageDepth, gl.RGBA, gl.UNSIGNED_BYTE, this.uploadValue = images[i]);\n                        }\n                        this.kernel.setUniform1i(this.id, this.index);\n                    }\n                }\n                module1.exports = {\n                    WebGL2KernelValueHTMLImageArray: WebGL2KernelValueHTMLImageArray\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"../../web-gl/kernel-value/array\": 40\n            }\n        ],\n        93: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelValueHTMLImage: WebGLKernelValueHTMLImage  } = require1(\"../../web-gl/kernel-value/html-image\");\n                class WebGL2KernelValueHTMLImage extends WebGLKernelValueHTMLImage {\n                    getSource() {\n                        const variablePrecision = this.getVariablePrecisionString();\n                        return utils.linesToString([\n                            `uniform ${variablePrecision} sampler2D ${this.id}`,\n                            `${variablePrecision} ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n                            `${variablePrecision} ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`\n                        ]);\n                    }\n                }\n                module1.exports = {\n                    WebGL2KernelValueHTMLImage: WebGL2KernelValueHTMLImage\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"../../web-gl/kernel-value/html-image\": 57\n            }\n        ],\n        94: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGL2KernelValueHTMLImage: WebGL2KernelValueHTMLImage  } = require1(\"./html-image\");\n                class WebGL2KernelValueHTMLVideo extends WebGL2KernelValueHTMLImage {\n                }\n                module1.exports = {\n                    WebGL2KernelValueHTMLVideo: WebGL2KernelValueHTMLVideo\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"./html-image\": 93\n            }\n        ],\n        95: [\n            function(require1, module1, exports) {\n                const { WebGLKernelValueInteger: WebGLKernelValueInteger  } = require1(\"../../web-gl/kernel-value/integer\");\n                class WebGL2KernelValueInteger extends WebGLKernelValueInteger {\n                    getSource(value1) {\n                        const variablePrecision = this.getVariablePrecisionString();\n                        if (this.origin === \"constants\") return `const ${variablePrecision} int ${this.id} = ${parseInt(value1)};\\n`;\n                        return `uniform ${variablePrecision} int ${this.id};\\n`;\n                    }\n                    updateValue(value1) {\n                        if (this.origin === \"constants\") return;\n                        this.kernel.setUniform1i(this.id, this.uploadValue = value1);\n                    }\n                }\n                module1.exports = {\n                    WebGL2KernelValueInteger: WebGL2KernelValueInteger\n                };\n            },\n            {\n                \"../../web-gl/kernel-value/integer\": 60\n            }\n        ],\n        96: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelValueMemoryOptimizedNumberTexture: WebGLKernelValueMemoryOptimizedNumberTexture  } = require1(\"../../web-gl/kernel-value/memory-optimized-number-texture\");\n                class WebGL2KernelValueMemoryOptimizedNumberTexture extends WebGLKernelValueMemoryOptimizedNumberTexture {\n                    getSource() {\n                        const { id: id , sizeId: sizeId , textureSize: textureSize , dimensionsId: dimensionsId , dimensions: dimensions  } = this;\n                        const variablePrecision = this.getVariablePrecisionString();\n                        return utils.linesToString([\n                            `uniform sampler2D ${id}`,\n                            `${variablePrecision} ivec2 ${sizeId} = ivec2(${textureSize[0]}, ${textureSize[1]})`,\n                            `${variablePrecision} ivec3 ${dimensionsId} = ivec3(${dimensions[0]}, ${dimensions[1]}, ${dimensions[2]})`\n                        ]);\n                    }\n                }\n                module1.exports = {\n                    WebGL2KernelValueMemoryOptimizedNumberTexture: WebGL2KernelValueMemoryOptimizedNumberTexture\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"../../web-gl/kernel-value/memory-optimized-number-texture\": 61\n            }\n        ],\n        97: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelValueNumberTexture: WebGLKernelValueNumberTexture  } = require1(\"../../web-gl/kernel-value/number-texture\");\n                class WebGL2KernelValueNumberTexture extends WebGLKernelValueNumberTexture {\n                    getSource() {\n                        const { id: id , sizeId: sizeId , textureSize: textureSize , dimensionsId: dimensionsId , dimensions: dimensions  } = this;\n                        const variablePrecision = this.getVariablePrecisionString();\n                        return utils.linesToString([\n                            `uniform ${variablePrecision} sampler2D ${id}`,\n                            `${variablePrecision} ivec2 ${sizeId} = ivec2(${textureSize[0]}, ${textureSize[1]})`,\n                            `${variablePrecision} ivec3 ${dimensionsId} = ivec3(${dimensions[0]}, ${dimensions[1]}, ${dimensions[2]})`\n                        ]);\n                    }\n                }\n                module1.exports = {\n                    WebGL2KernelValueNumberTexture: WebGL2KernelValueNumberTexture\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"../../web-gl/kernel-value/number-texture\": 62\n            }\n        ],\n        98: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelValueSingleArray: WebGLKernelValueSingleArray  } = require1(\"../../web-gl/kernel-value/single-array\");\n                class WebGL2KernelValueSingleArray extends WebGLKernelValueSingleArray {\n                    getSource() {\n                        const variablePrecision = this.getVariablePrecisionString();\n                        return utils.linesToString([\n                            `uniform ${variablePrecision} sampler2D ${this.id}`,\n                            `${variablePrecision} ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n                            `${variablePrecision} ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`\n                        ]);\n                    }\n                    updateValue(value1) {\n                        if (value1.constructor !== this.initialValueConstructor) {\n                            this.onUpdateValueMismatch(value1.constructor);\n                            return;\n                        }\n                        const { context: gl  } = this;\n                        utils.flattenTo(value1, this.uploadValue);\n                        gl.activeTexture(this.contextHandle);\n                        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n                        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n                        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\n                        this.kernel.setUniform1i(this.id, this.index);\n                    }\n                }\n                module1.exports = {\n                    WebGL2KernelValueSingleArray: WebGL2KernelValueSingleArray\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"../../web-gl/kernel-value/single-array\": 63\n            }\n        ],\n        99: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelValueSingleArray1DI: WebGLKernelValueSingleArray1DI  } = require1(\"../../web-gl/kernel-value/single-array1d-i\");\n                class WebGL2KernelValueSingleArray1DI extends WebGLKernelValueSingleArray1DI {\n                    updateValue(value1) {\n                        if (value1.constructor !== this.initialValueConstructor) {\n                            this.onUpdateValueMismatch(value1.constructor);\n                            return;\n                        }\n                        const { context: gl  } = this;\n                        utils.flattenTo(value1, this.uploadValue);\n                        gl.activeTexture(this.contextHandle);\n                        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n                        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n                        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\n                        this.kernel.setUniform1i(this.id, this.index);\n                    }\n                }\n                module1.exports = {\n                    WebGL2KernelValueSingleArray1DI: WebGL2KernelValueSingleArray1DI\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"../../web-gl/kernel-value/single-array1d-i\": 64\n            }\n        ],\n        100: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelValueSingleArray2DI: WebGLKernelValueSingleArray2DI  } = require1(\"../../web-gl/kernel-value/single-array2d-i\");\n                class WebGL2KernelValueSingleArray2DI extends WebGLKernelValueSingleArray2DI {\n                    updateValue(value1) {\n                        if (value1.constructor !== this.initialValueConstructor) {\n                            this.onUpdateValueMismatch(value1.constructor);\n                            return;\n                        }\n                        const { context: gl  } = this;\n                        utils.flattenTo(value1, this.uploadValue);\n                        gl.activeTexture(this.contextHandle);\n                        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n                        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n                        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\n                        this.kernel.setUniform1i(this.id, this.index);\n                    }\n                }\n                module1.exports = {\n                    WebGL2KernelValueSingleArray2DI: WebGL2KernelValueSingleArray2DI\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"../../web-gl/kernel-value/single-array2d-i\": 65\n            }\n        ],\n        101: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelValueSingleArray3DI: WebGLKernelValueSingleArray3DI  } = require1(\"../../web-gl/kernel-value/single-array3d-i\");\n                class WebGL2KernelValueSingleArray3DI extends WebGLKernelValueSingleArray3DI {\n                    updateValue(value1) {\n                        if (value1.constructor !== this.initialValueConstructor) {\n                            this.onUpdateValueMismatch(value1.constructor);\n                            return;\n                        }\n                        const { context: gl  } = this;\n                        utils.flattenTo(value1, this.uploadValue);\n                        gl.activeTexture(this.contextHandle);\n                        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n                        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n                        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\n                        this.kernel.setUniform1i(this.id, this.index);\n                    }\n                }\n                module1.exports = {\n                    WebGL2KernelValueSingleArray3DI: WebGL2KernelValueSingleArray3DI\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"../../web-gl/kernel-value/single-array3d-i\": 66\n            }\n        ],\n        102: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelValueSingleInput: WebGLKernelValueSingleInput  } = require1(\"../../web-gl/kernel-value/single-input\");\n                class WebGL2KernelValueSingleInput extends WebGLKernelValueSingleInput {\n                    getSource() {\n                        const variablePrecision = this.getVariablePrecisionString();\n                        return utils.linesToString([\n                            `uniform ${variablePrecision} sampler2D ${this.id}`,\n                            `${variablePrecision} ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n                            `${variablePrecision} ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`\n                        ]);\n                    }\n                    updateValue(input) {\n                        const { context: gl  } = this;\n                        utils.flattenTo(input.value, this.uploadValue);\n                        gl.activeTexture(this.contextHandle);\n                        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n                        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n                        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\n                        this.kernel.setUniform1i(this.id, this.index);\n                    }\n                }\n                module1.exports = {\n                    WebGL2KernelValueSingleInput: WebGL2KernelValueSingleInput\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"../../web-gl/kernel-value/single-input\": 67\n            }\n        ],\n        103: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelValueUnsignedArray: WebGLKernelValueUnsignedArray  } = require1(\"../../web-gl/kernel-value/unsigned-array\");\n                class WebGL2KernelValueUnsignedArray extends WebGLKernelValueUnsignedArray {\n                    getSource() {\n                        const variablePrecision = this.getVariablePrecisionString();\n                        return utils.linesToString([\n                            `uniform ${variablePrecision} sampler2D ${this.id}`,\n                            `${variablePrecision} ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n                            `${variablePrecision} ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`\n                        ]);\n                    }\n                }\n                module1.exports = {\n                    WebGL2KernelValueUnsignedArray: WebGL2KernelValueUnsignedArray\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"../../web-gl/kernel-value/unsigned-array\": 68\n            }\n        ],\n        104: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"../../../utils\");\n                const { WebGLKernelValueUnsignedInput: WebGLKernelValueUnsignedInput  } = require1(\"../../web-gl/kernel-value/unsigned-input\");\n                class WebGL2KernelValueUnsignedInput extends WebGLKernelValueUnsignedInput {\n                    getSource() {\n                        const variablePrecision = this.getVariablePrecisionString();\n                        return utils.linesToString([\n                            `uniform ${variablePrecision} sampler2D ${this.id}`,\n                            `${variablePrecision} ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n                            `${variablePrecision} ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`\n                        ]);\n                    }\n                }\n                module1.exports = {\n                    WebGL2KernelValueUnsignedInput: WebGL2KernelValueUnsignedInput\n                };\n            },\n            {\n                \"../../../utils\": 114,\n                \"../../web-gl/kernel-value/unsigned-input\": 69\n            }\n        ],\n        105: [\n            function(require1, module1, exports) {\n                const { WebGLKernel: WebGLKernel  } = require1(\"../web-gl/kernel\");\n                const { WebGL2FunctionNode: WebGL2FunctionNode  } = require1(\"./function-node\");\n                const { FunctionBuilder: FunctionBuilder  } = require1(\"../function-builder\");\n                const { utils: utils  } = require1(\"../../utils\");\n                const { fragmentShader: fragmentShader  } = require1(\"./fragment-shader\");\n                const { vertexShader: vertexShader  } = require1(\"./vertex-shader\");\n                const { lookupKernelValueType: lookupKernelValueType  } = require1(\"./kernel-value-maps\");\n                let isSupported = null;\n                let testCanvas = null;\n                let testContext = null;\n                let testExtensions = null;\n                let features = null;\n                class WebGL2Kernel extends WebGLKernel {\n                    static get isSupported() {\n                        if (isSupported !== null) return isSupported;\n                        this.setupFeatureChecks();\n                        isSupported = this.isContextMatch(testContext);\n                        return isSupported;\n                    }\n                    static setupFeatureChecks() {\n                        if (typeof document !== \"undefined\") testCanvas = document.createElement(\"canvas\");\n                        else if (typeof OffscreenCanvas !== \"undefined\") testCanvas = new OffscreenCanvas(0, 0);\n                        if (!testCanvas) return;\n                        testContext = testCanvas.getContext(\"webgl2\");\n                        if (!testContext || !testContext.getExtension) return;\n                        testExtensions = {\n                            EXT_color_buffer_float: testContext.getExtension(\"EXT_color_buffer_float\"),\n                            OES_texture_float_linear: testContext.getExtension(\"OES_texture_float_linear\")\n                        };\n                        features = this.getFeatures();\n                    }\n                    static isContextMatch(context) {\n                        if (typeof WebGL2RenderingContext !== \"undefined\") return context instanceof WebGL2RenderingContext;\n                        return false;\n                    }\n                    static getFeatures() {\n                        const gl = this.testContext;\n                        return Object.freeze({\n                            isFloatRead: this.getIsFloatRead(),\n                            isIntegerDivisionAccurate: this.getIsIntegerDivisionAccurate(),\n                            isSpeedTacticSupported: this.getIsSpeedTacticSupported(),\n                            kernelMap: true,\n                            isTextureFloat: true,\n                            isDrawBuffers: true,\n                            channelCount: this.getChannelCount(),\n                            maxTextureSize: this.getMaxTextureSize(),\n                            lowIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT),\n                            lowFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT),\n                            mediumIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT),\n                            mediumFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT),\n                            highIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT),\n                            highFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT)\n                        });\n                    }\n                    static getIsTextureFloat() {\n                        return true;\n                    }\n                    static getChannelCount() {\n                        return testContext.getParameter(testContext.MAX_DRAW_BUFFERS);\n                    }\n                    static getMaxTextureSize() {\n                        return testContext.getParameter(testContext.MAX_TEXTURE_SIZE);\n                    }\n                    static lookupKernelValueType(type, dynamic, precision, value1) {\n                        return lookupKernelValueType(type, dynamic, precision, value1);\n                    }\n                    static get testCanvas() {\n                        return testCanvas;\n                    }\n                    static get testContext() {\n                        return testContext;\n                    }\n                    static get features() {\n                        return features;\n                    }\n                    static get fragmentShader() {\n                        return fragmentShader;\n                    }\n                    static get vertexShader() {\n                        return vertexShader;\n                    }\n                    initContext() {\n                        const settings = {\n                            alpha: false,\n                            depth: false,\n                            antialias: false\n                        };\n                        return this.canvas.getContext(\"webgl2\", settings);\n                    }\n                    initExtensions() {\n                        this.extensions = {\n                            EXT_color_buffer_float: this.context.getExtension(\"EXT_color_buffer_float\"),\n                            OES_texture_float_linear: this.context.getExtension(\"OES_texture_float_linear\")\n                        };\n                    }\n                    validateSettings(args) {\n                        if (!this.validate) {\n                            this.texSize = utils.getKernelTextureSize({\n                                optimizeFloatMemory: this.optimizeFloatMemory,\n                                precision: this.precision\n                            }, this.output);\n                            return;\n                        }\n                        const { features: features  } = this.constructor;\n                        if (this.precision === \"single\" && !features.isFloatRead) throw new Error(\"Float texture outputs are not supported\");\n                        else if (!this.graphical && this.precision === null) this.precision = features.isFloatRead ? \"single\" : \"unsigned\";\n                        if (this.fixIntegerDivisionAccuracy === null) this.fixIntegerDivisionAccuracy = !features.isIntegerDivisionAccurate;\n                        else if (this.fixIntegerDivisionAccuracy && features.isIntegerDivisionAccurate) this.fixIntegerDivisionAccuracy = false;\n                        this.checkOutput();\n                        if (!this.output || this.output.length === 0) {\n                            if (args.length !== 1) throw new Error(\"Auto output only supported for kernels with only one input\");\n                            const argType = utils.getVariableType(args[0], this.strictIntegers);\n                            switch(argType){\n                                case \"Array\":\n                                    this.output = utils.getDimensions(argType);\n                                    break;\n                                case \"NumberTexture\":\n                                case \"MemoryOptimizedNumberTexture\":\n                                case \"ArrayTexture(1)\":\n                                case \"ArrayTexture(2)\":\n                                case \"ArrayTexture(3)\":\n                                case \"ArrayTexture(4)\":\n                                    this.output = args[0].output;\n                                    break;\n                                default:\n                                    throw new Error(\"Auto output not supported for input type: \" + argType);\n                            }\n                        }\n                        if (this.graphical) {\n                            if (this.output.length !== 2) throw new Error(\"Output must have 2 dimensions on graphical mode\");\n                            if (this.precision === \"single\") {\n                                console.warn(\"Cannot use graphical mode and single precision at the same time\");\n                                this.precision = \"unsigned\";\n                            }\n                            this.texSize = utils.clone(this.output);\n                            return;\n                        } else if (!this.graphical && this.precision === null && features.isTextureFloat) this.precision = \"single\";\n                        this.texSize = utils.getKernelTextureSize({\n                            optimizeFloatMemory: this.optimizeFloatMemory,\n                            precision: this.precision\n                        }, this.output);\n                        this.checkTextureSize();\n                    }\n                    translateSource() {\n                        const functionBuilder = FunctionBuilder.fromKernel(this, WebGL2FunctionNode, {\n                            fixIntegerDivisionAccuracy: this.fixIntegerDivisionAccuracy\n                        });\n                        this.translatedSource = functionBuilder.getPrototypeString(\"kernel\");\n                        this.setupReturnTypes(functionBuilder);\n                    }\n                    drawBuffers() {\n                        this.context.drawBuffers(this.drawBuffersMap);\n                    }\n                    getTextureFormat() {\n                        const { context: gl  } = this;\n                        switch(this.getInternalFormat()){\n                            case gl.R32F:\n                                return gl.RED;\n                            case gl.RG32F:\n                                return gl.RG;\n                            case gl.RGBA32F:\n                                return gl.RGBA;\n                            case gl.RGBA:\n                                return gl.RGBA;\n                            default:\n                                throw new Error(\"Unknown internal format\");\n                        }\n                    }\n                    getInternalFormat() {\n                        const { context: gl  } = this;\n                        if (this.precision === \"single\") {\n                            if (this.pipeline) switch(this.returnType){\n                                case \"Number\":\n                                case \"Float\":\n                                case \"Integer\":\n                                    if (this.optimizeFloatMemory) return gl.RGBA32F;\n                                    else return gl.R32F;\n                                case \"Array(2)\":\n                                    return gl.RG32F;\n                                case \"Array(3)\":\n                                case \"Array(4)\":\n                                    return gl.RGBA32F;\n                                default:\n                                    throw new Error(\"Unhandled return type\");\n                            }\n                            return gl.RGBA32F;\n                        }\n                        return gl.RGBA;\n                    }\n                    _setupOutputTexture() {\n                        const gl = this.context;\n                        if (this.texture) {\n                            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture.texture, 0);\n                            return;\n                        }\n                        gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n                        const texture = gl.createTexture();\n                        const texSize = this.texSize;\n                        gl.activeTexture(gl.TEXTURE0 + this.constantTextureCount + this.argumentTextureCount);\n                        gl.bindTexture(gl.TEXTURE_2D, texture);\n                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n                        const format = this.getInternalFormat();\n                        if (this.precision === \"single\") gl.texStorage2D(gl.TEXTURE_2D, 1, format, texSize[0], texSize[1]);\n                        else gl.texImage2D(gl.TEXTURE_2D, 0, format, texSize[0], texSize[1], 0, format, gl.UNSIGNED_BYTE, null);\n                        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n                        this.texture = new this.TextureConstructor({\n                            texture: texture,\n                            size: texSize,\n                            dimensions: this.threadDim,\n                            output: this.output,\n                            context: this.context,\n                            internalFormat: this.getInternalFormat(),\n                            textureFormat: this.getTextureFormat(),\n                            kernel: this\n                        });\n                    }\n                    _setupSubOutputTextures() {\n                        const gl = this.context;\n                        if (this.mappedTextures) {\n                            for(let i = 0; i < this.subKernels.length; i++)gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i + 1, gl.TEXTURE_2D, this.mappedTextures[i].texture, 0);\n                            return;\n                        }\n                        const texSize = this.texSize;\n                        this.drawBuffersMap = [\n                            gl.COLOR_ATTACHMENT0\n                        ];\n                        this.mappedTextures = [];\n                        for(let i = 0; i < this.subKernels.length; i++){\n                            const texture = this.createTexture();\n                            this.drawBuffersMap.push(gl.COLOR_ATTACHMENT0 + i + 1);\n                            gl.activeTexture(gl.TEXTURE0 + this.constantTextureCount + this.argumentTextureCount + i);\n                            gl.bindTexture(gl.TEXTURE_2D, texture);\n                            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n                            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n                            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n                            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n                            const format = this.getInternalFormat();\n                            if (this.precision === \"single\") gl.texStorage2D(gl.TEXTURE_2D, 1, format, texSize[0], texSize[1]);\n                            else gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n                            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i + 1, gl.TEXTURE_2D, texture, 0);\n                            this.mappedTextures.push(new this.TextureConstructor({\n                                texture: texture,\n                                size: texSize,\n                                dimensions: this.threadDim,\n                                output: this.output,\n                                context: this.context,\n                                internalFormat: this.getInternalFormat(),\n                                textureFormat: this.getTextureFormat(),\n                                kernel: this\n                            }));\n                        }\n                    }\n                    _getHeaderString() {\n                        return \"\";\n                    }\n                    _getTextureCoordinate() {\n                        const subKernels = this.subKernels;\n                        const variablePrecision = this.getVariablePrecisionString(this.texSize, this.tactic);\n                        if (subKernels === null || subKernels.length < 1) return `in ${variablePrecision} vec2 vTexCoord;\\n`;\n                        else return `out ${variablePrecision} vec2 vTexCoord;\\n`;\n                    }\n                    _getMainArgumentsString(args) {\n                        const result = [];\n                        const argumentNames = this.argumentNames;\n                        for(let i = 0; i < argumentNames.length; i++)result.push(this.kernelArguments[i].getSource(args[i]));\n                        return result.join(\"\");\n                    }\n                    getKernelString() {\n                        const result = [\n                            this.getKernelResultDeclaration()\n                        ];\n                        const subKernels = this.subKernels;\n                        if (subKernels !== null) {\n                            result.push(\"layout(location = 0) out vec4 data0\");\n                            switch(this.returnType){\n                                case \"Number\":\n                                case \"Float\":\n                                case \"Integer\":\n                                    for(let i = 0; i < subKernels.length; i++){\n                                        const subKernel = subKernels[i];\n                                        result.push(subKernel.returnType === \"Integer\" ? `int subKernelResult_${subKernel.name} = 0` : `float subKernelResult_${subKernel.name} = 0.0`, `layout(location = ${i + 1}) out vec4 data${i + 1}`);\n                                    }\n                                    break;\n                                case \"Array(2)\":\n                                    for(let i = 0; i < subKernels.length; i++)result.push(`vec2 subKernelResult_${subKernels[i].name}`, `layout(location = ${i + 1}) out vec4 data${i + 1}`);\n                                    break;\n                                case \"Array(3)\":\n                                    for(let i = 0; i < subKernels.length; i++)result.push(`vec3 subKernelResult_${subKernels[i].name}`, `layout(location = ${i + 1}) out vec4 data${i + 1}`);\n                                    break;\n                                case \"Array(4)\":\n                                    for(let i = 0; i < subKernels.length; i++)result.push(`vec4 subKernelResult_${subKernels[i].name}`, `layout(location = ${i + 1}) out vec4 data${i + 1}`);\n                                    break;\n                            }\n                        } else result.push(\"out vec4 data0\");\n                        return utils.linesToString(result) + this.translatedSource;\n                    }\n                    getMainResultGraphical() {\n                        return utils.linesToString([\n                            \"  threadId = indexTo3D(index, uOutputDim)\",\n                            \"  kernel()\",\n                            \"  data0 = actualColor\"\n                        ]);\n                    }\n                    getMainResultPackedPixels() {\n                        switch(this.returnType){\n                            case \"LiteralInteger\":\n                            case \"Number\":\n                            case \"Integer\":\n                            case \"Float\":\n                                return this.getMainResultKernelPackedPixels() + this.getMainResultSubKernelPackedPixels();\n                            default:\n                                throw new Error(`packed output only usable with Numbers, \"${this.returnType}\" specified`);\n                        }\n                    }\n                    getMainResultKernelPackedPixels() {\n                        return utils.linesToString([\n                            \"  threadId = indexTo3D(index, uOutputDim)\",\n                            \"  kernel()\",\n                            `  data0 = ${this.useLegacyEncoder ? \"legacyEncode32\" : \"encode32\"}(kernelResult)`\n                        ]);\n                    }\n                    getMainResultSubKernelPackedPixels() {\n                        const result = [];\n                        if (!this.subKernels) return \"\";\n                        for(let i = 0; i < this.subKernels.length; i++){\n                            const subKernel = this.subKernels[i];\n                            if (subKernel.returnType === \"Integer\") result.push(`  data${i + 1} = ${this.useLegacyEncoder ? \"legacyEncode32\" : \"encode32\"}(float(subKernelResult_${this.subKernels[i].name}))`);\n                            else result.push(`  data${i + 1} = ${this.useLegacyEncoder ? \"legacyEncode32\" : \"encode32\"}(subKernelResult_${this.subKernels[i].name})`);\n                        }\n                        return utils.linesToString(result);\n                    }\n                    getMainResultKernelMemoryOptimizedFloats(result, channel) {\n                        result.push(\"  threadId = indexTo3D(index, uOutputDim)\", \"  kernel()\", `  data0.${channel} = kernelResult`);\n                    }\n                    getMainResultSubKernelMemoryOptimizedFloats(result, channel) {\n                        if (!this.subKernels) return result;\n                        for(let i = 0; i < this.subKernels.length; i++){\n                            const subKernel = this.subKernels[i];\n                            if (subKernel.returnType === \"Integer\") result.push(`  data${i + 1}.${channel} = float(subKernelResult_${subKernel.name})`);\n                            else result.push(`  data${i + 1}.${channel} = subKernelResult_${subKernel.name}`);\n                        }\n                    }\n                    getMainResultKernelNumberTexture() {\n                        return [\n                            \"  threadId = indexTo3D(index, uOutputDim)\",\n                            \"  kernel()\",\n                            \"  data0[0] = kernelResult\"\n                        ];\n                    }\n                    getMainResultSubKernelNumberTexture() {\n                        const result = [];\n                        if (!this.subKernels) return result;\n                        for(let i = 0; i < this.subKernels.length; ++i){\n                            const subKernel = this.subKernels[i];\n                            if (subKernel.returnType === \"Integer\") result.push(`  data${i + 1}[0] = float(subKernelResult_${subKernel.name})`);\n                            else result.push(`  data${i + 1}[0] = subKernelResult_${subKernel.name}`);\n                        }\n                        return result;\n                    }\n                    getMainResultKernelArray2Texture() {\n                        return [\n                            \"  threadId = indexTo3D(index, uOutputDim)\",\n                            \"  kernel()\",\n                            \"  data0[0] = kernelResult[0]\",\n                            \"  data0[1] = kernelResult[1]\"\n                        ];\n                    }\n                    getMainResultSubKernelArray2Texture() {\n                        const result = [];\n                        if (!this.subKernels) return result;\n                        for(let i = 0; i < this.subKernels.length; ++i){\n                            const subKernel = this.subKernels[i];\n                            result.push(`  data${i + 1}[0] = subKernelResult_${subKernel.name}[0]`, `  data${i + 1}[1] = subKernelResult_${subKernel.name}[1]`);\n                        }\n                        return result;\n                    }\n                    getMainResultKernelArray3Texture() {\n                        return [\n                            \"  threadId = indexTo3D(index, uOutputDim)\",\n                            \"  kernel()\",\n                            \"  data0[0] = kernelResult[0]\",\n                            \"  data0[1] = kernelResult[1]\",\n                            \"  data0[2] = kernelResult[2]\"\n                        ];\n                    }\n                    getMainResultSubKernelArray3Texture() {\n                        const result = [];\n                        if (!this.subKernels) return result;\n                        for(let i = 0; i < this.subKernels.length; ++i){\n                            const subKernel = this.subKernels[i];\n                            result.push(`  data${i + 1}[0] = subKernelResult_${subKernel.name}[0]`, `  data${i + 1}[1] = subKernelResult_${subKernel.name}[1]`, `  data${i + 1}[2] = subKernelResult_${subKernel.name}[2]`);\n                        }\n                        return result;\n                    }\n                    getMainResultKernelArray4Texture() {\n                        return [\n                            \"  threadId = indexTo3D(index, uOutputDim)\",\n                            \"  kernel()\",\n                            \"  data0 = kernelResult\"\n                        ];\n                    }\n                    getMainResultSubKernelArray4Texture() {\n                        const result = [];\n                        if (!this.subKernels) return result;\n                        for(let i = 0; i < this.subKernels.length; ++i)result.push(`  data${i + 1} = subKernelResult_${this.subKernels[i].name}`);\n                        return result;\n                    }\n                    destroyExtensions() {\n                        this.extensions.EXT_color_buffer_float = null;\n                        this.extensions.OES_texture_float_linear = null;\n                    }\n                    toJSON() {\n                        const json = super.toJSON();\n                        json.functionNodes = FunctionBuilder.fromKernel(this, WebGL2FunctionNode).toJSON();\n                        json.settings.threadDim = this.threadDim;\n                        return json;\n                    }\n                }\n                module1.exports = {\n                    WebGL2Kernel: WebGL2Kernel\n                };\n            },\n            {\n                \"../../utils\": 114,\n                \"../function-builder\": 9,\n                \"../web-gl/kernel\": 70,\n                \"./fragment-shader\": 72,\n                \"./function-node\": 73,\n                \"./kernel-value-maps\": 74,\n                \"./vertex-shader\": 106\n            }\n        ],\n        106: [\n            function(require1, module1, exports) {\n                const vertexShader = `#version 300 es\n__FLOAT_TACTIC_DECLARATION__;\n__INT_TACTIC_DECLARATION__;\n__SAMPLER_2D_TACTIC_DECLARATION__;\n\nin vec2 aPos;\nin vec2 aTexCoord;\n\nout vec2 vTexCoord;\nuniform vec2 ratio;\n\nvoid main(void) {\n  gl_Position = vec4((aPos + vec2(1)) * ratio + vec2(-1), 0, 1);\n  vTexCoord = aTexCoord;\n}`;\n                module1.exports = {\n                    vertexShader: vertexShader\n                };\n            },\n            {}\n        ],\n        107: [\n            function(require1, module1, exports) {\n                const lib = require1(\"./index\");\n                const GPU = lib.GPU;\n                for(const p in lib){\n                    if (!lib.hasOwnProperty(p)) continue;\n                    if (p === \"GPU\") continue;\n                    GPU[p] = lib[p];\n                }\n                if (typeof window !== \"undefined\") bindTo(window);\n                if (typeof self !== \"undefined\") bindTo(self);\n                function bindTo(target) {\n                    if (target.GPU) return;\n                    Object.defineProperty(target, \"GPU\", {\n                        get () {\n                            return GPU;\n                        }\n                    });\n                }\n                module1.exports = lib;\n            },\n            {\n                \"./index\": 109\n            }\n        ],\n        108: [\n            function(require1, module1, exports) {\n                const { gpuMock: gpuMock  } = require1(\"gpu-mock.js\");\n                const { utils: utils  } = require1(\"./utils\");\n                const { Kernel: Kernel  } = require1(\"./backend/kernel\");\n                const { CPUKernel: CPUKernel  } = require1(\"./backend/cpu/kernel\");\n                const { HeadlessGLKernel: HeadlessGLKernel  } = require1(\"./backend/headless-gl/kernel\");\n                const { WebGL2Kernel: WebGL2Kernel  } = require1(\"./backend/web-gl2/kernel\");\n                const { WebGLKernel: WebGLKernel  } = require1(\"./backend/web-gl/kernel\");\n                const { kernelRunShortcut: kernelRunShortcut  } = require1(\"./kernel-run-shortcut\");\n                const kernelOrder = [\n                    HeadlessGLKernel,\n                    WebGL2Kernel,\n                    WebGLKernel\n                ];\n                const kernelTypes = [\n                    \"gpu\",\n                    \"cpu\"\n                ];\n                const internalKernels = {\n                    \"headlessgl\": HeadlessGLKernel,\n                    \"webgl2\": WebGL2Kernel,\n                    \"webgl\": WebGLKernel\n                };\n                let validate = true;\n                class GPU {\n                    static disableValidation() {\n                        validate = false;\n                    }\n                    static enableValidation() {\n                        validate = true;\n                    }\n                    static get isGPUSupported() {\n                        return kernelOrder.some((Kernel)=>Kernel.isSupported);\n                    }\n                    static get isKernelMapSupported() {\n                        return kernelOrder.some((Kernel)=>Kernel.isSupported && Kernel.features.kernelMap);\n                    }\n                    static get isOffscreenCanvasSupported() {\n                        return typeof Worker !== \"undefined\" && typeof OffscreenCanvas !== \"undefined\" || typeof importScripts !== \"undefined\";\n                    }\n                    static get isWebGLSupported() {\n                        return WebGLKernel.isSupported;\n                    }\n                    static get isWebGL2Supported() {\n                        return WebGL2Kernel.isSupported;\n                    }\n                    static get isHeadlessGLSupported() {\n                        return HeadlessGLKernel.isSupported;\n                    }\n                    static get isCanvasSupported() {\n                        return typeof HTMLCanvasElement !== \"undefined\";\n                    }\n                    static get isGPUHTMLImageArraySupported() {\n                        return WebGL2Kernel.isSupported;\n                    }\n                    static get isSinglePrecisionSupported() {\n                        return kernelOrder.some((Kernel)=>Kernel.isSupported && Kernel.features.isFloatRead && Kernel.features.isTextureFloat);\n                    }\n                    constructor(settings){\n                        settings = settings || {};\n                        this.canvas = settings.canvas || null;\n                        this.context = settings.context || null;\n                        this.mode = settings.mode;\n                        this.Kernel = null;\n                        this.kernels = [];\n                        this.functions = [];\n                        this.nativeFunctions = [];\n                        this.injectedNative = null;\n                        if (this.mode === \"dev\") return;\n                        this.chooseKernel();\n                        if (settings.functions) for(let i = 0; i < settings.functions.length; i++)this.addFunction(settings.functions[i]);\n                        if (settings.nativeFunctions) for(const p in settings.nativeFunctions){\n                            if (!settings.nativeFunctions.hasOwnProperty(p)) continue;\n                            const s = settings.nativeFunctions[p];\n                            const { name: name1 , source: source  } = s;\n                            this.addNativeFunction(name1, source, s);\n                        }\n                    }\n                    chooseKernel() {\n                        if (this.Kernel) return;\n                        let Kernel = null;\n                        if (this.context) {\n                            for(let i = 0; i < kernelOrder.length; i++){\n                                const ExternalKernel = kernelOrder[i];\n                                if (ExternalKernel.isContextMatch(this.context)) {\n                                    if (!ExternalKernel.isSupported) throw new Error(`Kernel type ${ExternalKernel.name} not supported`);\n                                    Kernel = ExternalKernel;\n                                    break;\n                                }\n                            }\n                            if (Kernel === null) throw new Error(\"unknown Context\");\n                        } else if (this.mode) {\n                            if (this.mode in internalKernels) {\n                                if (!validate || internalKernels[this.mode].isSupported) Kernel = internalKernels[this.mode];\n                            } else if (this.mode === \"gpu\") {\n                                for(let i = 0; i < kernelOrder.length; i++)if (kernelOrder[i].isSupported) {\n                                    Kernel = kernelOrder[i];\n                                    break;\n                                }\n                            } else if (this.mode === \"cpu\") Kernel = CPUKernel;\n                            if (!Kernel) throw new Error(`A requested mode of \"${this.mode}\" and is not supported`);\n                        } else {\n                            for(let i = 0; i < kernelOrder.length; i++)if (kernelOrder[i].isSupported) {\n                                Kernel = kernelOrder[i];\n                                break;\n                            }\n                            if (!Kernel) Kernel = CPUKernel;\n                        }\n                        if (!this.mode) this.mode = Kernel.mode;\n                        this.Kernel = Kernel;\n                    }\n                    createKernel(source, settings) {\n                        if (typeof source === \"undefined\") throw new Error(\"Missing source parameter\");\n                        if (typeof source !== \"object\" && !utils.isFunction(source) && typeof source !== \"string\") throw new Error(\"source parameter not a function\");\n                        const kernels = this.kernels;\n                        if (this.mode === \"dev\") {\n                            const devKernel = gpuMock(source, upgradeDeprecatedCreateKernelSettings(settings));\n                            kernels.push(devKernel);\n                            return devKernel;\n                        }\n                        source = typeof source === \"function\" ? source.toString() : source;\n                        const switchableKernels = {};\n                        const settingsCopy = upgradeDeprecatedCreateKernelSettings(settings) || {};\n                        if (settings && typeof settings.argumentTypes === \"object\") settingsCopy.argumentTypes = Object.keys(settings.argumentTypes).map((argumentName)=>settings.argumentTypes[argumentName]);\n                        function onRequestFallback(args) {\n                            console.warn(\"Falling back to CPU\");\n                            const fallbackKernel = new CPUKernel(source, {\n                                argumentTypes: kernelRun.argumentTypes,\n                                constantTypes: kernelRun.constantTypes,\n                                graphical: kernelRun.graphical,\n                                loopMaxIterations: kernelRun.loopMaxIterations,\n                                constants: kernelRun.constants,\n                                dynamicOutput: kernelRun.dynamicOutput,\n                                dynamicArgument: kernelRun.dynamicArguments,\n                                output: kernelRun.output,\n                                precision: kernelRun.precision,\n                                pipeline: kernelRun.pipeline,\n                                immutable: kernelRun.immutable,\n                                optimizeFloatMemory: kernelRun.optimizeFloatMemory,\n                                fixIntegerDivisionAccuracy: kernelRun.fixIntegerDivisionAccuracy,\n                                functions: kernelRun.functions,\n                                nativeFunctions: kernelRun.nativeFunctions,\n                                injectedNative: kernelRun.injectedNative,\n                                subKernels: kernelRun.subKernels,\n                                strictIntegers: kernelRun.strictIntegers,\n                                debug: kernelRun.debug\n                            });\n                            fallbackKernel.build.apply(fallbackKernel, args);\n                            const result = fallbackKernel.run.apply(fallbackKernel, args);\n                            kernelRun.replaceKernel(fallbackKernel);\n                            return result;\n                        }\n                        function onRequestSwitchKernel(reasons, args, _kernel) {\n                            if (_kernel.debug) console.warn(\"Switching kernels\");\n                            let newOutput = null;\n                            if (_kernel.signature && !switchableKernels[_kernel.signature]) switchableKernels[_kernel.signature] = _kernel;\n                            if (_kernel.dynamicOutput) for(let i = reasons.length - 1; i >= 0; i--){\n                                const reason = reasons[i];\n                                if (reason.type === \"outputPrecisionMismatch\") newOutput = reason.needed;\n                            }\n                            const Constructor = _kernel.constructor;\n                            const argumentTypes = Constructor.getArgumentTypes(_kernel, args);\n                            const signature = Constructor.getSignature(_kernel, argumentTypes);\n                            const existingKernel = switchableKernels[signature];\n                            if (existingKernel) {\n                                existingKernel.onActivate(_kernel);\n                                return existingKernel;\n                            }\n                            const newKernel = switchableKernels[signature] = new Constructor(source, {\n                                argumentTypes: argumentTypes,\n                                constantTypes: _kernel.constantTypes,\n                                graphical: _kernel.graphical,\n                                loopMaxIterations: _kernel.loopMaxIterations,\n                                constants: _kernel.constants,\n                                dynamicOutput: _kernel.dynamicOutput,\n                                dynamicArgument: _kernel.dynamicArguments,\n                                context: _kernel.context,\n                                canvas: _kernel.canvas,\n                                output: newOutput || _kernel.output,\n                                precision: _kernel.precision,\n                                pipeline: _kernel.pipeline,\n                                immutable: _kernel.immutable,\n                                optimizeFloatMemory: _kernel.optimizeFloatMemory,\n                                fixIntegerDivisionAccuracy: _kernel.fixIntegerDivisionAccuracy,\n                                functions: _kernel.functions,\n                                nativeFunctions: _kernel.nativeFunctions,\n                                injectedNative: _kernel.injectedNative,\n                                subKernels: _kernel.subKernels,\n                                strictIntegers: _kernel.strictIntegers,\n                                debug: _kernel.debug,\n                                gpu: _kernel.gpu,\n                                validate: validate,\n                                returnType: _kernel.returnType,\n                                tactic: _kernel.tactic,\n                                onRequestFallback: onRequestFallback,\n                                onRequestSwitchKernel: onRequestSwitchKernel,\n                                texture: _kernel.texture,\n                                mappedTextures: _kernel.mappedTextures,\n                                drawBuffersMap: _kernel.drawBuffersMap\n                            });\n                            newKernel.build.apply(newKernel, args);\n                            kernelRun.replaceKernel(newKernel);\n                            kernels.push(newKernel);\n                            return newKernel;\n                        }\n                        const mergedSettings = Object.assign({\n                            context: this.context,\n                            canvas: this.canvas,\n                            functions: this.functions,\n                            nativeFunctions: this.nativeFunctions,\n                            injectedNative: this.injectedNative,\n                            gpu: this,\n                            validate: validate,\n                            onRequestFallback: onRequestFallback,\n                            onRequestSwitchKernel: onRequestSwitchKernel\n                        }, settingsCopy);\n                        const kernel = new this.Kernel(source, mergedSettings);\n                        const kernelRun = kernelRunShortcut(kernel);\n                        if (!this.canvas) this.canvas = kernel.canvas;\n                        if (!this.context) this.context = kernel.context;\n                        kernels.push(kernel);\n                        return kernelRun;\n                    }\n                    createKernelMap() {\n                        let fn;\n                        let settings;\n                        const argument2Type = typeof arguments[arguments.length - 2];\n                        if (argument2Type === \"function\" || argument2Type === \"string\") {\n                            fn = arguments[arguments.length - 2];\n                            settings = arguments[arguments.length - 1];\n                        } else fn = arguments[arguments.length - 1];\n                        if (this.mode !== \"dev\") {\n                            if (!this.Kernel.isSupported || !this.Kernel.features.kernelMap) {\n                                if (this.mode && kernelTypes.indexOf(this.mode) < 0) throw new Error(`kernelMap not supported on ${this.Kernel.name}`);\n                            }\n                        }\n                        const settingsCopy = upgradeDeprecatedCreateKernelSettings(settings);\n                        if (settings && typeof settings.argumentTypes === \"object\") settingsCopy.argumentTypes = Object.keys(settings.argumentTypes).map((argumentName)=>settings.argumentTypes[argumentName]);\n                        if (Array.isArray(arguments[0])) {\n                            settingsCopy.subKernels = [];\n                            const functions = arguments[0];\n                            for(let i = 0; i < functions.length; i++){\n                                const source = functions[i].toString();\n                                const name1 = utils.getFunctionNameFromString(source);\n                                settingsCopy.subKernels.push({\n                                    name: name1,\n                                    source: source,\n                                    property: i\n                                });\n                            }\n                        } else {\n                            settingsCopy.subKernels = [];\n                            const functions = arguments[0];\n                            for(let p in functions){\n                                if (!functions.hasOwnProperty(p)) continue;\n                                const source = functions[p].toString();\n                                const name1 = utils.getFunctionNameFromString(source);\n                                settingsCopy.subKernels.push({\n                                    name: name1 || p,\n                                    source: source,\n                                    property: p\n                                });\n                            }\n                        }\n                        return this.createKernel(fn, settingsCopy);\n                    }\n                    combineKernels() {\n                        const firstKernel = arguments[0];\n                        const combinedKernel = arguments[arguments.length - 1];\n                        if (firstKernel.kernel.constructor.mode === \"cpu\") return combinedKernel;\n                        const canvas = arguments[0].canvas;\n                        const context = arguments[0].context;\n                        const max = arguments.length - 1;\n                        for(let i = 0; i < max; i++)arguments[i].setCanvas(canvas).setContext(context).setPipeline(true);\n                        return function() {\n                            const texture = combinedKernel.apply(this, arguments);\n                            if (texture.toArray) return texture.toArray();\n                            return texture;\n                        };\n                    }\n                    setFunctions(functions) {\n                        this.functions = functions;\n                        return this;\n                    }\n                    setNativeFunctions(nativeFunctions) {\n                        this.nativeFunctions = nativeFunctions;\n                        return this;\n                    }\n                    addFunction(source, settings) {\n                        this.functions.push({\n                            source: source,\n                            settings: settings\n                        });\n                        return this;\n                    }\n                    addNativeFunction(name1, source, settings) {\n                        if (this.kernels.length > 0) throw new Error('Cannot call \"addNativeFunction\" after \"createKernels\" has been called.');\n                        this.nativeFunctions.push(Object.assign({\n                            name: name1,\n                            source: source\n                        }, settings));\n                        return this;\n                    }\n                    injectNative(source) {\n                        this.injectedNative = source;\n                        return this;\n                    }\n                    destroy() {\n                        return new Promise((resolve, reject)=>{\n                            if (!this.kernels) resolve();\n                            setTimeout(()=>{\n                                try {\n                                    for(let i = 0; i < this.kernels.length; i++)this.kernels[i].destroy(true);\n                                    let firstKernel = this.kernels[0];\n                                    if (firstKernel) {\n                                        if (firstKernel.kernel) firstKernel = firstKernel.kernel;\n                                        if (firstKernel.constructor.destroyContext) firstKernel.constructor.destroyContext(this.context);\n                                    }\n                                } catch (e) {\n                                    reject(e);\n                                }\n                                resolve();\n                            }, 0);\n                        });\n                    }\n                }\n                function upgradeDeprecatedCreateKernelSettings(settings) {\n                    if (!settings) return {};\n                    const upgradedSettings = Object.assign({}, settings);\n                    if (settings.hasOwnProperty(\"floatOutput\")) {\n                        utils.warnDeprecated(\"setting\", \"floatOutput\", \"precision\");\n                        upgradedSettings.precision = settings.floatOutput ? \"single\" : \"unsigned\";\n                    }\n                    if (settings.hasOwnProperty(\"outputToTexture\")) {\n                        utils.warnDeprecated(\"setting\", \"outputToTexture\", \"pipeline\");\n                        upgradedSettings.pipeline = Boolean(settings.outputToTexture);\n                    }\n                    if (settings.hasOwnProperty(\"outputImmutable\")) {\n                        utils.warnDeprecated(\"setting\", \"outputImmutable\", \"immutable\");\n                        upgradedSettings.immutable = Boolean(settings.outputImmutable);\n                    }\n                    if (settings.hasOwnProperty(\"floatTextures\")) {\n                        utils.warnDeprecated(\"setting\", \"floatTextures\", \"optimizeFloatMemory\");\n                        upgradedSettings.optimizeFloatMemory = Boolean(settings.floatTextures);\n                    }\n                    return upgradedSettings;\n                }\n                module1.exports = {\n                    GPU: GPU,\n                    kernelOrder: kernelOrder,\n                    kernelTypes: kernelTypes\n                };\n            },\n            {\n                \"./backend/cpu/kernel\": 8,\n                \"./backend/headless-gl/kernel\": 34,\n                \"./backend/kernel\": 36,\n                \"./backend/web-gl/kernel\": 70,\n                \"./backend/web-gl2/kernel\": 105,\n                \"./kernel-run-shortcut\": 111,\n                \"./utils\": 114,\n                \"gpu-mock.js\": 4\n            }\n        ],\n        109: [\n            function(require1, module1, exports) {\n                const { GPU: GPU  } = require1(\"./gpu\");\n                const { alias: alias  } = require1(\"./alias\");\n                const { utils: utils  } = require1(\"./utils\");\n                const { Input: Input , input: input  } = require1(\"./input\");\n                const { Texture: Texture  } = require1(\"./texture\");\n                const { FunctionBuilder: FunctionBuilder  } = require1(\"./backend/function-builder\");\n                const { FunctionNode: FunctionNode  } = require1(\"./backend/function-node\");\n                const { CPUFunctionNode: CPUFunctionNode  } = require1(\"./backend/cpu/function-node\");\n                const { CPUKernel: CPUKernel  } = require1(\"./backend/cpu/kernel\");\n                const { HeadlessGLKernel: HeadlessGLKernel  } = require1(\"./backend/headless-gl/kernel\");\n                const { WebGLFunctionNode: WebGLFunctionNode  } = require1(\"./backend/web-gl/function-node\");\n                const { WebGLKernel: WebGLKernel  } = require1(\"./backend/web-gl/kernel\");\n                const { kernelValueMaps: webGLKernelValueMaps  } = require1(\"./backend/web-gl/kernel-value-maps\");\n                const { WebGL2FunctionNode: WebGL2FunctionNode  } = require1(\"./backend/web-gl2/function-node\");\n                const { WebGL2Kernel: WebGL2Kernel  } = require1(\"./backend/web-gl2/kernel\");\n                const { kernelValueMaps: webGL2KernelValueMaps  } = require1(\"./backend/web-gl2/kernel-value-maps\");\n                const { GLKernel: GLKernel  } = require1(\"./backend/gl/kernel\");\n                const { Kernel: Kernel  } = require1(\"./backend/kernel\");\n                const { FunctionTracer: FunctionTracer  } = require1(\"./backend/function-tracer\");\n                const mathRandom = require1(\"./plugins/math-random-uniformly-distributed\");\n                module1.exports = {\n                    alias: alias,\n                    CPUFunctionNode: CPUFunctionNode,\n                    CPUKernel: CPUKernel,\n                    GPU: GPU,\n                    FunctionBuilder: FunctionBuilder,\n                    FunctionNode: FunctionNode,\n                    HeadlessGLKernel: HeadlessGLKernel,\n                    Input: Input,\n                    input: input,\n                    Texture: Texture,\n                    utils: utils,\n                    WebGL2FunctionNode: WebGL2FunctionNode,\n                    WebGL2Kernel: WebGL2Kernel,\n                    webGL2KernelValueMaps: webGL2KernelValueMaps,\n                    WebGLFunctionNode: WebGLFunctionNode,\n                    WebGLKernel: WebGLKernel,\n                    webGLKernelValueMaps: webGLKernelValueMaps,\n                    GLKernel: GLKernel,\n                    Kernel: Kernel,\n                    FunctionTracer: FunctionTracer,\n                    plugins: {\n                        mathRandom: mathRandom\n                    }\n                };\n            },\n            {\n                \"./alias\": 5,\n                \"./backend/cpu/function-node\": 6,\n                \"./backend/cpu/kernel\": 8,\n                \"./backend/function-builder\": 9,\n                \"./backend/function-node\": 10,\n                \"./backend/function-tracer\": 11,\n                \"./backend/gl/kernel\": 13,\n                \"./backend/headless-gl/kernel\": 34,\n                \"./backend/kernel\": 36,\n                \"./backend/web-gl/function-node\": 38,\n                \"./backend/web-gl/kernel\": 70,\n                \"./backend/web-gl/kernel-value-maps\": 39,\n                \"./backend/web-gl2/function-node\": 73,\n                \"./backend/web-gl2/kernel\": 105,\n                \"./backend/web-gl2/kernel-value-maps\": 74,\n                \"./gpu\": 108,\n                \"./input\": 110,\n                \"./plugins/math-random-uniformly-distributed\": 112,\n                \"./texture\": 113,\n                \"./utils\": 114\n            }\n        ],\n        110: [\n            function(require1, module1, exports) {\n                class Input {\n                    constructor(value1, size){\n                        this.value = value1;\n                        if (Array.isArray(size)) this.size = size;\n                        else {\n                            this.size = new Int32Array(3);\n                            if (size.z) this.size = new Int32Array([\n                                size.x,\n                                size.y,\n                                size.z\n                            ]);\n                            else if (size.y) this.size = new Int32Array([\n                                size.x,\n                                size.y\n                            ]);\n                            else this.size = new Int32Array([\n                                size.x\n                            ]);\n                        }\n                        const [w, h, d] = this.size;\n                        if (d) {\n                            if (this.value.length !== w * h * d) throw new Error(`Input size ${this.value.length} does not match ${w} * ${h} * ${d} = ${h * w * d}`);\n                        } else if (h) {\n                            if (this.value.length !== w * h) throw new Error(`Input size ${this.value.length} does not match ${w} * ${h} = ${h * w}`);\n                        } else {\n                            if (this.value.length !== w) throw new Error(`Input size ${this.value.length} does not match ${w}`);\n                        }\n                    }\n                    toArray() {\n                        const { utils: utils  } = require1(\"./utils\");\n                        const [w, h, d] = this.size;\n                        if (d) return utils.erectMemoryOptimized3DFloat(this.value.subarray ? this.value : new Float32Array(this.value), w, h, d);\n                        else if (h) return utils.erectMemoryOptimized2DFloat(this.value.subarray ? this.value : new Float32Array(this.value), w, h);\n                        else return this.value;\n                    }\n                }\n                function input(value1, size) {\n                    return new Input(value1, size);\n                }\n                module1.exports = {\n                    Input: Input,\n                    input: input\n                };\n            },\n            {\n                \"./utils\": 114\n            }\n        ],\n        111: [\n            function(require1, module1, exports) {\n                const { utils: utils  } = require1(\"./utils\");\n                function kernelRunShortcut(kernel) {\n                    let run = function() {\n                        kernel.build.apply(kernel, arguments);\n                        run = function() {\n                            let result = kernel.run.apply(kernel, arguments);\n                            if (kernel.switchingKernels) {\n                                const reasons = kernel.resetSwitchingKernels();\n                                const newKernel = kernel.onRequestSwitchKernel(reasons, arguments, kernel);\n                                shortcut.kernel = kernel = newKernel;\n                                result = newKernel.run.apply(newKernel, arguments);\n                            }\n                            if (kernel.renderKernels) return kernel.renderKernels();\n                            else if (kernel.renderOutput) return kernel.renderOutput();\n                            else return result;\n                        };\n                        return run.apply(kernel, arguments);\n                    };\n                    const shortcut = function() {\n                        return run.apply(kernel, arguments);\n                    };\n                    shortcut.exec = function() {\n                        return new Promise((accept, reject)=>{\n                            try {\n                                accept(run.apply(this, arguments));\n                            } catch (e) {\n                                reject(e);\n                            }\n                        });\n                    };\n                    shortcut.replaceKernel = function(replacementKernel) {\n                        kernel = replacementKernel;\n                        bindKernelToShortcut(kernel, shortcut);\n                    };\n                    bindKernelToShortcut(kernel, shortcut);\n                    return shortcut;\n                }\n                function bindKernelToShortcut(kernel, shortcut) {\n                    if (shortcut.kernel) {\n                        shortcut.kernel = kernel;\n                        return;\n                    }\n                    const properties = utils.allPropertiesOf(kernel);\n                    for(let i = 0; i < properties.length; i++){\n                        const property = properties[i];\n                        if (property[0] === \"_\" && property[1] === \"_\") continue;\n                        if (typeof kernel[property] === \"function\") {\n                            if (property.substring(0, 3) === \"add\" || property.substring(0, 3) === \"set\") shortcut[property] = function() {\n                                shortcut.kernel[property].apply(shortcut.kernel, arguments);\n                                return shortcut;\n                            };\n                            else shortcut[property] = function() {\n                                return shortcut.kernel[property].apply(shortcut.kernel, arguments);\n                            };\n                        } else {\n                            shortcut.__defineGetter__(property, ()=>shortcut.kernel[property]);\n                            shortcut.__defineSetter__(property, (value1)=>{\n                                shortcut.kernel[property] = value1;\n                            });\n                        }\n                    }\n                    shortcut.kernel = kernel;\n                }\n                module1.exports = {\n                    kernelRunShortcut: kernelRunShortcut\n                };\n            },\n            {\n                \"./utils\": 114\n            }\n        ],\n        112: [\n            function(require1, module1, exports) {\n                const source = `// https://www.shadertoy.com/view/4t2SDh\n//note: uniformly distributed, normalized rand, [0,1]\nhighp float randomSeedShift = 1.0;\nhighp float slide = 1.0;\nuniform highp float randomSeed1;\nuniform highp float randomSeed2;\n\nhighp float nrand(highp vec2 n) {\n  highp float result = fract(sin(dot((n.xy + 1.0) * vec2(randomSeed1 * slide, randomSeed2 * randomSeedShift), vec2(12.9898, 78.233))) * 43758.5453);\n  randomSeedShift = result;\n  if (randomSeedShift > 0.5) {\n    slide += 0.00009; \n  } else {\n    slide += 0.0009;\n  }\n  return result;\n}`;\n                const name1 = \"math-random-uniformly-distributed\";\n                const functionMatch = `Math.random()`;\n                const functionReplace = `nrand(vTexCoord)`;\n                const functionReturnType = \"Number\";\n                const onBeforeRun = (kernel)=>{\n                    kernel.setUniform1f(\"randomSeed1\", Math.random());\n                    kernel.setUniform1f(\"randomSeed2\", Math.random());\n                };\n                const plugin = {\n                    name: name1,\n                    onBeforeRun: onBeforeRun,\n                    functionMatch: functionMatch,\n                    functionReplace: functionReplace,\n                    functionReturnType: functionReturnType,\n                    source: source\n                };\n                module1.exports = plugin;\n            },\n            {}\n        ],\n        113: [\n            function(require1, module1, exports) {\n                class Texture {\n                    constructor(settings){\n                        const { texture: texture , size: size , dimensions: dimensions , output: output , context: context , type: type = \"NumberTexture\" , kernel: kernel , internalFormat: internalFormat , textureFormat: textureFormat  } = settings;\n                        if (!output) throw new Error('settings property \"output\" required.');\n                        if (!context) throw new Error('settings property \"context\" required.');\n                        if (!texture) throw new Error('settings property \"texture\" required.');\n                        if (!kernel) throw new Error('settings property \"kernel\" required.');\n                        this.texture = texture;\n                        if (texture._refs) texture._refs++;\n                        else texture._refs = 1;\n                        this.size = size;\n                        this.dimensions = dimensions;\n                        this.output = output;\n                        this.context = context;\n                        this.kernel = kernel;\n                        this.type = type;\n                        this._deleted = false;\n                        this.internalFormat = internalFormat;\n                        this.textureFormat = textureFormat;\n                    }\n                    toArray() {\n                        throw new Error(`Not implemented on ${this.constructor.name}`);\n                    }\n                    clone() {\n                        throw new Error(`Not implemented on ${this.constructor.name}`);\n                    }\n                    delete() {\n                        throw new Error(`Not implemented on ${this.constructor.name}`);\n                    }\n                    clear() {\n                        throw new Error(`Not implemented on ${this.constructor.name}`);\n                    }\n                }\n                module1.exports = {\n                    Texture: Texture\n                };\n            },\n            {}\n        ],\n        114: [\n            function(require1, module1, exports) {\n                const acorn = require1(\"acorn\");\n                const { Input: Input  } = require1(\"./input\");\n                const { Texture: Texture  } = require1(\"./texture\");\n                const FUNCTION_NAME = /function ([^(]*)/;\n                const STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n                const ARGUMENT_NAMES = /([^\\s,]+)/g;\n                const utils = {\n                    systemEndianness () {\n                        return _systemEndianness;\n                    },\n                    getSystemEndianness () {\n                        const b = new ArrayBuffer(4);\n                        const a = new Uint32Array(b);\n                        const c = new Uint8Array(b);\n                        a[0] = 0xdeadbeef;\n                        if (c[0] === 0xef) return \"LE\";\n                        if (c[0] === 0xde) return \"BE\";\n                        throw new Error(\"unknown endianness\");\n                    },\n                    isFunction (funcObj) {\n                        return typeof funcObj === \"function\";\n                    },\n                    isFunctionString (fn) {\n                        if (typeof fn === \"string\") return fn.slice(0, 8).toLowerCase() === \"function\";\n                        return false;\n                    },\n                    getFunctionNameFromString (funcStr) {\n                        const result = FUNCTION_NAME.exec(funcStr);\n                        if (!result || result.length === 0) return null;\n                        return result[1].trim();\n                    },\n                    getFunctionBodyFromString (funcStr) {\n                        return funcStr.substring(funcStr.indexOf(\"{\") + 1, funcStr.lastIndexOf(\"}\"));\n                    },\n                    getArgumentNamesFromString (fn) {\n                        const fnStr = fn.replace(STRIP_COMMENTS, \"\");\n                        let result = fnStr.slice(fnStr.indexOf(\"(\") + 1, fnStr.indexOf(\")\")).match(ARGUMENT_NAMES);\n                        if (result === null) result = [];\n                        return result;\n                    },\n                    clone (obj) {\n                        if (obj === null || typeof obj !== \"object\" || obj.hasOwnProperty(\"isActiveClone\")) return obj;\n                        const temp = obj.constructor();\n                        for(let key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                            obj.isActiveClone = null;\n                            temp[key] = utils.clone(obj[key]);\n                            delete obj.isActiveClone;\n                        }\n                        return temp;\n                    },\n                    isArray (array) {\n                        return !isNaN(array.length);\n                    },\n                    getVariableType (value1, strictIntegers) {\n                        if (utils.isArray(value1)) {\n                            if (value1.length > 0 && value1[0].nodeName === \"IMG\") return \"HTMLImageArray\";\n                            return \"Array\";\n                        }\n                        switch(value1.constructor){\n                            case Boolean:\n                                return \"Boolean\";\n                            case Number:\n                                if (strictIntegers && Number.isInteger(value1)) return \"Integer\";\n                                return \"Float\";\n                            case Texture:\n                                return value1.type;\n                            case Input:\n                                return \"Input\";\n                        }\n                        if (\"nodeName\" in value1) switch(value1.nodeName){\n                            case \"IMG\":\n                                return \"HTMLImage\";\n                            case \"CANVAS\":\n                                return \"HTMLImage\";\n                            case \"VIDEO\":\n                                return \"HTMLVideo\";\n                        }\n                        else if (value1.hasOwnProperty(\"type\")) return value1.type;\n                        else if (typeof OffscreenCanvas !== \"undefined\" && value1 instanceof OffscreenCanvas) return \"OffscreenCanvas\";\n                        else if (typeof ImageBitmap !== \"undefined\" && value1 instanceof ImageBitmap) return \"ImageBitmap\";\n                        else if (typeof ImageData !== \"undefined\" && value1 instanceof ImageData) return \"ImageData\";\n                        return \"Unknown\";\n                    },\n                    getKernelTextureSize (settings, dimensions) {\n                        let [w, h, d] = dimensions;\n                        let texelCount = (w || 1) * (h || 1) * (d || 1);\n                        if (settings.optimizeFloatMemory && settings.precision === \"single\") w = texelCount = Math.ceil(texelCount / 4);\n                        if (h > 1 && w * h === texelCount) return new Int32Array([\n                            w,\n                            h\n                        ]);\n                        return utils.closestSquareDimensions(texelCount);\n                    },\n                    closestSquareDimensions (length) {\n                        const sqrt = Math.sqrt(length);\n                        let high = Math.ceil(sqrt);\n                        let low = Math.floor(sqrt);\n                        while(high * low < length){\n                            high--;\n                            low = Math.ceil(length / high);\n                        }\n                        return new Int32Array([\n                            low,\n                            Math.ceil(length / low)\n                        ]);\n                    },\n                    getMemoryOptimizedFloatTextureSize (dimensions, bitRatio) {\n                        const totalArea = utils.roundTo((dimensions[0] || 1) * (dimensions[1] || 1) * (dimensions[2] || 1) * (dimensions[3] || 1), 4);\n                        const texelCount = totalArea / bitRatio;\n                        return utils.closestSquareDimensions(texelCount);\n                    },\n                    getMemoryOptimizedPackedTextureSize (dimensions, bitRatio) {\n                        const [w, h, d] = dimensions;\n                        const totalArea = utils.roundTo((w || 1) * (h || 1) * (d || 1), 4);\n                        const texelCount = totalArea / (4 / bitRatio);\n                        return utils.closestSquareDimensions(texelCount);\n                    },\n                    roundTo (n, d) {\n                        return Math.floor((n + d - 1) / d) * d;\n                    },\n                    getDimensions (x, pad) {\n                        let ret;\n                        if (utils.isArray(x)) {\n                            const dim = [];\n                            let temp = x;\n                            while(utils.isArray(temp)){\n                                dim.push(temp.length);\n                                temp = temp[0];\n                            }\n                            ret = dim.reverse();\n                        } else if (x instanceof Texture) ret = x.output;\n                        else if (x instanceof Input) ret = x.size;\n                        else throw new Error(`Unknown dimensions of ${x}`);\n                        if (pad) {\n                            ret = Array.from(ret);\n                            while(ret.length < 3)ret.push(1);\n                        }\n                        return new Int32Array(ret);\n                    },\n                    flatten2dArrayTo (array, target) {\n                        let offset = 0;\n                        for(let y = 0; y < array.length; y++){\n                            target.set(array[y], offset);\n                            offset += array[y].length;\n                        }\n                    },\n                    flatten3dArrayTo (array, target) {\n                        let offset = 0;\n                        for(let z = 0; z < array.length; z++)for(let y = 0; y < array[z].length; y++){\n                            target.set(array[z][y], offset);\n                            offset += array[z][y].length;\n                        }\n                    },\n                    flatten4dArrayTo (array, target) {\n                        let offset = 0;\n                        for(let l = 0; l < array.length; l++){\n                            for(let z = 0; z < array[l].length; z++)for(let y = 0; y < array[l][z].length; y++){\n                                target.set(array[l][z][y], offset);\n                                offset += array[l][z][y].length;\n                            }\n                        }\n                    },\n                    flattenTo (array, target) {\n                        if (utils.isArray(array[0])) {\n                            if (utils.isArray(array[0][0])) {\n                                if (utils.isArray(array[0][0][0])) utils.flatten4dArrayTo(array, target);\n                                else utils.flatten3dArrayTo(array, target);\n                            } else utils.flatten2dArrayTo(array, target);\n                        } else target.set(array);\n                    },\n                    splitArray (array, part) {\n                        const result = [];\n                        for(let i = 0; i < array.length; i += part)result.push(new array.constructor(array.buffer, i * 4 + array.byteOffset, part));\n                        return result;\n                    },\n                    getAstString (source, ast) {\n                        const lines = Array.isArray(source) ? source : source.split(/\\r?\\n/g);\n                        const start = ast.loc.start;\n                        const end = ast.loc.end;\n                        const result = [];\n                        if (start.line === end.line) result.push(lines[start.line - 1].substring(start.column, end.column));\n                        else {\n                            result.push(lines[start.line - 1].slice(start.column));\n                            for(let i = start.line; i < end.line; i++)result.push(lines[i]);\n                            result.push(lines[end.line - 1].slice(0, end.column));\n                        }\n                        return result.join(\"\\n\");\n                    },\n                    allPropertiesOf (obj) {\n                        const props = [];\n                        do props.push.apply(props, Object.getOwnPropertyNames(obj));\n                        while (obj = Object.getPrototypeOf(obj));\n                        return props;\n                    },\n                    linesToString (lines) {\n                        if (lines.length > 0) return lines.join(\";\\n\") + \";\\n\";\n                        else return \"\\n\";\n                    },\n                    warnDeprecated (type, oldName, newName) {\n                        if (newName) console.warn(`You are using a deprecated ${type} \"${oldName}\". It has been replaced with \"${newName}\". Fixing, but please upgrade as it will soon be removed.`);\n                        else console.warn(`You are using a deprecated ${type} \"${oldName}\". It has been removed. Fixing, but please upgrade as it will soon be removed.`);\n                    },\n                    flipPixels: (pixels, width, height)=>{\n                        const halfHeight = height / 2 | 0;\n                        const bytesPerRow = width * 4;\n                        const temp = new Uint8ClampedArray(width * 4);\n                        const result = pixels.slice(0);\n                        for(let y = 0; y < halfHeight; ++y){\n                            const topOffset = y * bytesPerRow;\n                            const bottomOffset = (height - y - 1) * bytesPerRow;\n                            temp.set(result.subarray(topOffset, topOffset + bytesPerRow));\n                            result.copyWithin(topOffset, bottomOffset, bottomOffset + bytesPerRow);\n                            result.set(temp, bottomOffset);\n                        }\n                        return result;\n                    },\n                    erectPackedFloat: (array, width)=>{\n                        return array.subarray(0, width);\n                    },\n                    erect2DPackedFloat: (array, width, height)=>{\n                        const yResults = new Array(height);\n                        for(let y = 0; y < height; y++){\n                            const xStart = y * width;\n                            const xEnd = xStart + width;\n                            yResults[y] = array.subarray(xStart, xEnd);\n                        }\n                        return yResults;\n                    },\n                    erect3DPackedFloat: (array, width, height, depth)=>{\n                        const zResults = new Array(depth);\n                        for(let z = 0; z < depth; z++){\n                            const yResults = new Array(height);\n                            for(let y = 0; y < height; y++){\n                                const xStart = z * height * width + y * width;\n                                const xEnd = xStart + width;\n                                yResults[y] = array.subarray(xStart, xEnd);\n                            }\n                            zResults[z] = yResults;\n                        }\n                        return zResults;\n                    },\n                    erectMemoryOptimizedFloat: (array, width)=>{\n                        return array.subarray(0, width);\n                    },\n                    erectMemoryOptimized2DFloat: (array, width, height)=>{\n                        const yResults = new Array(height);\n                        for(let y = 0; y < height; y++){\n                            const offset = y * width;\n                            yResults[y] = array.subarray(offset, offset + width);\n                        }\n                        return yResults;\n                    },\n                    erectMemoryOptimized3DFloat: (array, width, height, depth)=>{\n                        const zResults = new Array(depth);\n                        for(let z = 0; z < depth; z++){\n                            const yResults = new Array(height);\n                            for(let y = 0; y < height; y++){\n                                const offset = z * height * width + y * width;\n                                yResults[y] = array.subarray(offset, offset + width);\n                            }\n                            zResults[z] = yResults;\n                        }\n                        return zResults;\n                    },\n                    erectFloat: (array, width)=>{\n                        const xResults = new Float32Array(width);\n                        let i = 0;\n                        for(let x = 0; x < width; x++){\n                            xResults[x] = array[i];\n                            i += 4;\n                        }\n                        return xResults;\n                    },\n                    erect2DFloat: (array, width, height)=>{\n                        const yResults = new Array(height);\n                        let i = 0;\n                        for(let y = 0; y < height; y++){\n                            const xResults = new Float32Array(width);\n                            for(let x = 0; x < width; x++){\n                                xResults[x] = array[i];\n                                i += 4;\n                            }\n                            yResults[y] = xResults;\n                        }\n                        return yResults;\n                    },\n                    erect3DFloat: (array, width, height, depth)=>{\n                        const zResults = new Array(depth);\n                        let i = 0;\n                        for(let z = 0; z < depth; z++){\n                            const yResults = new Array(height);\n                            for(let y = 0; y < height; y++){\n                                const xResults = new Float32Array(width);\n                                for(let x = 0; x < width; x++){\n                                    xResults[x] = array[i];\n                                    i += 4;\n                                }\n                                yResults[y] = xResults;\n                            }\n                            zResults[z] = yResults;\n                        }\n                        return zResults;\n                    },\n                    erectArray2: (array, width)=>{\n                        const xResults = new Array(width);\n                        const xResultsMax = width * 4;\n                        let i = 0;\n                        for(let x = 0; x < xResultsMax; x += 4)xResults[i++] = array.subarray(x, x + 2);\n                        return xResults;\n                    },\n                    erect2DArray2: (array, width, height)=>{\n                        const yResults = new Array(height);\n                        const XResultsMax = width * 4;\n                        for(let y = 0; y < height; y++){\n                            const xResults = new Array(width);\n                            const offset = y * XResultsMax;\n                            let i = 0;\n                            for(let x = 0; x < XResultsMax; x += 4)xResults[i++] = array.subarray(x + offset, x + offset + 2);\n                            yResults[y] = xResults;\n                        }\n                        return yResults;\n                    },\n                    erect3DArray2: (array, width, height, depth)=>{\n                        const xResultsMax = width * 4;\n                        const zResults = new Array(depth);\n                        for(let z = 0; z < depth; z++){\n                            const yResults = new Array(height);\n                            for(let y = 0; y < height; y++){\n                                const xResults = new Array(width);\n                                const offset = z * xResultsMax * height + y * xResultsMax;\n                                let i = 0;\n                                for(let x = 0; x < xResultsMax; x += 4)xResults[i++] = array.subarray(x + offset, x + offset + 2);\n                                yResults[y] = xResults;\n                            }\n                            zResults[z] = yResults;\n                        }\n                        return zResults;\n                    },\n                    erectArray3: (array, width)=>{\n                        const xResults = new Array(width);\n                        const xResultsMax = width * 4;\n                        let i = 0;\n                        for(let x = 0; x < xResultsMax; x += 4)xResults[i++] = array.subarray(x, x + 3);\n                        return xResults;\n                    },\n                    erect2DArray3: (array, width, height)=>{\n                        const xResultsMax = width * 4;\n                        const yResults = new Array(height);\n                        for(let y = 0; y < height; y++){\n                            const xResults = new Array(width);\n                            const offset = y * xResultsMax;\n                            let i = 0;\n                            for(let x = 0; x < xResultsMax; x += 4)xResults[i++] = array.subarray(x + offset, x + offset + 3);\n                            yResults[y] = xResults;\n                        }\n                        return yResults;\n                    },\n                    erect3DArray3: (array, width, height, depth)=>{\n                        const xResultsMax = width * 4;\n                        const zResults = new Array(depth);\n                        for(let z = 0; z < depth; z++){\n                            const yResults = new Array(height);\n                            for(let y = 0; y < height; y++){\n                                const xResults = new Array(width);\n                                const offset = z * xResultsMax * height + y * xResultsMax;\n                                let i = 0;\n                                for(let x = 0; x < xResultsMax; x += 4)xResults[i++] = array.subarray(x + offset, x + offset + 3);\n                                yResults[y] = xResults;\n                            }\n                            zResults[z] = yResults;\n                        }\n                        return zResults;\n                    },\n                    erectArray4: (array, width)=>{\n                        const xResults = new Array(array);\n                        const xResultsMax = width * 4;\n                        let i = 0;\n                        for(let x = 0; x < xResultsMax; x += 4)xResults[i++] = array.subarray(x, x + 4);\n                        return xResults;\n                    },\n                    erect2DArray4: (array, width, height)=>{\n                        const xResultsMax = width * 4;\n                        const yResults = new Array(height);\n                        for(let y = 0; y < height; y++){\n                            const xResults = new Array(width);\n                            const offset = y * xResultsMax;\n                            let i = 0;\n                            for(let x = 0; x < xResultsMax; x += 4)xResults[i++] = array.subarray(x + offset, x + offset + 4);\n                            yResults[y] = xResults;\n                        }\n                        return yResults;\n                    },\n                    erect3DArray4: (array, width, height, depth)=>{\n                        const xResultsMax = width * 4;\n                        const zResults = new Array(depth);\n                        for(let z = 0; z < depth; z++){\n                            const yResults = new Array(height);\n                            for(let y = 0; y < height; y++){\n                                const xResults = new Array(width);\n                                const offset = z * xResultsMax * height + y * xResultsMax;\n                                let i = 0;\n                                for(let x = 0; x < xResultsMax; x += 4)xResults[i++] = array.subarray(x + offset, x + offset + 4);\n                                yResults[y] = xResults;\n                            }\n                            zResults[z] = yResults;\n                        }\n                        return zResults;\n                    },\n                    flattenFunctionToString: (source, settings)=>{\n                        const { findDependency: findDependency , thisLookup: thisLookup , doNotDefine: doNotDefine  } = settings;\n                        let flattened = settings.flattened;\n                        if (!flattened) flattened = settings.flattened = {};\n                        const ast = acorn.parse(source);\n                        const functionDependencies = [];\n                        let indent = 0;\n                        function flatten(ast) {\n                            if (Array.isArray(ast)) {\n                                const results = [];\n                                for(let i = 0; i < ast.length; i++)results.push(flatten(ast[i]));\n                                return results.join(\"\");\n                            }\n                            switch(ast.type){\n                                case \"Program\":\n                                    return flatten(ast.body) + (ast.body[0].type === \"VariableDeclaration\" ? \";\" : \"\");\n                                case \"FunctionDeclaration\":\n                                    return `function ${ast.id.name}(${ast.params.map(flatten).join(\", \")}) ${flatten(ast.body)}`;\n                                case \"BlockStatement\":\n                                    {\n                                        const result = [];\n                                        indent += 2;\n                                        for(let i = 0; i < ast.body.length; i++){\n                                            const flat = flatten(ast.body[i]);\n                                            if (flat) result.push(\" \".repeat(indent) + flat, \";\\n\");\n                                        }\n                                        indent -= 2;\n                                        return `{\\n${result.join(\"\")}}`;\n                                    }\n                                case \"VariableDeclaration\":\n                                    const declarations = utils.normalizeDeclarations(ast).map(flatten).filter((r)=>r !== null);\n                                    if (declarations.length < 1) return \"\";\n                                    else return `${ast.kind} ${declarations.join(\",\")}`;\n                                case \"VariableDeclarator\":\n                                    if (ast.init.object && ast.init.object.type === \"ThisExpression\") {\n                                        const lookup = thisLookup(ast.init.property.name, true);\n                                        if (lookup) return `${ast.id.name} = ${flatten(ast.init)}`;\n                                        else return null;\n                                    } else return `${ast.id.name} = ${flatten(ast.init)}`;\n                                case \"CallExpression\":\n                                    if (ast.callee.property.name === \"subarray\") return `${flatten(ast.callee.object)}.${flatten(ast.callee.property)}(${ast.arguments.map((value1)=>flatten(value1)).join(\", \")})`;\n                                    if (ast.callee.object.name === \"gl\" || ast.callee.object.name === \"context\") return `${flatten(ast.callee.object)}.${flatten(ast.callee.property)}(${ast.arguments.map((value1)=>flatten(value1)).join(\", \")})`;\n                                    if (ast.callee.object.type === \"ThisExpression\") {\n                                        functionDependencies.push(findDependency(\"this\", ast.callee.property.name));\n                                        return `${ast.callee.property.name}(${ast.arguments.map((value1)=>flatten(value1)).join(\", \")})`;\n                                    } else if (ast.callee.object.name) {\n                                        const foundSource = findDependency(ast.callee.object.name, ast.callee.property.name);\n                                        if (foundSource === null) return `${ast.callee.object.name}.${ast.callee.property.name}(${ast.arguments.map((value1)=>flatten(value1)).join(\", \")})`;\n                                        else {\n                                            functionDependencies.push(foundSource);\n                                            return `${ast.callee.property.name}(${ast.arguments.map((value1)=>flatten(value1)).join(\", \")})`;\n                                        }\n                                    } else if (ast.callee.object.type === \"MemberExpression\") return `${flatten(ast.callee.object)}.${ast.callee.property.name}(${ast.arguments.map((value1)=>flatten(value1)).join(\", \")})`;\n                                    else throw new Error(\"unknown ast.callee\");\n                                case \"ReturnStatement\":\n                                    return `return ${flatten(ast.argument)}`;\n                                case \"BinaryExpression\":\n                                    return `(${flatten(ast.left)}${ast.operator}${flatten(ast.right)})`;\n                                case \"UnaryExpression\":\n                                    if (ast.prefix) return `${ast.operator} ${flatten(ast.argument)}`;\n                                    else return `${flatten(ast.argument)} ${ast.operator}`;\n                                case \"ExpressionStatement\":\n                                    return `${flatten(ast.expression)}`;\n                                case \"SequenceExpression\":\n                                    return `(${flatten(ast.expressions)})`;\n                                case \"ArrowFunctionExpression\":\n                                    return `(${ast.params.map(flatten).join(\", \")}) => ${flatten(ast.body)}`;\n                                case \"Literal\":\n                                    return ast.raw;\n                                case \"Identifier\":\n                                    return ast.name;\n                                case \"MemberExpression\":\n                                    if (ast.object.type === \"ThisExpression\") return thisLookup(ast.property.name);\n                                    if (ast.computed) return `${flatten(ast.object)}[${flatten(ast.property)}]`;\n                                    return flatten(ast.object) + \".\" + flatten(ast.property);\n                                case \"ThisExpression\":\n                                    return \"this\";\n                                case \"NewExpression\":\n                                    return `new ${flatten(ast.callee)}(${ast.arguments.map((value1)=>flatten(value1)).join(\", \")})`;\n                                case \"ForStatement\":\n                                    return `for (${flatten(ast.init)};${flatten(ast.test)};${flatten(ast.update)}) ${flatten(ast.body)}`;\n                                case \"AssignmentExpression\":\n                                    return `${flatten(ast.left)}${ast.operator}${flatten(ast.right)}`;\n                                case \"UpdateExpression\":\n                                    return `${flatten(ast.argument)}${ast.operator}`;\n                                case \"IfStatement\":\n                                    return `if (${flatten(ast.test)}) ${flatten(ast.consequent)}`;\n                                case \"ThrowStatement\":\n                                    return `throw ${flatten(ast.argument)}`;\n                                case \"ObjectPattern\":\n                                    return ast.properties.map(flatten).join(\", \");\n                                case \"ArrayPattern\":\n                                    return ast.elements.map(flatten).join(\", \");\n                                case \"DebuggerStatement\":\n                                    return \"debugger;\";\n                                case \"ConditionalExpression\":\n                                    return `${flatten(ast.test)}?${flatten(ast.consequent)}:${flatten(ast.alternate)}`;\n                                case \"Property\":\n                                    if (ast.kind === \"init\") return flatten(ast.key);\n                            }\n                            throw new Error(`unhandled ast.type of ${ast.type}`);\n                        }\n                        const result = flatten(ast);\n                        if (functionDependencies.length > 0) {\n                            const flattenedFunctionDependencies = [];\n                            for(let i = 0; i < functionDependencies.length; i++){\n                                const functionDependency = functionDependencies[i];\n                                if (!flattened[functionDependency]) flattened[functionDependency] = true;\n                                functionDependency && flattenedFunctionDependencies.push(utils.flattenFunctionToString(functionDependency, settings) + \"\\n\");\n                            }\n                            return flattenedFunctionDependencies.join(\"\") + result;\n                        }\n                        return result;\n                    },\n                    normalizeDeclarations: (ast)=>{\n                        if (ast.type !== \"VariableDeclaration\") throw new Error('Ast is not of type \"VariableDeclaration\"');\n                        const normalizedDeclarations = [];\n                        for(let declarationIndex = 0; declarationIndex < ast.declarations.length; declarationIndex++){\n                            const declaration = ast.declarations[declarationIndex];\n                            if (declaration.id && declaration.id.type === \"ObjectPattern\" && declaration.id.properties) {\n                                const { properties: properties  } = declaration.id;\n                                for(let propertyIndex = 0; propertyIndex < properties.length; propertyIndex++){\n                                    const property = properties[propertyIndex];\n                                    if (property.value.type === \"ObjectPattern\" && property.value.properties) for(let subPropertyIndex = 0; subPropertyIndex < property.value.properties.length; subPropertyIndex++){\n                                        const subProperty = property.value.properties[subPropertyIndex];\n                                        if (subProperty.type === \"Property\") normalizedDeclarations.push({\n                                            type: \"VariableDeclarator\",\n                                            id: {\n                                                type: \"Identifier\",\n                                                name: subProperty.key.name\n                                            },\n                                            init: {\n                                                type: \"MemberExpression\",\n                                                object: {\n                                                    type: \"MemberExpression\",\n                                                    object: declaration.init,\n                                                    property: {\n                                                        type: \"Identifier\",\n                                                        name: property.key.name\n                                                    },\n                                                    computed: false\n                                                },\n                                                property: {\n                                                    type: \"Identifier\",\n                                                    name: subProperty.key.name\n                                                },\n                                                computed: false\n                                            }\n                                        });\n                                        else throw new Error(\"unexpected state\");\n                                    }\n                                    else if (property.value.type === \"Identifier\") normalizedDeclarations.push({\n                                        type: \"VariableDeclarator\",\n                                        id: {\n                                            type: \"Identifier\",\n                                            name: property.value && property.value.name ? property.value.name : property.key.name\n                                        },\n                                        init: {\n                                            type: \"MemberExpression\",\n                                            object: declaration.init,\n                                            property: {\n                                                type: \"Identifier\",\n                                                name: property.key.name\n                                            },\n                                            computed: false\n                                        }\n                                    });\n                                    else throw new Error(\"unexpected state\");\n                                }\n                            } else if (declaration.id && declaration.id.type === \"ArrayPattern\" && declaration.id.elements) {\n                                const { elements: elements  } = declaration.id;\n                                for(let elementIndex = 0; elementIndex < elements.length; elementIndex++){\n                                    const element = elements[elementIndex];\n                                    if (element.type === \"Identifier\") normalizedDeclarations.push({\n                                        type: \"VariableDeclarator\",\n                                        id: {\n                                            type: \"Identifier\",\n                                            name: element.name\n                                        },\n                                        init: {\n                                            type: \"MemberExpression\",\n                                            object: declaration.init,\n                                            property: {\n                                                type: \"Literal\",\n                                                value: elementIndex,\n                                                raw: elementIndex.toString(),\n                                                start: element.start,\n                                                end: element.end\n                                            },\n                                            computed: true\n                                        }\n                                    });\n                                    else throw new Error(\"unexpected state\");\n                                }\n                            } else normalizedDeclarations.push(declaration);\n                        }\n                        return normalizedDeclarations;\n                    },\n                    splitHTMLImageToRGB: (gpu, image)=>{\n                        const rKernel = gpu.createKernel(function(a) {\n                            const pixel = a[this.thread.y][this.thread.x];\n                            return pixel.r * 255;\n                        }, {\n                            output: [\n                                image.width,\n                                image.height\n                            ],\n                            precision: \"unsigned\",\n                            argumentTypes: {\n                                a: \"HTMLImage\"\n                            }\n                        });\n                        const gKernel = gpu.createKernel(function(a) {\n                            const pixel = a[this.thread.y][this.thread.x];\n                            return pixel.g * 255;\n                        }, {\n                            output: [\n                                image.width,\n                                image.height\n                            ],\n                            precision: \"unsigned\",\n                            argumentTypes: {\n                                a: \"HTMLImage\"\n                            }\n                        });\n                        const bKernel = gpu.createKernel(function(a) {\n                            const pixel = a[this.thread.y][this.thread.x];\n                            return pixel.b * 255;\n                        }, {\n                            output: [\n                                image.width,\n                                image.height\n                            ],\n                            precision: \"unsigned\",\n                            argumentTypes: {\n                                a: \"HTMLImage\"\n                            }\n                        });\n                        const aKernel = gpu.createKernel(function(a) {\n                            const pixel = a[this.thread.y][this.thread.x];\n                            return pixel.a * 255;\n                        }, {\n                            output: [\n                                image.width,\n                                image.height\n                            ],\n                            precision: \"unsigned\",\n                            argumentTypes: {\n                                a: \"HTMLImage\"\n                            }\n                        });\n                        const result = [\n                            rKernel(image),\n                            gKernel(image),\n                            bKernel(image),\n                            aKernel(image)\n                        ];\n                        result.rKernel = rKernel;\n                        result.gKernel = gKernel;\n                        result.bKernel = bKernel;\n                        result.aKernel = aKernel;\n                        result.gpu = gpu;\n                        return result;\n                    },\n                    splitRGBAToCanvases: (gpu, rgba, width, height)=>{\n                        const visualKernelR = gpu.createKernel(function(v) {\n                            const pixel = v[this.thread.y][this.thread.x];\n                            this.color(pixel.r / 255, 0, 0, 255);\n                        }, {\n                            output: [\n                                width,\n                                height\n                            ],\n                            graphical: true,\n                            argumentTypes: {\n                                v: \"Array2D(4)\"\n                            }\n                        });\n                        visualKernelR(rgba);\n                        const visualKernelG = gpu.createKernel(function(v) {\n                            const pixel = v[this.thread.y][this.thread.x];\n                            this.color(0, pixel.g / 255, 0, 255);\n                        }, {\n                            output: [\n                                width,\n                                height\n                            ],\n                            graphical: true,\n                            argumentTypes: {\n                                v: \"Array2D(4)\"\n                            }\n                        });\n                        visualKernelG(rgba);\n                        const visualKernelB = gpu.createKernel(function(v) {\n                            const pixel = v[this.thread.y][this.thread.x];\n                            this.color(0, 0, pixel.b / 255, 255);\n                        }, {\n                            output: [\n                                width,\n                                height\n                            ],\n                            graphical: true,\n                            argumentTypes: {\n                                v: \"Array2D(4)\"\n                            }\n                        });\n                        visualKernelB(rgba);\n                        const visualKernelA = gpu.createKernel(function(v) {\n                            const pixel = v[this.thread.y][this.thread.x];\n                            this.color(255, 255, 255, pixel.a / 255);\n                        }, {\n                            output: [\n                                width,\n                                height\n                            ],\n                            graphical: true,\n                            argumentTypes: {\n                                v: \"Array2D(4)\"\n                            }\n                        });\n                        visualKernelA(rgba);\n                        return [\n                            visualKernelR.canvas,\n                            visualKernelG.canvas,\n                            visualKernelB.canvas,\n                            visualKernelA.canvas\n                        ];\n                    },\n                    getMinifySafeName: (fn)=>{\n                        try {\n                            const ast = acorn.parse(`const value = ${fn.toString()}`);\n                            const { init: init  } = ast.body[0].declarations[0];\n                            return init.body.name || init.body.body[0].argument.name;\n                        } catch (e) {\n                            throw new Error(\"Unrecognized function type.  Please use `() => yourFunctionVariableHere` or function() { return yourFunctionVariableHere; }\");\n                        }\n                    },\n                    sanitizeName: function(name1) {\n                        if (dollarSign.test(name1)) name1 = name1.replace(dollarSign, \"S_S\");\n                        if (doubleUnderscore.test(name1)) name1 = name1.replace(doubleUnderscore, \"U_U\");\n                        else if (singleUnderscore.test(name1)) name1 = name1.replace(singleUnderscore, \"u_u\");\n                        return name1;\n                    }\n                };\n                const dollarSign = /\\$/;\n                const doubleUnderscore = /__/;\n                const singleUnderscore = /_/;\n                const _systemEndianness = utils.getSystemEndianness();\n                module1.exports = {\n                    utils: utils\n                };\n            },\n            {\n                \"./input\": 110,\n                \"./texture\": 113,\n                \"acorn\": 1\n            }\n        ]\n    }, {}, [\n        107\n    ])(107);\n});\n\n\n\"use strict\";\nconst $2b6e161c9edcf319$var$gpu = new (0, $bcaa5dedc49d55dc$exports.GPU)();\n//set canvas width and height to document\nconst $2b6e161c9edcf319$var$canvas = document.getElementById(\"canvas\");\nconst $2b6e161c9edcf319$var$ctx = $2b6e161c9edcf319$var$canvas.getContext(\"2d\");\n$2b6e161c9edcf319$var$canvas.width = document.body.clientWidth;\n$2b6e161c9edcf319$var$canvas.height = document.body.clientHeight;\nvar $2b6e161c9edcf319$var$width = $2b6e161c9edcf319$var$canvas.width;\nvar $2b6e161c9edcf319$var$height = $2b6e161c9edcf319$var$canvas.height;\nconst $2b6e161c9edcf319$var$initial = $2b6e161c9edcf319$var$gpu.createKernel(function() {\n    var val = Math.trunc(Math.random() * 2);\n    this.color(val, val, val);\n}, {\n    useLegacyEncoder: true,\n    output: [\n        $2b6e161c9edcf319$var$width,\n        $2b6e161c9edcf319$var$height\n    ],\n    graphical: true\n});\nconst $2b6e161c9edcf319$var$render = $2b6e161c9edcf319$var$gpu.createKernel(function(pixels, width, height) {\n    let x = this.thread.x;\n    let y = height - 1 - this.thread.y;\n    let index = (x + y * width) * 4;\n    //count live neighbors\n    let sum = 0;\n    for(var j = -1; j <= 1; j++)for(var i = -1; i <= 1; i++){\n        var h = (x + i + width) % width;\n        var k = (y + j + height) % height;\n        sum += pixels[h * 4 + k * 4 * width] != 0 ? 1 : 0;\n    }\n    var status = pixels[index] != 0 ? 1 : 0;\n    sum -= status;\n    var val = 0;\n    if (status == 1 && (sum == 3 || sum == 2)) val = 1;\n    if (status == 1 && (sum < 2 || sum > 3)) val = 0;\n    if (status == 0 && sum == 3) val = 1;\n    this.color(val, val, val, 1);\n}, {\n    useLegacyEncoder: true,\n    output: [\n        $2b6e161c9edcf319$var$width,\n        $2b6e161c9edcf319$var$height\n    ],\n    graphical: true\n});\n$2b6e161c9edcf319$var$initial();\ninitPixels = $2b6e161c9edcf319$var$initial.getPixels();\n$2b6e161c9edcf319$var$render(initPixels, $2b6e161c9edcf319$var$width, $2b6e161c9edcf319$var$height);\nfunction $2b6e161c9edcf319$var$animate() {\n    $2b6e161c9edcf319$var$render($2b6e161c9edcf319$var$render.getPixels(), $2b6e161c9edcf319$var$width, $2b6e161c9edcf319$var$height);\n    $2b6e161c9edcf319$var$ctx.drawImage($2b6e161c9edcf319$var$render.canvas, 0, 0);\n    requestAnimationFrame($2b6e161c9edcf319$var$animate);\n}\n$2b6e161c9edcf319$var$animate();\n\n\n//# sourceMappingURL=index.d192ae2a.js.map\n","\"use strict\";\n\nimport {GPU} from 'gpu.js';\nconst gpu = new GPU();\n\n//set canvas width and height to document\n\nconst canvas = document.getElementById('canvas');\n\nconst ctx = canvas.getContext('2d');\n\ncanvas.width = document.body.clientWidth;\ncanvas.height = document.body.clientHeight;\n\nvar width = canvas.width;\nvar height = canvas.height;\n\nconst initial = gpu.createKernel(\n    function() {\n      var val = Math.trunc(Math.random()*2)\n      this.color(val,val,val);\n    },\n    {useLegacyEncoder:true,output:[width, height],graphical:true});\n\nconst render = gpu.createKernel(\n    function(pixels, width, height) {\n        let x = this.thread.x;\n        let y = height - 1 - this.thread.y;\n        let index = (x + y * width) * 4;\n        //count live neighbors\n        let sum = 0;\n        for(var j=-1;j<=1;j++){\n            for(var i=-1;i<=1;i++){\n                var h = (x+i+width) % width;\n                var k = (y+j+height) % height;\n                sum+=pixels[h*4+k*4*width]!=0?1:0;\n          }\n        }\n        var status=pixels[index]!=0?1:0;\n        sum-= status;\n        var val=0;\n        if (status==1 && (sum==3 || sum==2)) val=1;\n        if (status==1 && ((sum<2) || (sum>3))) val=0;\n        if (status==0 && sum==3) val=1;\n        this.color(val, val, val, 1);\n    },\n{useLegacyEncoder:true,output:[width, height],graphical:true});\n\ninitial();\n\ninitPixels = initial.getPixels();\nrender(initPixels,width,height)\n\n\nfunction animate(){\n    render(render.getPixels(),width, height)\n    ctx.drawImage(render.canvas,0,0);\n    requestAnimationFrame(animate)\n}\n\nanimate()\n","/**\n * gpu.js\n * http://gpu.rocks/\n *\n * GPU Accelerated JavaScript\n *\n * @version 2.16.0\n * @date Wed Nov 16 2022 15:48:37 GMT-0500 (Eastern Standard Time)\n *\n * @license MIT\n * The MIT License\n *\n * Copyright (c) 2022 gpu.js Team\n */(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.GPU = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = global || self, factory(global.acorn = {}));\n}(this, function (exports) { 'use strict';\n\n\n  var reservedWords = {\n    3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n    5: \"class enum extends super const export import\",\n    6: \"enum\",\n    strict: \"implements interface let package private protected public static yield\",\n    strictBind: \"eval arguments\"\n  };\n\n\n  var ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";\n\n  var keywords = {\n    5: ecma5AndLessKeywords,\n    \"5module\": ecma5AndLessKeywords + \" export import\",\n    6: ecma5AndLessKeywords + \" const class extends export import super\"\n  };\n\n  var keywordRelationalOperator = /^in(stanceof)?$/;\n\n\n  var nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08bd\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fef\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7c6\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab67\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n  var nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\n  var nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\n  var nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\n  nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n\n  var astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,477,28,11,0,9,21,155,22,13,52,76,44,33,24,27,35,30,0,12,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,0,33,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,0,161,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,270,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,754,9486,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,15,7472,3104,541];\n\n  var astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,525,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,4,9,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,232,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,792487,239];\n\n  function isInAstralSet(code, set) {\n    var pos = 0x10000;\n    for (var i = 0; i < set.length; i += 2) {\n      pos += set[i];\n      if (pos > code) { return false }\n      pos += set[i + 1];\n      if (pos >= code) { return true }\n    }\n  }\n\n\n  function isIdentifierStart(code, astral) {\n    if (code < 65) { return code === 36 }\n    if (code < 91) { return true }\n    if (code < 97) { return code === 95 }\n    if (code < 123) { return true }\n    if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code)) }\n    if (astral === false) { return false }\n    return isInAstralSet(code, astralIdentifierStartCodes)\n  }\n\n\n  function isIdentifierChar(code, astral) {\n    if (code < 48) { return code === 36 }\n    if (code < 58) { return true }\n    if (code < 65) { return false }\n    if (code < 91) { return true }\n    if (code < 97) { return code === 95 }\n    if (code < 123) { return true }\n    if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code)) }\n    if (astral === false) { return false }\n    return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)\n  }\n\n\n\n\n\n  var TokenType = function TokenType(label, conf) {\n    if ( conf === void 0 ) conf = {};\n\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop || null;\n    this.updateContext = null;\n  };\n\n  function binop(name, prec) {\n    return new TokenType(name, {beforeExpr: true, binop: prec})\n  }\n  var beforeExpr = {beforeExpr: true}, startsExpr = {startsExpr: true};\n\n\n  var keywords$1 = {};\n\n  function kw(name, options) {\n    if ( options === void 0 ) options = {};\n\n    options.keyword = name;\n    return keywords$1[name] = new TokenType(name, options)\n  }\n\n  var types = {\n    num: new TokenType(\"num\", startsExpr),\n    regexp: new TokenType(\"regexp\", startsExpr),\n    string: new TokenType(\"string\", startsExpr),\n    name: new TokenType(\"name\", startsExpr),\n    eof: new TokenType(\"eof\"),\n\n    bracketL: new TokenType(\"[\", {beforeExpr: true, startsExpr: true}),\n    bracketR: new TokenType(\"]\"),\n    braceL: new TokenType(\"{\", {beforeExpr: true, startsExpr: true}),\n    braceR: new TokenType(\"}\"),\n    parenL: new TokenType(\"(\", {beforeExpr: true, startsExpr: true}),\n    parenR: new TokenType(\")\"),\n    comma: new TokenType(\",\", beforeExpr),\n    semi: new TokenType(\";\", beforeExpr),\n    colon: new TokenType(\":\", beforeExpr),\n    dot: new TokenType(\".\"),\n    question: new TokenType(\"?\", beforeExpr),\n    arrow: new TokenType(\"=>\", beforeExpr),\n    template: new TokenType(\"template\"),\n    invalidTemplate: new TokenType(\"invalidTemplate\"),\n    ellipsis: new TokenType(\"...\", beforeExpr),\n    backQuote: new TokenType(\"`\", startsExpr),\n    dollarBraceL: new TokenType(\"${\", {beforeExpr: true, startsExpr: true}),\n\n\n    eq: new TokenType(\"=\", {beforeExpr: true, isAssign: true}),\n    assign: new TokenType(\"_=\", {beforeExpr: true, isAssign: true}),\n    incDec: new TokenType(\"++/--\", {prefix: true, postfix: true, startsExpr: true}),\n    prefix: new TokenType(\"!/~\", {beforeExpr: true, prefix: true, startsExpr: true}),\n    logicalOR: binop(\"||\", 1),\n    logicalAND: binop(\"&&\", 2),\n    bitwiseOR: binop(\"|\", 3),\n    bitwiseXOR: binop(\"^\", 4),\n    bitwiseAND: binop(\"&\", 5),\n    equality: binop(\"==/!=/===/!==\", 6),\n    relational: binop(\"</>/<=/>=\", 7),\n    bitShift: binop(\"<</>>/>>>\", 8),\n    plusMin: new TokenType(\"+/-\", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),\n    modulo: binop(\"%\", 10),\n    star: binop(\"*\", 10),\n    slash: binop(\"/\", 10),\n    starstar: new TokenType(\"**\", {beforeExpr: true}),\n\n    _break: kw(\"break\"),\n    _case: kw(\"case\", beforeExpr),\n    _catch: kw(\"catch\"),\n    _continue: kw(\"continue\"),\n    _debugger: kw(\"debugger\"),\n    _default: kw(\"default\", beforeExpr),\n    _do: kw(\"do\", {isLoop: true, beforeExpr: true}),\n    _else: kw(\"else\", beforeExpr),\n    _finally: kw(\"finally\"),\n    _for: kw(\"for\", {isLoop: true}),\n    _function: kw(\"function\", startsExpr),\n    _if: kw(\"if\"),\n    _return: kw(\"return\", beforeExpr),\n    _switch: kw(\"switch\"),\n    _throw: kw(\"throw\", beforeExpr),\n    _try: kw(\"try\"),\n    _var: kw(\"var\"),\n    _const: kw(\"const\"),\n    _while: kw(\"while\", {isLoop: true}),\n    _with: kw(\"with\"),\n    _new: kw(\"new\", {beforeExpr: true, startsExpr: true}),\n    _this: kw(\"this\", startsExpr),\n    _super: kw(\"super\", startsExpr),\n    _class: kw(\"class\", startsExpr),\n    _extends: kw(\"extends\", beforeExpr),\n    _export: kw(\"export\"),\n    _import: kw(\"import\", startsExpr),\n    _null: kw(\"null\", startsExpr),\n    _true: kw(\"true\", startsExpr),\n    _false: kw(\"false\", startsExpr),\n    _in: kw(\"in\", {beforeExpr: true, binop: 7}),\n    _instanceof: kw(\"instanceof\", {beforeExpr: true, binop: 7}),\n    _typeof: kw(\"typeof\", {beforeExpr: true, prefix: true, startsExpr: true}),\n    _void: kw(\"void\", {beforeExpr: true, prefix: true, startsExpr: true}),\n    _delete: kw(\"delete\", {beforeExpr: true, prefix: true, startsExpr: true})\n  };\n\n\n  var lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\n  var lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n  function isNewLine(code, ecma2019String) {\n    return code === 10 || code === 13 || (!ecma2019String && (code === 0x2028 || code === 0x2029))\n  }\n\n  var nonASCIIwhitespace = /[\\u1680\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n\n  var skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\n  var ref = Object.prototype;\n  var hasOwnProperty = ref.hasOwnProperty;\n  var toString = ref.toString;\n\n\n  function has(obj, propName) {\n    return hasOwnProperty.call(obj, propName)\n  }\n\n  var isArray = Array.isArray || (function (obj) { return (\n    toString.call(obj) === \"[object Array]\"\n  ); });\n\n  function wordsRegexp(words) {\n    return new RegExp(\"^(?:\" + words.replace(/ /g, \"|\") + \")$\")\n  }\n\n\n  var Position = function Position(line, col) {\n    this.line = line;\n    this.column = col;\n  };\n\n  Position.prototype.offset = function offset (n) {\n    return new Position(this.line, this.column + n)\n  };\n\n  var SourceLocation = function SourceLocation(p, start, end) {\n    this.start = start;\n    this.end = end;\n    if (p.sourceFile !== null) { this.source = p.sourceFile; }\n  };\n\n\n  function getLineInfo(input, offset) {\n    for (var line = 1, cur = 0;;) {\n      lineBreakG.lastIndex = cur;\n      var match = lineBreakG.exec(input);\n      if (match && match.index < offset) {\n        ++line;\n        cur = match.index + match[0].length;\n      } else {\n        return new Position(line, offset - cur)\n      }\n    }\n  }\n\n\n  var defaultOptions = {\n    ecmaVersion: 10,\n    sourceType: \"script\",\n    onInsertedSemicolon: null,\n    onTrailingComma: null,\n    allowReserved: null,\n    allowReturnOutsideFunction: false,\n    allowImportExportEverywhere: false,\n    allowAwaitOutsideFunction: false,\n    allowHashBang: false,\n    locations: false,\n    onToken: null,\n    onComment: null,\n    ranges: false,\n    program: null,\n    sourceFile: null,\n    directSourceFile: null,\n    preserveParens: false\n  };\n\n\n  function getOptions(opts) {\n    var options = {};\n\n    for (var opt in defaultOptions)\n      { options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt]; }\n\n    if (options.ecmaVersion >= 2015)\n      { options.ecmaVersion -= 2009; }\n\n    if (options.allowReserved == null)\n      { options.allowReserved = options.ecmaVersion < 5; }\n\n    if (isArray(options.onToken)) {\n      var tokens = options.onToken;\n      options.onToken = function (token) { return tokens.push(token); };\n    }\n    if (isArray(options.onComment))\n      { options.onComment = pushComment(options, options.onComment); }\n\n    return options\n  }\n\n  function pushComment(options, array) {\n    return function(block, text, start, end, startLoc, endLoc) {\n      var comment = {\n        type: block ? \"Block\" : \"Line\",\n        value: text,\n        start: start,\n        end: end\n      };\n      if (options.locations)\n        { comment.loc = new SourceLocation(this, startLoc, endLoc); }\n      if (options.ranges)\n        { comment.range = [start, end]; }\n      array.push(comment);\n    }\n  }\n\n  var\n      SCOPE_TOP = 1,\n      SCOPE_FUNCTION = 2,\n      SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION,\n      SCOPE_ASYNC = 4,\n      SCOPE_GENERATOR = 8,\n      SCOPE_ARROW = 16,\n      SCOPE_SIMPLE_CATCH = 32,\n      SCOPE_SUPER = 64,\n      SCOPE_DIRECT_SUPER = 128;\n\n  function functionFlags(async, generator) {\n    return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0)\n  }\n\n  var\n      BIND_NONE = 0, \n      BIND_VAR = 1, \n      BIND_LEXICAL = 2, \n      BIND_FUNCTION = 3, \n      BIND_SIMPLE_CATCH = 4, \n      BIND_OUTSIDE = 5; \n\n  var Parser = function Parser(options, input, startPos) {\n    this.options = options = getOptions(options);\n    this.sourceFile = options.sourceFile;\n    this.keywords = wordsRegexp(keywords[options.ecmaVersion >= 6 ? 6 : options.sourceType === \"module\" ? \"5module\" : 5]);\n    var reserved = \"\";\n    if (options.allowReserved !== true) {\n      for (var v = options.ecmaVersion;; v--)\n        { if (reserved = reservedWords[v]) { break } }\n      if (options.sourceType === \"module\") { reserved += \" await\"; }\n    }\n    this.reservedWords = wordsRegexp(reserved);\n    var reservedStrict = (reserved ? reserved + \" \" : \"\") + reservedWords.strict;\n    this.reservedWordsStrict = wordsRegexp(reservedStrict);\n    this.reservedWordsStrictBind = wordsRegexp(reservedStrict + \" \" + reservedWords.strictBind);\n    this.input = String(input);\n\n    this.containsEsc = false;\n\n\n    if (startPos) {\n      this.pos = startPos;\n      this.lineStart = this.input.lastIndexOf(\"\\n\", startPos - 1) + 1;\n      this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;\n    } else {\n      this.pos = this.lineStart = 0;\n      this.curLine = 1;\n    }\n\n    this.type = types.eof;\n    this.value = null;\n    this.start = this.end = this.pos;\n    this.startLoc = this.endLoc = this.curPosition();\n\n    this.lastTokEndLoc = this.lastTokStartLoc = null;\n    this.lastTokStart = this.lastTokEnd = this.pos;\n\n    this.context = this.initialContext();\n    this.exprAllowed = true;\n\n    this.inModule = options.sourceType === \"module\";\n    this.strict = this.inModule || this.strictDirective(this.pos);\n\n    this.potentialArrowAt = -1;\n\n    this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;\n    this.labels = [];\n    this.undefinedExports = {};\n\n    if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === \"#!\")\n      { this.skipLineComment(2); }\n\n    this.scopeStack = [];\n    this.enterScope(SCOPE_TOP);\n\n    this.regexpState = null;\n  };\n\n  var prototypeAccessors = { inFunction: { configurable: true },inGenerator: { configurable: true },inAsync: { configurable: true },allowSuper: { configurable: true },allowDirectSuper: { configurable: true },treatFunctionsAsVar: { configurable: true } };\n\n  Parser.prototype.parse = function parse () {\n    var node = this.options.program || this.startNode();\n    this.nextToken();\n    return this.parseTopLevel(node)\n  };\n\n  prototypeAccessors.inFunction.get = function () { return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0 };\n  prototypeAccessors.inGenerator.get = function () { return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0 };\n  prototypeAccessors.inAsync.get = function () { return (this.currentVarScope().flags & SCOPE_ASYNC) > 0 };\n  prototypeAccessors.allowSuper.get = function () { return (this.currentThisScope().flags & SCOPE_SUPER) > 0 };\n  prototypeAccessors.allowDirectSuper.get = function () { return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0 };\n  prototypeAccessors.treatFunctionsAsVar.get = function () { return this.treatFunctionsAsVarInScope(this.currentScope()) };\n\n  Parser.prototype.inNonArrowFunction = function inNonArrowFunction () { return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0 };\n\n  Parser.extend = function extend () {\n      var plugins = [], len = arguments.length;\n      while ( len-- ) plugins[ len ] = arguments[ len ];\n\n    var cls = this;\n    for (var i = 0; i < plugins.length; i++) { cls = plugins[i](cls); }\n    return cls\n  };\n\n  Parser.parse = function parse (input, options) {\n    return new this(options, input).parse()\n  };\n\n  Parser.parseExpressionAt = function parseExpressionAt (input, pos, options) {\n    var parser = new this(options, input, pos);\n    parser.nextToken();\n    return parser.parseExpression()\n  };\n\n  Parser.tokenizer = function tokenizer (input, options) {\n    return new this(options, input)\n  };\n\n  Object.defineProperties( Parser.prototype, prototypeAccessors );\n\n  var pp = Parser.prototype;\n\n\n  var literal = /^(?:'((?:\\\\.|[^'])*?)'|\"((?:\\\\.|[^\"])*?)\")/;\n  pp.strictDirective = function(start) {\n    for (;;) {\n      skipWhiteSpace.lastIndex = start;\n      start += skipWhiteSpace.exec(this.input)[0].length;\n      var match = literal.exec(this.input.slice(start));\n      if (!match) { return false }\n      if ((match[1] || match[2]) === \"use strict\") { return true }\n      start += match[0].length;\n\n      skipWhiteSpace.lastIndex = start;\n      start += skipWhiteSpace.exec(this.input)[0].length;\n      if (this.input[start] === \";\")\n        { start++; }\n    }\n  };\n\n\n  pp.eat = function(type) {\n    if (this.type === type) {\n      this.next();\n      return true\n    } else {\n      return false\n    }\n  };\n\n\n  pp.isContextual = function(name) {\n    return this.type === types.name && this.value === name && !this.containsEsc\n  };\n\n\n  pp.eatContextual = function(name) {\n    if (!this.isContextual(name)) { return false }\n    this.next();\n    return true\n  };\n\n\n  pp.expectContextual = function(name) {\n    if (!this.eatContextual(name)) { this.unexpected(); }\n  };\n\n\n  pp.canInsertSemicolon = function() {\n    return this.type === types.eof ||\n      this.type === types.braceR ||\n      lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n  };\n\n  pp.insertSemicolon = function() {\n    if (this.canInsertSemicolon()) {\n      if (this.options.onInsertedSemicolon)\n        { this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc); }\n      return true\n    }\n  };\n\n\n  pp.semicolon = function() {\n    if (!this.eat(types.semi) && !this.insertSemicolon()) { this.unexpected(); }\n  };\n\n  pp.afterTrailingComma = function(tokType, notNext) {\n    if (this.type === tokType) {\n      if (this.options.onTrailingComma)\n        { this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc); }\n      if (!notNext)\n        { this.next(); }\n      return true\n    }\n  };\n\n\n  pp.expect = function(type) {\n    this.eat(type) || this.unexpected();\n  };\n\n\n  pp.unexpected = function(pos) {\n    this.raise(pos != null ? pos : this.start, \"Unexpected token\");\n  };\n\n  function DestructuringErrors() {\n    this.shorthandAssign =\n    this.trailingComma =\n    this.parenthesizedAssign =\n    this.parenthesizedBind =\n    this.doubleProto =\n      -1;\n  }\n\n  pp.checkPatternErrors = function(refDestructuringErrors, isAssign) {\n    if (!refDestructuringErrors) { return }\n    if (refDestructuringErrors.trailingComma > -1)\n      { this.raiseRecoverable(refDestructuringErrors.trailingComma, \"Comma is not permitted after the rest element\"); }\n    var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;\n    if (parens > -1) { this.raiseRecoverable(parens, \"Parenthesized pattern\"); }\n  };\n\n  pp.checkExpressionErrors = function(refDestructuringErrors, andThrow) {\n    if (!refDestructuringErrors) { return false }\n    var shorthandAssign = refDestructuringErrors.shorthandAssign;\n    var doubleProto = refDestructuringErrors.doubleProto;\n    if (!andThrow) { return shorthandAssign >= 0 || doubleProto >= 0 }\n    if (shorthandAssign >= 0)\n      { this.raise(shorthandAssign, \"Shorthand property assignments are valid only in destructuring patterns\"); }\n    if (doubleProto >= 0)\n      { this.raiseRecoverable(doubleProto, \"Redefinition of __proto__ property\"); }\n  };\n\n  pp.checkYieldAwaitInDefaultParams = function() {\n    if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos))\n      { this.raise(this.yieldPos, \"Yield expression cannot be a default value\"); }\n    if (this.awaitPos)\n      { this.raise(this.awaitPos, \"Await expression cannot be a default value\"); }\n  };\n\n  pp.isSimpleAssignTarget = function(expr) {\n    if (expr.type === \"ParenthesizedExpression\")\n      { return this.isSimpleAssignTarget(expr.expression) }\n    return expr.type === \"Identifier\" || expr.type === \"MemberExpression\"\n  };\n\n  var pp$1 = Parser.prototype;\n\n\n\n  pp$1.parseTopLevel = function(node) {\n    var exports = {};\n    if (!node.body) { node.body = []; }\n    while (this.type !== types.eof) {\n      var stmt = this.parseStatement(null, true, exports);\n      node.body.push(stmt);\n    }\n    if (this.inModule)\n      { for (var i = 0, list = Object.keys(this.undefinedExports); i < list.length; i += 1)\n        {\n          var name = list[i];\n\n          this.raiseRecoverable(this.undefinedExports[name].start, (\"Export '\" + name + \"' is not defined\"));\n        } }\n    this.adaptDirectivePrologue(node.body);\n    this.next();\n    node.sourceType = this.options.sourceType;\n    return this.finishNode(node, \"Program\")\n  };\n\n  var loopLabel = {kind: \"loop\"}, switchLabel = {kind: \"switch\"};\n\n  pp$1.isLet = function(context) {\n    if (this.options.ecmaVersion < 6 || !this.isContextual(\"let\")) { return false }\n    skipWhiteSpace.lastIndex = this.pos;\n    var skip = skipWhiteSpace.exec(this.input);\n    var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n    if (nextCh === 91) { return true } \n    if (context) { return false }\n\n    if (nextCh === 123) { return true } \n    if (isIdentifierStart(nextCh, true)) {\n      var pos = next + 1;\n      while (isIdentifierChar(this.input.charCodeAt(pos), true)) { ++pos; }\n      var ident = this.input.slice(next, pos);\n      if (!keywordRelationalOperator.test(ident)) { return true }\n    }\n    return false\n  };\n\n  pp$1.isAsyncFunction = function() {\n    if (this.options.ecmaVersion < 8 || !this.isContextual(\"async\"))\n      { return false }\n\n    skipWhiteSpace.lastIndex = this.pos;\n    var skip = skipWhiteSpace.exec(this.input);\n    var next = this.pos + skip[0].length;\n    return !lineBreak.test(this.input.slice(this.pos, next)) &&\n      this.input.slice(next, next + 8) === \"function\" &&\n      (next + 8 === this.input.length || !isIdentifierChar(this.input.charAt(next + 8)))\n  };\n\n\n  pp$1.parseStatement = function(context, topLevel, exports) {\n    var starttype = this.type, node = this.startNode(), kind;\n\n    if (this.isLet(context)) {\n      starttype = types._var;\n      kind = \"let\";\n    }\n\n\n    switch (starttype) {\n    case types._break: case types._continue: return this.parseBreakContinueStatement(node, starttype.keyword)\n    case types._debugger: return this.parseDebuggerStatement(node)\n    case types._do: return this.parseDoStatement(node)\n    case types._for: return this.parseForStatement(node)\n    case types._function:\n      if ((context && (this.strict || context !== \"if\" && context !== \"label\")) && this.options.ecmaVersion >= 6) { this.unexpected(); }\n      return this.parseFunctionStatement(node, false, !context)\n    case types._class:\n      if (context) { this.unexpected(); }\n      return this.parseClass(node, true)\n    case types._if: return this.parseIfStatement(node)\n    case types._return: return this.parseReturnStatement(node)\n    case types._switch: return this.parseSwitchStatement(node)\n    case types._throw: return this.parseThrowStatement(node)\n    case types._try: return this.parseTryStatement(node)\n    case types._const: case types._var:\n      kind = kind || this.value;\n      if (context && kind !== \"var\") { this.unexpected(); }\n      return this.parseVarStatement(node, kind)\n    case types._while: return this.parseWhileStatement(node)\n    case types._with: return this.parseWithStatement(node)\n    case types.braceL: return this.parseBlock(true, node)\n    case types.semi: return this.parseEmptyStatement(node)\n    case types._export:\n    case types._import:\n      if (this.options.ecmaVersion > 10 && starttype === types._import) {\n        skipWhiteSpace.lastIndex = this.pos;\n        var skip = skipWhiteSpace.exec(this.input);\n        var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n        if (nextCh === 40) \n          { return this.parseExpressionStatement(node, this.parseExpression()) }\n      }\n\n      if (!this.options.allowImportExportEverywhere) {\n        if (!topLevel)\n          { this.raise(this.start, \"'import' and 'export' may only appear at the top level\"); }\n        if (!this.inModule)\n          { this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\"); }\n      }\n      return starttype === types._import ? this.parseImport(node) : this.parseExport(node, exports)\n\n    default:\n      if (this.isAsyncFunction()) {\n        if (context) { this.unexpected(); }\n        this.next();\n        return this.parseFunctionStatement(node, true, !context)\n      }\n\n      var maybeName = this.value, expr = this.parseExpression();\n      if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon))\n        { return this.parseLabeledStatement(node, maybeName, expr, context) }\n      else { return this.parseExpressionStatement(node, expr) }\n    }\n  };\n\n  pp$1.parseBreakContinueStatement = function(node, keyword) {\n    var isBreak = keyword === \"break\";\n    this.next();\n    if (this.eat(types.semi) || this.insertSemicolon()) { node.label = null; }\n    else if (this.type !== types.name) { this.unexpected(); }\n    else {\n      node.label = this.parseIdent();\n      this.semicolon();\n    }\n\n    var i = 0;\n    for (; i < this.labels.length; ++i) {\n      var lab = this.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) { break }\n        if (node.label && isBreak) { break }\n      }\n    }\n    if (i === this.labels.length) { this.raise(node.start, \"Unsyntactic \" + keyword); }\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n  };\n\n  pp$1.parseDebuggerStatement = function(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\")\n  };\n\n  pp$1.parseDoStatement = function(node) {\n    this.next();\n    this.labels.push(loopLabel);\n    node.body = this.parseStatement(\"do\");\n    this.labels.pop();\n    this.expect(types._while);\n    node.test = this.parseParenExpression();\n    if (this.options.ecmaVersion >= 6)\n      { this.eat(types.semi); }\n    else\n      { this.semicolon(); }\n    return this.finishNode(node, \"DoWhileStatement\")\n  };\n\n\n  pp$1.parseForStatement = function(node) {\n    this.next();\n    var awaitAt = (this.options.ecmaVersion >= 9 && (this.inAsync || (!this.inFunction && this.options.allowAwaitOutsideFunction)) && this.eatContextual(\"await\")) ? this.lastTokStart : -1;\n    this.labels.push(loopLabel);\n    this.enterScope(0);\n    this.expect(types.parenL);\n    if (this.type === types.semi) {\n      if (awaitAt > -1) { this.unexpected(awaitAt); }\n      return this.parseFor(node, null)\n    }\n    var isLet = this.isLet();\n    if (this.type === types._var || this.type === types._const || isLet) {\n      var init$1 = this.startNode(), kind = isLet ? \"let\" : this.value;\n      this.next();\n      this.parseVar(init$1, true, kind);\n      this.finishNode(init$1, \"VariableDeclaration\");\n      if ((this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) && init$1.declarations.length === 1) {\n        if (this.options.ecmaVersion >= 9) {\n          if (this.type === types._in) {\n            if (awaitAt > -1) { this.unexpected(awaitAt); }\n          } else { node.await = awaitAt > -1; }\n        }\n        return this.parseForIn(node, init$1)\n      }\n      if (awaitAt > -1) { this.unexpected(awaitAt); }\n      return this.parseFor(node, init$1)\n    }\n    var refDestructuringErrors = new DestructuringErrors;\n    var init = this.parseExpression(true, refDestructuringErrors);\n    if (this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n      if (this.options.ecmaVersion >= 9) {\n        if (this.type === types._in) {\n          if (awaitAt > -1) { this.unexpected(awaitAt); }\n        } else { node.await = awaitAt > -1; }\n      }\n      this.toAssignable(init, false, refDestructuringErrors);\n      this.checkLVal(init);\n      return this.parseForIn(node, init)\n    } else {\n      this.checkExpressionErrors(refDestructuringErrors, true);\n    }\n    if (awaitAt > -1) { this.unexpected(awaitAt); }\n    return this.parseFor(node, init)\n  };\n\n  pp$1.parseFunctionStatement = function(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync)\n  };\n\n  pp$1.parseIfStatement = function(node) {\n    this.next();\n    node.test = this.parseParenExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(types._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\")\n  };\n\n  pp$1.parseReturnStatement = function(node) {\n    if (!this.inFunction && !this.options.allowReturnOutsideFunction)\n      { this.raise(this.start, \"'return' outside of function\"); }\n    this.next();\n\n\n    if (this.eat(types.semi) || this.insertSemicolon()) { node.argument = null; }\n    else { node.argument = this.parseExpression(); this.semicolon(); }\n    return this.finishNode(node, \"ReturnStatement\")\n  };\n\n  pp$1.parseSwitchStatement = function(node) {\n    this.next();\n    node.discriminant = this.parseParenExpression();\n    node.cases = [];\n    this.expect(types.braceL);\n    this.labels.push(switchLabel);\n    this.enterScope(0);\n\n\n    var cur;\n    for (var sawDefault = false; this.type !== types.braceR;) {\n      if (this.type === types._case || this.type === types._default) {\n        var isCase = this.type === types._case;\n        if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n        node.cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) { this.raiseRecoverable(this.lastTokStart, \"Multiple default clauses\"); }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(types.colon);\n      } else {\n        if (!cur) { this.unexpected(); }\n        cur.consequent.push(this.parseStatement(null));\n      }\n    }\n    this.exitScope();\n    if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n    this.next(); \n    this.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\")\n  };\n\n  pp$1.parseThrowStatement = function(node) {\n    this.next();\n    if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))\n      { this.raise(this.lastTokEnd, \"Illegal newline after throw\"); }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\")\n  };\n\n\n  var empty = [];\n\n  pp$1.parseTryStatement = function(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n    if (this.type === types._catch) {\n      var clause = this.startNode();\n      this.next();\n      if (this.eat(types.parenL)) {\n        clause.param = this.parseBindingAtom();\n        var simple = clause.param.type === \"Identifier\";\n        this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);\n        this.checkLVal(clause.param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);\n        this.expect(types.parenR);\n      } else {\n        if (this.options.ecmaVersion < 10) { this.unexpected(); }\n        clause.param = null;\n        this.enterScope(0);\n      }\n      clause.body = this.parseBlock(false);\n      this.exitScope();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n    node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n    if (!node.handler && !node.finalizer)\n      { this.raise(node.start, \"Missing catch or finally clause\"); }\n    return this.finishNode(node, \"TryStatement\")\n  };\n\n  pp$1.parseVarStatement = function(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\")\n  };\n\n  pp$1.parseWhileStatement = function(node) {\n    this.next();\n    node.test = this.parseParenExpression();\n    this.labels.push(loopLabel);\n    node.body = this.parseStatement(\"while\");\n    this.labels.pop();\n    return this.finishNode(node, \"WhileStatement\")\n  };\n\n  pp$1.parseWithStatement = function(node) {\n    if (this.strict) { this.raise(this.start, \"'with' in strict mode\"); }\n    this.next();\n    node.object = this.parseParenExpression();\n    node.body = this.parseStatement(\"with\");\n    return this.finishNode(node, \"WithStatement\")\n  };\n\n  pp$1.parseEmptyStatement = function(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\")\n  };\n\n  pp$1.parseLabeledStatement = function(node, maybeName, expr, context) {\n    for (var i$1 = 0, list = this.labels; i$1 < list.length; i$1 += 1)\n      {\n      var label = list[i$1];\n\n      if (label.name === maybeName)\n        { this.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n    } }\n    var kind = this.type.isLoop ? \"loop\" : this.type === types._switch ? \"switch\" : null;\n    for (var i = this.labels.length - 1; i >= 0; i--) {\n      var label$1 = this.labels[i];\n      if (label$1.statementStart === node.start) {\n        label$1.statementStart = this.start;\n        label$1.kind = kind;\n      } else { break }\n    }\n    this.labels.push({name: maybeName, kind: kind, statementStart: this.start});\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\")\n  };\n\n  pp$1.parseExpressionStatement = function(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\")\n  };\n\n\n  pp$1.parseBlock = function(createNewLexicalScope, node) {\n    if ( createNewLexicalScope === void 0 ) createNewLexicalScope = true;\n    if ( node === void 0 ) node = this.startNode();\n\n    node.body = [];\n    this.expect(types.braceL);\n    if (createNewLexicalScope) { this.enterScope(0); }\n    while (!this.eat(types.braceR)) {\n      var stmt = this.parseStatement(null);\n      node.body.push(stmt);\n    }\n    if (createNewLexicalScope) { this.exitScope(); }\n    return this.finishNode(node, \"BlockStatement\")\n  };\n\n\n  pp$1.parseFor = function(node, init) {\n    node.init = init;\n    this.expect(types.semi);\n    node.test = this.type === types.semi ? null : this.parseExpression();\n    this.expect(types.semi);\n    node.update = this.type === types.parenR ? null : this.parseExpression();\n    this.expect(types.parenR);\n    node.body = this.parseStatement(\"for\");\n    this.exitScope();\n    this.labels.pop();\n    return this.finishNode(node, \"ForStatement\")\n  };\n\n\n  pp$1.parseForIn = function(node, init) {\n    var isForIn = this.type === types._in;\n    this.next();\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (\n        !isForIn ||\n        this.options.ecmaVersion < 8 ||\n        this.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\"\n      )\n    ) {\n      this.raise(\n        init.start,\n        ((isForIn ? \"for-in\" : \"for-of\") + \" loop variable declaration may not have an initializer\")\n      );\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, \"Invalid left-hand side in for-loop\");\n    }\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();\n    this.expect(types.parenR);\n    node.body = this.parseStatement(\"for\");\n    this.exitScope();\n    this.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\")\n  };\n\n\n  pp$1.parseVar = function(node, isFor, kind) {\n    node.declarations = [];\n    node.kind = kind;\n    for (;;) {\n      var decl = this.startNode();\n      this.parseVarId(decl, kind);\n      if (this.eat(types.eq)) {\n        decl.init = this.parseMaybeAssign(isFor);\n      } else if (kind === \"const\" && !(this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\")))) {\n        this.unexpected();\n      } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.type === types._in || this.isContextual(\"of\")))) {\n        this.raise(this.lastTokEnd, \"Complex binding patterns require an initialization value\");\n      } else {\n        decl.init = null;\n      }\n      node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(types.comma)) { break }\n    }\n    return node\n  };\n\n  pp$1.parseVarId = function(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, kind === \"var\" ? BIND_VAR : BIND_LEXICAL, false);\n  };\n\n  var FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2, FUNC_NULLABLE_ID = 4;\n\n\n  pp$1.parseFunction = function(node, statement, allowExpressionBody, isAsync) {\n    this.initFunction(node);\n    if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {\n      if (this.type === types.star && (statement & FUNC_HANGING_STATEMENT))\n        { this.unexpected(); }\n      node.generator = this.eat(types.star);\n    }\n    if (this.options.ecmaVersion >= 8)\n      { node.async = !!isAsync; }\n\n    if (statement & FUNC_STATEMENT) {\n      node.id = (statement & FUNC_NULLABLE_ID) && this.type !== types.name ? null : this.parseIdent();\n      if (node.id && !(statement & FUNC_HANGING_STATEMENT))\n        { this.checkLVal(node.id, (this.strict || node.generator || node.async) ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION); }\n    }\n\n    var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.awaitIdentPos = 0;\n    this.enterScope(functionFlags(node.async, node.generator));\n\n    if (!(statement & FUNC_STATEMENT))\n      { node.id = this.type === types.name ? this.parseIdent() : null; }\n\n    this.parseFunctionParams(node);\n    this.parseFunctionBody(node, allowExpressionBody, false);\n\n    this.yieldPos = oldYieldPos;\n    this.awaitPos = oldAwaitPos;\n    this.awaitIdentPos = oldAwaitIdentPos;\n    return this.finishNode(node, (statement & FUNC_STATEMENT) ? \"FunctionDeclaration\" : \"FunctionExpression\")\n  };\n\n  pp$1.parseFunctionParams = function(node) {\n    this.expect(types.parenL);\n    node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);\n    this.checkYieldAwaitInDefaultParams();\n  };\n\n\n  pp$1.parseClass = function(node, isStatement) {\n    this.next();\n\n    var oldStrict = this.strict;\n    this.strict = true;\n\n    this.parseClassId(node, isStatement);\n    this.parseClassSuper(node);\n    var classBody = this.startNode();\n    var hadConstructor = false;\n    classBody.body = [];\n    this.expect(types.braceL);\n    while (!this.eat(types.braceR)) {\n      var element = this.parseClassElement(node.superClass !== null);\n      if (element) {\n        classBody.body.push(element);\n        if (element.type === \"MethodDefinition\" && element.kind === \"constructor\") {\n          if (hadConstructor) { this.raise(element.start, \"Duplicate constructor in the same class\"); }\n          hadConstructor = true;\n        }\n      }\n    }\n    node.body = this.finishNode(classBody, \"ClassBody\");\n    this.strict = oldStrict;\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n  };\n\n  pp$1.parseClassElement = function(constructorAllowsSuper) {\n    var this$1 = this;\n\n    if (this.eat(types.semi)) { return null }\n\n    var method = this.startNode();\n    var tryContextual = function (k, noLineBreak) {\n      if ( noLineBreak === void 0 ) noLineBreak = false;\n\n      var start = this$1.start, startLoc = this$1.startLoc;\n      if (!this$1.eatContextual(k)) { return false }\n      if (this$1.type !== types.parenL && (!noLineBreak || !this$1.canInsertSemicolon())) { return true }\n      if (method.key) { this$1.unexpected(); }\n      method.computed = false;\n      method.key = this$1.startNodeAt(start, startLoc);\n      method.key.name = k;\n      this$1.finishNode(method.key, \"Identifier\");\n      return false\n    };\n\n    method.kind = \"method\";\n    method.static = tryContextual(\"static\");\n    var isGenerator = this.eat(types.star);\n    var isAsync = false;\n    if (!isGenerator) {\n      if (this.options.ecmaVersion >= 8 && tryContextual(\"async\", true)) {\n        isAsync = true;\n        isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);\n      } else if (tryContextual(\"get\")) {\n        method.kind = \"get\";\n      } else if (tryContextual(\"set\")) {\n        method.kind = \"set\";\n      }\n    }\n    if (!method.key) { this.parsePropertyName(method); }\n    var key = method.key;\n    var allowsDirectSuper = false;\n    if (!method.computed && !method.static && (key.type === \"Identifier\" && key.name === \"constructor\" ||\n        key.type === \"Literal\" && key.value === \"constructor\")) {\n      if (method.kind !== \"method\") { this.raise(key.start, \"Constructor can't have get/set modifier\"); }\n      if (isGenerator) { this.raise(key.start, \"Constructor can't be a generator\"); }\n      if (isAsync) { this.raise(key.start, \"Constructor can't be an async method\"); }\n      method.kind = \"constructor\";\n      allowsDirectSuper = constructorAllowsSuper;\n    } else if (method.static && key.type === \"Identifier\" && key.name === \"prototype\") {\n      this.raise(key.start, \"Classes may not have a static property named prototype\");\n    }\n    this.parseClassMethod(method, isGenerator, isAsync, allowsDirectSuper);\n    if (method.kind === \"get\" && method.value.params.length !== 0)\n      { this.raiseRecoverable(method.value.start, \"getter should have no params\"); }\n    if (method.kind === \"set\" && method.value.params.length !== 1)\n      { this.raiseRecoverable(method.value.start, \"setter should have exactly one param\"); }\n    if (method.kind === \"set\" && method.value.params[0].type === \"RestElement\")\n      { this.raiseRecoverable(method.value.params[0].start, \"Setter cannot use rest params\"); }\n    return method\n  };\n\n  pp$1.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {\n    method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);\n    return this.finishNode(method, \"MethodDefinition\")\n  };\n\n  pp$1.parseClassId = function(node, isStatement) {\n    if (this.type === types.name) {\n      node.id = this.parseIdent();\n      if (isStatement)\n        { this.checkLVal(node.id, BIND_LEXICAL, false); }\n    } else {\n      if (isStatement === true)\n        { this.unexpected(); }\n      node.id = null;\n    }\n  };\n\n  pp$1.parseClassSuper = function(node) {\n    node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n  };\n\n\n  pp$1.parseExport = function(node, exports) {\n    this.next();\n    if (this.eat(types.star)) {\n      this.expectContextual(\"from\");\n      if (this.type !== types.string) { this.unexpected(); }\n      node.source = this.parseExprAtom();\n      this.semicolon();\n      return this.finishNode(node, \"ExportAllDeclaration\")\n    }\n    if (this.eat(types._default)) { \n      this.checkExport(exports, \"default\", this.lastTokStart);\n      var isAsync;\n      if (this.type === types._function || (isAsync = this.isAsyncFunction())) {\n        var fNode = this.startNode();\n        this.next();\n        if (isAsync) { this.next(); }\n        node.declaration = this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);\n      } else if (this.type === types._class) {\n        var cNode = this.startNode();\n        node.declaration = this.parseClass(cNode, \"nullableID\");\n      } else {\n        node.declaration = this.parseMaybeAssign();\n        this.semicolon();\n      }\n      return this.finishNode(node, \"ExportDefaultDeclaration\")\n    }\n    if (this.shouldParseExportStatement()) {\n      node.declaration = this.parseStatement(null);\n      if (node.declaration.type === \"VariableDeclaration\")\n        { this.checkVariableExport(exports, node.declaration.declarations); }\n      else\n        { this.checkExport(exports, node.declaration.id.name, node.declaration.id.start); }\n      node.specifiers = [];\n      node.source = null;\n    } else { \n      node.declaration = null;\n      node.specifiers = this.parseExportSpecifiers(exports);\n      if (this.eatContextual(\"from\")) {\n        if (this.type !== types.string) { this.unexpected(); }\n        node.source = this.parseExprAtom();\n      } else {\n        for (var i = 0, list = node.specifiers; i < list.length; i += 1) {\n          var spec = list[i];\n\n          this.checkUnreserved(spec.local);\n          this.checkLocalExport(spec.local);\n        }\n\n        node.source = null;\n      }\n      this.semicolon();\n    }\n    return this.finishNode(node, \"ExportNamedDeclaration\")\n  };\n\n  pp$1.checkExport = function(exports, name, pos) {\n    if (!exports) { return }\n    if (has(exports, name))\n      { this.raiseRecoverable(pos, \"Duplicate export '\" + name + \"'\"); }\n    exports[name] = true;\n  };\n\n  pp$1.checkPatternExport = function(exports, pat) {\n    var type = pat.type;\n    if (type === \"Identifier\")\n      { this.checkExport(exports, pat.name, pat.start); }\n    else if (type === \"ObjectPattern\")\n      { for (var i = 0, list = pat.properties; i < list.length; i += 1)\n        {\n          var prop = list[i];\n\n          this.checkPatternExport(exports, prop);\n        } }\n    else if (type === \"ArrayPattern\")\n      { for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {\n        var elt = list$1[i$1];\n\n          if (elt) { this.checkPatternExport(exports, elt); }\n      } }\n    else if (type === \"Property\")\n      { this.checkPatternExport(exports, pat.value); }\n    else if (type === \"AssignmentPattern\")\n      { this.checkPatternExport(exports, pat.left); }\n    else if (type === \"RestElement\")\n      { this.checkPatternExport(exports, pat.argument); }\n    else if (type === \"ParenthesizedExpression\")\n      { this.checkPatternExport(exports, pat.expression); }\n  };\n\n  pp$1.checkVariableExport = function(exports, decls) {\n    if (!exports) { return }\n    for (var i = 0, list = decls; i < list.length; i += 1)\n      {\n      var decl = list[i];\n\n      this.checkPatternExport(exports, decl.id);\n    }\n  };\n\n  pp$1.shouldParseExportStatement = function() {\n    return this.type.keyword === \"var\" ||\n      this.type.keyword === \"const\" ||\n      this.type.keyword === \"class\" ||\n      this.type.keyword === \"function\" ||\n      this.isLet() ||\n      this.isAsyncFunction()\n  };\n\n\n  pp$1.parseExportSpecifiers = function(exports) {\n    var nodes = [], first = true;\n    this.expect(types.braceL);\n    while (!this.eat(types.braceR)) {\n      if (!first) {\n        this.expect(types.comma);\n        if (this.afterTrailingComma(types.braceR)) { break }\n      } else { first = false; }\n\n      var node = this.startNode();\n      node.local = this.parseIdent(true);\n      node.exported = this.eatContextual(\"as\") ? this.parseIdent(true) : node.local;\n      this.checkExport(exports, node.exported.name, node.exported.start);\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n    return nodes\n  };\n\n\n  pp$1.parseImport = function(node) {\n    this.next();\n    if (this.type === types.string) {\n      node.specifiers = empty;\n      node.source = this.parseExprAtom();\n    } else {\n      node.specifiers = this.parseImportSpecifiers();\n      this.expectContextual(\"from\");\n      node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();\n    }\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\")\n  };\n\n\n  pp$1.parseImportSpecifiers = function() {\n    var nodes = [], first = true;\n    if (this.type === types.name) {\n      var node = this.startNode();\n      node.local = this.parseIdent();\n      this.checkLVal(node.local, BIND_LEXICAL);\n      nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"));\n      if (!this.eat(types.comma)) { return nodes }\n    }\n    if (this.type === types.star) {\n      var node$1 = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n      node$1.local = this.parseIdent();\n      this.checkLVal(node$1.local, BIND_LEXICAL);\n      nodes.push(this.finishNode(node$1, \"ImportNamespaceSpecifier\"));\n      return nodes\n    }\n    this.expect(types.braceL);\n    while (!this.eat(types.braceR)) {\n      if (!first) {\n        this.expect(types.comma);\n        if (this.afterTrailingComma(types.braceR)) { break }\n      } else { first = false; }\n\n      var node$2 = this.startNode();\n      node$2.imported = this.parseIdent(true);\n      if (this.eatContextual(\"as\")) {\n        node$2.local = this.parseIdent();\n      } else {\n        this.checkUnreserved(node$2.imported);\n        node$2.local = node$2.imported;\n      }\n      this.checkLVal(node$2.local, BIND_LEXICAL);\n      nodes.push(this.finishNode(node$2, \"ImportSpecifier\"));\n    }\n    return nodes\n  };\n\n  pp$1.adaptDirectivePrologue = function(statements) {\n    for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {\n      statements[i].directive = statements[i].expression.raw.slice(1, -1);\n    }\n  };\n  pp$1.isDirectiveCandidate = function(statement) {\n    return (\n      statement.type === \"ExpressionStatement\" &&\n      statement.expression.type === \"Literal\" &&\n      typeof statement.expression.value === \"string\" &&\n      (this.input[statement.start] === \"\\\"\" || this.input[statement.start] === \"'\")\n    )\n  };\n\n  var pp$2 = Parser.prototype;\n\n\n  pp$2.toAssignable = function(node, isBinding, refDestructuringErrors) {\n    if (this.options.ecmaVersion >= 6 && node) {\n      switch (node.type) {\n      case \"Identifier\":\n        if (this.inAsync && node.name === \"await\")\n          { this.raise(node.start, \"Cannot use 'await' as identifier inside an async function\"); }\n        break\n\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"RestElement\":\n        break\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n        for (var i = 0, list = node.properties; i < list.length; i += 1) {\n          var prop = list[i];\n\n        this.toAssignable(prop, isBinding);\n          if (\n            prop.type === \"RestElement\" &&\n            (prop.argument.type === \"ArrayPattern\" || prop.argument.type === \"ObjectPattern\")\n          ) {\n            this.raise(prop.argument.start, \"Unexpected token\");\n          }\n        }\n        break\n\n      case \"Property\":\n        if (node.kind !== \"init\") { this.raise(node.key.start, \"Object pattern can't contain getter or setter\"); }\n        this.toAssignable(node.value, isBinding);\n        break\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n        this.toAssignableList(node.elements, isBinding);\n        break\n\n      case \"SpreadElement\":\n        node.type = \"RestElement\";\n        this.toAssignable(node.argument, isBinding);\n        if (node.argument.type === \"AssignmentPattern\")\n          { this.raise(node.argument.start, \"Rest elements cannot have a default value\"); }\n        break\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") { this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\"); }\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isBinding);\n\n      case \"AssignmentPattern\":\n        break\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(node.expression, isBinding, refDestructuringErrors);\n        break\n\n      case \"MemberExpression\":\n        if (!isBinding) { break }\n\n      default:\n        this.raise(node.start, \"Assigning to rvalue\");\n      }\n    } else if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n    return node\n  };\n\n\n  pp$2.toAssignableList = function(exprList, isBinding) {\n    var end = exprList.length;\n    for (var i = 0; i < end; i++) {\n      var elt = exprList[i];\n      if (elt) { this.toAssignable(elt, isBinding); }\n    }\n    if (end) {\n      var last = exprList[end - 1];\n      if (this.options.ecmaVersion === 6 && isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\")\n        { this.unexpected(last.argument.start); }\n    }\n    return exprList\n  };\n\n\n  pp$2.parseSpread = function(refDestructuringErrors) {\n    var node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n    return this.finishNode(node, \"SpreadElement\")\n  };\n\n  pp$2.parseRestBinding = function() {\n    var node = this.startNode();\n    this.next();\n\n    if (this.options.ecmaVersion === 6 && this.type !== types.name)\n      { this.unexpected(); }\n\n    node.argument = this.parseBindingAtom();\n\n    return this.finishNode(node, \"RestElement\")\n  };\n\n\n  pp$2.parseBindingAtom = function() {\n    if (this.options.ecmaVersion >= 6) {\n      switch (this.type) {\n      case types.bracketL:\n        var node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(types.bracketR, true, true);\n        return this.finishNode(node, \"ArrayPattern\")\n\n      case types.braceL:\n        return this.parseObj(true)\n      }\n    }\n    return this.parseIdent()\n  };\n\n  pp$2.parseBindingList = function(close, allowEmpty, allowTrailingComma) {\n    var elts = [], first = true;\n    while (!this.eat(close)) {\n      if (first) { first = false; }\n      else { this.expect(types.comma); }\n      if (allowEmpty && this.type === types.comma) {\n        elts.push(null);\n      } else if (allowTrailingComma && this.afterTrailingComma(close)) {\n        break\n      } else if (this.type === types.ellipsis) {\n        var rest = this.parseRestBinding();\n        this.parseBindingListItem(rest);\n        elts.push(rest);\n        if (this.type === types.comma) { this.raise(this.start, \"Comma is not permitted after the rest element\"); }\n        this.expect(close);\n        break\n      } else {\n        var elem = this.parseMaybeDefault(this.start, this.startLoc);\n        this.parseBindingListItem(elem);\n        elts.push(elem);\n      }\n    }\n    return elts\n  };\n\n  pp$2.parseBindingListItem = function(param) {\n    return param\n  };\n\n\n  pp$2.parseMaybeDefault = function(startPos, startLoc, left) {\n    left = left || this.parseBindingAtom();\n    if (this.options.ecmaVersion < 6 || !this.eat(types.eq)) { return left }\n    var node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssign();\n    return this.finishNode(node, \"AssignmentPattern\")\n  };\n\n\n  pp$2.checkLVal = function(expr, bindingType, checkClashes) {\n    if ( bindingType === void 0 ) bindingType = BIND_NONE;\n\n    switch (expr.type) {\n    case \"Identifier\":\n      if (bindingType === BIND_LEXICAL && expr.name === \"let\")\n        { this.raiseRecoverable(expr.start, \"let is disallowed as a lexically bound name\"); }\n      if (this.strict && this.reservedWordsStrictBind.test(expr.name))\n        { this.raiseRecoverable(expr.start, (bindingType ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\"); }\n      if (checkClashes) {\n        if (has(checkClashes, expr.name))\n          { this.raiseRecoverable(expr.start, \"Argument name clash\"); }\n        checkClashes[expr.name] = true;\n      }\n      if (bindingType !== BIND_NONE && bindingType !== BIND_OUTSIDE) { this.declareName(expr.name, bindingType, expr.start); }\n      break\n\n    case \"MemberExpression\":\n      if (bindingType) { this.raiseRecoverable(expr.start, \"Binding member expression\"); }\n      break\n\n    case \"ObjectPattern\":\n      for (var i = 0, list = expr.properties; i < list.length; i += 1)\n        {\n      var prop = list[i];\n\n      this.checkLVal(prop, bindingType, checkClashes);\n    }\n      break\n\n    case \"Property\":\n      this.checkLVal(expr.value, bindingType, checkClashes);\n      break\n\n    case \"ArrayPattern\":\n      for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {\n        var elem = list$1[i$1];\n\n      if (elem) { this.checkLVal(elem, bindingType, checkClashes); }\n      }\n      break\n\n    case \"AssignmentPattern\":\n      this.checkLVal(expr.left, bindingType, checkClashes);\n      break\n\n    case \"RestElement\":\n      this.checkLVal(expr.argument, bindingType, checkClashes);\n      break\n\n    case \"ParenthesizedExpression\":\n      this.checkLVal(expr.expression, bindingType, checkClashes);\n      break\n\n    default:\n      this.raise(expr.start, (bindingType ? \"Binding\" : \"Assigning to\") + \" rvalue\");\n    }\n  };\n\n\n  var pp$3 = Parser.prototype;\n\n\n  pp$3.checkPropClash = function(prop, propHash, refDestructuringErrors) {\n    if (this.options.ecmaVersion >= 9 && prop.type === \"SpreadElement\")\n      { return }\n    if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))\n      { return }\n    var key = prop.key;\n    var name;\n    switch (key.type) {\n    case \"Identifier\": name = key.name; break\n    case \"Literal\": name = String(key.value); break\n    default: return\n    }\n    var kind = prop.kind;\n    if (this.options.ecmaVersion >= 6) {\n      if (name === \"__proto__\" && kind === \"init\") {\n        if (propHash.proto) {\n          if (refDestructuringErrors) {\n            if (refDestructuringErrors.doubleProto < 0)\n              { refDestructuringErrors.doubleProto = key.start; }\n          } else { this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\"); }\n        }\n        propHash.proto = true;\n      }\n      return\n    }\n    name = \"$\" + name;\n    var other = propHash[name];\n    if (other) {\n      var redefinition;\n      if (kind === \"init\") {\n        redefinition = this.strict && other.init || other.get || other.set;\n      } else {\n        redefinition = other.init || other[kind];\n      }\n      if (redefinition)\n        { this.raiseRecoverable(key.start, \"Redefinition of property\"); }\n    } else {\n      other = propHash[name] = {\n        init: false,\n        get: false,\n        set: false\n      };\n    }\n    other[kind] = true;\n  };\n\n\n\n\n  pp$3.parseExpression = function(noIn, refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc;\n    var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);\n    if (this.type === types.comma) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(types.comma)) { node.expressions.push(this.parseMaybeAssign(noIn, refDestructuringErrors)); }\n      return this.finishNode(node, \"SequenceExpression\")\n    }\n    return expr\n  };\n\n\n  pp$3.parseMaybeAssign = function(noIn, refDestructuringErrors, afterLeftParse) {\n    if (this.isContextual(\"yield\")) {\n      if (this.inGenerator) { return this.parseYield(noIn) }\n      else { this.exprAllowed = false; }\n    }\n\n    var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1;\n    if (refDestructuringErrors) {\n      oldParenAssign = refDestructuringErrors.parenthesizedAssign;\n      oldTrailingComma = refDestructuringErrors.trailingComma;\n      refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;\n    } else {\n      refDestructuringErrors = new DestructuringErrors;\n      ownDestructuringErrors = true;\n    }\n\n    var startPos = this.start, startLoc = this.startLoc;\n    if (this.type === types.parenL || this.type === types.name)\n      { this.potentialArrowAt = this.start; }\n    var left = this.parseMaybeConditional(noIn, refDestructuringErrors);\n    if (afterLeftParse) { left = afterLeftParse.call(this, left, startPos, startLoc); }\n    if (this.type.isAssign) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.value;\n      node.left = this.type === types.eq ? this.toAssignable(left, false, refDestructuringErrors) : left;\n      if (!ownDestructuringErrors) {\n        refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;\n      }\n      if (refDestructuringErrors.shorthandAssign >= node.left.start)\n        { refDestructuringErrors.shorthandAssign = -1; } \n      this.checkLVal(left);\n      this.next();\n      node.right = this.parseMaybeAssign(noIn);\n      return this.finishNode(node, \"AssignmentExpression\")\n    } else {\n      if (ownDestructuringErrors) { this.checkExpressionErrors(refDestructuringErrors, true); }\n    }\n    if (oldParenAssign > -1) { refDestructuringErrors.parenthesizedAssign = oldParenAssign; }\n    if (oldTrailingComma > -1) { refDestructuringErrors.trailingComma = oldTrailingComma; }\n    return left\n  };\n\n\n  pp$3.parseMaybeConditional = function(noIn, refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc;\n    var expr = this.parseExprOps(noIn, refDestructuringErrors);\n    if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n    if (this.eat(types.question)) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssign();\n      this.expect(types.colon);\n      node.alternate = this.parseMaybeAssign(noIn);\n      return this.finishNode(node, \"ConditionalExpression\")\n    }\n    return expr\n  };\n\n\n  pp$3.parseExprOps = function(noIn, refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc;\n    var expr = this.parseMaybeUnary(refDestructuringErrors, false);\n    if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n    return expr.start === startPos && expr.type === \"ArrowFunctionExpression\" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, noIn)\n  };\n\n\n  pp$3.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n    var prec = this.type.binop;\n    if (prec != null && (!noIn || this.type !== types._in)) {\n      if (prec > minPrec) {\n        var logical = this.type === types.logicalOR || this.type === types.logicalAND;\n        var op = this.value;\n        this.next();\n        var startPos = this.start, startLoc = this.startLoc;\n        var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);\n        var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical);\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn)\n      }\n    }\n    return left\n  };\n\n  pp$3.buildBinary = function(startPos, startLoc, left, right, op, logical) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.operator = op;\n    node.right = right;\n    return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\")\n  };\n\n\n  pp$3.parseMaybeUnary = function(refDestructuringErrors, sawUnary) {\n    var startPos = this.start, startLoc = this.startLoc, expr;\n    if (this.isContextual(\"await\") && (this.inAsync || (!this.inFunction && this.options.allowAwaitOutsideFunction))) {\n      expr = this.parseAwait();\n      sawUnary = true;\n    } else if (this.type.prefix) {\n      var node = this.startNode(), update = this.type === types.incDec;\n      node.operator = this.value;\n      node.prefix = true;\n      this.next();\n      node.argument = this.parseMaybeUnary(null, true);\n      this.checkExpressionErrors(refDestructuringErrors, true);\n      if (update) { this.checkLVal(node.argument); }\n      else if (this.strict && node.operator === \"delete\" &&\n               node.argument.type === \"Identifier\")\n        { this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\"); }\n      else { sawUnary = true; }\n      expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n    } else {\n      expr = this.parseExprSubscripts(refDestructuringErrors);\n      if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n      while (this.type.postfix && !this.canInsertSemicolon()) {\n        var node$1 = this.startNodeAt(startPos, startLoc);\n        node$1.operator = this.value;\n        node$1.prefix = false;\n        node$1.argument = expr;\n        this.checkLVal(expr);\n        this.next();\n        expr = this.finishNode(node$1, \"UpdateExpression\");\n      }\n    }\n\n    if (!sawUnary && this.eat(types.starstar))\n      { return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), \"**\", false) }\n    else\n      { return expr }\n  };\n\n\n  pp$3.parseExprSubscripts = function(refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc;\n    var expr = this.parseExprAtom(refDestructuringErrors);\n    if (expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\")\n      { return expr }\n    var result = this.parseSubscripts(expr, startPos, startLoc);\n    if (refDestructuringErrors && result.type === \"MemberExpression\") {\n      if (refDestructuringErrors.parenthesizedAssign >= result.start) { refDestructuringErrors.parenthesizedAssign = -1; }\n      if (refDestructuringErrors.parenthesizedBind >= result.start) { refDestructuringErrors.parenthesizedBind = -1; }\n    }\n    return result\n  };\n\n  pp$3.parseSubscripts = function(base, startPos, startLoc, noCalls) {\n    var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === \"Identifier\" && base.name === \"async\" &&\n        this.lastTokEnd === base.end && !this.canInsertSemicolon() && this.input.slice(base.start, base.end) === \"async\";\n    while (true) {\n      var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow);\n      if (element === base || element.type === \"ArrowFunctionExpression\") { return element }\n      base = element;\n    }\n  };\n\n  pp$3.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow) {\n    var computed = this.eat(types.bracketL);\n    if (computed || this.eat(types.dot)) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = computed ? this.parseExpression() : this.parseIdent(this.options.allowReserved !== \"never\");\n      node.computed = !!computed;\n      if (computed) { this.expect(types.bracketR); }\n      base = this.finishNode(node, \"MemberExpression\");\n    } else if (!noCalls && this.eat(types.parenL)) {\n      var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n      this.yieldPos = 0;\n      this.awaitPos = 0;\n      this.awaitIdentPos = 0;\n      var exprList = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);\n      if (maybeAsyncArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {\n        this.checkPatternErrors(refDestructuringErrors, false);\n        this.checkYieldAwaitInDefaultParams();\n        if (this.awaitIdentPos > 0)\n          { this.raise(this.awaitIdentPos, \"Cannot use 'await' as identifier inside an async function\"); }\n        this.yieldPos = oldYieldPos;\n        this.awaitPos = oldAwaitPos;\n        this.awaitIdentPos = oldAwaitIdentPos;\n        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true)\n      }\n      this.checkExpressionErrors(refDestructuringErrors, true);\n      this.yieldPos = oldYieldPos || this.yieldPos;\n      this.awaitPos = oldAwaitPos || this.awaitPos;\n      this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;\n      var node$1 = this.startNodeAt(startPos, startLoc);\n      node$1.callee = base;\n      node$1.arguments = exprList;\n      base = this.finishNode(node$1, \"CallExpression\");\n    } else if (this.type === types.backQuote) {\n      var node$2 = this.startNodeAt(startPos, startLoc);\n      node$2.tag = base;\n      node$2.quasi = this.parseTemplate({isTagged: true});\n      base = this.finishNode(node$2, \"TaggedTemplateExpression\");\n    }\n    return base\n  };\n\n\n  pp$3.parseExprAtom = function(refDestructuringErrors) {\n    if (this.type === types.slash) { this.readRegexp(); }\n\n    var node, canBeArrow = this.potentialArrowAt === this.start;\n    switch (this.type) {\n    case types._super:\n      if (!this.allowSuper)\n        { this.raise(this.start, \"'super' keyword outside a method\"); }\n      node = this.startNode();\n      this.next();\n      if (this.type === types.parenL && !this.allowDirectSuper)\n        { this.raise(node.start, \"super() call outside constructor of a subclass\"); }\n      if (this.type !== types.dot && this.type !== types.bracketL && this.type !== types.parenL)\n        { this.unexpected(); }\n      return this.finishNode(node, \"Super\")\n\n    case types._this:\n      node = this.startNode();\n      this.next();\n      return this.finishNode(node, \"ThisExpression\")\n\n    case types.name:\n      var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;\n      var id = this.parseIdent(false);\n      if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === \"async\" && !this.canInsertSemicolon() && this.eat(types._function))\n        { return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true) }\n      if (canBeArrow && !this.canInsertSemicolon()) {\n        if (this.eat(types.arrow))\n          { return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false) }\n        if (this.options.ecmaVersion >= 8 && id.name === \"async\" && this.type === types.name && !containsEsc) {\n          id = this.parseIdent(false);\n          if (this.canInsertSemicolon() || !this.eat(types.arrow))\n            { this.unexpected(); }\n          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true)\n        }\n      }\n      return id\n\n    case types.regexp:\n      var value = this.value;\n      node = this.parseLiteral(value.value);\n      node.regex = {pattern: value.pattern, flags: value.flags};\n      return node\n\n    case types.num: case types.string:\n      return this.parseLiteral(this.value)\n\n    case types._null: case types._true: case types._false:\n      node = this.startNode();\n      node.value = this.type === types._null ? null : this.type === types._true;\n      node.raw = this.type.keyword;\n      this.next();\n      return this.finishNode(node, \"Literal\")\n\n    case types.parenL:\n      var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow);\n      if (refDestructuringErrors) {\n        if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr))\n          { refDestructuringErrors.parenthesizedAssign = start; }\n        if (refDestructuringErrors.parenthesizedBind < 0)\n          { refDestructuringErrors.parenthesizedBind = start; }\n      }\n      return expr\n\n    case types.bracketL:\n      node = this.startNode();\n      this.next();\n      node.elements = this.parseExprList(types.bracketR, true, true, refDestructuringErrors);\n      return this.finishNode(node, \"ArrayExpression\")\n\n    case types.braceL:\n      return this.parseObj(false, refDestructuringErrors)\n\n    case types._function:\n      node = this.startNode();\n      this.next();\n      return this.parseFunction(node, 0)\n\n    case types._class:\n      return this.parseClass(this.startNode(), false)\n\n    case types._new:\n      return this.parseNew()\n\n    case types.backQuote:\n      return this.parseTemplate()\n\n    case types._import:\n      if (this.options.ecmaVersion >= 11) {\n        return this.parseExprImport()\n      } else {\n        return this.unexpected()\n      }\n\n    default:\n      this.unexpected();\n    }\n  };\n\n  pp$3.parseExprImport = function() {\n    var node = this.startNode();\n    this.next(); \n    switch (this.type) {\n    case types.parenL:\n      return this.parseDynamicImport(node)\n    default:\n      this.unexpected();\n    }\n  };\n\n  pp$3.parseDynamicImport = function(node) {\n    this.next(); \n\n    node.source = this.parseMaybeAssign();\n\n    if (!this.eat(types.parenR)) {\n      var errorPos = this.start;\n      if (this.eat(types.comma) && this.eat(types.parenR)) {\n        this.raiseRecoverable(errorPos, \"Trailing comma is not allowed in import()\");\n      } else {\n        this.unexpected(errorPos);\n      }\n    }\n\n    return this.finishNode(node, \"ImportExpression\")\n  };\n\n  pp$3.parseLiteral = function(value) {\n    var node = this.startNode();\n    node.value = value;\n    node.raw = this.input.slice(this.start, this.end);\n    if (node.raw.charCodeAt(node.raw.length - 1) === 110) { node.bigint = node.raw.slice(0, -1); }\n    this.next();\n    return this.finishNode(node, \"Literal\")\n  };\n\n  pp$3.parseParenExpression = function() {\n    this.expect(types.parenL);\n    var val = this.parseExpression();\n    this.expect(types.parenR);\n    return val\n  };\n\n  pp$3.parseParenAndDistinguishExpression = function(canBeArrow) {\n    var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;\n    if (this.options.ecmaVersion >= 6) {\n      this.next();\n\n      var innerStartPos = this.start, innerStartLoc = this.startLoc;\n      var exprList = [], first = true, lastIsComma = false;\n      var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;\n      this.yieldPos = 0;\n      this.awaitPos = 0;\n      while (this.type !== types.parenR) {\n        first ? first = false : this.expect(types.comma);\n        if (allowTrailingComma && this.afterTrailingComma(types.parenR, true)) {\n          lastIsComma = true;\n          break\n        } else if (this.type === types.ellipsis) {\n          spreadStart = this.start;\n          exprList.push(this.parseParenItem(this.parseRestBinding()));\n          if (this.type === types.comma) { this.raise(this.start, \"Comma is not permitted after the rest element\"); }\n          break\n        } else {\n          exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));\n        }\n      }\n      var innerEndPos = this.start, innerEndLoc = this.startLoc;\n      this.expect(types.parenR);\n\n      if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {\n        this.checkPatternErrors(refDestructuringErrors, false);\n        this.checkYieldAwaitInDefaultParams();\n        this.yieldPos = oldYieldPos;\n        this.awaitPos = oldAwaitPos;\n        return this.parseParenArrowList(startPos, startLoc, exprList)\n      }\n\n      if (!exprList.length || lastIsComma) { this.unexpected(this.lastTokStart); }\n      if (spreadStart) { this.unexpected(spreadStart); }\n      this.checkExpressionErrors(refDestructuringErrors, true);\n      this.yieldPos = oldYieldPos || this.yieldPos;\n      this.awaitPos = oldAwaitPos || this.awaitPos;\n\n      if (exprList.length > 1) {\n        val = this.startNodeAt(innerStartPos, innerStartLoc);\n        val.expressions = exprList;\n        this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n      } else {\n        val = exprList[0];\n      }\n    } else {\n      val = this.parseParenExpression();\n    }\n\n    if (this.options.preserveParens) {\n      var par = this.startNodeAt(startPos, startLoc);\n      par.expression = val;\n      return this.finishNode(par, \"ParenthesizedExpression\")\n    } else {\n      return val\n    }\n  };\n\n  pp$3.parseParenItem = function(item) {\n    return item\n  };\n\n  pp$3.parseParenArrowList = function(startPos, startLoc, exprList) {\n    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList)\n  };\n\n\n  var empty$1 = [];\n\n  pp$3.parseNew = function() {\n    if (this.containsEsc) { this.raiseRecoverable(this.start, \"Escape sequence in keyword new\"); }\n    var node = this.startNode();\n    var meta = this.parseIdent(true);\n    if (this.options.ecmaVersion >= 6 && this.eat(types.dot)) {\n      node.meta = meta;\n      var containsEsc = this.containsEsc;\n      node.property = this.parseIdent(true);\n      if (node.property.name !== \"target\" || containsEsc)\n        { this.raiseRecoverable(node.property.start, \"The only valid meta property for new is new.target\"); }\n      if (!this.inNonArrowFunction())\n        { this.raiseRecoverable(node.start, \"new.target can only be used in functions\"); }\n      return this.finishNode(node, \"MetaProperty\")\n    }\n    var startPos = this.start, startLoc = this.startLoc, isImport = this.type === types._import;\n    node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n    if (isImport && node.callee.type === \"ImportExpression\") {\n      this.raise(startPos, \"Cannot use new with import()\");\n    }\n    if (this.eat(types.parenL)) { node.arguments = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false); }\n    else { node.arguments = empty$1; }\n    return this.finishNode(node, \"NewExpression\")\n  };\n\n\n  pp$3.parseTemplateElement = function(ref) {\n    var isTagged = ref.isTagged;\n\n    var elem = this.startNode();\n    if (this.type === types.invalidTemplate) {\n      if (!isTagged) {\n        this.raiseRecoverable(this.start, \"Bad escape sequence in untagged template literal\");\n      }\n      elem.value = {\n        raw: this.value,\n        cooked: null\n      };\n    } else {\n      elem.value = {\n        raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, \"\\n\"),\n        cooked: this.value\n      };\n    }\n    this.next();\n    elem.tail = this.type === types.backQuote;\n    return this.finishNode(elem, \"TemplateElement\")\n  };\n\n  pp$3.parseTemplate = function(ref) {\n    if ( ref === void 0 ) ref = {};\n    var isTagged = ref.isTagged; if ( isTagged === void 0 ) isTagged = false;\n\n    var node = this.startNode();\n    this.next();\n    node.expressions = [];\n    var curElt = this.parseTemplateElement({isTagged: isTagged});\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      if (this.type === types.eof) { this.raise(this.pos, \"Unterminated template literal\"); }\n      this.expect(types.dollarBraceL);\n      node.expressions.push(this.parseExpression());\n      this.expect(types.braceR);\n      node.quasis.push(curElt = this.parseTemplateElement({isTagged: isTagged}));\n    }\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\")\n  };\n\n  pp$3.isAsyncProp = function(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && prop.key.name === \"async\" &&\n      (this.type === types.name || this.type === types.num || this.type === types.string || this.type === types.bracketL || this.type.keyword || (this.options.ecmaVersion >= 9 && this.type === types.star)) &&\n      !lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n  };\n\n\n  pp$3.parseObj = function(isPattern, refDestructuringErrors) {\n    var node = this.startNode(), first = true, propHash = {};\n    node.properties = [];\n    this.next();\n    while (!this.eat(types.braceR)) {\n      if (!first) {\n        this.expect(types.comma);\n        if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types.braceR)) { break }\n      } else { first = false; }\n\n      var prop = this.parseProperty(isPattern, refDestructuringErrors);\n      if (!isPattern) { this.checkPropClash(prop, propHash, refDestructuringErrors); }\n      node.properties.push(prop);\n    }\n    return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\")\n  };\n\n  pp$3.parseProperty = function(isPattern, refDestructuringErrors) {\n    var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;\n    if (this.options.ecmaVersion >= 9 && this.eat(types.ellipsis)) {\n      if (isPattern) {\n        prop.argument = this.parseIdent(false);\n        if (this.type === types.comma) {\n          this.raise(this.start, \"Comma is not permitted after the rest element\");\n        }\n        return this.finishNode(prop, \"RestElement\")\n      }\n      if (this.type === types.parenL && refDestructuringErrors) {\n        if (refDestructuringErrors.parenthesizedAssign < 0) {\n          refDestructuringErrors.parenthesizedAssign = this.start;\n        }\n        if (refDestructuringErrors.parenthesizedBind < 0) {\n          refDestructuringErrors.parenthesizedBind = this.start;\n        }\n      }\n      prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n      if (this.type === types.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {\n        refDestructuringErrors.trailingComma = this.start;\n      }\n      return this.finishNode(prop, \"SpreadElement\")\n    }\n    if (this.options.ecmaVersion >= 6) {\n      prop.method = false;\n      prop.shorthand = false;\n      if (isPattern || refDestructuringErrors) {\n        startPos = this.start;\n        startLoc = this.startLoc;\n      }\n      if (!isPattern)\n        { isGenerator = this.eat(types.star); }\n    }\n    var containsEsc = this.containsEsc;\n    this.parsePropertyName(prop);\n    if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {\n      isAsync = true;\n      isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);\n      this.parsePropertyName(prop, refDestructuringErrors);\n    } else {\n      isAsync = false;\n    }\n    this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);\n    return this.finishNode(prop, \"Property\")\n  };\n\n  pp$3.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {\n    if ((isGenerator || isAsync) && this.type === types.colon)\n      { this.unexpected(); }\n\n    if (this.eat(types.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);\n      prop.kind = \"init\";\n    } else if (this.options.ecmaVersion >= 6 && this.type === types.parenL) {\n      if (isPattern) { this.unexpected(); }\n      prop.kind = \"init\";\n      prop.method = true;\n      prop.value = this.parseMethod(isGenerator, isAsync);\n    } else if (!isPattern && !containsEsc &&\n               this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" &&\n               (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n               (this.type !== types.comma && this.type !== types.braceR)) {\n      if (isGenerator || isAsync) { this.unexpected(); }\n      prop.kind = prop.key.name;\n      this.parsePropertyName(prop);\n      prop.value = this.parseMethod(false);\n      var paramCount = prop.kind === \"get\" ? 0 : 1;\n      if (prop.value.params.length !== paramCount) {\n        var start = prop.value.start;\n        if (prop.kind === \"get\")\n          { this.raiseRecoverable(start, \"getter should have no params\"); }\n        else\n          { this.raiseRecoverable(start, \"setter should have exactly one param\"); }\n      } else {\n        if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\")\n          { this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\"); }\n      }\n    } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n      if (isGenerator || isAsync) { this.unexpected(); }\n      this.checkUnreserved(prop.key);\n      if (prop.key.name === \"await\" && !this.awaitIdentPos)\n        { this.awaitIdentPos = startPos; }\n      prop.kind = \"init\";\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n      } else if (this.type === types.eq && refDestructuringErrors) {\n        if (refDestructuringErrors.shorthandAssign < 0)\n          { refDestructuringErrors.shorthandAssign = this.start; }\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n      } else {\n        prop.value = prop.key;\n      }\n      prop.shorthand = true;\n    } else { this.unexpected(); }\n  };\n\n  pp$3.parsePropertyName = function(prop) {\n    if (this.options.ecmaVersion >= 6) {\n      if (this.eat(types.bracketL)) {\n        prop.computed = true;\n        prop.key = this.parseMaybeAssign();\n        this.expect(types.bracketR);\n        return prop.key\n      } else {\n        prop.computed = false;\n      }\n    }\n    return prop.key = this.type === types.num || this.type === types.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== \"never\")\n  };\n\n\n  pp$3.initFunction = function(node) {\n    node.id = null;\n    if (this.options.ecmaVersion >= 6) { node.generator = node.expression = false; }\n    if (this.options.ecmaVersion >= 8) { node.async = false; }\n  };\n\n\n  pp$3.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {\n    var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n\n    this.initFunction(node);\n    if (this.options.ecmaVersion >= 6)\n      { node.generator = isGenerator; }\n    if (this.options.ecmaVersion >= 8)\n      { node.async = !!isAsync; }\n\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.awaitIdentPos = 0;\n    this.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n\n    this.expect(types.parenL);\n    node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);\n    this.checkYieldAwaitInDefaultParams();\n    this.parseFunctionBody(node, false, true);\n\n    this.yieldPos = oldYieldPos;\n    this.awaitPos = oldAwaitPos;\n    this.awaitIdentPos = oldAwaitIdentPos;\n    return this.finishNode(node, \"FunctionExpression\")\n  };\n\n\n  pp$3.parseArrowExpression = function(node, params, isAsync) {\n    var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n\n    this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);\n    this.initFunction(node);\n    if (this.options.ecmaVersion >= 8) { node.async = !!isAsync; }\n\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.awaitIdentPos = 0;\n\n    node.params = this.toAssignableList(params, true);\n    this.parseFunctionBody(node, true, false);\n\n    this.yieldPos = oldYieldPos;\n    this.awaitPos = oldAwaitPos;\n    this.awaitIdentPos = oldAwaitIdentPos;\n    return this.finishNode(node, \"ArrowFunctionExpression\")\n  };\n\n\n  pp$3.parseFunctionBody = function(node, isArrowFunction, isMethod) {\n    var isExpression = isArrowFunction && this.type !== types.braceL;\n    var oldStrict = this.strict, useStrict = false;\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      node.expression = true;\n      this.checkParams(node, false);\n    } else {\n      var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);\n      if (!oldStrict || nonSimple) {\n        useStrict = this.strictDirective(this.end);\n        if (useStrict && nonSimple)\n          { this.raiseRecoverable(node.start, \"Illegal 'use strict' directive in function with non-simple parameter list\"); }\n      }\n      var oldLabels = this.labels;\n      this.labels = [];\n      if (useStrict) { this.strict = true; }\n\n      this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));\n      node.body = this.parseBlock(false);\n      node.expression = false;\n      this.adaptDirectivePrologue(node.body.body);\n      this.labels = oldLabels;\n    }\n    this.exitScope();\n\n    if (this.strict && node.id) { this.checkLVal(node.id, BIND_OUTSIDE); }\n    this.strict = oldStrict;\n  };\n\n  pp$3.isSimpleParamList = function(params) {\n    for (var i = 0, list = params; i < list.length; i += 1)\n      {\n      var param = list[i];\n\n      if (param.type !== \"Identifier\") { return false\n    } }\n    return true\n  };\n\n\n  pp$3.checkParams = function(node, allowDuplicates) {\n    var nameHash = {};\n    for (var i = 0, list = node.params; i < list.length; i += 1)\n      {\n      var param = list[i];\n\n      this.checkLVal(param, BIND_VAR, allowDuplicates ? null : nameHash);\n    }\n  };\n\n\n  pp$3.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n    var elts = [], first = true;\n    while (!this.eat(close)) {\n      if (!first) {\n        this.expect(types.comma);\n        if (allowTrailingComma && this.afterTrailingComma(close)) { break }\n      } else { first = false; }\n\n      var elt = (void 0);\n      if (allowEmpty && this.type === types.comma)\n        { elt = null; }\n      else if (this.type === types.ellipsis) {\n        elt = this.parseSpread(refDestructuringErrors);\n        if (refDestructuringErrors && this.type === types.comma && refDestructuringErrors.trailingComma < 0)\n          { refDestructuringErrors.trailingComma = this.start; }\n      } else {\n        elt = this.parseMaybeAssign(false, refDestructuringErrors);\n      }\n      elts.push(elt);\n    }\n    return elts\n  };\n\n  pp$3.checkUnreserved = function(ref) {\n    var start = ref.start;\n    var end = ref.end;\n    var name = ref.name;\n\n    if (this.inGenerator && name === \"yield\")\n      { this.raiseRecoverable(start, \"Cannot use 'yield' as identifier inside a generator\"); }\n    if (this.inAsync && name === \"await\")\n      { this.raiseRecoverable(start, \"Cannot use 'await' as identifier inside an async function\"); }\n    if (this.keywords.test(name))\n      { this.raise(start, (\"Unexpected keyword '\" + name + \"'\")); }\n    if (this.options.ecmaVersion < 6 &&\n      this.input.slice(start, end).indexOf(\"\\\\\") !== -1) { return }\n    var re = this.strict ? this.reservedWordsStrict : this.reservedWords;\n    if (re.test(name)) {\n      if (!this.inAsync && name === \"await\")\n        { this.raiseRecoverable(start, \"Cannot use keyword 'await' outside an async function\"); }\n      this.raiseRecoverable(start, (\"The keyword '\" + name + \"' is reserved\"));\n    }\n  };\n\n\n  pp$3.parseIdent = function(liberal, isBinding) {\n    var node = this.startNode();\n    if (this.type === types.name) {\n      node.name = this.value;\n    } else if (this.type.keyword) {\n      node.name = this.type.keyword;\n\n      if ((node.name === \"class\" || node.name === \"function\") &&\n          (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {\n        this.context.pop();\n      }\n    } else {\n      this.unexpected();\n    }\n    this.next(!!liberal);\n    this.finishNode(node, \"Identifier\");\n    if (!liberal) {\n      this.checkUnreserved(node);\n      if (node.name === \"await\" && !this.awaitIdentPos)\n        { this.awaitIdentPos = node.start; }\n    }\n    return node\n  };\n\n\n  pp$3.parseYield = function(noIn) {\n    if (!this.yieldPos) { this.yieldPos = this.start; }\n\n    var node = this.startNode();\n    this.next();\n    if (this.type === types.semi || this.canInsertSemicolon() || (this.type !== types.star && !this.type.startsExpr)) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(types.star);\n      node.argument = this.parseMaybeAssign(noIn);\n    }\n    return this.finishNode(node, \"YieldExpression\")\n  };\n\n  pp$3.parseAwait = function() {\n    if (!this.awaitPos) { this.awaitPos = this.start; }\n\n    var node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeUnary(null, false);\n    return this.finishNode(node, \"AwaitExpression\")\n  };\n\n  var pp$4 = Parser.prototype;\n\n\n  pp$4.raise = function(pos, message) {\n    var loc = getLineInfo(this.input, pos);\n    message += \" (\" + loc.line + \":\" + loc.column + \")\";\n    var err = new SyntaxError(message);\n    err.pos = pos; err.loc = loc; err.raisedAt = this.pos;\n    throw err\n  };\n\n  pp$4.raiseRecoverable = pp$4.raise;\n\n  pp$4.curPosition = function() {\n    if (this.options.locations) {\n      return new Position(this.curLine, this.pos - this.lineStart)\n    }\n  };\n\n  var pp$5 = Parser.prototype;\n\n  var Scope = function Scope(flags) {\n    this.flags = flags;\n    this.var = [];\n    this.lexical = [];\n    this.functions = [];\n  };\n\n\n  pp$5.enterScope = function(flags) {\n    this.scopeStack.push(new Scope(flags));\n  };\n\n  pp$5.exitScope = function() {\n    this.scopeStack.pop();\n  };\n\n  pp$5.treatFunctionsAsVarInScope = function(scope) {\n    return (scope.flags & SCOPE_FUNCTION) || !this.inModule && (scope.flags & SCOPE_TOP)\n  };\n\n  pp$5.declareName = function(name, bindingType, pos) {\n    var redeclared = false;\n    if (bindingType === BIND_LEXICAL) {\n      var scope = this.currentScope();\n      redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n      scope.lexical.push(name);\n      if (this.inModule && (scope.flags & SCOPE_TOP))\n        { delete this.undefinedExports[name]; }\n    } else if (bindingType === BIND_SIMPLE_CATCH) {\n      var scope$1 = this.currentScope();\n      scope$1.lexical.push(name);\n    } else if (bindingType === BIND_FUNCTION) {\n      var scope$2 = this.currentScope();\n      if (this.treatFunctionsAsVar)\n        { redeclared = scope$2.lexical.indexOf(name) > -1; }\n      else\n        { redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1; }\n      scope$2.functions.push(name);\n    } else {\n      for (var i = this.scopeStack.length - 1; i >= 0; --i) {\n        var scope$3 = this.scopeStack[i];\n        if (scope$3.lexical.indexOf(name) > -1 && !((scope$3.flags & SCOPE_SIMPLE_CATCH) && scope$3.lexical[0] === name) ||\n            !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {\n          redeclared = true;\n          break\n        }\n        scope$3.var.push(name);\n        if (this.inModule && (scope$3.flags & SCOPE_TOP))\n          { delete this.undefinedExports[name]; }\n        if (scope$3.flags & SCOPE_VAR) { break }\n      }\n    }\n    if (redeclared) { this.raiseRecoverable(pos, (\"Identifier '\" + name + \"' has already been declared\")); }\n  };\n\n  pp$5.checkLocalExport = function(id) {\n    if (this.scopeStack[0].lexical.indexOf(id.name) === -1 &&\n        this.scopeStack[0].var.indexOf(id.name) === -1) {\n      this.undefinedExports[id.name] = id;\n    }\n  };\n\n  pp$5.currentScope = function() {\n    return this.scopeStack[this.scopeStack.length - 1]\n  };\n\n  pp$5.currentVarScope = function() {\n    for (var i = this.scopeStack.length - 1;; i--) {\n      var scope = this.scopeStack[i];\n      if (scope.flags & SCOPE_VAR) { return scope }\n    }\n  };\n\n  pp$5.currentThisScope = function() {\n    for (var i = this.scopeStack.length - 1;; i--) {\n      var scope = this.scopeStack[i];\n      if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) { return scope }\n    }\n  };\n\n  var Node = function Node(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    if (parser.options.locations)\n      { this.loc = new SourceLocation(parser, loc); }\n    if (parser.options.directSourceFile)\n      { this.sourceFile = parser.options.directSourceFile; }\n    if (parser.options.ranges)\n      { this.range = [pos, 0]; }\n  };\n\n\n  var pp$6 = Parser.prototype;\n\n  pp$6.startNode = function() {\n    return new Node(this, this.start, this.startLoc)\n  };\n\n  pp$6.startNodeAt = function(pos, loc) {\n    return new Node(this, pos, loc)\n  };\n\n\n  function finishNodeAt(node, type, pos, loc) {\n    node.type = type;\n    node.end = pos;\n    if (this.options.locations)\n      { node.loc.end = loc; }\n    if (this.options.ranges)\n      { node.range[1] = pos; }\n    return node\n  }\n\n  pp$6.finishNode = function(node, type) {\n    return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)\n  };\n\n\n  pp$6.finishNodeAt = function(node, type, pos, loc) {\n    return finishNodeAt.call(this, node, type, pos, loc)\n  };\n\n\n  var TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n    this.override = override;\n    this.generator = !!generator;\n  };\n\n  var types$1 = {\n    b_stat: new TokContext(\"{\", false),\n    b_expr: new TokContext(\"{\", true),\n    b_tmpl: new TokContext(\"${\", false),\n    p_stat: new TokContext(\"(\", false),\n    p_expr: new TokContext(\"(\", true),\n    q_tmpl: new TokContext(\"`\", true, true, function (p) { return p.tryReadTemplateToken(); }),\n    f_stat: new TokContext(\"function\", false),\n    f_expr: new TokContext(\"function\", true),\n    f_expr_gen: new TokContext(\"function\", true, false, null, true),\n    f_gen: new TokContext(\"function\", false, false, null, true)\n  };\n\n  var pp$7 = Parser.prototype;\n\n  pp$7.initialContext = function() {\n    return [types$1.b_stat]\n  };\n\n  pp$7.braceIsBlock = function(prevType) {\n    var parent = this.curContext();\n    if (parent === types$1.f_expr || parent === types$1.f_stat)\n      { return true }\n    if (prevType === types.colon && (parent === types$1.b_stat || parent === types$1.b_expr))\n      { return !parent.isExpr }\n\n    if (prevType === types._return || prevType === types.name && this.exprAllowed)\n      { return lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) }\n    if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow)\n      { return true }\n    if (prevType === types.braceL)\n      { return parent === types$1.b_stat }\n    if (prevType === types._var || prevType === types._const || prevType === types.name)\n      { return false }\n    return !this.exprAllowed\n  };\n\n  pp$7.inGeneratorContext = function() {\n    for (var i = this.context.length - 1; i >= 1; i--) {\n      var context = this.context[i];\n      if (context.token === \"function\")\n        { return context.generator }\n    }\n    return false\n  };\n\n  pp$7.updateContext = function(prevType) {\n    var update, type = this.type;\n    if (type.keyword && prevType === types.dot)\n      { this.exprAllowed = false; }\n    else if (update = type.updateContext)\n      { update.call(this, prevType); }\n    else\n      { this.exprAllowed = type.beforeExpr; }\n  };\n\n\n  types.parenR.updateContext = types.braceR.updateContext = function() {\n    if (this.context.length === 1) {\n      this.exprAllowed = true;\n      return\n    }\n    var out = this.context.pop();\n    if (out === types$1.b_stat && this.curContext().token === \"function\") {\n      out = this.context.pop();\n    }\n    this.exprAllowed = !out.isExpr;\n  };\n\n  types.braceL.updateContext = function(prevType) {\n    this.context.push(this.braceIsBlock(prevType) ? types$1.b_stat : types$1.b_expr);\n    this.exprAllowed = true;\n  };\n\n  types.dollarBraceL.updateContext = function() {\n    this.context.push(types$1.b_tmpl);\n    this.exprAllowed = true;\n  };\n\n  types.parenL.updateContext = function(prevType) {\n    var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n    this.context.push(statementParens ? types$1.p_stat : types$1.p_expr);\n    this.exprAllowed = true;\n  };\n\n  types.incDec.updateContext = function() {\n  };\n\n  types._function.updateContext = types._class.updateContext = function(prevType) {\n    if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else &&\n        !(prevType === types._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) &&\n        !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat))\n      { this.context.push(types$1.f_expr); }\n    else\n      { this.context.push(types$1.f_stat); }\n    this.exprAllowed = false;\n  };\n\n  types.backQuote.updateContext = function() {\n    if (this.curContext() === types$1.q_tmpl)\n      { this.context.pop(); }\n    else\n      { this.context.push(types$1.q_tmpl); }\n    this.exprAllowed = false;\n  };\n\n  types.star.updateContext = function(prevType) {\n    if (prevType === types._function) {\n      var index = this.context.length - 1;\n      if (this.context[index] === types$1.f_expr)\n        { this.context[index] = types$1.f_expr_gen; }\n      else\n        { this.context[index] = types$1.f_gen; }\n    }\n    this.exprAllowed = true;\n  };\n\n  types.name.updateContext = function(prevType) {\n    var allowed = false;\n    if (this.options.ecmaVersion >= 6 && prevType !== types.dot) {\n      if (this.value === \"of\" && !this.exprAllowed ||\n          this.value === \"yield\" && this.inGeneratorContext())\n        { allowed = true; }\n    }\n    this.exprAllowed = allowed;\n  };\n\n\n  var ecma9BinaryProperties = \"ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS\";\n  var ecma10BinaryProperties = ecma9BinaryProperties + \" Extended_Pictographic\";\n  var ecma11BinaryProperties = ecma10BinaryProperties;\n  var unicodeBinaryProperties = {\n    9: ecma9BinaryProperties,\n    10: ecma10BinaryProperties,\n    11: ecma11BinaryProperties\n  };\n\n  var unicodeGeneralCategoryValues = \"Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu\";\n\n  var ecma9ScriptValues = \"Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb\";\n  var ecma10ScriptValues = ecma9ScriptValues + \" Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd\";\n  var ecma11ScriptValues = ecma10ScriptValues + \" Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho\";\n  var unicodeScriptValues = {\n    9: ecma9ScriptValues,\n    10: ecma10ScriptValues,\n    11: ecma11ScriptValues\n  };\n\n  var data = {};\n  function buildUnicodeData(ecmaVersion) {\n    var d = data[ecmaVersion] = {\n      binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + \" \" + unicodeGeneralCategoryValues),\n      nonBinary: {\n        General_Category: wordsRegexp(unicodeGeneralCategoryValues),\n        Script: wordsRegexp(unicodeScriptValues[ecmaVersion])\n      }\n    };\n    d.nonBinary.Script_Extensions = d.nonBinary.Script;\n\n    d.nonBinary.gc = d.nonBinary.General_Category;\n    d.nonBinary.sc = d.nonBinary.Script;\n    d.nonBinary.scx = d.nonBinary.Script_Extensions;\n  }\n  buildUnicodeData(9);\n  buildUnicodeData(10);\n  buildUnicodeData(11);\n\n  var pp$8 = Parser.prototype;\n\n  var RegExpValidationState = function RegExpValidationState(parser) {\n    this.parser = parser;\n    this.validFlags = \"gim\" + (parser.options.ecmaVersion >= 6 ? \"uy\" : \"\") + (parser.options.ecmaVersion >= 9 ? \"s\" : \"\");\n    this.unicodeProperties = data[parser.options.ecmaVersion >= 11 ? 11 : parser.options.ecmaVersion];\n    this.source = \"\";\n    this.flags = \"\";\n    this.start = 0;\n    this.switchU = false;\n    this.switchN = false;\n    this.pos = 0;\n    this.lastIntValue = 0;\n    this.lastStringValue = \"\";\n    this.lastAssertionIsQuantifiable = false;\n    this.numCapturingParens = 0;\n    this.maxBackReference = 0;\n    this.groupNames = [];\n    this.backReferenceNames = [];\n  };\n\n  RegExpValidationState.prototype.reset = function reset (start, pattern, flags) {\n    var unicode = flags.indexOf(\"u\") !== -1;\n    this.start = start | 0;\n    this.source = pattern + \"\";\n    this.flags = flags;\n    this.switchU = unicode && this.parser.options.ecmaVersion >= 6;\n    this.switchN = unicode && this.parser.options.ecmaVersion >= 9;\n  };\n\n  RegExpValidationState.prototype.raise = function raise (message) {\n    this.parser.raiseRecoverable(this.start, (\"Invalid regular expression: /\" + (this.source) + \"/: \" + message));\n  };\n\n  RegExpValidationState.prototype.at = function at (i) {\n    var s = this.source;\n    var l = s.length;\n    if (i >= l) {\n      return -1\n    }\n    var c = s.charCodeAt(i);\n    if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {\n      return c\n    }\n    var next = s.charCodeAt(i + 1);\n    return next >= 0xDC00 && next <= 0xDFFF ? (c << 10) + next - 0x35FDC00 : c\n  };\n\n  RegExpValidationState.prototype.nextIndex = function nextIndex (i) {\n    var s = this.source;\n    var l = s.length;\n    if (i >= l) {\n      return l\n    }\n    var c = s.charCodeAt(i), next;\n    if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l ||\n        (next = s.charCodeAt(i + 1)) < 0xDC00 || next > 0xDFFF) {\n      return i + 1\n    }\n    return i + 2\n  };\n\n  RegExpValidationState.prototype.current = function current () {\n    return this.at(this.pos)\n  };\n\n  RegExpValidationState.prototype.lookahead = function lookahead () {\n    return this.at(this.nextIndex(this.pos))\n  };\n\n  RegExpValidationState.prototype.advance = function advance () {\n    this.pos = this.nextIndex(this.pos);\n  };\n\n  RegExpValidationState.prototype.eat = function eat (ch) {\n    if (this.current() === ch) {\n      this.advance();\n      return true\n    }\n    return false\n  };\n\n  function codePointToString(ch) {\n    if (ch <= 0xFFFF) { return String.fromCharCode(ch) }\n    ch -= 0x10000;\n    return String.fromCharCode((ch >> 10) + 0xD800, (ch & 0x03FF) + 0xDC00)\n  }\n\n  pp$8.validateRegExpFlags = function(state) {\n    var validFlags = state.validFlags;\n    var flags = state.flags;\n\n    for (var i = 0; i < flags.length; i++) {\n      var flag = flags.charAt(i);\n      if (validFlags.indexOf(flag) === -1) {\n        this.raise(state.start, \"Invalid regular expression flag\");\n      }\n      if (flags.indexOf(flag, i + 1) > -1) {\n        this.raise(state.start, \"Duplicate regular expression flag\");\n      }\n    }\n  };\n\n  pp$8.validateRegExpPattern = function(state) {\n    this.regexp_pattern(state);\n\n    if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {\n      state.switchN = true;\n      this.regexp_pattern(state);\n    }\n  };\n\n  pp$8.regexp_pattern = function(state) {\n    state.pos = 0;\n    state.lastIntValue = 0;\n    state.lastStringValue = \"\";\n    state.lastAssertionIsQuantifiable = false;\n    state.numCapturingParens = 0;\n    state.maxBackReference = 0;\n    state.groupNames.length = 0;\n    state.backReferenceNames.length = 0;\n\n    this.regexp_disjunction(state);\n\n    if (state.pos !== state.source.length) {\n      if (state.eat(0x29 )) {\n        state.raise(\"Unmatched ')'\");\n      }\n      if (state.eat(0x5D ) || state.eat(0x7D )) {\n        state.raise(\"Lone quantifier brackets\");\n      }\n    }\n    if (state.maxBackReference > state.numCapturingParens) {\n      state.raise(\"Invalid escape\");\n    }\n    for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {\n      var name = list[i];\n\n      if (state.groupNames.indexOf(name) === -1) {\n        state.raise(\"Invalid named capture referenced\");\n      }\n    }\n  };\n\n  pp$8.regexp_disjunction = function(state) {\n    this.regexp_alternative(state);\n    while (state.eat(0x7C )) {\n      this.regexp_alternative(state);\n    }\n\n    if (this.regexp_eatQuantifier(state, true)) {\n      state.raise(\"Nothing to repeat\");\n    }\n    if (state.eat(0x7B )) {\n      state.raise(\"Lone quantifier brackets\");\n    }\n  };\n\n  pp$8.regexp_alternative = function(state) {\n    while (state.pos < state.source.length && this.regexp_eatTerm(state))\n      { }\n  };\n\n  pp$8.regexp_eatTerm = function(state) {\n    if (this.regexp_eatAssertion(state)) {\n      if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {\n        if (state.switchU) {\n          state.raise(\"Invalid quantifier\");\n        }\n      }\n      return true\n    }\n\n    if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {\n      this.regexp_eatQuantifier(state);\n      return true\n    }\n\n    return false\n  };\n\n  pp$8.regexp_eatAssertion = function(state) {\n    var start = state.pos;\n    state.lastAssertionIsQuantifiable = false;\n\n    if (state.eat(0x5E ) || state.eat(0x24 )) {\n      return true\n    }\n\n    if (state.eat(0x5C )) {\n      if (state.eat(0x42 ) || state.eat(0x62 )) {\n        return true\n      }\n      state.pos = start;\n    }\n\n    if (state.eat(0x28 ) && state.eat(0x3F )) {\n      var lookbehind = false;\n      if (this.options.ecmaVersion >= 9) {\n        lookbehind = state.eat(0x3C );\n      }\n      if (state.eat(0x3D ) || state.eat(0x21 )) {\n        this.regexp_disjunction(state);\n        if (!state.eat(0x29 )) {\n          state.raise(\"Unterminated group\");\n        }\n        state.lastAssertionIsQuantifiable = !lookbehind;\n        return true\n      }\n    }\n\n    state.pos = start;\n    return false\n  };\n\n  pp$8.regexp_eatQuantifier = function(state, noError) {\n    if ( noError === void 0 ) noError = false;\n\n    if (this.regexp_eatQuantifierPrefix(state, noError)) {\n      state.eat(0x3F );\n      return true\n    }\n    return false\n  };\n\n  pp$8.regexp_eatQuantifierPrefix = function(state, noError) {\n    return (\n      state.eat(0x2A ) ||\n      state.eat(0x2B ) ||\n      state.eat(0x3F ) ||\n      this.regexp_eatBracedQuantifier(state, noError)\n    )\n  };\n  pp$8.regexp_eatBracedQuantifier = function(state, noError) {\n    var start = state.pos;\n    if (state.eat(0x7B )) {\n      var min = 0, max = -1;\n      if (this.regexp_eatDecimalDigits(state)) {\n        min = state.lastIntValue;\n        if (state.eat(0x2C ) && this.regexp_eatDecimalDigits(state)) {\n          max = state.lastIntValue;\n        }\n        if (state.eat(0x7D )) {\n          if (max !== -1 && max < min && !noError) {\n            state.raise(\"numbers out of order in {} quantifier\");\n          }\n          return true\n        }\n      }\n      if (state.switchU && !noError) {\n        state.raise(\"Incomplete quantifier\");\n      }\n      state.pos = start;\n    }\n    return false\n  };\n\n  pp$8.regexp_eatAtom = function(state) {\n    return (\n      this.regexp_eatPatternCharacters(state) ||\n      state.eat(0x2E ) ||\n      this.regexp_eatReverseSolidusAtomEscape(state) ||\n      this.regexp_eatCharacterClass(state) ||\n      this.regexp_eatUncapturingGroup(state) ||\n      this.regexp_eatCapturingGroup(state)\n    )\n  };\n  pp$8.regexp_eatReverseSolidusAtomEscape = function(state) {\n    var start = state.pos;\n    if (state.eat(0x5C )) {\n      if (this.regexp_eatAtomEscape(state)) {\n        return true\n      }\n      state.pos = start;\n    }\n    return false\n  };\n  pp$8.regexp_eatUncapturingGroup = function(state) {\n    var start = state.pos;\n    if (state.eat(0x28 )) {\n      if (state.eat(0x3F ) && state.eat(0x3A )) {\n        this.regexp_disjunction(state);\n        if (state.eat(0x29 )) {\n          return true\n        }\n        state.raise(\"Unterminated group\");\n      }\n      state.pos = start;\n    }\n    return false\n  };\n  pp$8.regexp_eatCapturingGroup = function(state) {\n    if (state.eat(0x28 )) {\n      if (this.options.ecmaVersion >= 9) {\n        this.regexp_groupSpecifier(state);\n      } else if (state.current() === 0x3F ) {\n        state.raise(\"Invalid group\");\n      }\n      this.regexp_disjunction(state);\n      if (state.eat(0x29 )) {\n        state.numCapturingParens += 1;\n        return true\n      }\n      state.raise(\"Unterminated group\");\n    }\n    return false\n  };\n\n  pp$8.regexp_eatExtendedAtom = function(state) {\n    return (\n      state.eat(0x2E ) ||\n      this.regexp_eatReverseSolidusAtomEscape(state) ||\n      this.regexp_eatCharacterClass(state) ||\n      this.regexp_eatUncapturingGroup(state) ||\n      this.regexp_eatCapturingGroup(state) ||\n      this.regexp_eatInvalidBracedQuantifier(state) ||\n      this.regexp_eatExtendedPatternCharacter(state)\n    )\n  };\n\n  pp$8.regexp_eatInvalidBracedQuantifier = function(state) {\n    if (this.regexp_eatBracedQuantifier(state, true)) {\n      state.raise(\"Nothing to repeat\");\n    }\n    return false\n  };\n\n  pp$8.regexp_eatSyntaxCharacter = function(state) {\n    var ch = state.current();\n    if (isSyntaxCharacter(ch)) {\n      state.lastIntValue = ch;\n      state.advance();\n      return true\n    }\n    return false\n  };\n  function isSyntaxCharacter(ch) {\n    return (\n      ch === 0x24  ||\n      ch >= 0x28  && ch <= 0x2B  ||\n      ch === 0x2E  ||\n      ch === 0x3F  ||\n      ch >= 0x5B  && ch <= 0x5E  ||\n      ch >= 0x7B  && ch <= 0x7D \n    )\n  }\n\n  pp$8.regexp_eatPatternCharacters = function(state) {\n    var start = state.pos;\n    var ch = 0;\n    while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {\n      state.advance();\n    }\n    return state.pos !== start\n  };\n\n  pp$8.regexp_eatExtendedPatternCharacter = function(state) {\n    var ch = state.current();\n    if (\n      ch !== -1 &&\n      ch !== 0x24  &&\n      !(ch >= 0x28  && ch <= 0x2B ) &&\n      ch !== 0x2E  &&\n      ch !== 0x3F  &&\n      ch !== 0x5B  &&\n      ch !== 0x5E  &&\n      ch !== 0x7C \n    ) {\n      state.advance();\n      return true\n    }\n    return false\n  };\n\n  pp$8.regexp_groupSpecifier = function(state) {\n    if (state.eat(0x3F )) {\n      if (this.regexp_eatGroupName(state)) {\n        if (state.groupNames.indexOf(state.lastStringValue) !== -1) {\n          state.raise(\"Duplicate capture group name\");\n        }\n        state.groupNames.push(state.lastStringValue);\n        return\n      }\n      state.raise(\"Invalid group\");\n    }\n  };\n\n  pp$8.regexp_eatGroupName = function(state) {\n    state.lastStringValue = \"\";\n    if (state.eat(0x3C )) {\n      if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E )) {\n        return true\n      }\n      state.raise(\"Invalid capture group name\");\n    }\n    return false\n  };\n\n  pp$8.regexp_eatRegExpIdentifierName = function(state) {\n    state.lastStringValue = \"\";\n    if (this.regexp_eatRegExpIdentifierStart(state)) {\n      state.lastStringValue += codePointToString(state.lastIntValue);\n      while (this.regexp_eatRegExpIdentifierPart(state)) {\n        state.lastStringValue += codePointToString(state.lastIntValue);\n      }\n      return true\n    }\n    return false\n  };\n\n  pp$8.regexp_eatRegExpIdentifierStart = function(state) {\n    var start = state.pos;\n    var ch = state.current();\n    state.advance();\n\n    if (ch === 0x5C  && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {\n      ch = state.lastIntValue;\n    }\n    if (isRegExpIdentifierStart(ch)) {\n      state.lastIntValue = ch;\n      return true\n    }\n\n    state.pos = start;\n    return false\n  };\n  function isRegExpIdentifierStart(ch) {\n    return isIdentifierStart(ch, true) || ch === 0x24  || ch === 0x5F \n  }\n\n  pp$8.regexp_eatRegExpIdentifierPart = function(state) {\n    var start = state.pos;\n    var ch = state.current();\n    state.advance();\n\n    if (ch === 0x5C  && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {\n      ch = state.lastIntValue;\n    }\n    if (isRegExpIdentifierPart(ch)) {\n      state.lastIntValue = ch;\n      return true\n    }\n\n    state.pos = start;\n    return false\n  };\n  function isRegExpIdentifierPart(ch) {\n    return isIdentifierChar(ch, true) || ch === 0x24  || ch === 0x5F  || ch === 0x200C  || ch === 0x200D \n  }\n\n  pp$8.regexp_eatAtomEscape = function(state) {\n    if (\n      this.regexp_eatBackReference(state) ||\n      this.regexp_eatCharacterClassEscape(state) ||\n      this.regexp_eatCharacterEscape(state) ||\n      (state.switchN && this.regexp_eatKGroupName(state))\n    ) {\n      return true\n    }\n    if (state.switchU) {\n      if (state.current() === 0x63 ) {\n        state.raise(\"Invalid unicode escape\");\n      }\n      state.raise(\"Invalid escape\");\n    }\n    return false\n  };\n  pp$8.regexp_eatBackReference = function(state) {\n    var start = state.pos;\n    if (this.regexp_eatDecimalEscape(state)) {\n      var n = state.lastIntValue;\n      if (state.switchU) {\n        if (n > state.maxBackReference) {\n          state.maxBackReference = n;\n        }\n        return true\n      }\n      if (n <= state.numCapturingParens) {\n        return true\n      }\n      state.pos = start;\n    }\n    return false\n  };\n  pp$8.regexp_eatKGroupName = function(state) {\n    if (state.eat(0x6B )) {\n      if (this.regexp_eatGroupName(state)) {\n        state.backReferenceNames.push(state.lastStringValue);\n        return true\n      }\n      state.raise(\"Invalid named reference\");\n    }\n    return false\n  };\n\n  pp$8.regexp_eatCharacterEscape = function(state) {\n    return (\n      this.regexp_eatControlEscape(state) ||\n      this.regexp_eatCControlLetter(state) ||\n      this.regexp_eatZero(state) ||\n      this.regexp_eatHexEscapeSequence(state) ||\n      this.regexp_eatRegExpUnicodeEscapeSequence(state) ||\n      (!state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state)) ||\n      this.regexp_eatIdentityEscape(state)\n    )\n  };\n  pp$8.regexp_eatCControlLetter = function(state) {\n    var start = state.pos;\n    if (state.eat(0x63 )) {\n      if (this.regexp_eatControlLetter(state)) {\n        return true\n      }\n      state.pos = start;\n    }\n    return false\n  };\n  pp$8.regexp_eatZero = function(state) {\n    if (state.current() === 0x30  && !isDecimalDigit(state.lookahead())) {\n      state.lastIntValue = 0;\n      state.advance();\n      return true\n    }\n    return false\n  };\n\n  pp$8.regexp_eatControlEscape = function(state) {\n    var ch = state.current();\n    if (ch === 0x74 ) {\n      state.lastIntValue = 0x09; \n      state.advance();\n      return true\n    }\n    if (ch === 0x6E ) {\n      state.lastIntValue = 0x0A; \n      state.advance();\n      return true\n    }\n    if (ch === 0x76 ) {\n      state.lastIntValue = 0x0B; \n      state.advance();\n      return true\n    }\n    if (ch === 0x66 ) {\n      state.lastIntValue = 0x0C; \n      state.advance();\n      return true\n    }\n    if (ch === 0x72 ) {\n      state.lastIntValue = 0x0D; \n      state.advance();\n      return true\n    }\n    return false\n  };\n\n  pp$8.regexp_eatControlLetter = function(state) {\n    var ch = state.current();\n    if (isControlLetter(ch)) {\n      state.lastIntValue = ch % 0x20;\n      state.advance();\n      return true\n    }\n    return false\n  };\n  function isControlLetter(ch) {\n    return (\n      (ch >= 0x41  && ch <= 0x5A ) ||\n      (ch >= 0x61  && ch <= 0x7A )\n    )\n  }\n\n  pp$8.regexp_eatRegExpUnicodeEscapeSequence = function(state) {\n    var start = state.pos;\n\n    if (state.eat(0x75 )) {\n      if (this.regexp_eatFixedHexDigits(state, 4)) {\n        var lead = state.lastIntValue;\n        if (state.switchU && lead >= 0xD800 && lead <= 0xDBFF) {\n          var leadSurrogateEnd = state.pos;\n          if (state.eat(0x5C ) && state.eat(0x75 ) && this.regexp_eatFixedHexDigits(state, 4)) {\n            var trail = state.lastIntValue;\n            if (trail >= 0xDC00 && trail <= 0xDFFF) {\n              state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;\n              return true\n            }\n          }\n          state.pos = leadSurrogateEnd;\n          state.lastIntValue = lead;\n        }\n        return true\n      }\n      if (\n        state.switchU &&\n        state.eat(0x7B ) &&\n        this.regexp_eatHexDigits(state) &&\n        state.eat(0x7D ) &&\n        isValidUnicode(state.lastIntValue)\n      ) {\n        return true\n      }\n      if (state.switchU) {\n        state.raise(\"Invalid unicode escape\");\n      }\n      state.pos = start;\n    }\n\n    return false\n  };\n  function isValidUnicode(ch) {\n    return ch >= 0 && ch <= 0x10FFFF\n  }\n\n  pp$8.regexp_eatIdentityEscape = function(state) {\n    if (state.switchU) {\n      if (this.regexp_eatSyntaxCharacter(state)) {\n        return true\n      }\n      if (state.eat(0x2F )) {\n        state.lastIntValue = 0x2F; \n        return true\n      }\n      return false\n    }\n\n    var ch = state.current();\n    if (ch !== 0x63  && (!state.switchN || ch !== 0x6B )) {\n      state.lastIntValue = ch;\n      state.advance();\n      return true\n    }\n\n    return false\n  };\n\n  pp$8.regexp_eatDecimalEscape = function(state) {\n    state.lastIntValue = 0;\n    var ch = state.current();\n    if (ch >= 0x31  && ch <= 0x39 ) {\n      do {\n        state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 );\n        state.advance();\n      } while ((ch = state.current()) >= 0x30  && ch <= 0x39 )\n      return true\n    }\n    return false\n  };\n\n  pp$8.regexp_eatCharacterClassEscape = function(state) {\n    var ch = state.current();\n\n    if (isCharacterClassEscape(ch)) {\n      state.lastIntValue = -1;\n      state.advance();\n      return true\n    }\n\n    if (\n      state.switchU &&\n      this.options.ecmaVersion >= 9 &&\n      (ch === 0x50  || ch === 0x70 )\n    ) {\n      state.lastIntValue = -1;\n      state.advance();\n      if (\n        state.eat(0x7B ) &&\n        this.regexp_eatUnicodePropertyValueExpression(state) &&\n        state.eat(0x7D )\n      ) {\n        return true\n      }\n      state.raise(\"Invalid property name\");\n    }\n\n    return false\n  };\n  function isCharacterClassEscape(ch) {\n    return (\n      ch === 0x64  ||\n      ch === 0x44  ||\n      ch === 0x73  ||\n      ch === 0x53  ||\n      ch === 0x77  ||\n      ch === 0x57 \n    )\n  }\n\n  pp$8.regexp_eatUnicodePropertyValueExpression = function(state) {\n    var start = state.pos;\n\n    if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D )) {\n      var name = state.lastStringValue;\n      if (this.regexp_eatUnicodePropertyValue(state)) {\n        var value = state.lastStringValue;\n        this.regexp_validateUnicodePropertyNameAndValue(state, name, value);\n        return true\n      }\n    }\n    state.pos = start;\n\n    if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {\n      var nameOrValue = state.lastStringValue;\n      this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);\n      return true\n    }\n    return false\n  };\n  pp$8.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {\n    if (!has(state.unicodeProperties.nonBinary, name))\n      { state.raise(\"Invalid property name\"); }\n    if (!state.unicodeProperties.nonBinary[name].test(value))\n      { state.raise(\"Invalid property value\"); }\n  };\n  pp$8.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {\n    if (!state.unicodeProperties.binary.test(nameOrValue))\n      { state.raise(\"Invalid property name\"); }\n  };\n\n  pp$8.regexp_eatUnicodePropertyName = function(state) {\n    var ch = 0;\n    state.lastStringValue = \"\";\n    while (isUnicodePropertyNameCharacter(ch = state.current())) {\n      state.lastStringValue += codePointToString(ch);\n      state.advance();\n    }\n    return state.lastStringValue !== \"\"\n  };\n  function isUnicodePropertyNameCharacter(ch) {\n    return isControlLetter(ch) || ch === 0x5F \n  }\n\n  pp$8.regexp_eatUnicodePropertyValue = function(state) {\n    var ch = 0;\n    state.lastStringValue = \"\";\n    while (isUnicodePropertyValueCharacter(ch = state.current())) {\n      state.lastStringValue += codePointToString(ch);\n      state.advance();\n    }\n    return state.lastStringValue !== \"\"\n  };\n  function isUnicodePropertyValueCharacter(ch) {\n    return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch)\n  }\n\n  pp$8.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {\n    return this.regexp_eatUnicodePropertyValue(state)\n  };\n\n  pp$8.regexp_eatCharacterClass = function(state) {\n    if (state.eat(0x5B )) {\n      state.eat(0x5E );\n      this.regexp_classRanges(state);\n      if (state.eat(0x5D )) {\n        return true\n      }\n      state.raise(\"Unterminated character class\");\n    }\n    return false\n  };\n\n  pp$8.regexp_classRanges = function(state) {\n    while (this.regexp_eatClassAtom(state)) {\n      var left = state.lastIntValue;\n      if (state.eat(0x2D ) && this.regexp_eatClassAtom(state)) {\n        var right = state.lastIntValue;\n        if (state.switchU && (left === -1 || right === -1)) {\n          state.raise(\"Invalid character class\");\n        }\n        if (left !== -1 && right !== -1 && left > right) {\n          state.raise(\"Range out of order in character class\");\n        }\n      }\n    }\n  };\n\n  pp$8.regexp_eatClassAtom = function(state) {\n    var start = state.pos;\n\n    if (state.eat(0x5C )) {\n      if (this.regexp_eatClassEscape(state)) {\n        return true\n      }\n      if (state.switchU) {\n        var ch$1 = state.current();\n        if (ch$1 === 0x63  || isOctalDigit(ch$1)) {\n          state.raise(\"Invalid class escape\");\n        }\n        state.raise(\"Invalid escape\");\n      }\n      state.pos = start;\n    }\n\n    var ch = state.current();\n    if (ch !== 0x5D ) {\n      state.lastIntValue = ch;\n      state.advance();\n      return true\n    }\n\n    return false\n  };\n\n  pp$8.regexp_eatClassEscape = function(state) {\n    var start = state.pos;\n\n    if (state.eat(0x62 )) {\n      state.lastIntValue = 0x08; \n      return true\n    }\n\n    if (state.switchU && state.eat(0x2D )) {\n      state.lastIntValue = 0x2D; \n      return true\n    }\n\n    if (!state.switchU && state.eat(0x63 )) {\n      if (this.regexp_eatClassControlLetter(state)) {\n        return true\n      }\n      state.pos = start;\n    }\n\n    return (\n      this.regexp_eatCharacterClassEscape(state) ||\n      this.regexp_eatCharacterEscape(state)\n    )\n  };\n\n  pp$8.regexp_eatClassControlLetter = function(state) {\n    var ch = state.current();\n    if (isDecimalDigit(ch) || ch === 0x5F ) {\n      state.lastIntValue = ch % 0x20;\n      state.advance();\n      return true\n    }\n    return false\n  };\n\n  pp$8.regexp_eatHexEscapeSequence = function(state) {\n    var start = state.pos;\n    if (state.eat(0x78 )) {\n      if (this.regexp_eatFixedHexDigits(state, 2)) {\n        return true\n      }\n      if (state.switchU) {\n        state.raise(\"Invalid escape\");\n      }\n      state.pos = start;\n    }\n    return false\n  };\n\n  pp$8.regexp_eatDecimalDigits = function(state) {\n    var start = state.pos;\n    var ch = 0;\n    state.lastIntValue = 0;\n    while (isDecimalDigit(ch = state.current())) {\n      state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 );\n      state.advance();\n    }\n    return state.pos !== start\n  };\n  function isDecimalDigit(ch) {\n    return ch >= 0x30  && ch <= 0x39 \n  }\n\n  pp$8.regexp_eatHexDigits = function(state) {\n    var start = state.pos;\n    var ch = 0;\n    state.lastIntValue = 0;\n    while (isHexDigit(ch = state.current())) {\n      state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n      state.advance();\n    }\n    return state.pos !== start\n  };\n  function isHexDigit(ch) {\n    return (\n      (ch >= 0x30  && ch <= 0x39 ) ||\n      (ch >= 0x41  && ch <= 0x46 ) ||\n      (ch >= 0x61  && ch <= 0x66 )\n    )\n  }\n  function hexToInt(ch) {\n    if (ch >= 0x41  && ch <= 0x46 ) {\n      return 10 + (ch - 0x41 )\n    }\n    if (ch >= 0x61  && ch <= 0x66 ) {\n      return 10 + (ch - 0x61 )\n    }\n    return ch - 0x30 \n  }\n\n  pp$8.regexp_eatLegacyOctalEscapeSequence = function(state) {\n    if (this.regexp_eatOctalDigit(state)) {\n      var n1 = state.lastIntValue;\n      if (this.regexp_eatOctalDigit(state)) {\n        var n2 = state.lastIntValue;\n        if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {\n          state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;\n        } else {\n          state.lastIntValue = n1 * 8 + n2;\n        }\n      } else {\n        state.lastIntValue = n1;\n      }\n      return true\n    }\n    return false\n  };\n\n  pp$8.regexp_eatOctalDigit = function(state) {\n    var ch = state.current();\n    if (isOctalDigit(ch)) {\n      state.lastIntValue = ch - 0x30; \n      state.advance();\n      return true\n    }\n    state.lastIntValue = 0;\n    return false\n  };\n  function isOctalDigit(ch) {\n    return ch >= 0x30  && ch <= 0x37 \n  }\n\n  pp$8.regexp_eatFixedHexDigits = function(state, length) {\n    var start = state.pos;\n    state.lastIntValue = 0;\n    for (var i = 0; i < length; ++i) {\n      var ch = state.current();\n      if (!isHexDigit(ch)) {\n        state.pos = start;\n        return false\n      }\n      state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n      state.advance();\n    }\n    return true\n  };\n\n\n  var Token = function Token(p) {\n    this.type = p.type;\n    this.value = p.value;\n    this.start = p.start;\n    this.end = p.end;\n    if (p.options.locations)\n      { this.loc = new SourceLocation(p, p.startLoc, p.endLoc); }\n    if (p.options.ranges)\n      { this.range = [p.start, p.end]; }\n  };\n\n\n  var pp$9 = Parser.prototype;\n\n\n  pp$9.next = function(ignoreEscapeSequenceInKeyword) {\n    if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc)\n      { this.raiseRecoverable(this.start, \"Escape sequence in keyword \" + this.type.keyword); }\n    if (this.options.onToken)\n      { this.options.onToken(new Token(this)); }\n\n    this.lastTokEnd = this.end;\n    this.lastTokStart = this.start;\n    this.lastTokEndLoc = this.endLoc;\n    this.lastTokStartLoc = this.startLoc;\n    this.nextToken();\n  };\n\n  pp$9.getToken = function() {\n    this.next();\n    return new Token(this)\n  };\n\n  if (typeof Symbol !== \"undefined\")\n    { pp$9[Symbol.iterator] = function() {\n      var this$1 = this;\n\n      return {\n        next: function () {\n          var token = this$1.getToken();\n          return {\n            done: token.type === types.eof,\n            value: token\n          }\n        }\n      }\n    }; }\n\n\n  pp$9.curContext = function() {\n    return this.context[this.context.length - 1]\n  };\n\n\n  pp$9.nextToken = function() {\n    var curContext = this.curContext();\n    if (!curContext || !curContext.preserveSpace) { this.skipSpace(); }\n\n    this.start = this.pos;\n    if (this.options.locations) { this.startLoc = this.curPosition(); }\n    if (this.pos >= this.input.length) { return this.finishToken(types.eof) }\n\n    if (curContext.override) { return curContext.override(this) }\n    else { this.readToken(this.fullCharCodeAtPos()); }\n  };\n\n  pp$9.readToken = function(code) {\n    if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 )\n      { return this.readWord() }\n\n    return this.getTokenFromCode(code)\n  };\n\n  pp$9.fullCharCodeAtPos = function() {\n    var code = this.input.charCodeAt(this.pos);\n    if (code <= 0xd7ff || code >= 0xe000) { return code }\n    var next = this.input.charCodeAt(this.pos + 1);\n    return (code << 10) + next - 0x35fdc00\n  };\n\n  pp$9.skipBlockComment = function() {\n    var startLoc = this.options.onComment && this.curPosition();\n    var start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2);\n    if (end === -1) { this.raise(this.pos - 2, \"Unterminated comment\"); }\n    this.pos = end + 2;\n    if (this.options.locations) {\n      lineBreakG.lastIndex = start;\n      var match;\n      while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {\n        ++this.curLine;\n        this.lineStart = match.index + match[0].length;\n      }\n    }\n    if (this.options.onComment)\n      { this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,\n                             startLoc, this.curPosition()); }\n  };\n\n  pp$9.skipLineComment = function(startSkip) {\n    var start = this.pos;\n    var startLoc = this.options.onComment && this.curPosition();\n    var ch = this.input.charCodeAt(this.pos += startSkip);\n    while (this.pos < this.input.length && !isNewLine(ch)) {\n      ch = this.input.charCodeAt(++this.pos);\n    }\n    if (this.options.onComment)\n      { this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,\n                             startLoc, this.curPosition()); }\n  };\n\n\n  pp$9.skipSpace = function() {\n    loop: while (this.pos < this.input.length) {\n      var ch = this.input.charCodeAt(this.pos);\n      switch (ch) {\n      case 32: case 160: \n        ++this.pos;\n        break\n      case 13:\n        if (this.input.charCodeAt(this.pos + 1) === 10) {\n          ++this.pos;\n        }\n      case 10: case 8232: case 8233:\n        ++this.pos;\n        if (this.options.locations) {\n          ++this.curLine;\n          this.lineStart = this.pos;\n        }\n        break\n      case 47: \n        switch (this.input.charCodeAt(this.pos + 1)) {\n        case 42: \n          this.skipBlockComment();\n          break\n        case 47:\n          this.skipLineComment(2);\n          break\n        default:\n          break loop\n        }\n        break\n      default:\n        if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n          ++this.pos;\n        } else {\n          break loop\n        }\n      }\n    }\n  };\n\n\n  pp$9.finishToken = function(type, val) {\n    this.end = this.pos;\n    if (this.options.locations) { this.endLoc = this.curPosition(); }\n    var prevType = this.type;\n    this.type = type;\n    this.value = val;\n\n    this.updateContext(prevType);\n  };\n\n\n  pp$9.readToken_dot = function() {\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next >= 48 && next <= 57) { return this.readNumber(true) }\n    var next2 = this.input.charCodeAt(this.pos + 2);\n    if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { \n      this.pos += 3;\n      return this.finishToken(types.ellipsis)\n    } else {\n      ++this.pos;\n      return this.finishToken(types.dot)\n    }\n  };\n\n  pp$9.readToken_slash = function() { \n    var next = this.input.charCodeAt(this.pos + 1);\n    if (this.exprAllowed) { ++this.pos; return this.readRegexp() }\n    if (next === 61) { return this.finishOp(types.assign, 2) }\n    return this.finishOp(types.slash, 1)\n  };\n\n  pp$9.readToken_mult_modulo_exp = function(code) { \n    var next = this.input.charCodeAt(this.pos + 1);\n    var size = 1;\n    var tokentype = code === 42 ? types.star : types.modulo;\n\n    if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {\n      ++size;\n      tokentype = types.starstar;\n      next = this.input.charCodeAt(this.pos + 2);\n    }\n\n    if (next === 61) { return this.finishOp(types.assign, size + 1) }\n    return this.finishOp(tokentype, size)\n  };\n\n  pp$9.readToken_pipe_amp = function(code) { \n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === code) { return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2) }\n    if (next === 61) { return this.finishOp(types.assign, 2) }\n    return this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1)\n  };\n\n  pp$9.readToken_caret = function() { \n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 61) { return this.finishOp(types.assign, 2) }\n    return this.finishOp(types.bitwiseXOR, 1)\n  };\n\n  pp$9.readToken_plus_min = function(code) { \n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === code) {\n      if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 &&\n          (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {\n        this.skipLineComment(3);\n        this.skipSpace();\n        return this.nextToken()\n      }\n      return this.finishOp(types.incDec, 2)\n    }\n    if (next === 61) { return this.finishOp(types.assign, 2) }\n    return this.finishOp(types.plusMin, 1)\n  };\n\n  pp$9.readToken_lt_gt = function(code) { \n    var next = this.input.charCodeAt(this.pos + 1);\n    var size = 1;\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\n      if (this.input.charCodeAt(this.pos + size) === 61) { return this.finishOp(types.assign, size + 1) }\n      return this.finishOp(types.bitShift, size)\n    }\n    if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 &&\n        this.input.charCodeAt(this.pos + 3) === 45) {\n      this.skipLineComment(4);\n      this.skipSpace();\n      return this.nextToken()\n    }\n    if (next === 61) { size = 2; }\n    return this.finishOp(types.relational, size)\n  };\n\n  pp$9.readToken_eq_excl = function(code) { \n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 61) { return this.finishOp(types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) }\n    if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { \n      this.pos += 2;\n      return this.finishToken(types.arrow)\n    }\n    return this.finishOp(code === 61 ? types.eq : types.prefix, 1)\n  };\n\n  pp$9.getTokenFromCode = function(code) {\n    switch (code) {\n    case 46: \n      return this.readToken_dot()\n\n    case 40: ++this.pos; return this.finishToken(types.parenL)\n    case 41: ++this.pos; return this.finishToken(types.parenR)\n    case 59: ++this.pos; return this.finishToken(types.semi)\n    case 44: ++this.pos; return this.finishToken(types.comma)\n    case 91: ++this.pos; return this.finishToken(types.bracketL)\n    case 93: ++this.pos; return this.finishToken(types.bracketR)\n    case 123: ++this.pos; return this.finishToken(types.braceL)\n    case 125: ++this.pos; return this.finishToken(types.braceR)\n    case 58: ++this.pos; return this.finishToken(types.colon)\n    case 63: ++this.pos; return this.finishToken(types.question)\n\n    case 96: \n      if (this.options.ecmaVersion < 6) { break }\n      ++this.pos;\n      return this.finishToken(types.backQuote)\n\n    case 48: \n      var next = this.input.charCodeAt(this.pos + 1);\n      if (next === 120 || next === 88) { return this.readRadixNumber(16) } \n      if (this.options.ecmaVersion >= 6) {\n        if (next === 111 || next === 79) { return this.readRadixNumber(8) } \n        if (next === 98 || next === 66) { return this.readRadixNumber(2) } \n      }\n\n    case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: \n      return this.readNumber(false)\n\n    case 34: case 39: \n      return this.readString(code)\n\n\n    case 47: \n      return this.readToken_slash()\n\n    case 37: case 42: \n      return this.readToken_mult_modulo_exp(code)\n\n    case 124: case 38: \n      return this.readToken_pipe_amp(code)\n\n    case 94: \n      return this.readToken_caret()\n\n    case 43: case 45: \n      return this.readToken_plus_min(code)\n\n    case 60: case 62: \n      return this.readToken_lt_gt(code)\n\n    case 61: case 33: \n      return this.readToken_eq_excl(code)\n\n    case 126: \n      return this.finishOp(types.prefix, 1)\n    }\n\n    this.raise(this.pos, \"Unexpected character '\" + codePointToString$1(code) + \"'\");\n  };\n\n  pp$9.finishOp = function(type, size) {\n    var str = this.input.slice(this.pos, this.pos + size);\n    this.pos += size;\n    return this.finishToken(type, str)\n  };\n\n  pp$9.readRegexp = function() {\n    var escaped, inClass, start = this.pos;\n    for (;;) {\n      if (this.pos >= this.input.length) { this.raise(start, \"Unterminated regular expression\"); }\n      var ch = this.input.charAt(this.pos);\n      if (lineBreak.test(ch)) { this.raise(start, \"Unterminated regular expression\"); }\n      if (!escaped) {\n        if (ch === \"[\") { inClass = true; }\n        else if (ch === \"]\" && inClass) { inClass = false; }\n        else if (ch === \"/\" && !inClass) { break }\n        escaped = ch === \"\\\\\";\n      } else { escaped = false; }\n      ++this.pos;\n    }\n    var pattern = this.input.slice(start, this.pos);\n    ++this.pos;\n    var flagsStart = this.pos;\n    var flags = this.readWord1();\n    if (this.containsEsc) { this.unexpected(flagsStart); }\n\n    var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));\n    state.reset(start, pattern, flags);\n    this.validateRegExpFlags(state);\n    this.validateRegExpPattern(state);\n\n    var value = null;\n    try {\n      value = new RegExp(pattern, flags);\n    } catch (e) {\n    }\n\n    return this.finishToken(types.regexp, {pattern: pattern, flags: flags, value: value})\n  };\n\n\n  pp$9.readInt = function(radix, len) {\n    var start = this.pos, total = 0;\n    for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      var code = this.input.charCodeAt(this.pos), val = (void 0);\n      if (code >= 97) { val = code - 97 + 10; } \n      else if (code >= 65) { val = code - 65 + 10; } \n      else if (code >= 48 && code <= 57) { val = code - 48; } \n      else { val = Infinity; }\n      if (val >= radix) { break }\n      ++this.pos;\n      total = total * radix + val;\n    }\n    if (this.pos === start || len != null && this.pos - start !== len) { return null }\n\n    return total\n  };\n\n  pp$9.readRadixNumber = function(radix) {\n    var start = this.pos;\n    this.pos += 2; \n    var val = this.readInt(radix);\n    if (val == null) { this.raise(this.start + 2, \"Expected number in radix \" + radix); }\n    if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {\n      val = typeof BigInt !== \"undefined\" ? BigInt(this.input.slice(start, this.pos)) : null;\n      ++this.pos;\n    } else if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n    return this.finishToken(types.num, val)\n  };\n\n\n  pp$9.readNumber = function(startsWithDot) {\n    var start = this.pos;\n    if (!startsWithDot && this.readInt(10) === null) { this.raise(start, \"Invalid number\"); }\n    var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n    if (octal && this.strict) { this.raise(start, \"Invalid number\"); }\n    var next = this.input.charCodeAt(this.pos);\n    if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {\n      var str$1 = this.input.slice(start, this.pos);\n      var val$1 = typeof BigInt !== \"undefined\" ? BigInt(str$1) : null;\n      ++this.pos;\n      if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n      return this.finishToken(types.num, val$1)\n    }\n    if (octal && /[89]/.test(this.input.slice(start, this.pos))) { octal = false; }\n    if (next === 46 && !octal) { \n      ++this.pos;\n      this.readInt(10);\n      next = this.input.charCodeAt(this.pos);\n    }\n    if ((next === 69 || next === 101) && !octal) { \n      next = this.input.charCodeAt(++this.pos);\n      if (next === 43 || next === 45) { ++this.pos; } \n      if (this.readInt(10) === null) { this.raise(start, \"Invalid number\"); }\n    }\n    if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n\n    var str = this.input.slice(start, this.pos);\n    var val = octal ? parseInt(str, 8) : parseFloat(str);\n    return this.finishToken(types.num, val)\n  };\n\n\n  pp$9.readCodePoint = function() {\n    var ch = this.input.charCodeAt(this.pos), code;\n\n    if (ch === 123) { \n      if (this.options.ecmaVersion < 6) { this.unexpected(); }\n      var codePos = ++this.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.pos) - this.pos);\n      ++this.pos;\n      if (code > 0x10FFFF) { this.invalidStringToken(codePos, \"Code point out of bounds\"); }\n    } else {\n      code = this.readHexChar(4);\n    }\n    return code\n  };\n\n  function codePointToString$1(code) {\n    if (code <= 0xFFFF) { return String.fromCharCode(code) }\n    code -= 0x10000;\n    return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)\n  }\n\n  pp$9.readString = function(quote) {\n    var out = \"\", chunkStart = ++this.pos;\n    for (;;) {\n      if (this.pos >= this.input.length) { this.raise(this.start, \"Unterminated string constant\"); }\n      var ch = this.input.charCodeAt(this.pos);\n      if (ch === quote) { break }\n      if (ch === 92) { \n        out += this.input.slice(chunkStart, this.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.pos;\n      } else {\n        if (isNewLine(ch, this.options.ecmaVersion >= 10)) { this.raise(this.start, \"Unterminated string constant\"); }\n        ++this.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.pos++);\n    return this.finishToken(types.string, out)\n  };\n\n\n  var INVALID_TEMPLATE_ESCAPE_ERROR = {};\n\n  pp$9.tryReadTemplateToken = function() {\n    this.inTemplateElement = true;\n    try {\n      this.readTmplToken();\n    } catch (err) {\n      if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {\n        this.readInvalidTemplateToken();\n      } else {\n        throw err\n      }\n    }\n\n    this.inTemplateElement = false;\n  };\n\n  pp$9.invalidStringToken = function(position, message) {\n    if (this.inTemplateElement && this.options.ecmaVersion >= 9) {\n      throw INVALID_TEMPLATE_ESCAPE_ERROR\n    } else {\n      this.raise(position, message);\n    }\n  };\n\n  pp$9.readTmplToken = function() {\n    var out = \"\", chunkStart = this.pos;\n    for (;;) {\n      if (this.pos >= this.input.length) { this.raise(this.start, \"Unterminated template\"); }\n      var ch = this.input.charCodeAt(this.pos);\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) { \n        if (this.pos === this.start && (this.type === types.template || this.type === types.invalidTemplate)) {\n          if (ch === 36) {\n            this.pos += 2;\n            return this.finishToken(types.dollarBraceL)\n          } else {\n            ++this.pos;\n            return this.finishToken(types.backQuote)\n          }\n        }\n        out += this.input.slice(chunkStart, this.pos);\n        return this.finishToken(types.template, out)\n      }\n      if (ch === 92) { \n        out += this.input.slice(chunkStart, this.pos);\n        out += this.readEscapedChar(true);\n        chunkStart = this.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.pos);\n        ++this.pos;\n        switch (ch) {\n        case 13:\n          if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; }\n        case 10:\n          out += \"\\n\";\n          break\n        default:\n          out += String.fromCharCode(ch);\n          break\n        }\n        if (this.options.locations) {\n          ++this.curLine;\n          this.lineStart = this.pos;\n        }\n        chunkStart = this.pos;\n      } else {\n        ++this.pos;\n      }\n    }\n  };\n\n  pp$9.readInvalidTemplateToken = function() {\n    for (; this.pos < this.input.length; this.pos++) {\n      switch (this.input[this.pos]) {\n      case \"\\\\\":\n        ++this.pos;\n        break\n\n      case \"$\":\n        if (this.input[this.pos + 1] !== \"{\") {\n          break\n        }\n\n      case \"`\":\n        return this.finishToken(types.invalidTemplate, this.input.slice(this.start, this.pos))\n\n      }\n    }\n    this.raise(this.start, \"Unterminated template\");\n  };\n\n\n  pp$9.readEscapedChar = function(inTemplate) {\n    var ch = this.input.charCodeAt(++this.pos);\n    ++this.pos;\n    switch (ch) {\n    case 110: return \"\\n\" \n    case 114: return \"\\r\" \n    case 120: return String.fromCharCode(this.readHexChar(2)) \n    case 117: return codePointToString$1(this.readCodePoint()) \n    case 116: return \"\\t\" \n    case 98: return \"\\b\" \n    case 118: return \"\\u000b\" \n    case 102: return \"\\f\" \n    case 13: if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; } \n    case 10: \n      if (this.options.locations) { this.lineStart = this.pos; ++this.curLine; }\n      return \"\"\n    case 56:\n    case 57:\n      if (inTemplate) {\n        var codePos = this.pos - 1;\n\n        this.invalidStringToken(\n          codePos,\n          \"Invalid escape sequence in template string\"\n        );\n\n        return null\n      }\n    default:\n      if (ch >= 48 && ch <= 55) {\n        var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];\n        var octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        this.pos += octalStr.length - 1;\n        ch = this.input.charCodeAt(this.pos);\n        if ((octalStr !== \"0\" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {\n          this.invalidStringToken(\n            this.pos - 1 - octalStr.length,\n            inTemplate\n              ? \"Octal literal in template string\"\n              : \"Octal literal in strict mode\"\n          );\n        }\n        return String.fromCharCode(octal)\n      }\n      if (isNewLine(ch)) {\n        return \"\"\n      }\n      return String.fromCharCode(ch)\n    }\n  };\n\n\n  pp$9.readHexChar = function(len) {\n    var codePos = this.pos;\n    var n = this.readInt(16, len);\n    if (n === null) { this.invalidStringToken(codePos, \"Bad character escape sequence\"); }\n    return n\n  };\n\n\n  pp$9.readWord1 = function() {\n    this.containsEsc = false;\n    var word = \"\", first = true, chunkStart = this.pos;\n    var astral = this.options.ecmaVersion >= 6;\n    while (this.pos < this.input.length) {\n      var ch = this.fullCharCodeAtPos();\n      if (isIdentifierChar(ch, astral)) {\n        this.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === 92) { \n        this.containsEsc = true;\n        word += this.input.slice(chunkStart, this.pos);\n        var escStart = this.pos;\n        if (this.input.charCodeAt(++this.pos) !== 117) \n          { this.invalidStringToken(this.pos, \"Expecting Unicode escape sequence \\\\uXXXX\"); }\n        ++this.pos;\n        var esc = this.readCodePoint();\n        if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))\n          { this.invalidStringToken(escStart, \"Invalid Unicode escape\"); }\n        word += codePointToString$1(esc);\n        chunkStart = this.pos;\n      } else {\n        break\n      }\n      first = false;\n    }\n    return word + this.input.slice(chunkStart, this.pos)\n  };\n\n\n  pp$9.readWord = function() {\n    var word = this.readWord1();\n    var type = types.name;\n    if (this.keywords.test(word)) {\n      type = keywords$1[word];\n    }\n    return this.finishToken(type, word)\n  };\n\n\n  var version = \"7.1.0\";\n\n  Parser.acorn = {\n    Parser: Parser,\n    version: version,\n    defaultOptions: defaultOptions,\n    Position: Position,\n    SourceLocation: SourceLocation,\n    getLineInfo: getLineInfo,\n    Node: Node,\n    TokenType: TokenType,\n    tokTypes: types,\n    keywordTypes: keywords$1,\n    TokContext: TokContext,\n    tokContexts: types$1,\n    isIdentifierChar: isIdentifierChar,\n    isIdentifierStart: isIdentifierStart,\n    Token: Token,\n    isNewLine: isNewLine,\n    lineBreak: lineBreak,\n    lineBreakG: lineBreakG,\n    nonASCIIwhitespace: nonASCIIwhitespace\n  };\n\n\n  function parse(input, options) {\n    return Parser.parse(input, options)\n  }\n\n\n  function parseExpressionAt(input, pos, options) {\n    return Parser.parseExpressionAt(input, pos, options)\n  }\n\n\n  function tokenizer(input, options) {\n    return Parser.tokenizer(input, options)\n  }\n\n  exports.Node = Node;\n  exports.Parser = Parser;\n  exports.Position = Position;\n  exports.SourceLocation = SourceLocation;\n  exports.TokContext = TokContext;\n  exports.Token = Token;\n  exports.TokenType = TokenType;\n  exports.defaultOptions = defaultOptions;\n  exports.getLineInfo = getLineInfo;\n  exports.isIdentifierChar = isIdentifierChar;\n  exports.isIdentifierStart = isIdentifierStart;\n  exports.isNewLine = isNewLine;\n  exports.keywordTypes = keywords$1;\n  exports.lineBreak = lineBreak;\n  exports.lineBreakG = lineBreakG;\n  exports.nonASCIIwhitespace = nonASCIIwhitespace;\n  exports.parse = parse;\n  exports.parseExpressionAt = parseExpressionAt;\n  exports.tokContexts = types$1;\n  exports.tokTypes = types;\n  exports.tokenizer = tokenizer;\n  exports.version = version;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n\n},{}],2:[function(require,module,exports){\n\n},{}],3:[function(require,module,exports){\nfunction glWiretap(gl, options = {}) {\n  const {\n    contextName = 'gl',\n    throwGetError,\n    useTrackablePrimitives,\n    readPixelsFile,\n    recording = [],\n    variables = {},\n    onReadPixels,\n    onUnrecognizedArgumentLookup,\n  } = options;\n  const proxy = new Proxy(gl, { get: listen });\n  const contextVariables = [];\n  const entityNames = {};\n  let imageCount = 0;\n  let indent = '';\n  let readPixelsVariableName;\n  return proxy;\n  function listen(obj, property) {\n    switch (property) {\n      case 'addComment': return addComment;\n      case 'checkThrowError': return checkThrowError;\n      case 'getReadPixelsVariableName': return readPixelsVariableName;\n      case 'insertVariable': return insertVariable;\n      case 'reset': return reset;\n      case 'setIndent': return setIndent;\n      case 'toString': return toString;\n      case 'getContextVariableName': return getContextVariableName;\n    }\n    if (typeof gl[property] === 'function') {\n      return function() { \n        switch (property) {\n          case 'getError':\n            if (throwGetError) {\n              recording.push(`${indent}if (${contextName}.getError() !== ${contextName}.NONE) throw new Error('error');`);\n            } else {\n              recording.push(`${indent}${contextName}.getError();`); \n            }\n            return gl.getError();\n          case 'getExtension': {\n            const variableName = `${contextName}Variables${contextVariables.length}`;\n            recording.push(`${indent}const ${variableName} = ${contextName}.getExtension('${arguments[0]}');`);\n            const extension = gl.getExtension(arguments[0]);\n            if (extension && typeof extension === 'object') {\n              const tappedExtension = glExtensionWiretap(extension, {\n                getEntity,\n                useTrackablePrimitives,\n                recording,\n                contextName: variableName,\n                contextVariables,\n                variables,\n                indent,\n                onUnrecognizedArgumentLookup,\n              });\n              contextVariables.push(tappedExtension);\n              return tappedExtension;\n            } else {\n              contextVariables.push(null);\n            }\n            return extension;\n          }\n          case 'readPixels':\n            const i = contextVariables.indexOf(arguments[6]);\n            let targetVariableName;\n            if (i === -1) {\n              const variableName = getVariableName(arguments[6]);\n              if (variableName) {\n                targetVariableName = variableName;\n                recording.push(`${indent}${variableName}`);\n              } else {\n                targetVariableName = `${contextName}Variable${contextVariables.length}`;\n                contextVariables.push(arguments[6]);\n                recording.push(`${indent}const ${targetVariableName} = new ${arguments[6].constructor.name}(${arguments[6].length});`);\n              }\n            } else {\n              targetVariableName = `${contextName}Variable${i}`;\n            }\n            readPixelsVariableName = targetVariableName;\n            const argumentAsStrings = [\n              arguments[0],\n              arguments[1],\n              arguments[2],\n              arguments[3],\n              getEntity(arguments[4]),\n              getEntity(arguments[5]),\n              targetVariableName\n            ];\n            recording.push(`${indent}${contextName}.readPixels(${argumentAsStrings.join(', ')});`);\n            if (readPixelsFile) {\n              writePPM(arguments[2], arguments[3]);\n            }\n            if (onReadPixels) {\n              onReadPixels(targetVariableName, argumentAsStrings);\n            }\n            return gl.readPixels.apply(gl, arguments);\n          case 'drawBuffers':\n            recording.push(`${indent}${contextName}.drawBuffers([${argumentsToString(arguments[0], { contextName, contextVariables, getEntity, addVariable, variables, onUnrecognizedArgumentLookup } )}]);`);\n            return gl.drawBuffers(arguments[0]);\n        }\n        let result = gl[property].apply(gl, arguments);\n        switch (typeof result) {\n          case 'undefined':\n            recording.push(`${indent}${methodCallToString(property, arguments)};`);\n            return;\n          case 'number':\n          case 'boolean':\n            if (useTrackablePrimitives && contextVariables.indexOf(trackablePrimitive(result)) === -1) {\n              recording.push(`${indent}const ${contextName}Variable${contextVariables.length} = ${methodCallToString(property, arguments)};`);\n              contextVariables.push(result = trackablePrimitive(result));\n              break;\n            }\n          default:\n            if (result === null) {\n              recording.push(`${methodCallToString(property, arguments)};`);\n            } else {\n              recording.push(`${indent}const ${contextName}Variable${contextVariables.length} = ${methodCallToString(property, arguments)};`);\n            }\n\n            contextVariables.push(result);\n        }\n        return result;\n      }\n    }\n    entityNames[gl[property]] = property;\n    return gl[property];\n  }\n  function toString() {\n    return recording.join('\\n');\n  }\n  function reset() {\n    while (recording.length > 0) {\n      recording.pop();\n    }\n  }\n  function insertVariable(name, value) {\n    variables[name] = value;\n  }\n  function getEntity(value) {\n    const name = entityNames[value];\n    if (name) {\n      return contextName + '.' + name;\n    }\n    return value;\n  }\n  function setIndent(spaces) {\n    indent = ' '.repeat(spaces);\n  }\n  function addVariable(value, source) {\n    const variableName = `${contextName}Variable${contextVariables.length}`;\n    recording.push(`${indent}const ${variableName} = ${source};`);\n    contextVariables.push(value);\n    return variableName;\n  }\n  function writePPM(width, height) {\n    const sourceVariable = `${contextName}Variable${contextVariables.length}`;\n    const imageVariable = `imageDatum${imageCount}`;\n    recording.push(`${indent}let ${imageVariable} = [\"P3\\\\n# ${readPixelsFile}.ppm\\\\n\", ${width}, ' ', ${height}, \"\\\\n255\\\\n\"].join(\"\");`);\n    recording.push(`${indent}for (let i = 0; i < ${imageVariable}.length; i += 4) {`);\n    recording.push(`${indent}  ${imageVariable} += ${sourceVariable}[i] + ' ' + ${sourceVariable}[i + 1] + ' ' + ${sourceVariable}[i + 2] + ' ';`);\n    recording.push(`${indent}}`);\n    recording.push(`${indent}if (typeof require !== \"undefined\") {`);\n    recording.push(`${indent}  require('fs').writeFileSync('./${readPixelsFile}.ppm', ${imageVariable});`);\n    recording.push(`${indent}}`);\n    imageCount++;\n  }\n  function addComment(value) {\n    recording.push(`${indent}// ${value}`);\n  }\n  function checkThrowError() {\n    recording.push(`${indent}(() => {\n${indent}const error = ${contextName}.getError();\n${indent}if (error !== ${contextName}.NONE) {\n${indent}  const names = Object.getOwnPropertyNames(gl);\n${indent}  for (let i = 0; i < names.length; i++) {\n${indent}    const name = names[i];\n${indent}    if (${contextName}[name] === error) {\n${indent}      throw new Error('${contextName} threw ' + name);\n${indent}    }\n${indent}  }\n${indent}}\n${indent}})();`);\n  }\n  function methodCallToString(method, args) {\n    return `${contextName}.${method}(${argumentsToString(args, { contextName, contextVariables, getEntity, addVariable, variables, onUnrecognizedArgumentLookup })})`;\n  }\n\n  function getVariableName(value) {\n    if (variables) {\n      for (const name in variables) {\n        if (variables[name] === value) {\n          return name;\n        }\n      }\n    }\n    return null;\n  }\n\n  function getContextVariableName(value) {\n    const i = contextVariables.indexOf(value);\n    if (i !== -1) {\n      return `${contextName}Variable${i}`;\n    }\n    return null;\n  }\n}\n\nfunction glExtensionWiretap(extension, options) {\n  const proxy = new Proxy(extension, { get: listen });\n  const extensionEntityNames = {};\n  const {\n    contextName,\n    contextVariables,\n    getEntity,\n    useTrackablePrimitives,\n    recording,\n    variables,\n    indent,\n    onUnrecognizedArgumentLookup,\n  } = options;\n  return proxy;\n  function listen(obj, property) {\n    if (typeof obj[property] === 'function') {\n      return function() {\n        switch (property) {\n          case 'drawBuffersWEBGL':\n            recording.push(`${indent}${contextName}.drawBuffersWEBGL([${argumentsToString(arguments[0], { contextName, contextVariables, getEntity: getExtensionEntity, addVariable, variables, onUnrecognizedArgumentLookup })}]);`);\n            return extension.drawBuffersWEBGL(arguments[0]);\n        }\n        let result = extension[property].apply(extension, arguments);\n        switch (typeof result) {\n          case 'undefined':\n            recording.push(`${indent}${methodCallToString(property, arguments)};`);\n            return;\n          case 'number':\n          case 'boolean':\n            if (useTrackablePrimitives && contextVariables.indexOf(trackablePrimitive(result)) === -1) {\n              recording.push(`${indent}const ${contextName}Variable${contextVariables.length} = ${methodCallToString(property, arguments)};`);\n              contextVariables.push(result = trackablePrimitive(result));\n            } else {\n              recording.push(`${indent}const ${contextName}Variable${contextVariables.length} = ${methodCallToString(property, arguments)};`);\n              contextVariables.push(result);\n            }\n            break;\n          default:\n            if (result === null) {\n              recording.push(`${methodCallToString(property, arguments)};`);\n            } else {\n              recording.push(`${indent}const ${contextName}Variable${contextVariables.length} = ${methodCallToString(property, arguments)};`);\n            }\n            contextVariables.push(result);\n        }\n        return result;\n      };\n    }\n    extensionEntityNames[extension[property]] = property;\n    return extension[property];\n  }\n\n  function getExtensionEntity(value) {\n    if (extensionEntityNames.hasOwnProperty(value)) {\n      return `${contextName}.${extensionEntityNames[value]}`;\n    }\n    return getEntity(value);\n  }\n\n  function methodCallToString(method, args) {\n    return `${contextName}.${method}(${argumentsToString(args, { contextName, contextVariables, getEntity: getExtensionEntity, addVariable, variables, onUnrecognizedArgumentLookup })})`;\n  }\n\n  function addVariable(value, source) {\n    const variableName = `${contextName}Variable${contextVariables.length}`;\n    contextVariables.push(value);\n    recording.push(`${indent}const ${variableName} = ${source};`);\n    return variableName;\n  }\n}\n\nfunction argumentsToString(args, options) {\n  const { variables, onUnrecognizedArgumentLookup } = options;\n  return (Array.from(args).map((arg) => {\n    const variableName = getVariableName(arg);\n    if (variableName) {\n      return variableName;\n    }\n    return argumentToString(arg, options);\n  }).join(', '));\n\n  function getVariableName(value) {\n    if (variables) {\n      for (const name in variables) {\n        if (!variables.hasOwnProperty(name)) continue;\n        if (variables[name] === value) {\n          return name;\n        }\n      }\n    }\n    if (onUnrecognizedArgumentLookup) {\n      return onUnrecognizedArgumentLookup(value);\n    }\n    return null;\n  }\n}\n\nfunction argumentToString(arg, options) {\n  const { contextName, contextVariables, getEntity, addVariable, onUnrecognizedArgumentLookup } = options;\n  if (typeof arg === 'undefined') {\n    return 'undefined';\n  }\n  if (arg === null) {\n    return 'null';\n  }\n  const i = contextVariables.indexOf(arg);\n  if (i > -1) {\n    return `${contextName}Variable${i}`;\n  }\n  switch (arg.constructor.name) {\n    case 'String':\n      const hasLines = /\\n/.test(arg);\n      const hasSingleQuotes = /'/.test(arg);\n      const hasDoubleQuotes = /\"/.test(arg);\n      if (hasLines) {\n        return '`' + arg + '`';\n      } else if (hasSingleQuotes && !hasDoubleQuotes) {\n        return '\"' + arg + '\"';\n      } else if (!hasSingleQuotes && hasDoubleQuotes) {\n        return \"'\" + arg + \"'\";\n      } else {\n        return '\\'' + arg + '\\'';\n      }\n    case 'Number': return getEntity(arg);\n    case 'Boolean': return getEntity(arg);\n    case 'Array':\n      return addVariable(arg, `new ${arg.constructor.name}([${Array.from(arg).join(',')}])`);\n    case 'Float32Array':\n    case 'Uint8Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n      return addVariable(arg, `new ${arg.constructor.name}(${JSON.stringify(Array.from(arg))})`);\n    default:\n      if (onUnrecognizedArgumentLookup) {\n        const instantiationString = onUnrecognizedArgumentLookup(arg);\n        if (instantiationString) {\n          return instantiationString;\n        }\n      }\n      throw new Error(`unrecognized argument type ${arg.constructor.name}`);\n  }\n}\n\nfunction trackablePrimitive(value) {\n  return new value.constructor(value);\n}\n\nif (typeof module !== 'undefined') {\n  module.exports = { glWiretap, glExtensionWiretap };\n}\n\nif (typeof window !== 'undefined') {\n  glWiretap.glExtensionWiretap = glExtensionWiretap;\n  window.glWiretap = glWiretap;\n}\n\n},{}],4:[function(require,module,exports){\nfunction setupArguments(args) {\n  const newArguments = new Array(args.length);\n  for (let i = 0; i < args.length; i++) {\n    const arg = args[i];\n    if (arg.toArray) {\n      newArguments[i] = arg.toArray();\n    } else {\n      newArguments[i] = arg;\n    }\n  }\n  return newArguments;\n}\n\nfunction mock1D() {\n  const args = setupArguments(arguments);\n  const row = new Float32Array(this.output.x);\n  for (let x = 0; x < this.output.x; x++) {\n    this.thread.x = x;\n    this.thread.y = 0;\n    this.thread.z = 0;\n    row[x] = this._fn.apply(this, args);\n  }\n  return row;\n}\n\nfunction mock2D() {\n  const args = setupArguments(arguments);\n  const matrix = new Array(this.output.y);\n  for (let y = 0; y < this.output.y; y++) {\n    const row = new Float32Array(this.output.x);\n    for (let x = 0; x < this.output.x; x++) {\n      this.thread.x = x;\n      this.thread.y = y;\n      this.thread.z = 0;\n      row[x] = this._fn.apply(this, args);\n    }\n    matrix[y] = row;\n  }\n  return matrix;\n}\n\nfunction mock2DGraphical() {\n  const args = setupArguments(arguments);\n  for (let y = 0; y < this.output.y; y++) {\n    for (let x = 0; x < this.output.x; x++) {\n      this.thread.x = x;\n      this.thread.y = y;\n      this.thread.z = 0;\n      this._fn.apply(this, args);\n    }\n  }\n}\n\nfunction mock3D() {\n  const args = setupArguments(arguments);\n  const cube = new Array(this.output.z);\n  for (let z = 0; z < this.output.z; z++) {\n    const matrix = new Array(this.output.y);\n    for (let y = 0; y < this.output.y; y++) {\n      const row = new Float32Array(this.output.x);\n      for (let x = 0; x < this.output.x; x++) {\n        this.thread.x = x;\n        this.thread.y = y;\n        this.thread.z = z;\n        row[x] = this._fn.apply(this, args);\n      }\n      matrix[y] = row;\n    }\n    cube[z] = matrix;\n  }\n  return cube;\n}\n\nfunction apiDecorate(kernel) {\n  kernel.setOutput = (output) => {\n    kernel.output = setupOutput(output);\n    if (kernel.graphical) {\n      setupGraphical(kernel);\n    }\n  };\n  kernel.toJSON = () => {\n    throw new Error('Not usable with gpuMock');\n  };\n  kernel.setConstants = (flag) => {\n    kernel.constants = flag;\n    return kernel;\n  };\n  kernel.setGraphical = (flag) => {\n    kernel.graphical = flag;\n    return kernel;\n  };\n  kernel.setCanvas = (flag) => {\n    kernel.canvas = flag;\n    return kernel;\n  };\n  kernel.setContext = (flag) => {\n    kernel.context = flag;\n    return kernel;\n  };\n  kernel.destroy = () => {};\n  kernel.validateSettings = () => {};\n  if (kernel.graphical && kernel.output) {\n    setupGraphical(kernel);\n  }\n  kernel.exec = function() {\n    return new Promise((resolve, reject) => {\n      try {\n        resolve(kernel.apply(kernel, arguments));\n      } catch(e) {\n        reject(e);\n      }\n    });\n  };\n  kernel.getPixels = (flip) => {\n    const {x, y} = kernel.output;\n    return flip ? flipPixels(kernel._imageData.data, x, y) : kernel._imageData.data.slice(0);\n  };\n  kernel.color = function(r, g, b, a) {\n    if (typeof a === 'undefined') {\n      a = 1;\n    }\n\n    r = Math.floor(r * 255);\n    g = Math.floor(g * 255);\n    b = Math.floor(b * 255);\n    a = Math.floor(a * 255);\n\n    const width = kernel.output.x;\n    const height = kernel.output.y;\n\n    const x = kernel.thread.x;\n    const y = height - kernel.thread.y - 1;\n\n    const index = x + y * width;\n\n    kernel._colorData[index * 4 + 0] = r;\n    kernel._colorData[index * 4 + 1] = g;\n    kernel._colorData[index * 4 + 2] = b;\n    kernel._colorData[index * 4 + 3] = a;\n  };\n\n  const mockMethod = () => kernel;\n  const methods = [\n    'setWarnVarUsage',\n    'setArgumentTypes',\n    'setTactic',\n    'setOptimizeFloatMemory',\n    'setDebug',\n    'setLoopMaxIterations',\n    'setConstantTypes',\n    'setFunctions',\n    'setNativeFunctions',\n    'setInjectedNative',\n    'setPipeline',\n    'setPrecision',\n    'setOutputToTexture',\n    'setImmutable',\n    'setStrictIntegers',\n    'setDynamicOutput',\n    'setHardcodeConstants',\n    'setDynamicArguments',\n    'setUseLegacyEncoder',\n    'setWarnVarUsage',\n    'addSubKernel',\n  ];\n  for (let i = 0; i < methods.length; i++) {\n    kernel[methods[i]] = mockMethod;\n  }\n  return kernel;\n}\n\nfunction setupGraphical(kernel) {\n  const {x, y} = kernel.output;\n  if (kernel.context && kernel.context.createImageData) {\n    const data = new Uint8ClampedArray(x * y * 4);\n    kernel._imageData = kernel.context.createImageData(x, y);\n    kernel._colorData = data;\n  } else {\n    const data = new Uint8ClampedArray(x * y * 4);\n    kernel._imageData = { data };\n    kernel._colorData = data;\n  }\n}\n\nfunction setupOutput(output) {\n  let result = null;\n  if (output.length) {\n    if (output.length === 3) {\n      const [x,y,z] = output;\n      result = { x, y, z };\n    } else if (output.length === 2) {\n      const [x,y] = output;\n      result = { x, y };\n    } else {\n      const [x] = output;\n      result = { x };\n    }\n  } else {\n    result = output;\n  }\n  return result;\n}\n\nfunction gpuMock(fn, settings = {}) {\n  const output = settings.output ? setupOutput(settings.output) : null;\n  function kernel() {\n    if (kernel.output.z) {\n      return mock3D.apply(kernel, arguments);\n    } else if (kernel.output.y) {\n      if (kernel.graphical) {\n        return mock2DGraphical.apply(kernel, arguments);\n      }\n      return mock2D.apply(kernel, arguments);\n    } else {\n      return mock1D.apply(kernel, arguments);\n    }\n  }\n  kernel._fn = fn;\n  kernel.constants = settings.constants || null;\n  kernel.context = settings.context || null;\n  kernel.canvas = settings.canvas || null;\n  kernel.graphical = settings.graphical || false;\n  kernel._imageData = null;\n  kernel._colorData = null;\n  kernel.output = output;\n  kernel.thread = {\n    x: 0,\n    y: 0,\n    z: 0\n  };\n  return apiDecorate(kernel);\n}\n\nfunction flipPixels(pixels, width, height) {\n  const halfHeight = height / 2 | 0; \n  const bytesPerRow = width * 4;\n  const temp = new Uint8ClampedArray(width * 4);\n  const result = pixels.slice(0);\n  for (let y = 0; y < halfHeight; ++y) {\n    const topOffset = y * bytesPerRow;\n    const bottomOffset = (height - y - 1) * bytesPerRow;\n\n    temp.set(result.subarray(topOffset, topOffset + bytesPerRow));\n\n    result.copyWithin(topOffset, bottomOffset, bottomOffset + bytesPerRow);\n\n    result.set(temp, bottomOffset);\n  }\n  return result;\n}\n\nmodule.exports = {\n  gpuMock\n};\n\n},{}],5:[function(require,module,exports){\nconst { utils } = require('./utils');\n\nfunction alias(name, source) {\n  const fnString = source.toString();\n  return new Function(`return function ${ name } (${ utils.getArgumentNamesFromString(fnString).join(', ') }) {\n  ${ utils.getFunctionBodyFromString(fnString) }\n}`)();\n}\n\nmodule.exports = {\n  alias\n};\n},{\"./utils\":114}],6:[function(require,module,exports){\nconst { FunctionNode } = require('../function-node');\n\nclass CPUFunctionNode extends FunctionNode {\n  astFunction(ast, retArr) {\n\n    if (!this.isRootKernel) {\n      retArr.push('function');\n      retArr.push(' ');\n      retArr.push(this.name);\n      retArr.push('(');\n\n      for (let i = 0; i < this.argumentNames.length; ++i) {\n        const argumentName = this.argumentNames[i];\n\n        if (i > 0) {\n          retArr.push(', ');\n        }\n        retArr.push('user_');\n        retArr.push(argumentName);\n      }\n\n      retArr.push(') {\\n');\n    }\n\n    for (let i = 0; i < ast.body.body.length; ++i) {\n      this.astGeneric(ast.body.body[i], retArr);\n      retArr.push('\\n');\n    }\n\n    if (!this.isRootKernel) {\n      retArr.push('}\\n');\n    }\n    return retArr;\n  }\n\n  astReturnStatement(ast, retArr) {\n    const type = this.returnType || this.getType(ast.argument);\n\n    if (!this.returnType) {\n      this.returnType = type;\n    }\n\n    if (this.isRootKernel) {\n      retArr.push(this.leadingReturnStatement);\n      this.astGeneric(ast.argument, retArr);\n      retArr.push(';\\n');\n      retArr.push(this.followingReturnStatement);\n      retArr.push('continue;\\n');\n    } else if (this.isSubKernel) {\n      retArr.push(`subKernelResult_${ this.name } = `);\n      this.astGeneric(ast.argument, retArr);\n      retArr.push(';');\n      retArr.push(`return subKernelResult_${ this.name };`);\n    } else {\n      retArr.push('return ');\n      this.astGeneric(ast.argument, retArr);\n      retArr.push(';');\n    }\n    return retArr;\n  }\n\n  astLiteral(ast, retArr) {\n\n    if (isNaN(ast.value)) {\n      throw this.astErrorOutput(\n        'Non-numeric literal not supported : ' + ast.value,\n        ast\n      );\n    }\n\n    retArr.push(ast.value);\n\n    return retArr;\n  }\n\n  astBinaryExpression(ast, retArr) {\n    retArr.push('(');\n    this.astGeneric(ast.left, retArr);\n    retArr.push(ast.operator);\n    this.astGeneric(ast.right, retArr);\n    retArr.push(')');\n    return retArr;\n  }\n\n  astIdentifierExpression(idtNode, retArr) {\n    if (idtNode.type !== 'Identifier') {\n      throw this.astErrorOutput(\n        'IdentifierExpression - not an Identifier',\n        idtNode\n      );\n    }\n\n    switch (idtNode.name) {\n      case 'Infinity':\n        retArr.push('Infinity');\n        break;\n      default:\n        if (this.constants && this.constants.hasOwnProperty(idtNode.name)) {\n          retArr.push('constants_' + idtNode.name);\n        } else {\n          retArr.push('user_' + idtNode.name);\n        }\n    }\n\n    return retArr;\n  }\n\n  astForStatement(forNode, retArr) {\n    if (forNode.type !== 'ForStatement') {\n      throw this.astErrorOutput('Invalid for statement', forNode);\n    }\n\n    const initArr = [];\n    const testArr = [];\n    const updateArr = [];\n    const bodyArr = [];\n    let isSafe = null;\n\n    if (forNode.init) {\n      this.pushState('in-for-loop-init');\n      this.astGeneric(forNode.init, initArr);\n      for (let i = 0; i < initArr.length; i++) {\n        if (initArr[i].includes && initArr[i].includes(',')) {\n          isSafe = false;\n        }\n      }\n      this.popState('in-for-loop-init');\n    } else {\n      isSafe = false;\n    }\n\n    if (forNode.test) {\n      this.astGeneric(forNode.test, testArr);\n    } else {\n      isSafe = false;\n    }\n\n    if (forNode.update) {\n      this.astGeneric(forNode.update, updateArr);\n    } else {\n      isSafe = false;\n    }\n\n    if (forNode.body) {\n      this.pushState('loop-body');\n      this.astGeneric(forNode.body, bodyArr);\n      this.popState('loop-body');\n    }\n\n    if (isSafe === null) {\n      isSafe = this.isSafe(forNode.init) && this.isSafe(forNode.test);\n    }\n\n    if (isSafe) {\n      retArr.push(`for (${initArr.join('')};${testArr.join('')};${updateArr.join('')}){\\n`);\n      retArr.push(bodyArr.join(''));\n      retArr.push('}\\n');\n    } else {\n      const iVariableName = this.getInternalVariableName('safeI');\n      if (initArr.length > 0) {\n        retArr.push(initArr.join(''), ';\\n');\n      }\n      retArr.push(`for (let ${iVariableName}=0;${iVariableName}<LOOP_MAX;${iVariableName}++){\\n`);\n      if (testArr.length > 0) {\n        retArr.push(`if (!${testArr.join('')}) break;\\n`);\n      }\n      retArr.push(bodyArr.join(''));\n      retArr.push(`\\n${updateArr.join('')};`);\n      retArr.push('}\\n');\n    }\n    return retArr;\n  }\n\n  astWhileStatement(whileNode, retArr) {\n    if (whileNode.type !== 'WhileStatement') {\n      throw this.astErrorOutput(\n        'Invalid while statement',\n        whileNode\n      );\n    }\n\n    retArr.push('for (let i = 0; i < LOOP_MAX; i++) {');\n    retArr.push('if (');\n    this.astGeneric(whileNode.test, retArr);\n    retArr.push(') {\\n');\n    this.astGeneric(whileNode.body, retArr);\n    retArr.push('} else {\\n');\n    retArr.push('break;\\n');\n    retArr.push('}\\n');\n    retArr.push('}\\n');\n\n    return retArr;\n  }\n\n  astDoWhileStatement(doWhileNode, retArr) {\n    if (doWhileNode.type !== 'DoWhileStatement') {\n      throw this.astErrorOutput(\n        'Invalid while statement',\n        doWhileNode\n      );\n    }\n\n    retArr.push('for (let i = 0; i < LOOP_MAX; i++) {');\n    this.astGeneric(doWhileNode.body, retArr);\n    retArr.push('if (!');\n    this.astGeneric(doWhileNode.test, retArr);\n    retArr.push(') {\\n');\n    retArr.push('break;\\n');\n    retArr.push('}\\n');\n    retArr.push('}\\n');\n\n    return retArr;\n\n  }\n\n  astAssignmentExpression(assNode, retArr) {\n    const declaration = this.getDeclaration(assNode.left);\n    if (declaration && !declaration.assignable) {\n      throw this.astErrorOutput(`Variable ${assNode.left.name} is not assignable here`, assNode);\n    }\n    this.astGeneric(assNode.left, retArr);\n    retArr.push(assNode.operator);\n    this.astGeneric(assNode.right, retArr);\n    return retArr;\n  }\n\n  astBlockStatement(bNode, retArr) {\n    if (this.isState('loop-body')) {\n      this.pushState('block-body'); \n      for (let i = 0; i < bNode.body.length; i++) {\n        this.astGeneric(bNode.body[i], retArr);\n      }\n      this.popState('block-body');\n    } else {\n      retArr.push('{\\n');\n      for (let i = 0; i < bNode.body.length; i++) {\n        this.astGeneric(bNode.body[i], retArr);\n      }\n      retArr.push('}\\n');\n    }\n    return retArr;\n  }\n\n  astVariableDeclaration(varDecNode, retArr) {\n    retArr.push(`${varDecNode.kind} `);\n    const { declarations } = varDecNode;\n    for (let i = 0; i < declarations.length; i++) {\n      if (i > 0) {\n        retArr.push(',');\n      }\n      const declaration = declarations[i];\n      const info = this.getDeclaration(declaration.id);\n      if (!info.valueType) {\n        info.valueType = this.getType(declaration.init);\n      }\n      this.astGeneric(declaration, retArr);\n    }\n    if (!this.isState('in-for-loop-init')) {\n      retArr.push(';');\n    }\n    return retArr;\n  }\n\n  astIfStatement(ifNode, retArr) {\n    retArr.push('if (');\n    this.astGeneric(ifNode.test, retArr);\n    retArr.push(')');\n    if (ifNode.consequent.type === 'BlockStatement') {\n      this.astGeneric(ifNode.consequent, retArr);\n    } else {\n      retArr.push(' {\\n');\n      this.astGeneric(ifNode.consequent, retArr);\n      retArr.push('\\n}\\n');\n    }\n\n    if (ifNode.alternate) {\n      retArr.push('else ');\n      if (ifNode.alternate.type === 'BlockStatement' || ifNode.alternate.type === 'IfStatement') {\n        this.astGeneric(ifNode.alternate, retArr);\n      } else {\n        retArr.push(' {\\n');\n        this.astGeneric(ifNode.alternate, retArr);\n        retArr.push('\\n}\\n');\n      }\n    }\n    return retArr;\n\n  }\n\n  astSwitchStatement(ast, retArr) {\n    const { discriminant, cases } = ast;\n    retArr.push('switch (');\n    this.astGeneric(discriminant, retArr);\n    retArr.push(') {\\n');\n    for (let i = 0; i < cases.length; i++) {\n      if (cases[i].test === null) {\n        retArr.push('default:\\n');\n        this.astGeneric(cases[i].consequent, retArr);\n        if (cases[i].consequent && cases[i].consequent.length > 0) {\n          retArr.push('break;\\n');\n        }\n        continue;\n      }\n      retArr.push('case ');\n      this.astGeneric(cases[i].test, retArr);\n      retArr.push(':\\n');\n      if (cases[i].consequent && cases[i].consequent.length > 0) {\n        this.astGeneric(cases[i].consequent, retArr);\n        retArr.push('break;\\n');\n      }\n    }\n    retArr.push('\\n}');\n  }\n\n  astThisExpression(tNode, retArr) {\n    retArr.push('_this');\n    return retArr;\n  }\n\n  astMemberExpression(mNode, retArr) {\n    const {\n      signature,\n      type,\n      property,\n      xProperty,\n      yProperty,\n      zProperty,\n      name,\n      origin\n    } = this.getMemberExpressionDetails(mNode);\n    switch (signature) {\n      case 'this.thread.value':\n        retArr.push(`_this.thread.${ name }`);\n        return retArr;\n      case 'this.output.value':\n        switch (name) {\n          case 'x':\n            retArr.push('outputX');\n            break;\n          case 'y':\n            retArr.push('outputY');\n            break;\n          case 'z':\n            retArr.push('outputZ');\n            break;\n          default:\n            throw this.astErrorOutput('Unexpected expression', mNode);\n        }\n        return retArr;\n      case 'value':\n        throw this.astErrorOutput('Unexpected expression', mNode);\n      case 'value[]':\n      case 'value[][]':\n      case 'value[][][]':\n      case 'value.value':\n        if (origin === 'Math') {\n          retArr.push(Math[name]);\n          return retArr;\n        }\n        switch (property) {\n          case 'r':\n            retArr.push(`user_${ name }[0]`);\n            return retArr;\n          case 'g':\n            retArr.push(`user_${ name }[1]`);\n            return retArr;\n          case 'b':\n            retArr.push(`user_${ name }[2]`);\n            return retArr;\n          case 'a':\n            retArr.push(`user_${ name }[3]`);\n            return retArr;\n        }\n        break;\n      case 'this.constants.value':\n      case 'this.constants.value[]':\n      case 'this.constants.value[][]':\n      case 'this.constants.value[][][]':\n        break;\n      case 'fn()[]':\n        this.astGeneric(mNode.object, retArr);\n        retArr.push('[');\n        this.astGeneric(mNode.property, retArr);\n        retArr.push(']');\n        return retArr;\n      case 'fn()[][]':\n        this.astGeneric(mNode.object.object, retArr);\n        retArr.push('[');\n        this.astGeneric(mNode.object.property, retArr);\n        retArr.push(']');\n        retArr.push('[');\n        this.astGeneric(mNode.property, retArr);\n        retArr.push(']');\n        return retArr;\n      default:\n        throw this.astErrorOutput('Unexpected expression', mNode);\n    }\n\n    if (!mNode.computed) {\n      switch (type) {\n        case 'Number':\n        case 'Integer':\n        case 'Float':\n        case 'Boolean':\n          retArr.push(`${origin}_${name}`);\n          return retArr;\n      }\n    }\n\n    const markupName = `${origin}_${name}`;\n\n    switch (type) {\n      case 'Array(2)':\n      case 'Array(3)':\n      case 'Array(4)':\n      case 'Matrix(2)':\n      case 'Matrix(3)':\n      case 'Matrix(4)':\n      case 'HTMLImageArray':\n      case 'ArrayTexture(1)':\n      case 'ArrayTexture(2)':\n      case 'ArrayTexture(3)':\n      case 'ArrayTexture(4)':\n      case 'HTMLImage':\n      default:\n        let size;\n        let isInput;\n        if (origin === 'constants') {\n          const constant = this.constants[name];\n          isInput = this.constantTypes[name] === 'Input';\n          size = isInput ? constant.size : null;\n        } else {\n          isInput = this.isInput(name);\n          size = isInput ? this.argumentSizes[this.argumentNames.indexOf(name)] : null;\n        }\n        retArr.push(`${ markupName }`);\n        if (zProperty && yProperty) {\n          if (isInput) {\n            retArr.push('[(');\n            this.astGeneric(zProperty, retArr);\n            retArr.push(`*${ this.dynamicArguments ? '(outputY * outputX)' : size[1] * size[0] })+(`);\n            this.astGeneric(yProperty, retArr);\n            retArr.push(`*${ this.dynamicArguments ? 'outputX' : size[0] })+`);\n            this.astGeneric(xProperty, retArr);\n            retArr.push(']');\n          } else {\n            retArr.push('[');\n            this.astGeneric(zProperty, retArr);\n            retArr.push(']');\n            retArr.push('[');\n            this.astGeneric(yProperty, retArr);\n            retArr.push(']');\n            retArr.push('[');\n            this.astGeneric(xProperty, retArr);\n            retArr.push(']');\n          }\n        } else if (yProperty) {\n          if (isInput) {\n            retArr.push('[(');\n            this.astGeneric(yProperty, retArr);\n            retArr.push(`*${ this.dynamicArguments ? 'outputX' : size[0] })+`);\n            this.astGeneric(xProperty, retArr);\n            retArr.push(']');\n          } else {\n            retArr.push('[');\n            this.astGeneric(yProperty, retArr);\n            retArr.push(']');\n            retArr.push('[');\n            this.astGeneric(xProperty, retArr);\n            retArr.push(']');\n          }\n        } else if (typeof xProperty !== 'undefined') {\n          retArr.push('[');\n          this.astGeneric(xProperty, retArr);\n          retArr.push(']');\n        }\n    }\n    return retArr;\n  }\n\n  astCallExpression(ast, retArr) {\n    if (ast.type !== 'CallExpression') {\n      throw this.astErrorOutput('Unknown CallExpression', ast);\n    }\n    let functionName = this.astMemberExpressionUnroll(ast.callee);\n\n    if (this.calledFunctions.indexOf(functionName) < 0) {\n      this.calledFunctions.push(functionName);\n    }\n\n    const isMathFunction = this.isAstMathFunction(ast);\n\n    if (this.onFunctionCall) {\n      this.onFunctionCall(this.name, functionName, ast.arguments);\n    }\n\n    retArr.push(functionName);\n\n    retArr.push('(');\n    const targetTypes = this.lookupFunctionArgumentTypes(functionName) || [];\n    for (let i = 0; i < ast.arguments.length; ++i) {\n      const argument = ast.arguments[i];\n\n      let argumentType = this.getType(argument);\n      if (!targetTypes[i]) {\n        this.triggerImplyArgumentType(functionName, i, argumentType, this);\n      }\n\n      if (i > 0) {\n        retArr.push(', ');\n      }\n      this.astGeneric(argument, retArr);\n    }\n    retArr.push(')');\n\n    return retArr;\n  }\n\n  astArrayExpression(arrNode, retArr) {\n    const returnType = this.getType(arrNode);\n    const arrLen = arrNode.elements.length;\n    const elements = [];\n    for (let i = 0; i < arrLen; ++i) {\n      const element = [];\n      this.astGeneric(arrNode.elements[i], element);\n      elements.push(element.join(''));\n    }\n    switch (returnType) {\n      case 'Matrix(2)':\n      case 'Matrix(3)':\n      case 'Matrix(4)':\n        retArr.push(`[${elements.join(', ')}]`);\n        break;\n      default:\n        retArr.push(`new Float32Array([${elements.join(', ')}])`);\n    }\n    return retArr;\n  }\n\n  astDebuggerStatement(arrNode, retArr) {\n    retArr.push('debugger;');\n    return retArr;\n  }\n}\n\nmodule.exports = {\n  CPUFunctionNode\n};\n},{\"../function-node\":10}],7:[function(require,module,exports){\nconst { utils } = require('../../utils');\n\nfunction constantsToString(constants, types) {\n  const results = [];\n  for (const name in types) {\n    if (!types.hasOwnProperty(name)) continue;\n    const type = types[name];\n    const constant = constants[name];\n    switch (type) {\n      case 'Number':\n      case 'Integer':\n      case 'Float':\n      case 'Boolean':\n        results.push(`${name}:${constant}`);\n        break;\n      case 'Array(2)':\n      case 'Array(3)':\n      case 'Array(4)':\n      case 'Matrix(2)':\n      case 'Matrix(3)':\n      case 'Matrix(4)':\n        results.push(`${name}:new ${constant.constructor.name}(${JSON.stringify(Array.from(constant))})`);\n        break;\n    }\n  }\n  return `{ ${ results.join() } }`;\n}\n\nfunction cpuKernelString(cpuKernel, name) {\n  const header = [];\n  const thisProperties = [];\n  const beforeReturn = [];\n\n  const useFunctionKeyword = !/^function/.test(cpuKernel.color.toString());\n\n  header.push(\n    '  const { context, canvas, constants: incomingConstants } = settings;',\n    `  const output = new Int32Array(${JSON.stringify(Array.from(cpuKernel.output))});`,\n    `  const _constantTypes = ${JSON.stringify(cpuKernel.constantTypes)};`,\n    `  const _constants = ${constantsToString(cpuKernel.constants, cpuKernel.constantTypes)};`\n  );\n\n  thisProperties.push(\n    '    constants: _constants,',\n    '    context,',\n    '    output,',\n    '    thread: {x: 0, y: 0, z: 0},'\n  );\n\n  if (cpuKernel.graphical) {\n    header.push(`  const _imageData = context.createImageData(${cpuKernel.output[0]}, ${cpuKernel.output[1]});`);\n    header.push(`  const _colorData = new Uint8ClampedArray(${cpuKernel.output[0]} * ${cpuKernel.output[1]} * 4);`);\n\n    const colorFn = utils.flattenFunctionToString((useFunctionKeyword ? 'function ' : '') + cpuKernel.color.toString(), {\n      thisLookup: (propertyName) => {\n        switch (propertyName) {\n          case '_colorData':\n            return '_colorData';\n          case '_imageData':\n            return '_imageData';\n          case 'output':\n            return 'output';\n          case 'thread':\n            return 'this.thread';\n        }\n        return JSON.stringify(cpuKernel[propertyName]);\n      },\n      findDependency: (object, name) => {\n        return null;\n      }\n    });\n\n    const getPixelsFn = utils.flattenFunctionToString((useFunctionKeyword ? 'function ' : '') + cpuKernel.getPixels.toString(), {\n      thisLookup: (propertyName) => {\n        switch (propertyName) {\n          case '_colorData':\n            return '_colorData';\n          case '_imageData':\n            return '_imageData';\n          case 'output':\n            return 'output';\n          case 'thread':\n            return 'this.thread';\n        }\n        return JSON.stringify(cpuKernel[propertyName]);\n      },\n      findDependency: () => {\n        return null;\n      }\n    });\n\n    thisProperties.push(\n      '    _imageData,',\n      '    _colorData,',\n      `    color: ${colorFn},`\n    );\n\n    beforeReturn.push(\n      `  kernel.getPixels = ${getPixelsFn};`\n    );\n  }\n\n  const constantTypes = [];\n  const constantKeys = Object.keys(cpuKernel.constantTypes);\n  for (let i = 0; i < constantKeys.length; i++) {\n    constantTypes.push(cpuKernel.constantTypes[constantKeys]);\n  }\n  if (cpuKernel.argumentTypes.indexOf('HTMLImageArray') !== -1 || constantTypes.indexOf('HTMLImageArray') !== -1) {\n    const flattenedImageTo3DArray = utils.flattenFunctionToString((useFunctionKeyword ? 'function ' : '') + cpuKernel._imageTo3DArray.toString(), {\n      doNotDefine: ['canvas'],\n      findDependency: (object, name) => {\n        if (object === 'this') {\n          return (useFunctionKeyword ? 'function ' : '') + cpuKernel[name].toString();\n        }\n        return null;\n      },\n      thisLookup: (propertyName) => {\n        switch (propertyName) {\n          case 'canvas':\n            return;\n          case 'context':\n            return 'context';\n        }\n      }\n    });\n    beforeReturn.push(flattenedImageTo3DArray);\n    thisProperties.push(`    _mediaTo2DArray,`);\n    thisProperties.push(`    _imageTo3DArray,`);\n  } else if (cpuKernel.argumentTypes.indexOf('HTMLImage') !== -1 || constantTypes.indexOf('HTMLImage') !== -1) {\n    const flattenedImageTo2DArray = utils.flattenFunctionToString((useFunctionKeyword ? 'function ' : '') + cpuKernel._mediaTo2DArray.toString(), {\n      findDependency: (object, name) => {\n        return null;\n      },\n      thisLookup: (propertyName) => {\n        switch (propertyName) {\n          case 'canvas':\n            return 'settings.canvas';\n          case 'context':\n            return 'settings.context';\n        }\n        throw new Error('unhandled thisLookup');\n      }\n    });\n    beforeReturn.push(flattenedImageTo2DArray);\n    thisProperties.push(`    _mediaTo2DArray,`);\n  }\n\n  return `function(settings) {\n${ header.join('\\n') }\n  for (const p in _constantTypes) {\n    if (!_constantTypes.hasOwnProperty(p)) continue;\n    const type = _constantTypes[p];\n    switch (type) {\n      case 'Number':\n      case 'Integer':\n      case 'Float':\n      case 'Boolean':\n      case 'Array(2)':\n      case 'Array(3)':\n      case 'Array(4)':\n      case 'Matrix(2)':\n      case 'Matrix(3)':\n      case 'Matrix(4)':\n        if (incomingConstants.hasOwnProperty(p)) {\n          console.warn('constant ' + p + ' of type ' + type + ' cannot be resigned');\n        }\n        continue;\n    }\n    if (!incomingConstants.hasOwnProperty(p)) {\n      throw new Error('constant ' + p + ' not found');\n    }\n    _constants[p] = incomingConstants[p];\n  }\n  const kernel = (function() {\n${cpuKernel._kernelString}\n  })\n    .apply({ ${thisProperties.join('\\n')} });\n  ${ beforeReturn.join('\\n') }\n  return kernel;\n}`;\n}\n\nmodule.exports = {\n  cpuKernelString\n};\n},{\"../../utils\":114}],8:[function(require,module,exports){\nconst { Kernel } = require('../kernel');\nconst { FunctionBuilder } = require('../function-builder');\nconst { CPUFunctionNode } = require('./function-node');\nconst { utils } = require('../../utils');\nconst { cpuKernelString } = require('./kernel-string');\n\nclass CPUKernel extends Kernel {\n  static getFeatures() {\n    return this.features;\n  }\n  static get features() {\n    return Object.freeze({\n      kernelMap: true,\n      isIntegerDivisionAccurate: true\n    });\n  }\n  static get isSupported() {\n    return true;\n  }\n  static isContextMatch(context) {\n    return false;\n  }\n  static get mode() {\n    return 'cpu';\n  }\n\n  static nativeFunctionArguments() {\n    return null;\n  }\n\n  static nativeFunctionReturnType() {\n    throw new Error(`Looking up native function return type not supported on ${this.name}`);\n  }\n\n  static combineKernels(combinedKernel) {\n    return combinedKernel;\n  }\n\n  static getSignature(kernel, argumentTypes) {\n    return 'cpu' + (argumentTypes.length > 0 ? ':' + argumentTypes.join(',') : '');\n  }\n\n  constructor(source, settings) {\n    super(source, settings);\n    this.mergeSettings(source.settings || settings);\n\n    this._imageData = null;\n    this._colorData = null;\n    this._kernelString = null;\n    this._prependedString = [];\n    this.thread = {\n      x: 0,\n      y: 0,\n      z: 0\n    };\n    this.translatedSources = null;\n  }\n\n  initCanvas() {\n    if (typeof document !== 'undefined') {\n      return document.createElement('canvas');\n    } else if (typeof OffscreenCanvas !== 'undefined') {\n      return new OffscreenCanvas(0, 0);\n    }\n  }\n\n  initContext() {\n    if (!this.canvas) return null;\n    return this.canvas.getContext('2d');\n  }\n\n  initPlugins(settings) {\n    return [];\n  }\n\n  validateSettings(args) {\n    if (!this.output || this.output.length === 0) {\n      if (args.length !== 1) {\n        throw new Error('Auto output only supported for kernels with only one input');\n      }\n\n      const argType = utils.getVariableType(args[0], this.strictIntegers);\n      if (argType === 'Array') {\n        this.output = utils.getDimensions(argType);\n      } else if (argType === 'NumberTexture' || argType === 'ArrayTexture(4)') {\n        this.output = args[0].output;\n      } else {\n        throw new Error('Auto output not supported for input type: ' + argType);\n      }\n    }\n\n    if (this.graphical) {\n      if (this.output.length !== 2) {\n        throw new Error('Output must have 2 dimensions on graphical mode');\n      }\n    }\n\n    this.checkOutput();\n  }\n\n  translateSource() {\n    this.leadingReturnStatement = this.output.length > 1 ? 'resultX[x] = ' : 'result[x] = ';\n    if (this.subKernels) {\n      const followingReturnStatement = [];\n      for (let i = 0; i < this.subKernels.length; i++) {\n        const {\n          name\n        } = this.subKernels[i];\n        followingReturnStatement.push(this.output.length > 1 ? `resultX_${ name }[x] = subKernelResult_${ name };\\n` : `result_${ name }[x] = subKernelResult_${ name };\\n`);\n      }\n      this.followingReturnStatement = followingReturnStatement.join('');\n    }\n    const functionBuilder = FunctionBuilder.fromKernel(this, CPUFunctionNode);\n    this.translatedSources = functionBuilder.getPrototypes('kernel');\n    if (!this.graphical && !this.returnType) {\n      this.returnType = functionBuilder.getKernelResultType();\n    }\n  }\n\n  build() {\n    if (this.built) return;\n    this.setupConstants();\n    this.setupArguments(arguments);\n    this.validateSettings(arguments);\n    this.translateSource();\n\n    if (this.graphical) {\n      const {\n        canvas,\n        output\n      } = this;\n      if (!canvas) {\n        throw new Error('no canvas available for using graphical output');\n      }\n      const width = output[0];\n      const height = output[1] || 1;\n      canvas.width = width;\n      canvas.height = height;\n      this._imageData = this.context.createImageData(width, height);\n      this._colorData = new Uint8ClampedArray(width * height * 4);\n    }\n\n    const kernelString = this.getKernelString();\n    this.kernelString = kernelString;\n\n    if (this.debug) {\n      console.log('Function output:');\n      console.log(kernelString);\n    }\n\n    try {\n      this.run = new Function([], kernelString).bind(this)();\n    } catch (e) {\n      console.error('An error occurred compiling the javascript: ', e);\n    }\n    this.buildSignature(arguments);\n    this.built = true;\n  }\n\n  color(r, g, b, a) {\n    if (typeof a === 'undefined') {\n      a = 1;\n    }\n\n    r = Math.floor(r * 255);\n    g = Math.floor(g * 255);\n    b = Math.floor(b * 255);\n    a = Math.floor(a * 255);\n\n    const width = this.output[0];\n    const height = this.output[1];\n\n    const x = this.thread.x;\n    const y = height - this.thread.y - 1;\n\n    const index = x + y * width;\n\n    this._colorData[index * 4 + 0] = r;\n    this._colorData[index * 4 + 1] = g;\n    this._colorData[index * 4 + 2] = b;\n    this._colorData[index * 4 + 3] = a;\n  }\n\n  getKernelString() {\n    if (this._kernelString !== null) return this._kernelString;\n\n    let kernelThreadString = null;\n    let {\n      translatedSources\n    } = this;\n    if (translatedSources.length > 1) {\n      translatedSources = translatedSources.filter(fn => {\n        if (/^function/.test(fn)) return fn;\n        kernelThreadString = fn;\n        return false;\n      });\n    } else {\n      kernelThreadString = translatedSources.shift();\n    }\n    return this._kernelString = `  const LOOP_MAX = ${ this._getLoopMaxString() };\n  ${ this.injectedNative || '' }\n  const _this = this;\n  ${ this._resultKernelHeader() }\n  ${ this._processConstants() }\n  return (${ this.argumentNames.map(argumentName => 'user_' + argumentName).join(', ') }) => {\n    ${ this._prependedString.join('') }\n    ${ this._earlyThrows() }\n    ${ this._processArguments() }\n    ${ this.graphical ? this._graphicalKernelBody(kernelThreadString) : this._resultKernelBody(kernelThreadString) }\n    ${ translatedSources.length > 0 ? translatedSources.join('\\n') : '' }\n  };`;\n  }\n\n  toString() {\n    return cpuKernelString(this);\n  }\n\n  _getLoopMaxString() {\n    return (\n      this.loopMaxIterations ?\n      ` ${ parseInt(this.loopMaxIterations) };` :\n      ' 1000;'\n    );\n  }\n\n  _processConstants() {\n    if (!this.constants) return '';\n\n    const result = [];\n    for (let p in this.constants) {\n      const type = this.constantTypes[p];\n      switch (type) {\n        case 'HTMLCanvas':\n        case 'OffscreenCanvas':\n        case 'HTMLImage':\n        case 'ImageBitmap':\n        case 'ImageData':\n        case 'HTMLVideo':\n          result.push(`    const constants_${p} = this._mediaTo2DArray(this.constants.${p});\\n`);\n          break;\n        case 'HTMLImageArray':\n          result.push(`    const constants_${p} = this._imageTo3DArray(this.constants.${p});\\n`);\n          break;\n        case 'Input':\n          result.push(`    const constants_${p} = this.constants.${p}.value;\\n`);\n          break;\n        default:\n          result.push(`    const constants_${p} = this.constants.${p};\\n`);\n      }\n    }\n    return result.join('');\n  }\n\n  _earlyThrows() {\n    if (this.graphical) return '';\n    if (this.immutable) return '';\n    if (!this.pipeline) return '';\n    const arrayArguments = [];\n    for (let i = 0; i < this.argumentTypes.length; i++) {\n      if (this.argumentTypes[i] === 'Array') {\n        arrayArguments.push(this.argumentNames[i]);\n      }\n    }\n    if (arrayArguments.length === 0) return '';\n    const checks = [];\n    for (let i = 0; i < arrayArguments.length; i++) {\n      const argumentName = arrayArguments[i];\n      const checkSubKernels = this._mapSubKernels(subKernel => `user_${argumentName} === result_${subKernel.name}`).join(' || ');\n      checks.push(`user_${argumentName} === result${checkSubKernels ? ` || ${checkSubKernels}` : ''}`);\n    }\n    return `if (${checks.join(' || ')}) throw new Error('Source and destination arrays are the same.  Use immutable = true');`;\n  }\n\n  _processArguments() {\n    const result = [];\n    for (let i = 0; i < this.argumentTypes.length; i++) {\n      const variableName = `user_${this.argumentNames[i]}`;\n      switch (this.argumentTypes[i]) {\n        case 'HTMLCanvas':\n        case 'OffscreenCanvas':\n        case 'HTMLImage':\n        case 'ImageBitmap':\n        case 'ImageData':\n        case 'HTMLVideo':\n          result.push(`    ${variableName} = this._mediaTo2DArray(${variableName});\\n`);\n          break;\n        case 'HTMLImageArray':\n          result.push(`    ${variableName} = this._imageTo3DArray(${variableName});\\n`);\n          break;\n        case 'Input':\n          result.push(`    ${variableName} = ${variableName}.value;\\n`);\n          break;\n        case 'ArrayTexture(1)':\n        case 'ArrayTexture(2)':\n        case 'ArrayTexture(3)':\n        case 'ArrayTexture(4)':\n        case 'NumberTexture':\n        case 'MemoryOptimizedNumberTexture':\n          result.push(`\n    if (${variableName}.toArray) {\n      if (!_this.textureCache) {\n        _this.textureCache = [];\n        _this.arrayCache = [];\n      }\n      const textureIndex = _this.textureCache.indexOf(${variableName});\n      if (textureIndex !== -1) {\n        ${variableName} = _this.arrayCache[textureIndex];\n      } else {\n        _this.textureCache.push(${variableName});\n        ${variableName} = ${variableName}.toArray();\n        _this.arrayCache.push(${variableName});\n      }\n    }`);\n          break;\n      }\n    }\n    return result.join('');\n  }\n\n  _mediaTo2DArray(media) {\n    const canvas = this.canvas;\n    const width = media.width > 0 ? media.width : media.videoWidth;\n    const height = media.height > 0 ? media.height : media.videoHeight;\n    if (canvas.width < width) {\n      canvas.width = width;\n    }\n    if (canvas.height < height) {\n      canvas.height = height;\n    }\n    const ctx = this.context;\n    let pixelsData;\n    if (media.constructor === ImageData) {\n      pixelsData = media.data;\n    } else {\n      ctx.drawImage(media, 0, 0, width, height);\n      pixelsData = ctx.getImageData(0, 0, width, height).data;\n    }\n    const imageArray = new Array(height);\n    let index = 0;\n    for (let y = height - 1; y >= 0; y--) {\n      const row = imageArray[y] = new Array(width);\n      for (let x = 0; x < width; x++) {\n        const pixel = new Float32Array(4);\n        pixel[0] = pixelsData[index++] / 255; \n        pixel[1] = pixelsData[index++] / 255; \n        pixel[2] = pixelsData[index++] / 255; \n        pixel[3] = pixelsData[index++] / 255; \n        row[x] = pixel;\n      }\n    }\n    return imageArray;\n  }\n\n  getPixels(flip) {\n    const [width, height] = this.output;\n    return flip ? utils.flipPixels(this._imageData.data, width, height) : this._imageData.data.slice(0);\n  }\n\n  _imageTo3DArray(images) {\n    const imagesArray = new Array(images.length);\n    for (let i = 0; i < images.length; i++) {\n      imagesArray[i] = this._mediaTo2DArray(images[i]);\n    }\n    return imagesArray;\n  }\n\n  _resultKernelHeader() {\n    if (this.graphical) return '';\n    if (this.immutable) return '';\n    if (!this.pipeline) return '';\n    switch (this.output.length) {\n      case 1:\n        return this._mutableKernel1DResults();\n      case 2:\n        return this._mutableKernel2DResults();\n      case 3:\n        return this._mutableKernel3DResults();\n    }\n  }\n\n  _resultKernelBody(kernelString) {\n    switch (this.output.length) {\n      case 1:\n        return (!this.immutable && this.pipeline ? this._resultMutableKernel1DLoop(kernelString) : this._resultImmutableKernel1DLoop(kernelString)) + this._kernelOutput();\n      case 2:\n        return (!this.immutable && this.pipeline ? this._resultMutableKernel2DLoop(kernelString) : this._resultImmutableKernel2DLoop(kernelString)) + this._kernelOutput();\n      case 3:\n        return (!this.immutable && this.pipeline ? this._resultMutableKernel3DLoop(kernelString) : this._resultImmutableKernel3DLoop(kernelString)) + this._kernelOutput();\n      default:\n        throw new Error('unsupported size kernel');\n    }\n  }\n\n  _graphicalKernelBody(kernelThreadString) {\n    switch (this.output.length) {\n      case 2:\n        return this._graphicalKernel2DLoop(kernelThreadString) + this._graphicalOutput();\n      default:\n        throw new Error('unsupported size kernel');\n    }\n  }\n\n  _graphicalOutput() {\n    return `\n    this._imageData.data.set(this._colorData);\n    this.context.putImageData(this._imageData, 0, 0);\n    return;`\n  }\n\n  _getKernelResultTypeConstructorString() {\n    switch (this.returnType) {\n      case 'LiteralInteger':\n      case 'Number':\n      case 'Integer':\n      case 'Float':\n        return 'Float32Array';\n      case 'Array(2)':\n      case 'Array(3)':\n      case 'Array(4)':\n        return 'Array';\n      default:\n        if (this.graphical) {\n          return 'Float32Array';\n        }\n        throw new Error(`unhandled returnType ${ this.returnType }`);\n    }\n  }\n\n  _resultImmutableKernel1DLoop(kernelString) {\n    const constructorString = this._getKernelResultTypeConstructorString();\n    return `  const outputX = _this.output[0];\n    const result = new ${constructorString}(outputX);\n    ${ this._mapSubKernels(subKernel => `const result_${ subKernel.name } = new ${constructorString}(outputX);\\n`).join('    ') }\n    ${ this._mapSubKernels(subKernel => `let subKernelResult_${ subKernel.name };\\n`).join('    ') }\n    for (let x = 0; x < outputX; x++) {\n      this.thread.x = x;\n      this.thread.y = 0;\n      this.thread.z = 0;\n      ${ kernelString }\n    }`;\n  }\n\n  _mutableKernel1DResults() {\n    const constructorString = this._getKernelResultTypeConstructorString();\n    return `  const outputX = _this.output[0];\n    const result = new ${constructorString}(outputX);\n    ${ this._mapSubKernels(subKernel => `const result_${ subKernel.name } = new ${constructorString}(outputX);\\n`).join('    ') }\n    ${ this._mapSubKernels(subKernel => `let subKernelResult_${ subKernel.name };\\n`).join('    ') }`;\n  }\n\n  _resultMutableKernel1DLoop(kernelString) {\n    return `  const outputX = _this.output[0];\n    for (let x = 0; x < outputX; x++) {\n      this.thread.x = x;\n      this.thread.y = 0;\n      this.thread.z = 0;\n      ${ kernelString }\n    }`;\n  }\n\n  _resultImmutableKernel2DLoop(kernelString) {\n    const constructorString = this._getKernelResultTypeConstructorString();\n    return `  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    const result = new Array(outputY);\n    ${ this._mapSubKernels(subKernel => `const result_${ subKernel.name } = new Array(outputY);\\n`).join('    ') }\n    ${ this._mapSubKernels(subKernel => `let subKernelResult_${ subKernel.name };\\n`).join('    ') }\n    for (let y = 0; y < outputY; y++) {\n      this.thread.z = 0;\n      this.thread.y = y;\n      const resultX = result[y] = new ${constructorString}(outputX);\n      ${ this._mapSubKernels(subKernel => `const resultX_${ subKernel.name } = result_${subKernel.name}[y] = new ${constructorString}(outputX);\\n`).join('') }\n      for (let x = 0; x < outputX; x++) {\n        this.thread.x = x;\n        ${ kernelString }\n      }\n    }`;\n  }\n\n  _mutableKernel2DResults() {\n    const constructorString = this._getKernelResultTypeConstructorString();\n    return `  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    const result = new Array(outputY);\n    ${ this._mapSubKernels(subKernel => `const result_${ subKernel.name } = new Array(outputY);\\n`).join('    ') }\n    ${ this._mapSubKernels(subKernel => `let subKernelResult_${ subKernel.name };\\n`).join('    ') }\n    for (let y = 0; y < outputY; y++) {\n      const resultX = result[y] = new ${constructorString}(outputX);\n      ${ this._mapSubKernels(subKernel => `const resultX_${ subKernel.name } = result_${subKernel.name}[y] = new ${constructorString}(outputX);\\n`).join('') }\n    }`;\n  }\n\n  _resultMutableKernel2DLoop(kernelString) {\n    const constructorString = this._getKernelResultTypeConstructorString();\n    return `  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    for (let y = 0; y < outputY; y++) {\n      this.thread.z = 0;\n      this.thread.y = y;\n      const resultX = result[y];\n      ${ this._mapSubKernels(subKernel => `const resultX_${ subKernel.name } = result_${subKernel.name}[y] = new ${constructorString}(outputX);\\n`).join('') }\n      for (let x = 0; x < outputX; x++) {\n        this.thread.x = x;\n        ${ kernelString }\n      }\n    }`;\n  }\n\n  _graphicalKernel2DLoop(kernelString) {\n    return `  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    for (let y = 0; y < outputY; y++) {\n      this.thread.z = 0;\n      this.thread.y = y;\n      for (let x = 0; x < outputX; x++) {\n        this.thread.x = x;\n        ${ kernelString }\n      }\n    }`;\n  }\n\n  _resultImmutableKernel3DLoop(kernelString) {\n    const constructorString = this._getKernelResultTypeConstructorString();\n    return `  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    const outputZ = _this.output[2];\n    const result = new Array(outputZ);\n    ${ this._mapSubKernels(subKernel => `const result_${ subKernel.name } = new Array(outputZ);\\n`).join('    ') }\n    ${ this._mapSubKernels(subKernel => `let subKernelResult_${ subKernel.name };\\n`).join('    ') }\n    for (let z = 0; z < outputZ; z++) {\n      this.thread.z = z;\n      const resultY = result[z] = new Array(outputY);\n      ${ this._mapSubKernels(subKernel => `const resultY_${ subKernel.name } = result_${subKernel.name}[z] = new Array(outputY);\\n`).join('      ') }\n      for (let y = 0; y < outputY; y++) {\n        this.thread.y = y;\n        const resultX = resultY[y] = new ${constructorString}(outputX);\n        ${ this._mapSubKernels(subKernel => `const resultX_${ subKernel.name } = resultY_${subKernel.name}[y] = new ${constructorString}(outputX);\\n`).join('        ') }\n        for (let x = 0; x < outputX; x++) {\n          this.thread.x = x;\n          ${ kernelString }\n        }\n      }\n    }`;\n  }\n\n  _mutableKernel3DResults() {\n    const constructorString = this._getKernelResultTypeConstructorString();\n    return `  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    const outputZ = _this.output[2];\n    const result = new Array(outputZ);\n    ${ this._mapSubKernels(subKernel => `const result_${ subKernel.name } = new Array(outputZ);\\n`).join('    ') }\n    ${ this._mapSubKernels(subKernel => `let subKernelResult_${ subKernel.name };\\n`).join('    ') }\n    for (let z = 0; z < outputZ; z++) {\n      const resultY = result[z] = new Array(outputY);\n      ${ this._mapSubKernels(subKernel => `const resultY_${ subKernel.name } = result_${subKernel.name}[z] = new Array(outputY);\\n`).join('      ') }\n      for (let y = 0; y < outputY; y++) {\n        const resultX = resultY[y] = new ${constructorString}(outputX);\n        ${ this._mapSubKernels(subKernel => `const resultX_${ subKernel.name } = resultY_${subKernel.name}[y] = new ${constructorString}(outputX);\\n`).join('        ') }\n      }\n    }`;\n  }\n\n  _resultMutableKernel3DLoop(kernelString) {\n    return `  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    const outputZ = _this.output[2];\n    for (let z = 0; z < outputZ; z++) {\n      this.thread.z = z;\n      const resultY = result[z];\n      for (let y = 0; y < outputY; y++) {\n        this.thread.y = y;\n        const resultX = resultY[y];\n        for (let x = 0; x < outputX; x++) {\n          this.thread.x = x;\n          ${ kernelString }\n        }\n      }\n    }`;\n  }\n\n  _kernelOutput() {\n    if (!this.subKernels) {\n      return '\\n    return result;';\n    }\n    return `\\n    return {\n      result: result,\n      ${ this.subKernels.map(subKernel => `${ subKernel.property }: result_${ subKernel.name }`).join(',\\n      ') }\n    };`;\n  }\n\n  _mapSubKernels(fn) {\n    return this.subKernels === null ? [''] :\n      this.subKernels.map(fn);\n  }\n\n  destroy(removeCanvasReference) {\n    if (removeCanvasReference) {\n      delete this.canvas;\n    }\n  }\n\n  static destroyContext(context) {}\n\n  toJSON() {\n    const json = super.toJSON();\n    json.functionNodes = FunctionBuilder.fromKernel(this, CPUFunctionNode).toJSON();\n    return json;\n  }\n\n  setOutput(output) {\n    super.setOutput(output);\n    const [width, height] = this.output;\n    if (this.graphical) {\n      this._imageData = this.context.createImageData(width, height);\n      this._colorData = new Uint8ClampedArray(width * height * 4);\n    }\n  }\n\n  prependString(value) {\n    if (this._kernelString) throw new Error('Kernel already built');\n    this._prependedString.push(value);\n  }\n\n  hasPrependString(value) {\n    return this._prependedString.indexOf(value) > -1;\n  }\n}\n\nmodule.exports = {\n  CPUKernel\n};\n},{\"../../utils\":114,\"../function-builder\":9,\"../kernel\":36,\"./function-node\":6,\"./kernel-string\":7}],9:[function(require,module,exports){\nclass FunctionBuilder {\n  static fromKernel(kernel, FunctionNode, extraNodeOptions) {\n    const {\n      kernelArguments,\n      kernelConstants,\n      argumentNames,\n      argumentSizes,\n      argumentBitRatios,\n      constants,\n      constantBitRatios,\n      debug,\n      loopMaxIterations,\n      nativeFunctions,\n      output,\n      optimizeFloatMemory,\n      precision,\n      plugins,\n      source,\n      subKernels,\n      functions,\n      leadingReturnStatement,\n      followingReturnStatement,\n      dynamicArguments,\n      dynamicOutput,\n    } = kernel;\n\n    const argumentTypes = new Array(kernelArguments.length);\n    const constantTypes = {};\n\n    for (let i = 0; i < kernelArguments.length; i++) {\n      argumentTypes[i] = kernelArguments[i].type;\n    }\n\n    for (let i = 0; i < kernelConstants.length; i++) {\n      const kernelConstant = kernelConstants[i];\n      constantTypes[kernelConstant.name] = kernelConstant.type;\n    }\n\n    const needsArgumentType = (functionName, index) => {\n      return functionBuilder.needsArgumentType(functionName, index);\n    };\n\n    const assignArgumentType = (functionName, index, type) => {\n      functionBuilder.assignArgumentType(functionName, index, type);\n    };\n\n    const lookupReturnType = (functionName, ast, requestingNode) => {\n      return functionBuilder.lookupReturnType(functionName, ast, requestingNode);\n    };\n\n    const lookupFunctionArgumentTypes = (functionName) => {\n      return functionBuilder.lookupFunctionArgumentTypes(functionName);\n    };\n\n    const lookupFunctionArgumentName = (functionName, argumentIndex) => {\n      return functionBuilder.lookupFunctionArgumentName(functionName, argumentIndex);\n    };\n\n    const lookupFunctionArgumentBitRatio = (functionName, argumentName) => {\n      return functionBuilder.lookupFunctionArgumentBitRatio(functionName, argumentName);\n    };\n\n    const triggerImplyArgumentType = (functionName, i, argumentType, requestingNode) => {\n      functionBuilder.assignArgumentType(functionName, i, argumentType, requestingNode);\n    };\n\n    const triggerImplyArgumentBitRatio = (functionName, argumentName, calleeFunctionName, argumentIndex) => {\n      functionBuilder.assignArgumentBitRatio(functionName, argumentName, calleeFunctionName, argumentIndex);\n    };\n\n    const onFunctionCall = (functionName, calleeFunctionName, args) => {\n      functionBuilder.trackFunctionCall(functionName, calleeFunctionName, args);\n    };\n\n    const onNestedFunction = (ast, source) => {\n      const argumentNames = [];\n      for (let i = 0; i < ast.params.length; i++) {\n        argumentNames.push(ast.params[i].name);\n      }\n      const nestedFunction = new FunctionNode(source, Object.assign({}, nodeOptions, {\n        returnType: null,\n        ast,\n        name: ast.id.name,\n        argumentNames,\n        lookupReturnType,\n        lookupFunctionArgumentTypes,\n        lookupFunctionArgumentName,\n        lookupFunctionArgumentBitRatio,\n        needsArgumentType,\n        assignArgumentType,\n        triggerImplyArgumentType,\n        triggerImplyArgumentBitRatio,\n        onFunctionCall,\n      }));\n      nestedFunction.traceFunctionAST(ast);\n      functionBuilder.addFunctionNode(nestedFunction);\n    };\n\n    const nodeOptions = Object.assign({\n      isRootKernel: false,\n      onNestedFunction,\n      lookupReturnType,\n      lookupFunctionArgumentTypes,\n      lookupFunctionArgumentName,\n      lookupFunctionArgumentBitRatio,\n      needsArgumentType,\n      assignArgumentType,\n      triggerImplyArgumentType,\n      triggerImplyArgumentBitRatio,\n      onFunctionCall,\n      optimizeFloatMemory,\n      precision,\n      constants,\n      constantTypes,\n      constantBitRatios,\n      debug,\n      loopMaxIterations,\n      output,\n      plugins,\n      dynamicArguments,\n      dynamicOutput,\n    }, extraNodeOptions || {});\n\n    const rootNodeOptions = Object.assign({}, nodeOptions, {\n      isRootKernel: true,\n      name: 'kernel',\n      argumentNames,\n      argumentTypes,\n      argumentSizes,\n      argumentBitRatios,\n      leadingReturnStatement,\n      followingReturnStatement,\n    });\n\n    if (typeof source === 'object' && source.functionNodes) {\n      return new FunctionBuilder().fromJSON(source.functionNodes, FunctionNode);\n    }\n\n    const rootNode = new FunctionNode(source, rootNodeOptions);\n\n    let functionNodes = null;\n    if (functions) {\n      functionNodes = functions.map((fn) => new FunctionNode(fn.source, {\n        returnType: fn.returnType,\n        argumentTypes: fn.argumentTypes,\n        output,\n        plugins,\n        constants,\n        constantTypes,\n        constantBitRatios,\n        optimizeFloatMemory,\n        precision,\n        lookupReturnType,\n        lookupFunctionArgumentTypes,\n        lookupFunctionArgumentName,\n        lookupFunctionArgumentBitRatio,\n        needsArgumentType,\n        assignArgumentType,\n        triggerImplyArgumentType,\n        triggerImplyArgumentBitRatio,\n        onFunctionCall,\n        onNestedFunction,\n      }));\n    }\n\n    let subKernelNodes = null;\n    if (subKernels) {\n      subKernelNodes = subKernels.map((subKernel) => {\n        const { name, source } = subKernel;\n        return new FunctionNode(source, Object.assign({}, nodeOptions, {\n          name,\n          isSubKernel: true,\n          isRootKernel: false,\n        }));\n      });\n    }\n\n    const functionBuilder = new FunctionBuilder({\n      kernel,\n      rootNode,\n      functionNodes,\n      nativeFunctions,\n      subKernelNodes\n    });\n\n    return functionBuilder;\n  }\n\n  constructor(settings) {\n    settings = settings || {};\n    this.kernel = settings.kernel;\n    this.rootNode = settings.rootNode;\n    this.functionNodes = settings.functionNodes || [];\n    this.subKernelNodes = settings.subKernelNodes || [];\n    this.nativeFunctions = settings.nativeFunctions || [];\n    this.functionMap = {};\n    this.nativeFunctionNames = [];\n    this.lookupChain = [];\n    this.functionNodeDependencies = {};\n    this.functionCalls = {};\n\n    if (this.rootNode) {\n      this.functionMap['kernel'] = this.rootNode;\n    }\n\n    if (this.functionNodes) {\n      for (let i = 0; i < this.functionNodes.length; i++) {\n        this.functionMap[this.functionNodes[i].name] = this.functionNodes[i];\n      }\n    }\n\n    if (this.subKernelNodes) {\n      for (let i = 0; i < this.subKernelNodes.length; i++) {\n        this.functionMap[this.subKernelNodes[i].name] = this.subKernelNodes[i];\n      }\n    }\n\n    if (this.nativeFunctions) {\n      for (let i = 0; i < this.nativeFunctions.length; i++) {\n        const nativeFunction = this.nativeFunctions[i];\n        this.nativeFunctionNames.push(nativeFunction.name);\n      }\n    }\n  }\n\n  addFunctionNode(functionNode) {\n    if (!functionNode.name) throw new Error('functionNode.name needs set');\n    this.functionMap[functionNode.name] = functionNode;\n    if (functionNode.isRootKernel) {\n      this.rootNode = functionNode;\n    }\n  }\n\n  traceFunctionCalls(functionName, retList) {\n    functionName = functionName || 'kernel';\n    retList = retList || [];\n\n    if (this.nativeFunctionNames.indexOf(functionName) > -1) {\n      const nativeFunctionIndex = retList.indexOf(functionName);\n      if (nativeFunctionIndex === -1) {\n        retList.push(functionName);\n      } else {\n        const dependantNativeFunctionName = retList.splice(nativeFunctionIndex, 1)[0];\n        retList.push(dependantNativeFunctionName);\n      }\n      return retList;\n    }\n\n    const functionNode = this.functionMap[functionName];\n    if (functionNode) {\n      const functionIndex = retList.indexOf(functionName);\n      if (functionIndex === -1) {\n        retList.push(functionName);\n        functionNode.toString(); \n        for (let i = 0; i < functionNode.calledFunctions.length; ++i) {\n          this.traceFunctionCalls(functionNode.calledFunctions[i], retList);\n        }\n      } else {\n        const dependantFunctionName = retList.splice(functionIndex, 1)[0];\n        retList.push(dependantFunctionName);\n      }\n    }\n\n    return retList;\n  }\n\n  getPrototypeString(functionName) {\n    return this.getPrototypes(functionName).join('\\n');\n  }\n\n  getPrototypes(functionName) {\n    if (this.rootNode) {\n      this.rootNode.toString();\n    }\n    if (functionName) {\n      return this.getPrototypesFromFunctionNames(this.traceFunctionCalls(functionName, []).reverse());\n    }\n    return this.getPrototypesFromFunctionNames(Object.keys(this.functionMap));\n  }\n\n  getStringFromFunctionNames(functionList) {\n    const ret = [];\n    for (let i = 0; i < functionList.length; ++i) {\n      const node = this.functionMap[functionList[i]];\n      if (node) {\n        ret.push(this.functionMap[functionList[i]].toString());\n      }\n    }\n    return ret.join('\\n');\n  }\n\n  getPrototypesFromFunctionNames(functionList) {\n    const ret = [];\n    for (let i = 0; i < functionList.length; ++i) {\n      const functionName = functionList[i];\n      const functionIndex = this.nativeFunctionNames.indexOf(functionName);\n      if (functionIndex > -1) {\n        ret.push(this.nativeFunctions[functionIndex].source);\n        continue;\n      }\n      const node = this.functionMap[functionName];\n      if (node) {\n        ret.push(node.toString());\n      }\n    }\n    return ret;\n  }\n\n  toJSON() {\n    return this.traceFunctionCalls(this.rootNode.name).reverse().map(name => {\n      const nativeIndex = this.nativeFunctions.indexOf(name);\n      if (nativeIndex > -1) {\n        return {\n          name,\n          source: this.nativeFunctions[nativeIndex].source\n        };\n      } else if (this.functionMap[name]) {\n        return this.functionMap[name].toJSON();\n      } else {\n        throw new Error(`function ${ name } not found`);\n      }\n    });\n  }\n\n  fromJSON(jsonFunctionNodes, FunctionNode) {\n    this.functionMap = {};\n    for (let i = 0; i < jsonFunctionNodes.length; i++) {\n      const jsonFunctionNode = jsonFunctionNodes[i];\n      this.functionMap[jsonFunctionNode.settings.name] = new FunctionNode(jsonFunctionNode.ast, jsonFunctionNode.settings);\n    }\n    return this;\n  }\n\n  getString(functionName) {\n    if (functionName) {\n      return this.getStringFromFunctionNames(this.traceFunctionCalls(functionName).reverse());\n    }\n    return this.getStringFromFunctionNames(Object.keys(this.functionMap));\n  }\n\n  lookupReturnType(functionName, ast, requestingNode) {\n    if (ast.type !== 'CallExpression') {\n      throw new Error(`expected ast type of \"CallExpression\", but is ${ ast.type }`);\n    }\n    if (this._isNativeFunction(functionName)) {\n      return this._lookupNativeFunctionReturnType(functionName);\n    } else if (this._isFunction(functionName)) {\n      const node = this._getFunction(functionName);\n      if (node.returnType) {\n        return node.returnType;\n      } else {\n        for (let i = 0; i < this.lookupChain.length; i++) {\n          if (this.lookupChain[i].ast === ast) {\n            if (node.argumentTypes.length === 0 && ast.arguments.length > 0) {\n              const args = ast.arguments;\n              for (let j = 0; j < args.length; j++) {\n                this.lookupChain.push({\n                  name: requestingNode.name,\n                  ast: args[i],\n                  requestingNode\n                });\n                node.argumentTypes[j] = requestingNode.getType(args[j]);\n                this.lookupChain.pop();\n              }\n              return node.returnType = node.getType(node.getJsAST());\n            }\n\n            throw new Error('circlical logic detected!');\n          }\n        }\n        this.lookupChain.push({\n          name: requestingNode.name,\n          ast,\n          requestingNode\n        });\n        const type = node.getType(node.getJsAST());\n        this.lookupChain.pop();\n        return node.returnType = type;\n      }\n    }\n\n    return null;\n  }\n\n  _getFunction(functionName) {\n    if (!this._isFunction(functionName)) {\n      new Error(`Function ${functionName} not found`);\n    }\n    return this.functionMap[functionName];\n  }\n\n  _isFunction(functionName) {\n    return Boolean(this.functionMap[functionName]);\n  }\n\n  _getNativeFunction(functionName) {\n    for (let i = 0; i < this.nativeFunctions.length; i++) {\n      if (this.nativeFunctions[i].name === functionName) return this.nativeFunctions[i];\n    }\n    return null;\n  }\n\n  _isNativeFunction(functionName) {\n    return Boolean(this._getNativeFunction(functionName));\n  }\n\n  _lookupNativeFunctionReturnType(functionName) {\n    let nativeFunction = this._getNativeFunction(functionName);\n    if (nativeFunction) {\n      return nativeFunction.returnType;\n    }\n    throw new Error(`Native function ${ functionName } not found`);\n  }\n\n  lookupFunctionArgumentTypes(functionName) {\n    if (this._isNativeFunction(functionName)) {\n      return this._getNativeFunction(functionName).argumentTypes;\n    } else if (this._isFunction(functionName)) {\n      return this._getFunction(functionName).argumentTypes;\n    }\n    return null;\n  }\n\n  lookupFunctionArgumentName(functionName, argumentIndex) {\n    return this._getFunction(functionName).argumentNames[argumentIndex];\n  }\n\n  lookupFunctionArgumentBitRatio(functionName, argumentName) {\n    if (!this._isFunction(functionName)) {\n      throw new Error('function not found');\n    }\n    if (this.rootNode.name === functionName) {\n      const i = this.rootNode.argumentNames.indexOf(argumentName);\n      if (i !== -1) {\n        return this.rootNode.argumentBitRatios[i];\n      }\n    }\n    const node = this._getFunction(functionName);\n    const i = node.argumentNames.indexOf(argumentName);\n    if (i === -1) {\n      throw new Error('argument not found');\n    }\n    const bitRatio = node.argumentBitRatios[i];\n    if (typeof bitRatio !== 'number') {\n      throw new Error('argument bit ratio not found');\n    }\n    return bitRatio;\n  }\n\n  needsArgumentType(functionName, i) {\n    if (!this._isFunction(functionName)) return false;\n    const fnNode = this._getFunction(functionName);\n    return !fnNode.argumentTypes[i];\n  }\n\n  assignArgumentType(functionName, i, argumentType, requestingNode) {\n    if (!this._isFunction(functionName)) return;\n    const fnNode = this._getFunction(functionName);\n    if (!fnNode.argumentTypes[i]) {\n      fnNode.argumentTypes[i] = argumentType;\n    }\n  }\n\n  assignArgumentBitRatio(functionName, argumentName, calleeFunctionName, argumentIndex) {\n    const node = this._getFunction(functionName);\n    if (this._isNativeFunction(calleeFunctionName)) return null;\n    const calleeNode = this._getFunction(calleeFunctionName);\n    const i = node.argumentNames.indexOf(argumentName);\n    if (i === -1) {\n      throw new Error(`Argument ${argumentName} not found in arguments from function ${functionName}`);\n    }\n    const bitRatio = node.argumentBitRatios[i];\n    if (typeof bitRatio !== 'number') {\n      throw new Error(`Bit ratio for argument ${argumentName} not found in function ${functionName}`);\n    }\n    if (!calleeNode.argumentBitRatios) {\n      calleeNode.argumentBitRatios = new Array(calleeNode.argumentNames.length);\n    }\n    const calleeBitRatio = calleeNode.argumentBitRatios[i];\n    if (typeof calleeBitRatio === 'number') {\n      if (calleeBitRatio !== bitRatio) {\n        throw new Error(`Incompatible bit ratio found at function ${functionName} at argument ${argumentName}`);\n      }\n      return calleeBitRatio;\n    }\n    calleeNode.argumentBitRatios[i] = bitRatio;\n    return bitRatio;\n  }\n\n  trackFunctionCall(functionName, calleeFunctionName, args) {\n    if (!this.functionNodeDependencies[functionName]) {\n      this.functionNodeDependencies[functionName] = new Set();\n      this.functionCalls[functionName] = [];\n    }\n    this.functionNodeDependencies[functionName].add(calleeFunctionName);\n    this.functionCalls[functionName].push(args);\n  }\n\n  getKernelResultType() {\n    return this.rootNode.returnType || this.rootNode.getType(this.rootNode.ast);\n  }\n\n  getSubKernelResultType(index) {\n    const subKernelNode = this.subKernelNodes[index];\n    let called = false;\n    for (let functionCallIndex = 0; functionCallIndex < this.rootNode.functionCalls.length; functionCallIndex++) {\n      const functionCall = this.rootNode.functionCalls[functionCallIndex];\n      if (functionCall.ast.callee.name === subKernelNode.name) {\n        called = true;\n      }\n    }\n    if (!called) {\n      throw new Error(`SubKernel ${ subKernelNode.name } never called by kernel`);\n    }\n    return subKernelNode.returnType || subKernelNode.getType(subKernelNode.getJsAST());\n  }\n\n  getReturnTypes() {\n    const result = {\n      [this.rootNode.name]: this.rootNode.getType(this.rootNode.ast),\n    };\n    const list = this.traceFunctionCalls(this.rootNode.name);\n    for (let i = 0; i < list.length; i++) {\n      const functionName = list[i];\n      const functionNode = this.functionMap[functionName];\n      result[functionName] = functionNode.getType(functionNode.ast);\n    }\n    return result;\n  }\n}\n\nmodule.exports = {\n  FunctionBuilder\n};\n},{}],10:[function(require,module,exports){\nconst acorn = require('acorn');\nconst { utils } = require('../utils');\nconst { FunctionTracer } = require('./function-tracer');\n\nclass FunctionNode {\n  constructor(source, settings) {\n    if (!source && !settings.ast) {\n      throw new Error('source parameter is missing');\n    }\n    settings = settings || {};\n    this.source = source;\n    this.ast = null;\n    this.name = typeof source === 'string' ? settings.isRootKernel ?\n      'kernel' :\n      (settings.name || utils.getFunctionNameFromString(source)) : null;\n    this.calledFunctions = [];\n    this.constants = {};\n    this.constantTypes = {};\n    this.constantBitRatios = {};\n    this.isRootKernel = false;\n    this.isSubKernel = false;\n    this.debug = null;\n    this.functions = null;\n    this.identifiers = null;\n    this.contexts = null;\n    this.functionCalls = null;\n    this.states = [];\n    this.needsArgumentType = null;\n    this.assignArgumentType = null;\n    this.lookupReturnType = null;\n    this.lookupFunctionArgumentTypes = null;\n    this.lookupFunctionArgumentBitRatio = null;\n    this.triggerImplyArgumentType = null;\n    this.triggerImplyArgumentBitRatio = null;\n    this.onNestedFunction = null;\n    this.onFunctionCall = null;\n    this.optimizeFloatMemory = null;\n    this.precision = null;\n    this.loopMaxIterations = null;\n    this.argumentNames = (typeof this.source === 'string' ? utils.getArgumentNamesFromString(this.source) : null);\n    this.argumentTypes = [];\n    this.argumentSizes = [];\n    this.argumentBitRatios = null;\n    this.returnType = null;\n    this.output = [];\n    this.plugins = null;\n    this.leadingReturnStatement = null;\n    this.followingReturnStatement = null;\n    this.dynamicOutput = null;\n    this.dynamicArguments = null;\n    this.strictTypingChecking = false;\n    this.fixIntegerDivisionAccuracy = null;\n\n    if (settings) {\n      for (const p in settings) {\n        if (!settings.hasOwnProperty(p)) continue;\n        if (!this.hasOwnProperty(p)) continue;\n        this[p] = settings[p];\n      }\n    }\n\n    this.literalTypes = {};\n\n    this.validate();\n    this._string = null;\n    this._internalVariableNames = {};\n  }\n\n  validate() {\n    if (typeof this.source !== 'string' && !this.ast) {\n      throw new Error('this.source not a string');\n    }\n\n    if (!this.ast && !utils.isFunctionString(this.source)) {\n      throw new Error('this.source not a function string');\n    }\n\n    if (!this.name) {\n      throw new Error('this.name could not be set');\n    }\n\n    if (this.argumentTypes.length > 0 && this.argumentTypes.length !== this.argumentNames.length) {\n      throw new Error(`argumentTypes count of ${ this.argumentTypes.length } exceeds ${ this.argumentNames.length }`);\n    }\n\n    if (this.output.length < 1) {\n      throw new Error('this.output is not big enough');\n    }\n  }\n\n  isIdentifierConstant(name) {\n    if (!this.constants) return false;\n    return this.constants.hasOwnProperty(name);\n  }\n\n  isInput(argumentName) {\n    return this.argumentTypes[this.argumentNames.indexOf(argumentName)] === 'Input';\n  }\n\n  pushState(state) {\n    this.states.push(state);\n  }\n\n  popState(state) {\n    if (this.state !== state) {\n      throw new Error(`Cannot popState ${ state } when in ${ this.state }`);\n    }\n    this.states.pop();\n  }\n\n  isState(state) {\n    return this.state === state;\n  }\n\n  get state() {\n    return this.states[this.states.length - 1];\n  }\n\n  astMemberExpressionUnroll(ast) {\n    if (ast.type === 'Identifier') {\n      return ast.name;\n    } else if (ast.type === 'ThisExpression') {\n      return 'this';\n    }\n\n    if (ast.type === 'MemberExpression') {\n      if (ast.object && ast.property) {\n        if (ast.object.hasOwnProperty('name') && ast.object.name !== 'Math') {\n          return this.astMemberExpressionUnroll(ast.property);\n        }\n\n        return (\n          this.astMemberExpressionUnroll(ast.object) +\n          '.' +\n          this.astMemberExpressionUnroll(ast.property)\n        );\n      }\n    }\n\n    if (ast.hasOwnProperty('expressions')) {\n      const firstExpression = ast.expressions[0];\n      if (firstExpression.type === 'Literal' && firstExpression.value === 0 && ast.expressions.length === 2) {\n        return this.astMemberExpressionUnroll(ast.expressions[1]);\n      }\n    }\n\n    throw this.astErrorOutput('Unknown astMemberExpressionUnroll', ast);\n  }\n\n  getJsAST(inParser) {\n    if (this.ast) {\n      return this.ast;\n    }\n    if (typeof this.source === 'object') {\n      this.traceFunctionAST(this.source);\n      return this.ast = this.source;\n    }\n\n    inParser = inParser || acorn;\n    if (inParser === null) {\n      throw new Error('Missing JS to AST parser');\n    }\n\n    const ast = Object.freeze(inParser.parse(`const parser_${ this.name } = ${ this.source };`, {\n      locations: true\n    }));\n    const functionAST = ast.body[0].declarations[0].init;\n    this.traceFunctionAST(functionAST);\n\n    if (!ast) {\n      throw new Error('Failed to parse JS code');\n    }\n\n    return this.ast = functionAST;\n  }\n\n  traceFunctionAST(ast) {\n    const { contexts, declarations, functions, identifiers, functionCalls } = new FunctionTracer(ast);\n    this.contexts = contexts;\n    this.identifiers = identifiers;\n    this.functionCalls = functionCalls;\n    this.functions = functions;\n    for (let i = 0; i < declarations.length; i++) {\n      const declaration = declarations[i];\n      const { ast, inForLoopInit, inForLoopTest } = declaration;\n      const { init } = ast;\n      const dependencies = this.getDependencies(init);\n      let valueType = null;\n\n      if (inForLoopInit && inForLoopTest) {\n        valueType = 'Integer';\n      } else {\n        if (init) {\n          const realType = this.getType(init);\n          switch (realType) {\n            case 'Integer':\n            case 'Float':\n            case 'Number':\n              if (init.type === 'MemberExpression') {\n                valueType = realType;\n              } else {\n                valueType = 'Number';\n              }\n              break;\n            case 'LiteralInteger':\n              valueType = 'Number';\n              break;\n            default:\n              valueType = realType;\n          }\n        }\n      }\n      declaration.valueType = valueType;\n      declaration.dependencies = dependencies;\n      declaration.isSafe = this.isSafeDependencies(dependencies);\n    }\n\n    for (let i = 0; i < functions.length; i++) {\n      this.onNestedFunction(functions[i], this.source);\n    }\n  }\n\n  getDeclaration(ast) {\n    for (let i = 0; i < this.identifiers.length; i++) {\n      const identifier = this.identifiers[i];\n      if (ast === identifier.ast) {\n        return identifier.declaration;\n      }\n    }\n    return null;\n  }\n\n  getVariableType(ast) {\n    if (ast.type !== 'Identifier') {\n      throw new Error(`ast of ${ast.type} not \"Identifier\"`);\n    }\n    let type = null;\n    const argumentIndex = this.argumentNames.indexOf(ast.name);\n    if (argumentIndex === -1) {\n      const declaration = this.getDeclaration(ast);\n      if (declaration) {\n        return declaration.valueType;\n      }\n    } else {\n      const argumentType = this.argumentTypes[argumentIndex];\n      if (argumentType) {\n        type = argumentType;\n      }\n    }\n    if (!type && this.strictTypingChecking) {\n      throw new Error(`Declaration of ${name} not found`);\n    }\n    return type;\n  }\n\n  getLookupType(type) {\n    if (!typeLookupMap.hasOwnProperty(type)) {\n      throw new Error(`unknown typeLookupMap ${ type }`);\n    }\n    return typeLookupMap[type];\n  }\n\n  getConstantType(constantName) {\n    if (this.constantTypes[constantName]) {\n      const type = this.constantTypes[constantName];\n      if (type === 'Float') {\n        return 'Number';\n      } else {\n        return type;\n      }\n    }\n    throw new Error(`Type for constant \"${ constantName }\" not declared`);\n  }\n\n  toString() {\n    if (this._string) return this._string;\n    return this._string = this.astGeneric(this.getJsAST(), []).join('').trim();\n  }\n\n  toJSON() {\n    const settings = {\n      source: this.source,\n      name: this.name,\n      constants: this.constants,\n      constantTypes: this.constantTypes,\n      isRootKernel: this.isRootKernel,\n      isSubKernel: this.isSubKernel,\n      debug: this.debug,\n      output: this.output,\n      loopMaxIterations: this.loopMaxIterations,\n      argumentNames: this.argumentNames,\n      argumentTypes: this.argumentTypes,\n      argumentSizes: this.argumentSizes,\n      returnType: this.returnType,\n      leadingReturnStatement: this.leadingReturnStatement,\n      followingReturnStatement: this.followingReturnStatement,\n    };\n\n    return {\n      ast: this.ast,\n      settings\n    };\n  }\n\n  getType(ast) {\n    if (Array.isArray(ast)) {\n      return this.getType(ast[ast.length - 1]);\n    }\n    switch (ast.type) {\n      case 'BlockStatement':\n        return this.getType(ast.body);\n      case 'ArrayExpression':\n        const childType = this.getType(ast.elements[0]);\n        switch (childType) {\n          case 'Array(2)':\n          case 'Array(3)':\n          case 'Array(4)':\n            return `Matrix(${ast.elements.length})`;\n        }\n        return `Array(${ ast.elements.length })`;\n      case 'Literal':\n        const literalKey = this.astKey(ast);\n        if (this.literalTypes[literalKey]) {\n          return this.literalTypes[literalKey];\n        }\n        if (Number.isInteger(ast.value)) {\n          return 'LiteralInteger';\n        } else if (ast.value === true || ast.value === false) {\n          return 'Boolean';\n        } else {\n          return 'Number';\n        }\n        case 'AssignmentExpression':\n          return this.getType(ast.left);\n        case 'CallExpression':\n          if (this.isAstMathFunction(ast)) {\n            return 'Number';\n          }\n          if (!ast.callee || !ast.callee.name) {\n            if (ast.callee.type === 'SequenceExpression' && ast.callee.expressions[ast.callee.expressions.length - 1].property.name) {\n              const functionName = ast.callee.expressions[ast.callee.expressions.length - 1].property.name;\n              this.inferArgumentTypesIfNeeded(functionName, ast.arguments);\n              return this.lookupReturnType(functionName, ast, this);\n            }\n            if (this.getVariableSignature(ast.callee, true) === 'this.color') {\n              return null;\n            }\n            if (ast.callee.type === 'MemberExpression' && ast.callee.object && ast.callee.property && ast.callee.property.name && ast.arguments) {\n              const functionName = ast.callee.property.name;\n              this.inferArgumentTypesIfNeeded(functionName, ast.arguments);\n              return this.lookupReturnType(functionName, ast, this);\n            }\n            throw this.astErrorOutput('Unknown call expression', ast);\n          }\n          if (ast.callee && ast.callee.name) {\n            const functionName = ast.callee.name;\n            this.inferArgumentTypesIfNeeded(functionName, ast.arguments);\n            return this.lookupReturnType(functionName, ast, this);\n          }\n          throw this.astErrorOutput(`Unhandled getType Type \"${ ast.type }\"`, ast);\n        case 'LogicalExpression':\n          return 'Boolean';\n        case 'BinaryExpression':\n          switch (ast.operator) {\n            case '%':\n            case '/':\n              if (this.fixIntegerDivisionAccuracy) {\n                return 'Number';\n              } else {\n                break;\n              }\n              case '>':\n              case '<':\n                return 'Boolean';\n              case '&':\n              case '|':\n              case '^':\n              case '<<':\n              case '>>':\n              case '>>>':\n                return 'Integer';\n          }\n          const type = this.getType(ast.left);\n          if (this.isState('skip-literal-correction')) return type;\n          if (type === 'LiteralInteger') {\n            const rightType = this.getType(ast.right);\n            if (rightType === 'LiteralInteger') {\n              if (ast.left.value % 1 === 0) {\n                return 'Integer';\n              } else {\n                return 'Float';\n              }\n            }\n            return rightType;\n          }\n          return typeLookupMap[type] || type;\n        case 'UpdateExpression':\n          return this.getType(ast.argument);\n        case 'UnaryExpression':\n          if (ast.operator === '~') {\n            return 'Integer';\n          }\n          return this.getType(ast.argument);\n        case 'VariableDeclaration': {\n          const declarations = ast.declarations;\n          let lastType;\n          for (let i = 0; i < declarations.length; i++) {\n            const declaration = declarations[i];\n            lastType = this.getType(declaration);\n          }\n          if (!lastType) {\n            throw this.astErrorOutput(`Unable to find type for declaration`, ast);\n          }\n          return lastType;\n        }\n        case 'VariableDeclarator':\n          const declaration = this.getDeclaration(ast.id);\n          if (!declaration) {\n            throw this.astErrorOutput(`Unable to find declarator`, ast);\n          }\n\n          if (!declaration.valueType) {\n            throw this.astErrorOutput(`Unable to find declarator valueType`, ast);\n          }\n\n          return declaration.valueType;\n        case 'Identifier':\n          if (ast.name === 'Infinity') {\n            return 'Number';\n          }\n          if (this.isAstVariable(ast)) {\n            const signature = this.getVariableSignature(ast);\n            if (signature === 'value') {\n              return this.getCheckVariableType(ast);\n            }\n          }\n          const origin = this.findIdentifierOrigin(ast);\n          if (origin && origin.init) {\n            return this.getType(origin.init);\n          }\n          return null;\n        case 'ReturnStatement':\n          return this.getType(ast.argument);\n        case 'MemberExpression':\n          if (this.isAstMathFunction(ast)) {\n            switch (ast.property.name) {\n              case 'ceil':\n                return 'Integer';\n              case 'floor':\n                return 'Integer';\n              case 'round':\n                return 'Integer';\n            }\n            return 'Number';\n          }\n          if (this.isAstVariable(ast)) {\n            const variableSignature = this.getVariableSignature(ast);\n            switch (variableSignature) {\n              case 'value[]':\n                return this.getLookupType(this.getCheckVariableType(ast.object));\n              case 'value[][]':\n                return this.getLookupType(this.getCheckVariableType(ast.object.object));\n              case 'value[][][]':\n                return this.getLookupType(this.getCheckVariableType(ast.object.object.object));\n              case 'value[][][][]':\n                return this.getLookupType(this.getCheckVariableType(ast.object.object.object.object));\n              case 'value.thread.value':\n              case 'this.thread.value':\n                return 'Integer';\n              case 'this.output.value':\n                return this.dynamicOutput ? 'Integer' : 'LiteralInteger';\n              case 'this.constants.value':\n                return this.getConstantType(ast.property.name);\n              case 'this.constants.value[]':\n                return this.getLookupType(this.getConstantType(ast.object.property.name));\n              case 'this.constants.value[][]':\n                return this.getLookupType(this.getConstantType(ast.object.object.property.name));\n              case 'this.constants.value[][][]':\n                return this.getLookupType(this.getConstantType(ast.object.object.object.property.name));\n              case 'this.constants.value[][][][]':\n                return this.getLookupType(this.getConstantType(ast.object.object.object.object.property.name));\n              case 'fn()[]':\n              case 'fn()[][]':\n              case 'fn()[][][]':\n                return this.getLookupType(this.getType(ast.object));\n              case 'value.value':\n                if (this.isAstMathVariable(ast)) {\n                  return 'Number';\n                }\n                switch (ast.property.name) {\n                  case 'r':\n                  case 'g':\n                  case 'b':\n                  case 'a':\n                    return this.getLookupType(this.getCheckVariableType(ast.object));\n                }\n                case '[][]':\n                  return 'Number';\n            }\n            throw this.astErrorOutput('Unhandled getType MemberExpression', ast);\n          }\n          throw this.astErrorOutput('Unhandled getType MemberExpression', ast);\n        case 'ConditionalExpression':\n          return this.getType(ast.consequent);\n        case 'FunctionDeclaration':\n        case 'FunctionExpression':\n          const lastReturn = this.findLastReturn(ast.body);\n          if (lastReturn) {\n            return this.getType(lastReturn);\n          }\n          return null;\n        case 'IfStatement':\n          return this.getType(ast.consequent);\n        case 'SequenceExpression':\n          return this.getType(ast.expressions[ast.expressions.length - 1]);\n        default:\n          throw this.astErrorOutput(`Unhandled getType Type \"${ ast.type }\"`, ast);\n    }\n  }\n\n  getCheckVariableType(ast) {\n    const type = this.getVariableType(ast);\n    if (!type) {\n      throw this.astErrorOutput(`${ast.type} is not defined`, ast);\n    }\n    return type;\n  }\n\n  inferArgumentTypesIfNeeded(functionName, args) {\n    for (let i = 0; i < args.length; i++) {\n      if (!this.needsArgumentType(functionName, i)) continue;\n      const type = this.getType(args[i]);\n      if (!type) {\n        throw this.astErrorOutput(`Unable to infer argument ${i}`, args[i]);\n      }\n      this.assignArgumentType(functionName, i, type);\n    }\n  }\n\n  isAstMathVariable(ast) {\n    const mathProperties = [\n      'E',\n      'PI',\n      'SQRT2',\n      'SQRT1_2',\n      'LN2',\n      'LN10',\n      'LOG2E',\n      'LOG10E',\n    ];\n    return ast.type === 'MemberExpression' &&\n      ast.object && ast.object.type === 'Identifier' &&\n      ast.object.name === 'Math' &&\n      ast.property &&\n      ast.property.type === 'Identifier' &&\n      mathProperties.indexOf(ast.property.name) > -1;\n  }\n\n  isAstMathFunction(ast) {\n    const mathFunctions = [\n      'abs',\n      'acos',\n      'acosh',\n      'asin',\n      'asinh',\n      'atan',\n      'atan2',\n      'atanh',\n      'cbrt',\n      'ceil',\n      'clz32',\n      'cos',\n      'cosh',\n      'expm1',\n      'exp',\n      'floor',\n      'fround',\n      'imul',\n      'log',\n      'log2',\n      'log10',\n      'log1p',\n      'max',\n      'min',\n      'pow',\n      'random',\n      'round',\n      'sign',\n      'sin',\n      'sinh',\n      'sqrt',\n      'tan',\n      'tanh',\n      'trunc',\n    ];\n    return ast.type === 'CallExpression' &&\n      ast.callee &&\n      ast.callee.type === 'MemberExpression' &&\n      ast.callee.object &&\n      ast.callee.object.type === 'Identifier' &&\n      ast.callee.object.name === 'Math' &&\n      ast.callee.property &&\n      ast.callee.property.type === 'Identifier' &&\n      mathFunctions.indexOf(ast.callee.property.name) > -1;\n  }\n\n  isAstVariable(ast) {\n    return ast.type === 'Identifier' || ast.type === 'MemberExpression';\n  }\n\n  isSafe(ast) {\n    return this.isSafeDependencies(this.getDependencies(ast));\n  }\n\n  isSafeDependencies(dependencies) {\n    return dependencies && dependencies.every ? dependencies.every(dependency => dependency.isSafe) : true;\n  }\n\n  getDependencies(ast, dependencies, isNotSafe) {\n    if (!dependencies) {\n      dependencies = [];\n    }\n    if (!ast) return null;\n    if (Array.isArray(ast)) {\n      for (let i = 0; i < ast.length; i++) {\n        this.getDependencies(ast[i], dependencies, isNotSafe);\n      }\n      return dependencies;\n    }\n    switch (ast.type) {\n      case 'AssignmentExpression':\n        this.getDependencies(ast.left, dependencies, isNotSafe);\n        this.getDependencies(ast.right, dependencies, isNotSafe);\n        return dependencies;\n      case 'ConditionalExpression':\n        this.getDependencies(ast.test, dependencies, isNotSafe);\n        this.getDependencies(ast.alternate, dependencies, isNotSafe);\n        this.getDependencies(ast.consequent, dependencies, isNotSafe);\n        return dependencies;\n      case 'Literal':\n        dependencies.push({\n          origin: 'literal',\n          value: ast.value,\n          isSafe: isNotSafe === true ? false : ast.value > -Infinity && ast.value < Infinity && !isNaN(ast.value)\n        });\n        break;\n      case 'VariableDeclarator':\n        return this.getDependencies(ast.init, dependencies, isNotSafe);\n      case 'Identifier':\n        const declaration = this.getDeclaration(ast);\n        if (declaration) {\n          dependencies.push({\n            name: ast.name,\n            origin: 'declaration',\n            isSafe: isNotSafe ? false : this.isSafeDependencies(declaration.dependencies),\n          });\n        } else if (this.argumentNames.indexOf(ast.name) > -1) {\n          dependencies.push({\n            name: ast.name,\n            origin: 'argument',\n            isSafe: false,\n          });\n        } else if (this.strictTypingChecking) {\n          throw new Error(`Cannot find identifier origin \"${ast.name}\"`);\n        }\n        break;\n      case 'FunctionDeclaration':\n        return this.getDependencies(ast.body.body[ast.body.body.length - 1], dependencies, isNotSafe);\n      case 'ReturnStatement':\n        return this.getDependencies(ast.argument, dependencies);\n      case 'BinaryExpression':\n      case 'LogicalExpression':\n        isNotSafe = (ast.operator === '/' || ast.operator === '*');\n        this.getDependencies(ast.left, dependencies, isNotSafe);\n        this.getDependencies(ast.right, dependencies, isNotSafe);\n        return dependencies;\n      case 'UnaryExpression':\n      case 'UpdateExpression':\n        return this.getDependencies(ast.argument, dependencies, isNotSafe);\n      case 'VariableDeclaration':\n        return this.getDependencies(ast.declarations, dependencies, isNotSafe);\n      case 'ArrayExpression':\n        dependencies.push({\n          origin: 'declaration',\n          isSafe: true,\n        });\n        return dependencies;\n      case 'CallExpression':\n        dependencies.push({\n          origin: 'function',\n          isSafe: true,\n        });\n        return dependencies;\n      case 'MemberExpression':\n        const details = this.getMemberExpressionDetails(ast);\n        switch (details.signature) {\n          case 'value[]':\n            this.getDependencies(ast.object, dependencies, isNotSafe);\n            break;\n          case 'value[][]':\n            this.getDependencies(ast.object.object, dependencies, isNotSafe);\n            break;\n          case 'value[][][]':\n            this.getDependencies(ast.object.object.object, dependencies, isNotSafe);\n            break;\n          case 'this.output.value':\n            if (this.dynamicOutput) {\n              dependencies.push({\n                name: details.name,\n                origin: 'output',\n                isSafe: false,\n              });\n            }\n            break;\n        }\n        if (details) {\n          if (details.property) {\n            this.getDependencies(details.property, dependencies, isNotSafe);\n          }\n          if (details.xProperty) {\n            this.getDependencies(details.xProperty, dependencies, isNotSafe);\n          }\n          if (details.yProperty) {\n            this.getDependencies(details.yProperty, dependencies, isNotSafe);\n          }\n          if (details.zProperty) {\n            this.getDependencies(details.zProperty, dependencies, isNotSafe);\n          }\n          return dependencies;\n        }\n        case 'SequenceExpression':\n          return this.getDependencies(ast.expressions, dependencies, isNotSafe);\n        default:\n          throw this.astErrorOutput(`Unhandled type ${ ast.type } in getDependencies`, ast);\n    }\n    return dependencies;\n  }\n\n  getVariableSignature(ast, returnRawValue) {\n    if (!this.isAstVariable(ast)) {\n      throw new Error(`ast of type \"${ ast.type }\" is not a variable signature`);\n    }\n    if (ast.type === 'Identifier') {\n      return 'value';\n    }\n    const signature = [];\n    while (true) {\n      if (!ast) break;\n      if (ast.computed) {\n        signature.push('[]');\n      } else if (ast.type === 'ThisExpression') {\n        signature.unshift('this');\n      } else if (ast.property && ast.property.name) {\n        if (\n          ast.property.name === 'x' ||\n          ast.property.name === 'y' ||\n          ast.property.name === 'z'\n        ) {\n          signature.unshift(returnRawValue ? '.' + ast.property.name : '.value');\n        } else if (\n          ast.property.name === 'constants' ||\n          ast.property.name === 'thread' ||\n          ast.property.name === 'output'\n        ) {\n          signature.unshift('.' + ast.property.name);\n        } else {\n          signature.unshift(returnRawValue ? '.' + ast.property.name : '.value');\n        }\n      } else if (ast.name) {\n        signature.unshift(returnRawValue ? ast.name : 'value');\n      } else if (ast.callee && ast.callee.name) {\n        signature.unshift(returnRawValue ? ast.callee.name + '()' : 'fn()');\n      } else if (ast.elements) {\n        signature.unshift('[]');\n      } else {\n        signature.unshift('unknown');\n      }\n      ast = ast.object;\n    }\n\n    const signatureString = signature.join('');\n    if (returnRawValue) {\n      return signatureString;\n    }\n\n    const allowedExpressions = [\n      'value',\n      'value[]',\n      'value[][]',\n      'value[][][]',\n      'value[][][][]',\n      'value.value',\n      'value.thread.value',\n      'this.thread.value',\n      'this.output.value',\n      'this.constants.value',\n      'this.constants.value[]',\n      'this.constants.value[][]',\n      'this.constants.value[][][]',\n      'this.constants.value[][][][]',\n      'fn()[]',\n      'fn()[][]',\n      'fn()[][][]',\n      '[][]',\n    ];\n    if (allowedExpressions.indexOf(signatureString) > -1) {\n      return signatureString;\n    }\n    return null;\n  }\n\n  build() {\n    return this.toString().length > 0;\n  }\n\n  astGeneric(ast, retArr) {\n    if (ast === null) {\n      throw this.astErrorOutput('NULL ast', ast);\n    } else {\n      if (Array.isArray(ast)) {\n        for (let i = 0; i < ast.length; i++) {\n          this.astGeneric(ast[i], retArr);\n        }\n        return retArr;\n      }\n\n      switch (ast.type) {\n        case 'FunctionDeclaration':\n          return this.astFunctionDeclaration(ast, retArr);\n        case 'FunctionExpression':\n          return this.astFunctionExpression(ast, retArr);\n        case 'ReturnStatement':\n          return this.astReturnStatement(ast, retArr);\n        case 'Literal':\n          return this.astLiteral(ast, retArr);\n        case 'BinaryExpression':\n          return this.astBinaryExpression(ast, retArr);\n        case 'Identifier':\n          return this.astIdentifierExpression(ast, retArr);\n        case 'AssignmentExpression':\n          return this.astAssignmentExpression(ast, retArr);\n        case 'ExpressionStatement':\n          return this.astExpressionStatement(ast, retArr);\n        case 'EmptyStatement':\n          return this.astEmptyStatement(ast, retArr);\n        case 'BlockStatement':\n          return this.astBlockStatement(ast, retArr);\n        case 'IfStatement':\n          return this.astIfStatement(ast, retArr);\n        case 'SwitchStatement':\n          return this.astSwitchStatement(ast, retArr);\n        case 'BreakStatement':\n          return this.astBreakStatement(ast, retArr);\n        case 'ContinueStatement':\n          return this.astContinueStatement(ast, retArr);\n        case 'ForStatement':\n          return this.astForStatement(ast, retArr);\n        case 'WhileStatement':\n          return this.astWhileStatement(ast, retArr);\n        case 'DoWhileStatement':\n          return this.astDoWhileStatement(ast, retArr);\n        case 'VariableDeclaration':\n          return this.astVariableDeclaration(ast, retArr);\n        case 'VariableDeclarator':\n          return this.astVariableDeclarator(ast, retArr);\n        case 'ThisExpression':\n          return this.astThisExpression(ast, retArr);\n        case 'SequenceExpression':\n          return this.astSequenceExpression(ast, retArr);\n        case 'UnaryExpression':\n          return this.astUnaryExpression(ast, retArr);\n        case 'UpdateExpression':\n          return this.astUpdateExpression(ast, retArr);\n        case 'LogicalExpression':\n          return this.astLogicalExpression(ast, retArr);\n        case 'MemberExpression':\n          return this.astMemberExpression(ast, retArr);\n        case 'CallExpression':\n          return this.astCallExpression(ast, retArr);\n        case 'ArrayExpression':\n          return this.astArrayExpression(ast, retArr);\n        case 'DebuggerStatement':\n          return this.astDebuggerStatement(ast, retArr);\n        case 'ConditionalExpression':\n          return this.astConditionalExpression(ast, retArr);\n      }\n\n      throw this.astErrorOutput('Unknown ast type : ' + ast.type, ast);\n    }\n  }\n  astErrorOutput(error, ast) {\n    if (typeof this.source !== 'string') {\n      return new Error(error);\n    }\n\n    const debugString = utils.getAstString(this.source, ast);\n    const leadingSource = this.source.substr(ast.start);\n    const splitLines = leadingSource.split(/\\n/);\n    const lineBefore = splitLines.length > 0 ? splitLines[splitLines.length - 1] : 0;\n    return new Error(`${error} on line ${ splitLines.length }, position ${ lineBefore.length }:\\n ${ debugString }`);\n  }\n\n  astDebuggerStatement(arrNode, retArr) {\n    return retArr;\n  }\n\n  astConditionalExpression(ast, retArr) {\n    if (ast.type !== 'ConditionalExpression') {\n      throw this.astErrorOutput('Not a conditional expression', ast);\n    }\n    retArr.push('(');\n    this.astGeneric(ast.test, retArr);\n    retArr.push('?');\n    this.astGeneric(ast.consequent, retArr);\n    retArr.push(':');\n    this.astGeneric(ast.alternate, retArr);\n    retArr.push(')');\n    return retArr;\n  }\n\n  astFunction(ast, retArr) {\n    throw new Error(`\"astFunction\" not defined on ${ this.constructor.name }`);\n  }\n\n  astFunctionDeclaration(ast, retArr) {\n    if (this.isChildFunction(ast)) {\n      return retArr;\n    }\n    return this.astFunction(ast, retArr);\n  }\n  astFunctionExpression(ast, retArr) {\n    if (this.isChildFunction(ast)) {\n      return retArr;\n    }\n    return this.astFunction(ast, retArr);\n  }\n  isChildFunction(ast) {\n    for (let i = 0; i < this.functions.length; i++) {\n      if (this.functions[i] === ast) {\n        return true;\n      }\n    }\n    return false;\n  }\n  astReturnStatement(ast, retArr) {\n    return retArr;\n  }\n  astLiteral(ast, retArr) {\n    this.literalTypes[this.astKey(ast)] = 'Number';\n    return retArr;\n  }\n  astBinaryExpression(ast, retArr) {\n    return retArr;\n  }\n  astIdentifierExpression(ast, retArr) {\n    return retArr;\n  }\n  astAssignmentExpression(ast, retArr) {\n    return retArr;\n  }\n  astExpressionStatement(esNode, retArr) {\n    this.astGeneric(esNode.expression, retArr);\n    retArr.push(';');\n    return retArr;\n  }\n  astEmptyStatement(eNode, retArr) {\n    return retArr;\n  }\n  astBlockStatement(ast, retArr) {\n    return retArr;\n  }\n  astIfStatement(ast, retArr) {\n    return retArr;\n  }\n  astSwitchStatement(ast, retArr) {\n    return retArr;\n  }\n  astBreakStatement(brNode, retArr) {\n    retArr.push('break;');\n    return retArr;\n  }\n  astContinueStatement(crNode, retArr) {\n    retArr.push('continue;\\n');\n    return retArr;\n  }\n  astForStatement(ast, retArr) {\n    return retArr;\n  }\n  astWhileStatement(ast, retArr) {\n    return retArr;\n  }\n  astDoWhileStatement(ast, retArr) {\n    return retArr;\n  }\n  astVariableDeclarator(iVarDecNode, retArr) {\n    this.astGeneric(iVarDecNode.id, retArr);\n    if (iVarDecNode.init !== null) {\n      retArr.push('=');\n      this.astGeneric(iVarDecNode.init, retArr);\n    }\n    return retArr;\n  }\n  astThisExpression(ast, retArr) {\n    return retArr;\n  }\n  astSequenceExpression(sNode, retArr) {\n    const { expressions } = sNode;\n    const sequenceResult = [];\n    for (let i = 0; i < expressions.length; i++) {\n      const expression = expressions[i];\n      const expressionResult = [];\n      this.astGeneric(expression, expressionResult);\n      sequenceResult.push(expressionResult.join(''));\n    }\n    if (sequenceResult.length > 1) {\n      retArr.push('(', sequenceResult.join(','), ')');\n    } else {\n      retArr.push(sequenceResult[0]);\n    }\n    return retArr;\n  }\n  astUnaryExpression(uNode, retArr) {\n    const unaryResult = this.checkAndUpconvertBitwiseUnary(uNode, retArr);\n    if (unaryResult) {\n      return retArr;\n    }\n\n    if (uNode.prefix) {\n      retArr.push(uNode.operator);\n      this.astGeneric(uNode.argument, retArr);\n    } else {\n      this.astGeneric(uNode.argument, retArr);\n      retArr.push(uNode.operator);\n    }\n\n    return retArr;\n  }\n\n  checkAndUpconvertBitwiseUnary(uNode, retArr) {}\n\n  astUpdateExpression(uNode, retArr) {\n    if (uNode.prefix) {\n      retArr.push(uNode.operator);\n      this.astGeneric(uNode.argument, retArr);\n    } else {\n      this.astGeneric(uNode.argument, retArr);\n      retArr.push(uNode.operator);\n    }\n\n    return retArr;\n  }\n  astLogicalExpression(logNode, retArr) {\n    retArr.push('(');\n    this.astGeneric(logNode.left, retArr);\n    retArr.push(logNode.operator);\n    this.astGeneric(logNode.right, retArr);\n    retArr.push(')');\n    return retArr;\n  }\n  astMemberExpression(ast, retArr) {\n    return retArr;\n  }\n  astCallExpression(ast, retArr) {\n    return retArr;\n  }\n  astArrayExpression(ast, retArr) {\n    return retArr;\n  }\n\n  getMemberExpressionDetails(ast) {\n    if (ast.type !== 'MemberExpression') {\n      throw this.astErrorOutput(`Expression ${ ast.type } not a MemberExpression`, ast);\n    }\n    let name = null;\n    let type = null;\n    const variableSignature = this.getVariableSignature(ast);\n    switch (variableSignature) {\n      case 'value':\n        return null;\n      case 'value.thread.value':\n      case 'this.thread.value':\n      case 'this.output.value':\n        return {\n          signature: variableSignature,\n            type: 'Integer',\n            name: ast.property.name\n        };\n      case 'value[]':\n        if (typeof ast.object.name !== 'string') {\n          throw this.astErrorOutput('Unexpected expression', ast);\n        }\n        name = ast.object.name;\n        return {\n          name,\n          origin: 'user',\n            signature: variableSignature,\n            type: this.getVariableType(ast.object),\n            xProperty: ast.property\n        };\n      case 'value[][]':\n        if (typeof ast.object.object.name !== 'string') {\n          throw this.astErrorOutput('Unexpected expression', ast);\n        }\n        name = ast.object.object.name;\n        return {\n          name,\n          origin: 'user',\n            signature: variableSignature,\n            type: this.getVariableType(ast.object.object),\n            yProperty: ast.object.property,\n            xProperty: ast.property,\n        };\n      case 'value[][][]':\n        if (typeof ast.object.object.object.name !== 'string') {\n          throw this.astErrorOutput('Unexpected expression', ast);\n        }\n        name = ast.object.object.object.name;\n        return {\n          name,\n          origin: 'user',\n            signature: variableSignature,\n            type: this.getVariableType(ast.object.object.object),\n            zProperty: ast.object.object.property,\n            yProperty: ast.object.property,\n            xProperty: ast.property,\n        };\n      case 'value[][][][]':\n        if (typeof ast.object.object.object.object.name !== 'string') {\n          throw this.astErrorOutput('Unexpected expression', ast);\n        }\n        name = ast.object.object.object.object.name;\n        return {\n          name,\n          origin: 'user',\n            signature: variableSignature,\n            type: this.getVariableType(ast.object.object.object.object),\n            zProperty: ast.object.object.property,\n            yProperty: ast.object.property,\n            xProperty: ast.property,\n        };\n      case 'value.value':\n        if (typeof ast.property.name !== 'string') {\n          throw this.astErrorOutput('Unexpected expression', ast);\n        }\n        if (this.isAstMathVariable(ast)) {\n          name = ast.property.name;\n          return {\n            name,\n            origin: 'Math',\n            type: 'Number',\n            signature: variableSignature,\n          };\n        }\n        switch (ast.property.name) {\n          case 'r':\n          case 'g':\n          case 'b':\n          case 'a':\n            name = ast.object.name;\n            return {\n              name,\n              property: ast.property.name,\n                origin: 'user',\n                signature: variableSignature,\n                type: 'Number'\n            };\n          default:\n            throw this.astErrorOutput('Unexpected expression', ast);\n        }\n        case 'this.constants.value':\n          if (typeof ast.property.name !== 'string') {\n            throw this.astErrorOutput('Unexpected expression', ast);\n          }\n          name = ast.property.name;\n          type = this.getConstantType(name);\n          if (!type) {\n            throw this.astErrorOutput('Constant has no type', ast);\n          }\n          return {\n            name,\n            type,\n            origin: 'constants',\n              signature: variableSignature,\n          };\n        case 'this.constants.value[]':\n          if (typeof ast.object.property.name !== 'string') {\n            throw this.astErrorOutput('Unexpected expression', ast);\n          }\n          name = ast.object.property.name;\n          type = this.getConstantType(name);\n          if (!type) {\n            throw this.astErrorOutput('Constant has no type', ast);\n          }\n          return {\n            name,\n            type,\n            origin: 'constants',\n              signature: variableSignature,\n              xProperty: ast.property,\n          };\n        case 'this.constants.value[][]': {\n          if (typeof ast.object.object.property.name !== 'string') {\n            throw this.astErrorOutput('Unexpected expression', ast);\n          }\n          name = ast.object.object.property.name;\n          type = this.getConstantType(name);\n          if (!type) {\n            throw this.astErrorOutput('Constant has no type', ast);\n          }\n          return {\n            name,\n            type,\n            origin: 'constants',\n            signature: variableSignature,\n            yProperty: ast.object.property,\n            xProperty: ast.property,\n          };\n        }\n        case 'this.constants.value[][][]': {\n          if (typeof ast.object.object.object.property.name !== 'string') {\n            throw this.astErrorOutput('Unexpected expression', ast);\n          }\n          name = ast.object.object.object.property.name;\n          type = this.getConstantType(name);\n          if (!type) {\n            throw this.astErrorOutput('Constant has no type', ast);\n          }\n          return {\n            name,\n            type,\n            origin: 'constants',\n            signature: variableSignature,\n            zProperty: ast.object.object.property,\n            yProperty: ast.object.property,\n            xProperty: ast.property,\n          };\n        }\n        case 'fn()[]':\n        case 'fn()[][]':\n        case '[][]':\n          return {\n            signature: variableSignature,\n              property: ast.property,\n          };\n        default:\n          throw this.astErrorOutput('Unexpected expression', ast);\n    }\n  }\n\n  findIdentifierOrigin(astToFind) {\n    const stack = [this.ast];\n\n    while (stack.length > 0) {\n      const atNode = stack[0];\n      if (atNode.type === 'VariableDeclarator' && atNode.id && atNode.id.name && atNode.id.name === astToFind.name) {\n        return atNode;\n      }\n      stack.shift();\n      if (atNode.argument) {\n        stack.push(atNode.argument);\n      } else if (atNode.body) {\n        stack.push(atNode.body);\n      } else if (atNode.declarations) {\n        stack.push(atNode.declarations);\n      } else if (Array.isArray(atNode)) {\n        for (let i = 0; i < atNode.length; i++) {\n          stack.push(atNode[i]);\n        }\n      }\n    }\n    return null;\n  }\n\n  findLastReturn(ast) {\n    const stack = [ast || this.ast];\n\n    while (stack.length > 0) {\n      const atNode = stack.pop();\n      if (atNode.type === 'ReturnStatement') {\n        return atNode;\n      }\n      if (atNode.type === 'FunctionDeclaration') {\n        continue;\n      }\n      if (atNode.argument) {\n        stack.push(atNode.argument);\n      } else if (atNode.body) {\n        stack.push(atNode.body);\n      } else if (atNode.declarations) {\n        stack.push(atNode.declarations);\n      } else if (Array.isArray(atNode)) {\n        for (let i = 0; i < atNode.length; i++) {\n          stack.push(atNode[i]);\n        }\n      } else if (atNode.consequent) {\n        stack.push(atNode.consequent);\n      } else if (atNode.cases) {\n        stack.push(atNode.cases);\n      }\n    }\n    return null;\n  }\n\n  getInternalVariableName(name) {\n    if (!this._internalVariableNames.hasOwnProperty(name)) {\n      this._internalVariableNames[name] = 0;\n    }\n    this._internalVariableNames[name]++;\n    if (this._internalVariableNames[name] === 1) {\n      return name;\n    }\n    return name + this._internalVariableNames[name];\n  }\n\n  astKey(ast, separator = ',') {\n    if (!ast.start || !ast.end) throw new Error('AST start and end needed');\n    return `${ast.start}${separator}${ast.end}`;\n  }\n}\n\nconst typeLookupMap = {\n  'Number': 'Number',\n  'Float': 'Float',\n  'Integer': 'Integer',\n  'Array': 'Number',\n  'Array(2)': 'Number',\n  'Array(3)': 'Number',\n  'Array(4)': 'Number',\n  'Matrix(2)': 'Number',\n  'Matrix(3)': 'Number',\n  'Matrix(4)': 'Number',\n  'Array2D': 'Number',\n  'Array3D': 'Number',\n  'Input': 'Number',\n  'HTMLCanvas': 'Array(4)',\n  'OffscreenCanvas': 'Array(4)',\n  'HTMLImage': 'Array(4)',\n  'ImageBitmap': 'Array(4)',\n  'ImageData': 'Array(4)',\n  'HTMLVideo': 'Array(4)',\n  'HTMLImageArray': 'Array(4)',\n  'NumberTexture': 'Number',\n  'MemoryOptimizedNumberTexture': 'Number',\n  'Array1D(2)': 'Array(2)',\n  'Array1D(3)': 'Array(3)',\n  'Array1D(4)': 'Array(4)',\n  'Array2D(2)': 'Array(2)',\n  'Array2D(3)': 'Array(3)',\n  'Array2D(4)': 'Array(4)',\n  'Array3D(2)': 'Array(2)',\n  'Array3D(3)': 'Array(3)',\n  'Array3D(4)': 'Array(4)',\n  'ArrayTexture(1)': 'Number',\n  'ArrayTexture(2)': 'Array(2)',\n  'ArrayTexture(3)': 'Array(3)',\n  'ArrayTexture(4)': 'Array(4)',\n};\n\nmodule.exports = {\n  FunctionNode\n};\n},{\"../utils\":114,\"./function-tracer\":11,\"acorn\":1}],11:[function(require,module,exports){\nconst { utils } = require('../utils');\n\nfunction last(array) {\n  return array.length > 0 ? array[array.length - 1] : null;\n}\n\nconst states = {\n  trackIdentifiers: 'trackIdentifiers',\n  memberExpression: 'memberExpression',\n  inForLoopInit: 'inForLoopInit'\n};\n\nclass FunctionTracer {\n  constructor(ast) {\n    this.runningContexts = [];\n    this.functionContexts = [];\n    this.contexts = [];\n    this.functionCalls = [];\n    this.declarations = [];\n    this.identifiers = [];\n    this.functions = [];\n    this.returnStatements = [];\n    this.trackedIdentifiers = null;\n    this.states = [];\n    this.newFunctionContext();\n    this.scan(ast);\n  }\n\n  isState(state) {\n    return this.states[this.states.length - 1] === state;\n  }\n\n  hasState(state) {\n    return this.states.indexOf(state) > -1;\n  }\n\n  pushState(state) {\n    this.states.push(state);\n  }\n\n  popState(state) {\n    if (this.isState(state)) {\n      this.states.pop();\n    } else {\n      throw new Error(`Cannot pop the non-active state \"${state}\"`);\n    }\n  }\n\n  get currentFunctionContext() {\n    return last(this.functionContexts);\n  }\n\n  get currentContext() {\n    return last(this.runningContexts);\n  }\n\n  newFunctionContext() {\n    const newContext = { '@contextType': 'function' };\n    this.contexts.push(newContext);\n    this.functionContexts.push(newContext);\n  }\n\n  newContext(run) {\n    const newContext = Object.assign({ '@contextType': 'const/let' }, this.currentContext);\n    this.contexts.push(newContext);\n    this.runningContexts.push(newContext);\n    run();\n    const { currentFunctionContext } = this;\n    for (const p in currentFunctionContext) {\n      if (!currentFunctionContext.hasOwnProperty(p) || newContext.hasOwnProperty(p)) continue;\n      newContext[p] = currentFunctionContext[p];\n    }\n    this.runningContexts.pop();\n    return newContext;\n  }\n\n  useFunctionContext(run) {\n    const functionContext = last(this.functionContexts);\n    this.runningContexts.push(functionContext);\n    run();\n    this.runningContexts.pop();\n  }\n\n  getIdentifiers(run) {\n    const trackedIdentifiers = this.trackedIdentifiers = [];\n    this.pushState(states.trackIdentifiers);\n    run();\n    this.trackedIdentifiers = null;\n    this.popState(states.trackIdentifiers);\n    return trackedIdentifiers;\n  }\n\n  getDeclaration(name) {\n    const { currentContext, currentFunctionContext, runningContexts } = this;\n    const declaration = currentContext[name] || currentFunctionContext[name] || null;\n\n    if (\n      !declaration &&\n      currentContext === currentFunctionContext &&\n      runningContexts.length > 0\n    ) {\n      const previousRunningContext = runningContexts[runningContexts.length - 2];\n      if (previousRunningContext[name]) {\n        return previousRunningContext[name];\n      }\n    }\n\n    return declaration;\n  }\n\n  scan(ast) {\n    if (!ast) return;\n    if (Array.isArray(ast)) {\n      for (let i = 0; i < ast.length; i++) {\n        this.scan(ast[i]);\n      }\n      return;\n    }\n    switch (ast.type) {\n      case 'Program':\n        this.useFunctionContext(() => {\n          this.scan(ast.body);\n        });\n        break;\n      case 'BlockStatement':\n        this.newContext(() => {\n          this.scan(ast.body);\n        });\n        break;\n      case 'AssignmentExpression':\n      case 'LogicalExpression':\n        this.scan(ast.left);\n        this.scan(ast.right);\n        break;\n      case 'BinaryExpression':\n        this.scan(ast.left);\n        this.scan(ast.right);\n        break;\n      case 'UpdateExpression':\n        if (ast.operator === '++') {\n          const declaration = this.getDeclaration(ast.argument.name);\n          if (declaration) {\n            declaration.suggestedType = 'Integer';\n          }\n        }\n        this.scan(ast.argument);\n        break;\n      case 'UnaryExpression':\n        this.scan(ast.argument);\n        break;\n      case 'VariableDeclaration':\n        if (ast.kind === 'var') {\n          this.useFunctionContext(() => {\n            ast.declarations = utils.normalizeDeclarations(ast);\n            this.scan(ast.declarations);\n          });\n        } else {\n          ast.declarations = utils.normalizeDeclarations(ast);\n          this.scan(ast.declarations);\n        }\n        break;\n      case 'VariableDeclarator': {\n        const { currentContext } = this;\n        const inForLoopInit = this.hasState(states.inForLoopInit);\n        const declaration = {\n          ast: ast,\n          context: currentContext,\n          name: ast.id.name,\n          origin: 'declaration',\n          inForLoopInit,\n          inForLoopTest: null,\n          assignable: currentContext === this.currentFunctionContext || (!inForLoopInit && !currentContext.hasOwnProperty(ast.id.name)),\n          suggestedType: null,\n          valueType: null,\n          dependencies: null,\n          isSafe: null,\n        };\n        if (!currentContext[ast.id.name]) {\n          currentContext[ast.id.name] = declaration;\n        }\n        this.declarations.push(declaration);\n        this.scan(ast.id);\n        this.scan(ast.init);\n        break;\n      }\n      case 'FunctionExpression':\n      case 'FunctionDeclaration':\n        if (this.runningContexts.length === 0) {\n          this.scan(ast.body);\n        } else {\n          this.functions.push(ast);\n        }\n        break;\n      case 'IfStatement':\n        this.scan(ast.test);\n        this.scan(ast.consequent);\n        if (ast.alternate) this.scan(ast.alternate);\n        break;\n      case 'ForStatement': {\n        let testIdentifiers;\n        const context = this.newContext(() => {\n          this.pushState(states.inForLoopInit);\n          this.scan(ast.init);\n          this.popState(states.inForLoopInit);\n\n          testIdentifiers = this.getIdentifiers(() => {\n            this.scan(ast.test);\n          });\n\n          this.scan(ast.update);\n          this.newContext(() => {\n            this.scan(ast.body);\n          });\n        });\n\n        if (testIdentifiers) {\n          for (const p in context) {\n            if (p === '@contextType') continue;\n            if (testIdentifiers.indexOf(p) > -1) {\n              context[p].inForLoopTest = true;\n            }\n          }\n        }\n        break;\n      }\n      case 'DoWhileStatement':\n      case 'WhileStatement':\n        this.newContext(() => {\n          this.scan(ast.body);\n          this.scan(ast.test);\n        });\n        break;\n      case 'Identifier': {\n        if (this.isState(states.trackIdentifiers)) {\n          this.trackedIdentifiers.push(ast.name);\n        }\n        this.identifiers.push({\n          context: this.currentContext,\n          declaration: this.getDeclaration(ast.name),\n          ast,\n        });\n        break;\n      }\n      case 'ReturnStatement':\n        this.returnStatements.push(ast);\n        this.scan(ast.argument);\n        break;\n      case 'MemberExpression':\n        this.pushState(states.memberExpression);\n        this.scan(ast.object);\n        this.scan(ast.property);\n        this.popState(states.memberExpression);\n        break;\n      case 'ExpressionStatement':\n        this.scan(ast.expression);\n        break;\n      case 'SequenceExpression':\n        this.scan(ast.expressions);\n        break;\n      case 'CallExpression':\n        this.functionCalls.push({\n          context: this.currentContext,\n          ast,\n        });\n        this.scan(ast.arguments);\n        break;\n      case 'ArrayExpression':\n        this.scan(ast.elements);\n        break;\n      case 'ConditionalExpression':\n        this.scan(ast.test);\n        this.scan(ast.alternate);\n        this.scan(ast.consequent);\n        break;\n      case 'SwitchStatement':\n        this.scan(ast.discriminant);\n        this.scan(ast.cases);\n        break;\n      case 'SwitchCase':\n        this.scan(ast.test);\n        this.scan(ast.consequent);\n        break;\n\n      case 'ThisExpression':\n      case 'Literal':\n      case 'DebuggerStatement':\n      case 'EmptyStatement':\n      case 'BreakStatement':\n      case 'ContinueStatement':\n        break;\n      default:\n        throw new Error(`unhandled type \"${ast.type}\"`);\n    }\n  }\n}\n\nmodule.exports = {\n  FunctionTracer,\n};\n},{\"../utils\":114}],12:[function(require,module,exports){\nconst { glWiretap } = require('gl-wiretap');\nconst { utils } = require('../../utils');\n\nfunction toStringWithoutUtils(fn) {\n  return fn.toString()\n    .replace('=>', '')\n    .replace(/^function /, '')\n    .replace(/utils[.]/g, '/*utils.*/');\n}\n\nfunction glKernelString(Kernel, args, originKernel, setupContextString, destroyContextString) {\n  if (!originKernel.built) {\n    originKernel.build.apply(originKernel, args);\n  }\n  args = args ? Array.from(args).map(arg => {\n    switch (typeof arg) {\n      case 'boolean':\n        return new Boolean(arg);\n      case 'number':\n        return new Number(arg);\n      default:\n        return arg;\n    }\n  }) : null;\n  const uploadedValues = [];\n  const postResult = [];\n  const context = glWiretap(originKernel.context, {\n    useTrackablePrimitives: true,\n    onReadPixels: (targetName) => {\n      if (kernel.subKernels) {\n        if (!subKernelsResultVariableSetup) {\n          postResult.push(`    const result = { result: ${getRenderString(targetName, kernel)} };`);\n          subKernelsResultVariableSetup = true;\n        } else {\n          const property = kernel.subKernels[subKernelsResultIndex++].property;\n          postResult.push(`    result${isNaN(property) ? '.' + property : `[${property}]`} = ${getRenderString(targetName, kernel)};`);\n        }\n        if (subKernelsResultIndex === kernel.subKernels.length) {\n          postResult.push('    return result;');\n        }\n        return;\n      }\n      if (targetName) {\n        postResult.push(`    return ${getRenderString(targetName, kernel)};`);\n      } else {\n        postResult.push(`    return null;`);\n      }\n    },\n    onUnrecognizedArgumentLookup: (argument) => {\n      const argumentName = findKernelValue(argument, kernel.kernelArguments, [], context, uploadedValues);\n      if (argumentName) {\n        return argumentName;\n      }\n      const constantName = findKernelValue(argument, kernel.kernelConstants, constants ? Object.keys(constants).map(key => constants[key]) : [], context, uploadedValues);\n      if (constantName) {\n        return constantName;\n      }\n      return null;\n    }\n  });\n  let subKernelsResultVariableSetup = false;\n  let subKernelsResultIndex = 0;\n  const {\n    source,\n    canvas,\n    output,\n    pipeline,\n    graphical,\n    loopMaxIterations,\n    constants,\n    optimizeFloatMemory,\n    precision,\n    fixIntegerDivisionAccuracy,\n    functions,\n    nativeFunctions,\n    subKernels,\n    immutable,\n    argumentTypes,\n    constantTypes,\n    kernelArguments,\n    kernelConstants,\n    tactic,\n  } = originKernel;\n  const kernel = new Kernel(source, {\n    canvas,\n    context,\n    checkContext: false,\n    output,\n    pipeline,\n    graphical,\n    loopMaxIterations,\n    constants,\n    optimizeFloatMemory,\n    precision,\n    fixIntegerDivisionAccuracy,\n    functions,\n    nativeFunctions,\n    subKernels,\n    immutable,\n    argumentTypes,\n    constantTypes,\n    tactic,\n  });\n  let result = [];\n  context.setIndent(2);\n  kernel.build.apply(kernel, args);\n  result.push(context.toString());\n  context.reset();\n\n  kernel.kernelArguments.forEach((kernelArgument, i) => {\n    switch (kernelArgument.type) {\n      case 'Integer':\n      case 'Boolean':\n      case 'Number':\n      case 'Float':\n      case 'Array':\n      case 'Array(2)':\n      case 'Array(3)':\n      case 'Array(4)':\n      case 'HTMLCanvas':\n      case 'HTMLImage':\n      case 'HTMLVideo':\n        context.insertVariable(`uploadValue_${kernelArgument.name}`, kernelArgument.uploadValue);\n        break;\n      case 'HTMLImageArray':\n        for (let imageIndex = 0; imageIndex < args[i].length; imageIndex++) {\n          const arg = args[i];\n          context.insertVariable(`uploadValue_${kernelArgument.name}[${imageIndex}]`, arg[imageIndex]);\n        }\n        break;\n      case 'Input':\n        context.insertVariable(`uploadValue_${kernelArgument.name}`, kernelArgument.uploadValue);\n        break;\n      case 'MemoryOptimizedNumberTexture':\n      case 'NumberTexture':\n      case 'Array1D(2)':\n      case 'Array1D(3)':\n      case 'Array1D(4)':\n      case 'Array2D(2)':\n      case 'Array2D(3)':\n      case 'Array2D(4)':\n      case 'Array3D(2)':\n      case 'Array3D(3)':\n      case 'Array3D(4)':\n      case 'ArrayTexture(1)':\n      case 'ArrayTexture(2)':\n      case 'ArrayTexture(3)':\n      case 'ArrayTexture(4)':\n        context.insertVariable(`uploadValue_${kernelArgument.name}`, args[i].texture);\n        break;\n      default:\n        throw new Error(`unhandled kernelArgumentType insertion for glWiretap of type ${kernelArgument.type}`);\n    }\n  });\n  result.push('/** start of injected functions **/');\n  result.push(`function ${toStringWithoutUtils(utils.flattenTo)}`);\n  result.push(`function ${toStringWithoutUtils(utils.flatten2dArrayTo)}`);\n  result.push(`function ${toStringWithoutUtils(utils.flatten3dArrayTo)}`);\n  result.push(`function ${toStringWithoutUtils(utils.flatten4dArrayTo)}`);\n  result.push(`function ${toStringWithoutUtils(utils.isArray)}`);\n  if (kernel.renderOutput !== kernel.renderTexture && kernel.formatValues) {\n    result.push(\n      `  const renderOutput = function ${toStringWithoutUtils(kernel.formatValues)};`\n    );\n  }\n  result.push('/** end of injected functions **/');\n  result.push(`  const innerKernel = function (${kernel.kernelArguments.map(kernelArgument => kernelArgument.varName).join(', ')}) {`);\n  context.setIndent(4);\n  kernel.run.apply(kernel, args);\n  if (kernel.renderKernels) {\n    kernel.renderKernels();\n  } else if (kernel.renderOutput) {\n    kernel.renderOutput();\n  }\n  result.push('    /** start setup uploads for kernel values **/');\n  kernel.kernelArguments.forEach(kernelArgument => {\n    result.push('    ' + kernelArgument.getStringValueHandler().split('\\n').join('\\n    '));\n  });\n  result.push('    /** end setup uploads for kernel values **/');\n  result.push(context.toString());\n  if (kernel.renderOutput === kernel.renderTexture) {\n    context.reset();\n    const framebufferName = context.getContextVariableName(kernel.framebuffer);\n    if (kernel.renderKernels) {\n      const results = kernel.renderKernels();\n      const textureName = context.getContextVariableName(kernel.texture.texture);\n      result.push(`    return {\n      result: {\n        texture: ${ textureName },\n        type: '${ results.result.type }',\n        toArray: ${ getToArrayString(results.result, textureName, framebufferName) }\n      },`);\n      const { subKernels, mappedTextures } = kernel;\n      for (let i = 0; i < subKernels.length; i++) {\n        const texture = mappedTextures[i];\n        const subKernel = subKernels[i];\n        const subKernelResult = results[subKernel.property];\n        const subKernelTextureName = context.getContextVariableName(texture.texture);\n        result.push(`\n      ${subKernel.property}: {\n        texture: ${ subKernelTextureName },\n        type: '${ subKernelResult.type }',\n        toArray: ${ getToArrayString(subKernelResult, subKernelTextureName, framebufferName) }\n      },`);\n      }\n      result.push(`    };`);\n    } else {\n      const rendered = kernel.renderOutput();\n      const textureName = context.getContextVariableName(kernel.texture.texture);\n      result.push(`    return {\n        texture: ${ textureName },\n        type: '${ rendered.type }',\n        toArray: ${ getToArrayString(rendered, textureName, framebufferName) }\n      };`);\n    }\n  }\n  result.push(`    ${destroyContextString ? '\\n' + destroyContextString + '    ': ''}`);\n  result.push(postResult.join('\\n'));\n  result.push('  };');\n  if (kernel.graphical) {\n    result.push(getGetPixelsString(kernel));\n    result.push(`  innerKernel.getPixels = getPixels;`);\n  }\n  result.push('  return innerKernel;');\n\n  let constantsUpload = [];\n  kernelConstants.forEach((kernelConstant) => {\n    constantsUpload.push(`${kernelConstant.getStringValueHandler()}`);\n  });\n  return `function kernel(settings) {\n  const { context, constants } = settings;\n  ${constantsUpload.join('')}\n  ${setupContextString ? setupContextString : ''}\n${result.join('\\n')}\n}`;\n}\n\nfunction getRenderString(targetName, kernel) {\n  const readBackValue = kernel.precision === 'single' ? targetName : `new Float32Array(${targetName}.buffer)`;\n  if (kernel.output[2]) {\n    return `renderOutput(${readBackValue}, ${kernel.output[0]}, ${kernel.output[1]}, ${kernel.output[2]})`;\n  }\n  if (kernel.output[1]) {\n    return `renderOutput(${readBackValue}, ${kernel.output[0]}, ${kernel.output[1]})`;\n  }\n\n  return `renderOutput(${readBackValue}, ${kernel.output[0]})`;\n}\n\nfunction getGetPixelsString(kernel) {\n  const getPixels = kernel.getPixels.toString();\n  const useFunctionKeyword = !/^function/.test(getPixels);\n  return utils.flattenFunctionToString(`${useFunctionKeyword ? 'function ' : ''}${ getPixels }`, {\n    findDependency: (object, name) => {\n      if (object === 'utils') {\n        return `const ${name} = ${utils[name].toString()};`;\n      }\n      return null;\n    },\n    thisLookup: (property) => {\n      if (property === 'context') {\n        return null;\n      }\n      if (kernel.hasOwnProperty(property)) {\n        return JSON.stringify(kernel[property]);\n      }\n      throw new Error(`unhandled thisLookup ${ property }`);\n    }\n  });\n}\n\nfunction getToArrayString(kernelResult, textureName, framebufferName) {\n  const toArray = kernelResult.toArray.toString();\n  const useFunctionKeyword = !/^function/.test(toArray);\n  const flattenedFunctions = utils.flattenFunctionToString(`${useFunctionKeyword ? 'function ' : ''}${ toArray }`, {\n    findDependency: (object, name) => {\n      if (object === 'utils') {\n        return `const ${name} = ${utils[name].toString()};`;\n      } else if (object === 'this') {\n        if (name === 'framebuffer') {\n          return '';\n        }\n        return `${useFunctionKeyword ? 'function ' : ''}${kernelResult[name].toString()}`;\n      } else {\n        throw new Error('unhandled fromObject');\n      }\n    },\n    thisLookup: (property, isDeclaration) => {\n      if (property === 'texture') {\n        return textureName;\n      }\n      if (property === 'context') {\n        if (isDeclaration) return null;\n        return 'gl';\n      }\n      if (kernelResult.hasOwnProperty(property)) {\n        return JSON.stringify(kernelResult[property]);\n      }\n      throw new Error(`unhandled thisLookup ${ property }`);\n    }\n  });\n  return `() => {\n  function framebuffer() { return ${framebufferName}; };\n  ${flattenedFunctions}\n  return toArray();\n  }`;\n}\n\nfunction findKernelValue(argument, kernelValues, values, context, uploadedValues) {\n  if (argument === null) return null;\n  if (kernelValues === null) return null;\n  switch (typeof argument) {\n    case 'boolean':\n    case 'number':\n      return null;\n  }\n  if (\n    typeof HTMLImageElement !== 'undefined' &&\n    argument instanceof HTMLImageElement\n  ) {\n    for (let i = 0; i < kernelValues.length; i++) {\n      const kernelValue = kernelValues[i];\n      if (kernelValue.type !== 'HTMLImageArray' && kernelValue) continue;\n      if (kernelValue.uploadValue !== argument) continue;\n      const variableIndex = values[i].indexOf(argument);\n      if (variableIndex === -1) continue;\n      const variableName = `uploadValue_${kernelValue.name}[${variableIndex}]`;\n      context.insertVariable(variableName, argument);\n      return variableName;\n    }\n  }\n\n  for (let i = 0; i < kernelValues.length; i++) {\n    const kernelValue = kernelValues[i];\n    if (argument !== kernelValue.uploadValue) continue;\n    const variable = `uploadValue_${kernelValue.name}`;\n    context.insertVariable(variable, kernelValue);\n    return variable;\n  }\n  return null;\n}\n\nmodule.exports = {\n  glKernelString\n};\n},{\"../../utils\":114,\"gl-wiretap\":3}],13:[function(require,module,exports){\nconst { Kernel } = require('../kernel');\nconst { utils } = require('../../utils');\nconst { GLTextureArray2Float } = require('./texture/array-2-float');\nconst { GLTextureArray2Float2D } = require('./texture/array-2-float-2d');\nconst { GLTextureArray2Float3D } = require('./texture/array-2-float-3d');\nconst { GLTextureArray3Float } = require('./texture/array-3-float');\nconst { GLTextureArray3Float2D } = require('./texture/array-3-float-2d');\nconst { GLTextureArray3Float3D } = require('./texture/array-3-float-3d');\nconst { GLTextureArray4Float } = require('./texture/array-4-float');\nconst { GLTextureArray4Float2D } = require('./texture/array-4-float-2d');\nconst { GLTextureArray4Float3D } = require('./texture/array-4-float-3d');\nconst { GLTextureFloat } = require('./texture/float');\nconst { GLTextureFloat2D } = require('./texture/float-2d');\nconst { GLTextureFloat3D } = require('./texture/float-3d');\nconst { GLTextureMemoryOptimized } = require('./texture/memory-optimized');\nconst { GLTextureMemoryOptimized2D } = require('./texture/memory-optimized-2d');\nconst { GLTextureMemoryOptimized3D } = require('./texture/memory-optimized-3d');\nconst { GLTextureUnsigned } = require('./texture/unsigned');\nconst { GLTextureUnsigned2D } = require('./texture/unsigned-2d');\nconst { GLTextureUnsigned3D } = require('./texture/unsigned-3d');\nconst { GLTextureGraphical } = require('./texture/graphical');\n\nclass GLKernel extends Kernel {\n  static get mode() {\n    return 'gpu';\n  }\n\n  static getIsFloatRead() {\n    const kernelString = `function kernelFunction() {\n      return 1;\n    }`;\n    const kernel = new this(kernelString, {\n      context: this.testContext,\n      canvas: this.testCanvas,\n      validate: false,\n      output: [1],\n      precision: 'single',\n      returnType: 'Number',\n      tactic: 'speed',\n    });\n    kernel.build();\n    kernel.run();\n    const result = kernel.renderOutput();\n    kernel.destroy(true);\n    return result[0] === 1;\n  }\n\n  static getIsIntegerDivisionAccurate() {\n    function kernelFunction(v1, v2) {\n      return v1[this.thread.x] / v2[this.thread.x];\n    }\n    const kernel = new this(kernelFunction.toString(), {\n      context: this.testContext,\n      canvas: this.testCanvas,\n      validate: false,\n      output: [2],\n      returnType: 'Number',\n      precision: 'unsigned',\n      tactic: 'speed',\n    });\n    const args = [\n      [6, 6030401],\n      [3, 3991]\n    ];\n    kernel.build.apply(kernel, args);\n    kernel.run.apply(kernel, args);\n    const result = kernel.renderOutput();\n    kernel.destroy(true);\n    return result[0] === 2 && result[1] === 1511;\n  }\n\n  static getIsSpeedTacticSupported() {\n    function kernelFunction(value) {\n      return value[this.thread.x];\n    }\n    const kernel = new this(kernelFunction.toString(), {\n      context: this.testContext,\n      canvas: this.testCanvas,\n      validate: false,\n      output: [4],\n      returnType: 'Number',\n      precision: 'unsigned',\n      tactic: 'speed',\n    });\n    const args = [\n      [0, 1, 2, 3]\n    ];\n    kernel.build.apply(kernel, args);\n    kernel.run.apply(kernel, args);\n    const result = kernel.renderOutput();\n    kernel.destroy(true);\n    return Math.round(result[0]) === 0 && Math.round(result[1]) === 1 && Math.round(result[2]) === 2 && Math.round(result[3]) === 3;\n  }\n\n  static get testCanvas() {\n    throw new Error(`\"testCanvas\" not defined on ${ this.name }`);\n  }\n\n  static get testContext() {\n    throw new Error(`\"testContext\" not defined on ${ this.name }`);\n  }\n\n  static getFeatures() {\n    const gl = this.testContext;\n    const isDrawBuffers = this.getIsDrawBuffers();\n    return Object.freeze({\n      isFloatRead: this.getIsFloatRead(),\n      isIntegerDivisionAccurate: this.getIsIntegerDivisionAccurate(),\n      isSpeedTacticSupported: this.getIsSpeedTacticSupported(),\n      isTextureFloat: this.getIsTextureFloat(),\n      isDrawBuffers,\n      kernelMap: isDrawBuffers,\n      channelCount: this.getChannelCount(),\n      maxTextureSize: this.getMaxTextureSize(),\n      lowIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT),\n      lowFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT),\n      mediumIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT),\n      mediumFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT),\n      highIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT),\n      highFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT),\n    });\n  }\n\n  static setupFeatureChecks() {\n    throw new Error(`\"setupFeatureChecks\" not defined on ${ this.name }`);\n  }\n\n  static getSignature(kernel, argumentTypes) {\n    return kernel.getVariablePrecisionString() + (argumentTypes.length > 0 ? ':' + argumentTypes.join(',') : '');\n  }\n\n  setFixIntegerDivisionAccuracy(fix) {\n    this.fixIntegerDivisionAccuracy = fix;\n    return this;\n  }\n\n  setPrecision(flag) {\n    this.precision = flag;\n    return this;\n  }\n\n  setFloatTextures(flag) {\n    utils.warnDeprecated('method', 'setFloatTextures', 'setOptimizeFloatMemory');\n    this.floatTextures = flag;\n    return this;\n  }\n\n  static nativeFunctionArguments(source) {\n    const argumentTypes = [];\n    const argumentNames = [];\n    const states = [];\n    const isStartingVariableName = /^[a-zA-Z_]/;\n    const isVariableChar = /[a-zA-Z_0-9]/;\n    let i = 0;\n    let argumentName = null;\n    let argumentType = null;\n    while (i < source.length) {\n      const char = source[i];\n      const nextChar = source[i + 1];\n      const state = states.length > 0 ? states[states.length - 1] : null;\n\n      if (state === 'FUNCTION_ARGUMENTS' && char === '/' && nextChar === '*') {\n        states.push('MULTI_LINE_COMMENT');\n        i += 2;\n        continue;\n      } else if (state === 'MULTI_LINE_COMMENT' && char === '*' && nextChar === '/') {\n        states.pop();\n        i += 2;\n        continue;\n      }\n\n      else if (state === 'FUNCTION_ARGUMENTS' && char === '/' && nextChar === '/') {\n        states.push('COMMENT');\n        i += 2;\n        continue;\n      } else if (state === 'COMMENT' && char === '\\n') {\n        states.pop();\n        i++;\n        continue;\n      }\n\n      else if (state === null && char === '(') {\n        states.push('FUNCTION_ARGUMENTS');\n        i++;\n        continue;\n      } else if (state === 'FUNCTION_ARGUMENTS') {\n        if (char === ')') {\n          states.pop();\n          break;\n        }\n        if (char === 'f' && nextChar === 'l' && source[i + 2] === 'o' && source[i + 3] === 'a' && source[i + 4] === 't' && source[i + 5] === ' ') {\n          states.push('DECLARE_VARIABLE');\n          argumentType = 'float';\n          argumentName = '';\n          i += 6;\n          continue;\n        } else if (char === 'i' && nextChar === 'n' && source[i + 2] === 't' && source[i + 3] === ' ') {\n          states.push('DECLARE_VARIABLE');\n          argumentType = 'int';\n          argumentName = '';\n          i += 4;\n          continue;\n        } else if (char === 'v' && nextChar === 'e' && source[i + 2] === 'c' && source[i + 3] === '2' && source[i + 4] === ' ') {\n          states.push('DECLARE_VARIABLE');\n          argumentType = 'vec2';\n          argumentName = '';\n          i += 5;\n          continue;\n        } else if (char === 'v' && nextChar === 'e' && source[i + 2] === 'c' && source[i + 3] === '3' && source[i + 4] === ' ') {\n          states.push('DECLARE_VARIABLE');\n          argumentType = 'vec3';\n          argumentName = '';\n          i += 5;\n          continue;\n        } else if (char === 'v' && nextChar === 'e' && source[i + 2] === 'c' && source[i + 3] === '4' && source[i + 4] === ' ') {\n          states.push('DECLARE_VARIABLE');\n          argumentType = 'vec4';\n          argumentName = '';\n          i += 5;\n          continue;\n        }\n      }\n\n      else if (state === 'DECLARE_VARIABLE') {\n        if (argumentName === '') {\n          if (char === ' ') {\n            i++;\n            continue;\n          }\n          if (!isStartingVariableName.test(char)) {\n            throw new Error('variable name is not expected string');\n          }\n        }\n        argumentName += char;\n        if (!isVariableChar.test(nextChar)) {\n          states.pop();\n          argumentNames.push(argumentName);\n          argumentTypes.push(typeMap[argumentType]);\n        }\n      }\n\n      i++;\n    }\n    if (states.length > 0) {\n      throw new Error('GLSL function was not parsable');\n    }\n    return {\n      argumentNames,\n      argumentTypes,\n    };\n  }\n\n  static nativeFunctionReturnType(source) {\n    return typeMap[source.match(/int|float|vec[2-4]/)[0]];\n  }\n\n  static combineKernels(combinedKernel, lastKernel) {\n    combinedKernel.apply(null, arguments);\n    const {\n      texSize,\n      context,\n      threadDim\n    } = lastKernel.texSize;\n    let result;\n    if (lastKernel.precision === 'single') {\n      const w = texSize[0];\n      const h = Math.ceil(texSize[1] / 4);\n      result = new Float32Array(w * h * 4 * 4);\n      context.readPixels(0, 0, w, h * 4, context.RGBA, context.FLOAT, result);\n    } else {\n      const bytes = new Uint8Array(texSize[0] * texSize[1] * 4);\n      context.readPixels(0, 0, texSize[0], texSize[1], context.RGBA, context.UNSIGNED_BYTE, bytes);\n      result = new Float32Array(bytes.buffer);\n    }\n\n    result = result.subarray(0, threadDim[0] * threadDim[1] * threadDim[2]);\n\n    if (lastKernel.output.length === 1) {\n      return result;\n    } else if (lastKernel.output.length === 2) {\n      return utils.splitArray(result, lastKernel.output[0]);\n    } else if (lastKernel.output.length === 3) {\n      const cube = utils.splitArray(result, lastKernel.output[0] * lastKernel.output[1]);\n      return cube.map(function(x) {\n        return utils.splitArray(x, lastKernel.output[0]);\n      });\n    }\n  }\n\n  constructor(source, settings) {\n    super(source, settings);\n    this.transferValues = null;\n    this.formatValues = null;\n    this.TextureConstructor = null;\n    this.renderOutput = null;\n    this.renderRawOutput = null;\n    this.texSize = null;\n    this.translatedSource = null;\n    this.compiledFragmentShader = null;\n    this.compiledVertexShader = null;\n    this.switchingKernels = null;\n    this._textureSwitched = null;\n    this._mappedTextureSwitched = null;\n  }\n\n  checkTextureSize() {\n    const { features } = this.constructor;\n    if (this.texSize[0] > features.maxTextureSize || this.texSize[1] > features.maxTextureSize) {\n      throw new Error(`Texture size [${this.texSize[0]},${this.texSize[1]}] generated by kernel is larger than supported size [${features.maxTextureSize},${features.maxTextureSize}]`);\n    }\n  }\n\n  translateSource() {\n    throw new Error(`\"translateSource\" not defined on ${this.constructor.name}`);\n  }\n\n  pickRenderStrategy(args) {\n    if (this.graphical) {\n      this.renderRawOutput = this.readPackedPixelsToUint8Array;\n      this.transferValues = (pixels) => pixels;\n      this.TextureConstructor = GLTextureGraphical;\n      return null;\n    }\n    if (this.precision === 'unsigned') {\n      this.renderRawOutput = this.readPackedPixelsToUint8Array;\n      this.transferValues = this.readPackedPixelsToFloat32Array;\n      if (this.pipeline) {\n        this.renderOutput = this.renderTexture;\n        if (this.subKernels !== null) {\n          this.renderKernels = this.renderKernelsToTextures;\n        }\n        switch (this.returnType) {\n          case 'LiteralInteger':\n          case 'Float':\n          case 'Number':\n          case 'Integer':\n            if (this.output[2] > 0) {\n              this.TextureConstructor = GLTextureUnsigned3D;\n              return null;\n            } else if (this.output[1] > 0) {\n              this.TextureConstructor = GLTextureUnsigned2D;\n              return null;\n            } else {\n              this.TextureConstructor = GLTextureUnsigned;\n              return null;\n            }\n            case 'Array(2)':\n            case 'Array(3)':\n            case 'Array(4)':\n              return this.requestFallback(args);\n        }\n      } else {\n        if (this.subKernels !== null) {\n          this.renderKernels = this.renderKernelsToArrays;\n        }\n        switch (this.returnType) {\n          case 'LiteralInteger':\n          case 'Float':\n          case 'Number':\n          case 'Integer':\n            this.renderOutput = this.renderValues;\n            if (this.output[2] > 0) {\n              this.TextureConstructor = GLTextureUnsigned3D;\n              this.formatValues = utils.erect3DPackedFloat;\n              return null;\n            } else if (this.output[1] > 0) {\n              this.TextureConstructor = GLTextureUnsigned2D;\n              this.formatValues = utils.erect2DPackedFloat;\n              return null;\n            } else {\n              this.TextureConstructor = GLTextureUnsigned;\n              this.formatValues = utils.erectPackedFloat;\n              return null;\n            }\n            case 'Array(2)':\n            case 'Array(3)':\n            case 'Array(4)':\n              return this.requestFallback(args);\n        }\n      }\n    } else if (this.precision === 'single') {\n      this.renderRawOutput = this.readFloatPixelsToFloat32Array;\n      this.transferValues = this.readFloatPixelsToFloat32Array;\n      if (this.pipeline) {\n        this.renderOutput = this.renderTexture;\n        if (this.subKernels !== null) {\n          this.renderKernels = this.renderKernelsToTextures;\n        }\n        switch (this.returnType) {\n          case 'LiteralInteger':\n          case 'Float':\n          case 'Number':\n          case 'Integer': {\n            if (this.optimizeFloatMemory) {\n              if (this.output[2] > 0) {\n                this.TextureConstructor = GLTextureMemoryOptimized3D;\n                return null;\n              } else if (this.output[1] > 0) {\n                this.TextureConstructor = GLTextureMemoryOptimized2D;\n                return null;\n              } else {\n                this.TextureConstructor = GLTextureMemoryOptimized;\n                return null;\n              }\n            } else {\n              if (this.output[2] > 0) {\n                this.TextureConstructor = GLTextureFloat3D;\n                return null;\n              } else if (this.output[1] > 0) {\n                this.TextureConstructor = GLTextureFloat2D;\n                return null;\n              } else {\n                this.TextureConstructor = GLTextureFloat;\n                return null;\n              }\n            }\n          }\n          case 'Array(2)': {\n            if (this.output[2] > 0) {\n              this.TextureConstructor = GLTextureArray2Float3D;\n              return null;\n            } else if (this.output[1] > 0) {\n              this.TextureConstructor = GLTextureArray2Float2D;\n              return null;\n            } else {\n              this.TextureConstructor = GLTextureArray2Float;\n              return null;\n            }\n          }\n          case 'Array(3)': {\n            if (this.output[2] > 0) {\n              this.TextureConstructor = GLTextureArray3Float3D;\n              return null;\n            } else if (this.output[1] > 0) {\n              this.TextureConstructor = GLTextureArray3Float2D;\n              return null;\n            } else {\n              this.TextureConstructor = GLTextureArray3Float;\n              return null;\n            }\n          }\n          case 'Array(4)': {\n            if (this.output[2] > 0) {\n              this.TextureConstructor = GLTextureArray4Float3D;\n              return null;\n            } else if (this.output[1] > 0) {\n              this.TextureConstructor = GLTextureArray4Float2D;\n              return null;\n            } else {\n              this.TextureConstructor = GLTextureArray4Float;\n              return null;\n            }\n          }\n        }\n      }\n      this.renderOutput = this.renderValues;\n      if (this.subKernels !== null) {\n        this.renderKernels = this.renderKernelsToArrays;\n      }\n      if (this.optimizeFloatMemory) {\n        switch (this.returnType) {\n          case 'LiteralInteger':\n          case 'Float':\n          case 'Number':\n          case 'Integer': {\n            if (this.output[2] > 0) {\n              this.TextureConstructor = GLTextureMemoryOptimized3D;\n              this.formatValues = utils.erectMemoryOptimized3DFloat;\n              return null;\n            } else if (this.output[1] > 0) {\n              this.TextureConstructor = GLTextureMemoryOptimized2D;\n              this.formatValues = utils.erectMemoryOptimized2DFloat;\n              return null;\n            } else {\n              this.TextureConstructor = GLTextureMemoryOptimized;\n              this.formatValues = utils.erectMemoryOptimizedFloat;\n              return null;\n            }\n          }\n          case 'Array(2)': {\n            if (this.output[2] > 0) {\n              this.TextureConstructor = GLTextureArray2Float3D;\n              this.formatValues = utils.erect3DArray2;\n              return null;\n            } else if (this.output[1] > 0) {\n              this.TextureConstructor = GLTextureArray2Float2D;\n              this.formatValues = utils.erect2DArray2;\n              return null;\n            } else {\n              this.TextureConstructor = GLTextureArray2Float;\n              this.formatValues = utils.erectArray2;\n              return null;\n            }\n          }\n          case 'Array(3)': {\n            if (this.output[2] > 0) {\n              this.TextureConstructor = GLTextureArray3Float3D;\n              this.formatValues = utils.erect3DArray3;\n              return null;\n            } else if (this.output[1] > 0) {\n              this.TextureConstructor = GLTextureArray3Float2D;\n              this.formatValues = utils.erect2DArray3;\n              return null;\n            } else {\n              this.TextureConstructor = GLTextureArray3Float;\n              this.formatValues = utils.erectArray3;\n              return null;\n            }\n          }\n          case 'Array(4)': {\n            if (this.output[2] > 0) {\n              this.TextureConstructor = GLTextureArray4Float3D;\n              this.formatValues = utils.erect3DArray4;\n              return null;\n            } else if (this.output[1] > 0) {\n              this.TextureConstructor = GLTextureArray4Float2D;\n              this.formatValues = utils.erect2DArray4;\n              return null;\n            } else {\n              this.TextureConstructor = GLTextureArray4Float;\n              this.formatValues = utils.erectArray4;\n              return null;\n            }\n          }\n        }\n      } else {\n        switch (this.returnType) {\n          case 'LiteralInteger':\n          case 'Float':\n          case 'Number':\n          case 'Integer': {\n            if (this.output[2] > 0) {\n              this.TextureConstructor = GLTextureFloat3D;\n              this.formatValues = utils.erect3DFloat;\n              return null;\n            } else if (this.output[1] > 0) {\n              this.TextureConstructor = GLTextureFloat2D;\n              this.formatValues = utils.erect2DFloat;\n              return null;\n            } else {\n              this.TextureConstructor = GLTextureFloat;\n              this.formatValues = utils.erectFloat;\n              return null;\n            }\n          }\n          case 'Array(2)': {\n            if (this.output[2] > 0) {\n              this.TextureConstructor = GLTextureArray2Float3D;\n              this.formatValues = utils.erect3DArray2;\n              return null;\n            } else if (this.output[1] > 0) {\n              this.TextureConstructor = GLTextureArray2Float2D;\n              this.formatValues = utils.erect2DArray2;\n              return null;\n            } else {\n              this.TextureConstructor = GLTextureArray2Float;\n              this.formatValues = utils.erectArray2;\n              return null;\n            }\n          }\n          case 'Array(3)': {\n            if (this.output[2] > 0) {\n              this.TextureConstructor = GLTextureArray3Float3D;\n              this.formatValues = utils.erect3DArray3;\n              return null;\n            } else if (this.output[1] > 0) {\n              this.TextureConstructor = GLTextureArray3Float2D;\n              this.formatValues = utils.erect2DArray3;\n              return null;\n            } else {\n              this.TextureConstructor = GLTextureArray3Float;\n              this.formatValues = utils.erectArray3;\n              return null;\n            }\n          }\n          case 'Array(4)': {\n            if (this.output[2] > 0) {\n              this.TextureConstructor = GLTextureArray4Float3D;\n              this.formatValues = utils.erect3DArray4;\n              return null;\n            } else if (this.output[1] > 0) {\n              this.TextureConstructor = GLTextureArray4Float2D;\n              this.formatValues = utils.erect2DArray4;\n              return null;\n            } else {\n              this.TextureConstructor = GLTextureArray4Float;\n              this.formatValues = utils.erectArray4;\n              return null;\n            }\n          }\n        }\n      }\n    } else {\n      throw new Error(`unhandled precision of \"${this.precision}\"`);\n    }\n\n    throw new Error(`unhandled return type \"${this.returnType}\"`);\n  }\n\n  getKernelString() {\n    throw new Error(`abstract method call`);\n  }\n\n  getMainResultTexture() {\n    switch (this.returnType) {\n      case 'LiteralInteger':\n      case 'Float':\n      case 'Integer':\n      case 'Number':\n        return this.getMainResultNumberTexture();\n      case 'Array(2)':\n        return this.getMainResultArray2Texture();\n      case 'Array(3)':\n        return this.getMainResultArray3Texture();\n      case 'Array(4)':\n        return this.getMainResultArray4Texture();\n      default:\n        throw new Error(`unhandled returnType type ${ this.returnType }`);\n    }\n  }\n\n  getMainResultKernelNumberTexture() {\n    throw new Error(`abstract method call`);\n  }\n  getMainResultSubKernelNumberTexture() {\n    throw new Error(`abstract method call`);\n  }\n  getMainResultKernelArray2Texture() {\n    throw new Error(`abstract method call`);\n  }\n  getMainResultSubKernelArray2Texture() {\n    throw new Error(`abstract method call`);\n  }\n  getMainResultKernelArray3Texture() {\n    throw new Error(`abstract method call`);\n  }\n  getMainResultSubKernelArray3Texture() {\n    throw new Error(`abstract method call`);\n  }\n  getMainResultKernelArray4Texture() {\n    throw new Error(`abstract method call`);\n  }\n  getMainResultSubKernelArray4Texture() {\n    throw new Error(`abstract method call`);\n  }\n  getMainResultGraphical() {\n    throw new Error(`abstract method call`);\n  }\n  getMainResultMemoryOptimizedFloats() {\n    throw new Error(`abstract method call`);\n  }\n  getMainResultPackedPixels() {\n    throw new Error(`abstract method call`);\n  }\n\n  getMainResultString() {\n    if (this.graphical) {\n      return this.getMainResultGraphical();\n    } else if (this.precision === 'single') {\n      if (this.optimizeFloatMemory) {\n        return this.getMainResultMemoryOptimizedFloats();\n      }\n      return this.getMainResultTexture();\n    } else {\n      return this.getMainResultPackedPixels();\n    }\n  }\n\n  getMainResultNumberTexture() {\n    return utils.linesToString(this.getMainResultKernelNumberTexture()) +\n      utils.linesToString(this.getMainResultSubKernelNumberTexture());\n  }\n\n  getMainResultArray2Texture() {\n    return utils.linesToString(this.getMainResultKernelArray2Texture()) +\n      utils.linesToString(this.getMainResultSubKernelArray2Texture());\n  }\n\n  getMainResultArray3Texture() {\n    return utils.linesToString(this.getMainResultKernelArray3Texture()) +\n      utils.linesToString(this.getMainResultSubKernelArray3Texture());\n  }\n\n  getMainResultArray4Texture() {\n    return utils.linesToString(this.getMainResultKernelArray4Texture()) +\n      utils.linesToString(this.getMainResultSubKernelArray4Texture());\n  }\n\n  getFloatTacticDeclaration() {\n    const variablePrecision = this.getVariablePrecisionString(this.texSize, this.tactic);\n    return `precision ${variablePrecision} float;\\n`;\n  }\n\n  getIntTacticDeclaration() {\n    return `precision ${this.getVariablePrecisionString(this.texSize, this.tactic, true)} int;\\n`;\n  }\n\n  getSampler2DTacticDeclaration() {\n    return `precision ${this.getVariablePrecisionString(this.texSize, this.tactic)} sampler2D;\\n`;\n  }\n\n  getSampler2DArrayTacticDeclaration() {\n    return `precision ${this.getVariablePrecisionString(this.texSize, this.tactic)} sampler2DArray;\\n`;\n  }\n\n  renderTexture() {\n    return this.immutable ? this.texture.clone() : this.texture;\n  }\n  readPackedPixelsToUint8Array() {\n    if (this.precision !== 'unsigned') throw new Error('Requires this.precision to be \"unsigned\"');\n    const {\n      texSize,\n      context: gl\n    } = this;\n    const result = new Uint8Array(texSize[0] * texSize[1] * 4);\n    gl.readPixels(0, 0, texSize[0], texSize[1], gl.RGBA, gl.UNSIGNED_BYTE, result);\n    return result;\n  }\n\n  readPackedPixelsToFloat32Array() {\n    return new Float32Array(this.readPackedPixelsToUint8Array().buffer);\n  }\n\n  readFloatPixelsToFloat32Array() {\n    if (this.precision !== 'single') throw new Error('Requires this.precision to be \"single\"');\n    const {\n      texSize,\n      context: gl\n    } = this;\n    const w = texSize[0];\n    const h = texSize[1];\n    const result = new Float32Array(w * h * 4);\n    gl.readPixels(0, 0, w, h, gl.RGBA, gl.FLOAT, result);\n    return result;\n  }\n\n  getPixels(flip) {\n    const {\n      context: gl,\n      output\n    } = this;\n    const [width, height] = output;\n    const pixels = new Uint8Array(width * height * 4);\n    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n    return new Uint8ClampedArray((flip ? pixels : utils.flipPixels(pixels, width, height)).buffer);\n  }\n\n  renderKernelsToArrays() {\n    const result = {\n      result: this.renderOutput(),\n    };\n    for (let i = 0; i < this.subKernels.length; i++) {\n      result[this.subKernels[i].property] = this.mappedTextures[i].toArray();\n    }\n    return result;\n  }\n\n  renderKernelsToTextures() {\n    const result = {\n      result: this.renderOutput(),\n    };\n    if (this.immutable) {\n      for (let i = 0; i < this.subKernels.length; i++) {\n        result[this.subKernels[i].property] = this.mappedTextures[i].clone();\n      }\n    } else {\n      for (let i = 0; i < this.subKernels.length; i++) {\n        result[this.subKernels[i].property] = this.mappedTextures[i];\n      }\n    }\n    return result;\n  }\n\n  resetSwitchingKernels() {\n    const existingValue = this.switchingKernels;\n    this.switchingKernels = null;\n    return existingValue;\n  }\n\n  setOutput(output) {\n    const newOutput = this.toKernelOutput(output);\n    if (this.program) {\n      if (!this.dynamicOutput) {\n        throw new Error('Resizing a kernel with dynamicOutput: false is not possible');\n      }\n      const newThreadDim = [newOutput[0], newOutput[1] || 1, newOutput[2] || 1];\n      const newTexSize = utils.getKernelTextureSize({\n        optimizeFloatMemory: this.optimizeFloatMemory,\n        precision: this.precision,\n      }, newThreadDim);\n      const oldTexSize = this.texSize;\n      if (oldTexSize) {\n        const oldPrecision = this.getVariablePrecisionString(oldTexSize, this.tactic);\n        const newPrecision = this.getVariablePrecisionString(newTexSize, this.tactic);\n        if (oldPrecision !== newPrecision) {\n          if (this.debug) {\n            console.warn('Precision requirement changed, asking GPU instance to recompile');\n          }\n          this.switchKernels({\n            type: 'outputPrecisionMismatch',\n            precision: newPrecision,\n            needed: output\n          });\n          return;\n        }\n      }\n      this.output = newOutput;\n      this.threadDim = newThreadDim;\n      this.texSize = newTexSize;\n      const { context: gl } = this;\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n      this.updateMaxTexSize();\n      this.framebuffer.width = this.texSize[0];\n      this.framebuffer.height = this.texSize[1];\n      gl.viewport(0, 0, this.maxTexSize[0], this.maxTexSize[1]);\n      this.canvas.width = this.maxTexSize[0];\n      this.canvas.height = this.maxTexSize[1];\n      if (this.texture) {\n        this.texture.delete();\n      }\n      this.texture = null;\n      this._setupOutputTexture();\n      if (this.mappedTextures && this.mappedTextures.length > 0) {\n        for (let i = 0; i < this.mappedTextures.length; i++) {\n          this.mappedTextures[i].delete();\n        }\n        this.mappedTextures = null;\n        this._setupSubOutputTextures();\n      }\n    } else {\n      this.output = newOutput;\n    }\n    return this;\n  }\n  renderValues() {\n    return this.formatValues(\n      this.transferValues(),\n      this.output[0],\n      this.output[1],\n      this.output[2]\n    );\n  }\n  switchKernels(reason) {\n    if (this.switchingKernels) {\n      this.switchingKernels.push(reason);\n    } else {\n      this.switchingKernels = [reason];\n    }\n  }\n  getVariablePrecisionString(textureSize = this.texSize, tactic = this.tactic, isInt = false) {\n    if (!tactic) {\n      if (!this.constructor.features.isSpeedTacticSupported) return 'highp';\n      const low = this.constructor.features[isInt ? 'lowIntPrecision' : 'lowFloatPrecision'];\n      const medium = this.constructor.features[isInt ? 'mediumIntPrecision' : 'mediumFloatPrecision'];\n      const high = this.constructor.features[isInt ? 'highIntPrecision' : 'highFloatPrecision'];\n      const requiredSize = Math.log2(textureSize[0] * textureSize[1]);\n      if (requiredSize <= low.rangeMax) {\n        return 'lowp';\n      } else if (requiredSize <= medium.rangeMax) {\n        return 'mediump';\n      } else if (requiredSize <= high.rangeMax) {\n        return 'highp';\n      } else {\n        throw new Error(`The required size exceeds that of the ability of your system`);\n      }\n    }\n    switch (tactic) {\n      case 'speed':\n        return 'lowp';\n      case 'balanced':\n        return 'mediump';\n      case 'precision':\n        return 'highp';\n      default:\n        throw new Error(`Unknown tactic \"${tactic}\" use \"speed\", \"balanced\", \"precision\", or empty for auto`);\n    }\n  }\n\n  updateTextureArgumentRefs(kernelValue, arg) {\n    if (!this.immutable) return;\n    if (this.texture.texture === arg.texture) {\n      const { prevArg } = kernelValue;\n      if (prevArg) {\n        if (prevArg.texture._refs === 1) {\n          this.texture.delete();\n          this.texture = prevArg.clone();\n          this._textureSwitched = true;\n        }\n        prevArg.delete();\n      }\n      kernelValue.prevArg = arg.clone();\n    } else if (this.mappedTextures && this.mappedTextures.length > 0) {\n      const { mappedTextures } = this;\n      for (let i = 0; i < mappedTextures.length; i++) {\n        const mappedTexture = mappedTextures[i];\n        if (mappedTexture.texture === arg.texture) {\n          const { prevArg } = kernelValue;\n          if (prevArg) {\n            if (prevArg.texture._refs === 1) {\n              mappedTexture.delete();\n              mappedTextures[i] = prevArg.clone();\n              this._mappedTextureSwitched[i] = true;\n            }\n            prevArg.delete();\n          }\n          kernelValue.prevArg = arg.clone();\n          return;\n        }\n      }\n    }\n  }\n\n  onActivate(previousKernel) {\n    this._textureSwitched = true;\n    this.texture = previousKernel.texture;\n    if (this.mappedTextures) {\n      for (let i = 0; i < this.mappedTextures.length; i++) {\n        this._mappedTextureSwitched[i] = true;\n      }\n      this.mappedTextures = previousKernel.mappedTextures;\n    }\n  }\n\n  initCanvas() {}\n}\n\nconst typeMap = {\n  int: 'Integer',\n  float: 'Number',\n  vec2: 'Array(2)',\n  vec3: 'Array(3)',\n  vec4: 'Array(4)',\n};\n\nmodule.exports = {\n  GLKernel\n};\n},{\"../../utils\":114,\"../kernel\":36,\"./texture/array-2-float\":16,\"./texture/array-2-float-2d\":14,\"./texture/array-2-float-3d\":15,\"./texture/array-3-float\":19,\"./texture/array-3-float-2d\":17,\"./texture/array-3-float-3d\":18,\"./texture/array-4-float\":22,\"./texture/array-4-float-2d\":20,\"./texture/array-4-float-3d\":21,\"./texture/float\":25,\"./texture/float-2d\":23,\"./texture/float-3d\":24,\"./texture/graphical\":26,\"./texture/memory-optimized\":30,\"./texture/memory-optimized-2d\":28,\"./texture/memory-optimized-3d\":29,\"./texture/unsigned\":33,\"./texture/unsigned-2d\":31,\"./texture/unsigned-3d\":32}],14:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { GLTextureFloat } = require('./float');\n\nclass GLTextureArray2Float2D extends GLTextureFloat {\n  constructor(settings) {\n    super(settings);\n    this.type = 'ArrayTexture(2)';\n  }\n  toArray() {\n    return utils.erect2DArray2(this.renderValues(), this.output[0], this.output[1]);\n  }\n}\n\nmodule.exports = {\n  GLTextureArray2Float2D\n};\n},{\"../../../utils\":114,\"./float\":25}],15:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { GLTextureFloat } = require('./float');\n\nclass GLTextureArray2Float3D extends GLTextureFloat {\n  constructor(settings) {\n    super(settings);\n    this.type = 'ArrayTexture(2)';\n  }\n  toArray() {\n    return utils.erect3DArray2(this.renderValues(), this.output[0], this.output[1], this.output[2]);\n  }\n}\n\nmodule.exports = {\n  GLTextureArray2Float3D\n};\n},{\"../../../utils\":114,\"./float\":25}],16:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { GLTextureFloat } = require('./float');\n\nclass GLTextureArray2Float extends GLTextureFloat {\n  constructor(settings) {\n    super(settings);\n    this.type = 'ArrayTexture(2)';\n  }\n  toArray() {\n    return utils.erectArray2(this.renderValues(), this.output[0], this.output[1]);\n  }\n}\n\nmodule.exports = {\n  GLTextureArray2Float\n};\n},{\"../../../utils\":114,\"./float\":25}],17:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { GLTextureFloat } = require('./float');\n\nclass GLTextureArray3Float2D extends GLTextureFloat {\n  constructor(settings) {\n    super(settings);\n    this.type = 'ArrayTexture(3)';\n  }\n  toArray() {\n    return utils.erect2DArray3(this.renderValues(), this.output[0], this.output[1]);\n  }\n}\n\nmodule.exports = {\n  GLTextureArray3Float2D\n};\n},{\"../../../utils\":114,\"./float\":25}],18:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { GLTextureFloat } = require('./float');\n\nclass GLTextureArray3Float3D extends GLTextureFloat {\n  constructor(settings) {\n    super(settings);\n    this.type = 'ArrayTexture(3)';\n  }\n  toArray() {\n    return utils.erect3DArray3(this.renderValues(), this.output[0], this.output[1], this.output[2]);\n  }\n}\n\nmodule.exports = {\n  GLTextureArray3Float3D\n};\n},{\"../../../utils\":114,\"./float\":25}],19:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { GLTextureFloat } = require('./float');\n\nclass GLTextureArray3Float extends GLTextureFloat {\n  constructor(settings) {\n    super(settings);\n    this.type = 'ArrayTexture(3)';\n  }\n  toArray() {\n    return utils.erectArray3(this.renderValues(), this.output[0]);\n  }\n}\n\nmodule.exports = {\n  GLTextureArray3Float\n};\n},{\"../../../utils\":114,\"./float\":25}],20:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { GLTextureFloat } = require('./float');\n\nclass GLTextureArray4Float2D extends GLTextureFloat {\n  constructor(settings) {\n    super(settings);\n    this.type = 'ArrayTexture(4)';\n  }\n  toArray() {\n    return utils.erect2DArray4(this.renderValues(), this.output[0], this.output[1]);\n  }\n}\n\nmodule.exports = {\n  GLTextureArray4Float2D\n};\n},{\"../../../utils\":114,\"./float\":25}],21:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { GLTextureFloat } = require('./float');\n\nclass GLTextureArray4Float3D extends GLTextureFloat {\n  constructor(settings) {\n    super(settings);\n    this.type = 'ArrayTexture(4)';\n  }\n  toArray() {\n    return utils.erect3DArray4(this.renderValues(), this.output[0], this.output[1], this.output[2]);\n  }\n}\n\nmodule.exports = {\n  GLTextureArray4Float3D\n};\n},{\"../../../utils\":114,\"./float\":25}],22:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { GLTextureFloat } = require('./float');\n\nclass GLTextureArray4Float extends GLTextureFloat {\n  constructor(settings) {\n    super(settings);\n    this.type = 'ArrayTexture(4)';\n  }\n  toArray() {\n    return utils.erectArray4(this.renderValues(), this.output[0]);\n  }\n}\n\nmodule.exports = {\n  GLTextureArray4Float\n};\n},{\"../../../utils\":114,\"./float\":25}],23:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { GLTextureFloat } = require('./float');\n\nclass GLTextureFloat2D extends GLTextureFloat {\n  constructor(settings) {\n    super(settings);\n    this.type = 'ArrayTexture(1)';\n  }\n  toArray() {\n    return utils.erect2DFloat(this.renderValues(), this.output[0], this.output[1]);\n  }\n}\n\nmodule.exports = {\n  GLTextureFloat2D\n};\n},{\"../../../utils\":114,\"./float\":25}],24:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { GLTextureFloat } = require('./float');\n\nclass GLTextureFloat3D extends GLTextureFloat {\n  constructor(settings) {\n    super(settings);\n    this.type = 'ArrayTexture(1)';\n  }\n  toArray() {\n    return utils.erect3DFloat(this.renderValues(), this.output[0], this.output[1], this.output[2]);\n  }\n}\n\nmodule.exports = {\n  GLTextureFloat3D\n};\n},{\"../../../utils\":114,\"./float\":25}],25:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { GLTexture } = require('./index');\n\nclass GLTextureFloat extends GLTexture {\n  get textureType() {\n    return this.context.FLOAT;\n  }\n  constructor(settings) {\n    super(settings);\n    this.type = 'ArrayTexture(1)';\n  }\n  renderRawOutput() {\n    const gl = this.context;\n    const size = this.size;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer());\n    gl.framebufferTexture2D(\n      gl.FRAMEBUFFER,\n      gl.COLOR_ATTACHMENT0,\n      gl.TEXTURE_2D,\n      this.texture,\n      0\n    );\n    const result = new Float32Array(size[0] * size[1] * 4);\n    gl.readPixels(0, 0, size[0], size[1], gl.RGBA, gl.FLOAT, result);\n    return result;\n  }\n  renderValues() {\n    if (this._deleted) return null;\n    return this.renderRawOutput();\n  }\n  toArray() {\n    return utils.erectFloat(this.renderValues(), this.output[0]);\n  }\n}\n\nmodule.exports = {\n  GLTextureFloat\n};\n},{\"../../../utils\":114,\"./index\":27}],26:[function(require,module,exports){\nconst { GLTextureUnsigned } = require('./unsigned');\n\nclass GLTextureGraphical extends GLTextureUnsigned {\n  constructor(settings) {\n    super(settings);\n    this.type = 'ArrayTexture(4)';\n  }\n  toArray() {\n    return this.renderValues();\n  }\n}\n\nmodule.exports = {\n  GLTextureGraphical\n};\n},{\"./unsigned\":33}],27:[function(require,module,exports){\nconst { Texture } = require('../../../texture');\n\nclass GLTexture extends Texture {\n  get textureType() {\n    throw new Error(`\"textureType\" not implemented on ${ this.name }`);\n  }\n\n  clone() {\n    return new this.constructor(this);\n  }\n\n  beforeMutate() {\n    if (this.texture._refs > 1) {\n      this.newTexture();\n      return true;\n    }\n    return false;\n  }\n\n  cloneTexture() {\n    this.texture._refs--;\n    const { context: gl, size, texture, kernel } = this;\n    if (kernel.debug) {\n      console.warn('cloning internal texture');\n    }\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer());\n    selectTexture(gl, texture);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    const target = gl.createTexture();\n    selectTexture(gl, target);\n    gl.texImage2D(gl.TEXTURE_2D, 0, this.internalFormat, size[0], size[1], 0, this.textureFormat, this.textureType, null);\n    gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 0, 0, size[0], size[1]);\n    target._refs = 1;\n    this.texture = target;\n  }\n\n  newTexture() {\n    this.texture._refs--;\n    const gl = this.context;\n    const size = this.size;\n    const kernel = this.kernel;\n    if (kernel.debug) {\n      console.warn('new internal texture');\n    }\n    const target = gl.createTexture();\n    selectTexture(gl, target);\n    gl.texImage2D(gl.TEXTURE_2D, 0, this.internalFormat, size[0], size[1], 0, this.textureFormat, this.textureType, null);\n    target._refs = 1;\n    this.texture = target;\n  }\n\n  clear() {\n    if (this.texture._refs) {\n      this.texture._refs--;\n      const gl = this.context;\n      const target = this.texture = gl.createTexture();\n      selectTexture(gl, target);\n      const size = this.size;\n      target._refs = 1;\n      gl.texImage2D(gl.TEXTURE_2D, 0, this.internalFormat, size[0], size[1], 0, this.textureFormat, this.textureType, null);\n    }\n    const { context: gl, texture } = this;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer());\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    selectTexture(gl, texture);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    gl.clearColor(0, 0, 0, 0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n  }\n\n  delete() {\n    if (this._deleted) return;\n    this._deleted = true;\n    if (this.texture._refs) {\n      this.texture._refs--;\n      if (this.texture._refs) return;\n    }\n    this.context.deleteTexture(this.texture);\n  }\n\n  framebuffer() {\n    if (!this._framebuffer) {\n      this._framebuffer = this.kernel.getRawValueFramebuffer(this.size[0], this.size[1]);\n    }\n    return this._framebuffer;\n  }\n}\n\nfunction selectTexture(gl, texture) {\n  gl.activeTexture(gl.TEXTURE15);\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n}\n\nmodule.exports = { GLTexture };\n},{\"../../../texture\":113}],28:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { GLTextureFloat } = require('./float');\n\nclass GLTextureMemoryOptimized2D extends GLTextureFloat {\n  constructor(settings) {\n    super(settings);\n    this.type = 'MemoryOptimizedNumberTexture';\n  }\n  toArray() {\n    return utils.erectMemoryOptimized2DFloat(this.renderValues(), this.output[0], this.output[1]);\n  }\n}\n\nmodule.exports = {\n  GLTextureMemoryOptimized2D\n};\n},{\"../../../utils\":114,\"./float\":25}],29:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { GLTextureFloat } = require('./float');\n\nclass GLTextureMemoryOptimized3D extends GLTextureFloat {\n  constructor(settings) {\n    super(settings);\n    this.type = 'MemoryOptimizedNumberTexture';\n  }\n  toArray() {\n    return utils.erectMemoryOptimized3DFloat(this.renderValues(), this.output[0], this.output[1], this.output[2]);\n  }\n}\n\nmodule.exports = {\n  GLTextureMemoryOptimized3D\n};\n},{\"../../../utils\":114,\"./float\":25}],30:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { GLTextureFloat } = require('./float');\n\nclass GLTextureMemoryOptimized extends GLTextureFloat {\n  constructor(settings) {\n    super(settings);\n    this.type = 'MemoryOptimizedNumberTexture';\n  }\n  toArray() {\n    return utils.erectMemoryOptimizedFloat(this.renderValues(), this.output[0]);\n  }\n}\n\nmodule.exports = {\n  GLTextureMemoryOptimized\n};\n},{\"../../../utils\":114,\"./float\":25}],31:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { GLTextureUnsigned } = require('./unsigned');\n\nclass GLTextureUnsigned2D extends GLTextureUnsigned {\n  constructor(settings) {\n    super(settings);\n    this.type = 'NumberTexture';\n  }\n  toArray() {\n    return utils.erect2DPackedFloat(this.renderValues(), this.output[0], this.output[1]);\n  }\n}\n\nmodule.exports = {\n  GLTextureUnsigned2D\n};\n},{\"../../../utils\":114,\"./unsigned\":33}],32:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { GLTextureUnsigned } = require('./unsigned');\n\nclass GLTextureUnsigned3D extends GLTextureUnsigned {\n  constructor(settings) {\n    super(settings);\n    this.type = 'NumberTexture';\n  }\n  toArray() {\n    return utils.erect3DPackedFloat(this.renderValues(), this.output[0], this.output[1], this.output[2]);\n  }\n}\n\nmodule.exports = {\n  GLTextureUnsigned3D\n};\n},{\"../../../utils\":114,\"./unsigned\":33}],33:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { GLTexture } = require('./index');\n\nclass GLTextureUnsigned extends GLTexture {\n  get textureType() {\n    return this.context.UNSIGNED_BYTE;\n  }\n  constructor(settings) {\n    super(settings);\n    this.type = 'NumberTexture';\n  }\n  renderRawOutput() {\n    const { context: gl } = this;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer());\n    gl.framebufferTexture2D(\n      gl.FRAMEBUFFER,\n      gl.COLOR_ATTACHMENT0,\n      gl.TEXTURE_2D,\n      this.texture,\n      0\n    );\n    const result = new Uint8Array(this.size[0] * this.size[1] * 4);\n    gl.readPixels(0, 0, this.size[0], this.size[1], gl.RGBA, gl.UNSIGNED_BYTE, result);\n    return result;\n  }\n  renderValues() {\n    if (this._deleted) return null;\n    return new Float32Array(this.renderRawOutput().buffer);\n  }\n  toArray() {\n    return utils.erectPackedFloat(this.renderValues(), this.output[0]);\n  }\n}\n\nmodule.exports = {\n  GLTextureUnsigned\n};\n},{\"../../../utils\":114,\"./index\":27}],34:[function(require,module,exports){\nconst getContext = require('gl');\nconst { WebGLKernel } = require('../web-gl/kernel');\nconst { glKernelString } = require('../gl/kernel-string');\n\nlet isSupported = null;\nlet testCanvas = null;\nlet testContext = null;\nlet testExtensions = null;\nlet features = null;\n\nclass HeadlessGLKernel extends WebGLKernel {\n  static get isSupported() {\n    if (isSupported !== null) return isSupported;\n    this.setupFeatureChecks();\n    isSupported = testContext !== null;\n    return isSupported;\n  }\n\n  static setupFeatureChecks() {\n    testCanvas = null;\n    testExtensions = null;\n    if (typeof getContext !== 'function') return;\n    try { \n      testContext = getContext(2, 2, {\n        preserveDrawingBuffer: true\n      });\n      if (!testContext || !testContext.getExtension) return;\n      testExtensions = {\n        STACKGL_resize_drawingbuffer: testContext.getExtension('STACKGL_resize_drawingbuffer'),\n        STACKGL_destroy_context: testContext.getExtension('STACKGL_destroy_context'),\n        OES_texture_float: testContext.getExtension('OES_texture_float'),\n        OES_texture_float_linear: testContext.getExtension('OES_texture_float_linear'),\n        OES_element_index_uint: testContext.getExtension('OES_element_index_uint'),\n        WEBGL_draw_buffers: testContext.getExtension('WEBGL_draw_buffers'),\n        WEBGL_color_buffer_float: testContext.getExtension('WEBGL_color_buffer_float'),\n      };\n      features = this.getFeatures();\n    } catch (e) {\n      console.warn(e);\n    }\n  }\n\n  static isContextMatch(context) {\n    try {\n      return context.getParameter(context.RENDERER) === 'ANGLE';\n    } catch (e) {\n      return false;\n    }\n  }\n\n  static getIsTextureFloat() {\n    return Boolean(testExtensions.OES_texture_float);\n  }\n\n  static getIsDrawBuffers() {\n    return Boolean(testExtensions.WEBGL_draw_buffers);\n  }\n\n  static getChannelCount() {\n    return testExtensions.WEBGL_draw_buffers ?\n      testContext.getParameter(testExtensions.WEBGL_draw_buffers.MAX_DRAW_BUFFERS_WEBGL) :\n      1;\n  }\n\n  static getMaxTextureSize() {\n    return testContext.getParameter(testContext.MAX_TEXTURE_SIZE);\n  }\n\n  static get testCanvas() {\n    return testCanvas;\n  }\n\n  static get testContext() {\n    return testContext;\n  }\n\n  static get features() {\n    return features;\n  }\n\n  initCanvas() {\n    return {};\n  }\n\n  initContext() {\n    return getContext(2, 2, {\n      preserveDrawingBuffer: true\n    });\n  }\n\n  initExtensions() {\n    this.extensions = {\n      STACKGL_resize_drawingbuffer: this.context.getExtension('STACKGL_resize_drawingbuffer'),\n      STACKGL_destroy_context: this.context.getExtension('STACKGL_destroy_context'),\n      OES_texture_float: this.context.getExtension('OES_texture_float'),\n      OES_texture_float_linear: this.context.getExtension('OES_texture_float_linear'),\n      OES_element_index_uint: this.context.getExtension('OES_element_index_uint'),\n      WEBGL_draw_buffers: this.context.getExtension('WEBGL_draw_buffers'),\n    };\n  }\n\n  build() {\n    super.build.apply(this, arguments);\n    if (!this.fallbackRequested) {\n      this.extensions.STACKGL_resize_drawingbuffer.resize(this.maxTexSize[0], this.maxTexSize[1]);\n    }\n  }\n\n  destroyExtensions() {\n    this.extensions.STACKGL_resize_drawingbuffer = null;\n    this.extensions.STACKGL_destroy_context = null;\n    this.extensions.OES_texture_float = null;\n    this.extensions.OES_texture_float_linear = null;\n    this.extensions.OES_element_index_uint = null;\n    this.extensions.WEBGL_draw_buffers = null;\n  }\n\n  static destroyContext(context) {\n    const extension = context.getExtension('STACKGL_destroy_context');\n    if (extension && extension.destroy) {\n      extension.destroy();\n    }\n  }\n\n  toString() {\n    const setupContextString = `const gl = context || require('gl')(1, 1);\\n`;\n    const destroyContextString = `    if (!context) { gl.getExtension('STACKGL_destroy_context').destroy(); }\\n`;\n    return glKernelString(this.constructor, arguments, this, setupContextString, destroyContextString);\n  }\n\n  setOutput(output) {\n    super.setOutput(output);\n    if (this.graphical && this.extensions.STACKGL_resize_drawingbuffer) {\n      this.extensions.STACKGL_resize_drawingbuffer.resize(this.maxTexSize[0], this.maxTexSize[1]);\n    }\n    return this;\n  }\n}\n\nmodule.exports = {\n  HeadlessGLKernel\n};\n},{\"../gl/kernel-string\":12,\"../web-gl/kernel\":70,\"gl\":2}],35:[function(require,module,exports){\nclass KernelValue {\n  constructor(value, settings) {\n    const {\n      name,\n      kernel,\n      context,\n      checkContext,\n      onRequestContextHandle,\n      onUpdateValueMismatch,\n      origin,\n      strictIntegers,\n      type,\n      tactic,\n    } = settings;\n    if (!name) {\n      throw new Error('name not set');\n    }\n    if (!type) {\n      throw new Error('type not set');\n    }\n    if (!origin) {\n      throw new Error('origin not set');\n    }\n    if (origin !== 'user' && origin !== 'constants') {\n      throw new Error(`origin must be \"user\" or \"constants\" value is \"${ origin }\"`);\n    }\n    if (!onRequestContextHandle) {\n      throw new Error('onRequestContextHandle is not set');\n    }\n    this.name = name;\n    this.origin = origin;\n    this.tactic = tactic;\n    this.varName = origin === 'constants' ? `constants.${name}` : name;\n    this.kernel = kernel;\n    this.strictIntegers = strictIntegers;\n    this.type = value.type || type;\n    this.size = value.size || null;\n    this.index = null;\n    this.context = context;\n    this.checkContext = checkContext !== null && checkContext !== undefined ? checkContext : true;\n    this.contextHandle = null;\n    this.onRequestContextHandle = onRequestContextHandle;\n    this.onUpdateValueMismatch = onUpdateValueMismatch;\n    this.forceUploadEachRun = null;\n  }\n\n  get id() {\n    return `${this.origin}_${name}`;\n  }\n\n  getSource() {\n    throw new Error(`\"getSource\" not defined on ${ this.constructor.name }`);\n  }\n\n  updateValue(value) {\n    throw new Error(`\"updateValue\" not defined on ${ this.constructor.name }`);\n  }\n}\n\nmodule.exports = {\n  KernelValue\n};\n},{}],36:[function(require,module,exports){\nconst { utils } = require('../utils');\nconst { Input } = require('../input');\n\nclass Kernel {\n  static get isSupported() {\n    throw new Error(`\"isSupported\" not implemented on ${ this.name }`);\n  }\n\n  static isContextMatch(context) {\n    throw new Error(`\"isContextMatch\" not implemented on ${ this.name }`);\n  }\n\n  static getFeatures() {\n    throw new Error(`\"getFeatures\" not implemented on ${ this.name }`);\n  }\n\n  static destroyContext(context) {\n    throw new Error(`\"destroyContext\" called on ${ this.name }`);\n  }\n\n  static nativeFunctionArguments() {\n    throw new Error(`\"nativeFunctionArguments\" called on ${ this.name }`);\n  }\n\n  static nativeFunctionReturnType() {\n    throw new Error(`\"nativeFunctionReturnType\" called on ${ this.name }`);\n  }\n\n  static combineKernels() {\n    throw new Error(`\"combineKernels\" called on ${ this.name }`);\n  }\n\n  constructor(source, settings) {\n    if (typeof source !== 'object') {\n      if (typeof source !== 'string') {\n        throw new Error('source not a string');\n      }\n      if (!utils.isFunctionString(source)) {\n        throw new Error('source not a function string');\n      }\n    }\n    this.useLegacyEncoder = false;\n    this.fallbackRequested = false;\n    this.onRequestFallback = null;\n\n    this.argumentNames = typeof source === 'string' ? utils.getArgumentNamesFromString(source) : null;\n    this.argumentTypes = null;\n    this.argumentSizes = null;\n    this.argumentBitRatios = null;\n    this.kernelArguments = null;\n    this.kernelConstants = null;\n    this.forceUploadKernelConstants = null;\n\n\n    this.source = source;\n\n    this.output = null;\n\n    this.debug = false;\n\n    this.graphical = false;\n\n    this.loopMaxIterations = 0;\n\n    this.constants = null;\n\n    this.constantTypes = null;\n\n    this.constantBitRatios = null;\n\n    this.dynamicArguments = false;\n\n    this.dynamicOutput = false;\n\n    this.canvas = null;\n\n    this.context = null;\n\n    this.checkContext = null;\n\n    this.gpu = null;\n\n    this.functions = null;\n\n    this.nativeFunctions = null;\n\n    this.injectedNative = null;\n\n    this.subKernels = null;\n\n    this.validate = true;\n\n    this.immutable = false;\n\n    this.pipeline = false;\n\n    this.precision = null;\n\n    this.tactic = null;\n\n    this.plugins = null;\n\n    this.returnType = null;\n    this.leadingReturnStatement = null;\n    this.followingReturnStatement = null;\n    this.optimizeFloatMemory = null;\n    this.strictIntegers = false;\n    this.fixIntegerDivisionAccuracy = null;\n    this.built = false;\n    this.signature = null;\n  }\n\n  mergeSettings(settings) {\n    for (let p in settings) {\n      if (!settings.hasOwnProperty(p) || !this.hasOwnProperty(p)) continue;\n      switch (p) {\n        case 'output':\n          if (!Array.isArray(settings.output)) {\n            this.setOutput(settings.output); \n            continue;\n          }\n          break;\n        case 'functions':\n          this.functions = [];\n          for (let i = 0; i < settings.functions.length; i++) {\n            this.addFunction(settings.functions[i]);\n          }\n          continue;\n        case 'graphical':\n          if (settings[p] && !settings.hasOwnProperty('precision')) {\n            this.precision = 'unsigned';\n          }\n          this[p] = settings[p];\n          continue;\n        case 'nativeFunctions':\n          if (!settings.nativeFunctions) continue;\n          this.nativeFunctions = [];\n          for (let i = 0; i < settings.nativeFunctions.length; i++) {\n            const s = settings.nativeFunctions[i];\n            const { name, source } = s;\n            this.addNativeFunction(name, source, s);\n          }\n          continue;\n      }\n      this[p] = settings[p];\n    }\n\n    if (!this.canvas) this.canvas = this.initCanvas();\n    if (!this.context) this.context = this.initContext();\n    if (!this.plugins) this.plugins = this.initPlugins(settings);\n  }\n  build() {\n    throw new Error(`\"build\" not defined on ${ this.constructor.name }`);\n  }\n\n  run() {\n    throw new Error(`\"run\" not defined on ${ this.constructor.name }`)\n  }\n\n  initCanvas() {\n    throw new Error(`\"initCanvas\" not defined on ${ this.constructor.name }`);\n  }\n\n  initContext() {\n    throw new Error(`\"initContext\" not defined on ${ this.constructor.name }`);\n  }\n\n  initPlugins(settings) {\n    throw new Error(`\"initPlugins\" not defined on ${ this.constructor.name }`);\n  }\n\n  addFunction(source, settings = {}) {\n    if (source.name && source.source && source.argumentTypes && 'returnType' in source) {\n      this.functions.push(source);\n    } else if ('settings' in source && 'source' in source) {\n      this.functions.push(this.functionToIGPUFunction(source.source, source.settings));\n    } else if (typeof source === 'string' || typeof source === 'function') {\n      this.functions.push(this.functionToIGPUFunction(source, settings));\n    } else {\n      throw new Error(`function not properly defined`);\n    }\n    return this;\n  }\n\n  addNativeFunction(name, source, settings = {}) {\n    const { argumentTypes, argumentNames } = settings.argumentTypes ?\n      splitArgumentTypes(settings.argumentTypes) :\n      this.constructor.nativeFunctionArguments(source) || {};\n    this.nativeFunctions.push({\n      name,\n      source,\n      settings,\n      argumentTypes,\n      argumentNames,\n      returnType: settings.returnType || this.constructor.nativeFunctionReturnType(source)\n    });\n    return this;\n  }\n\n  setupArguments(args) {\n    this.kernelArguments = [];\n    if (!this.argumentTypes) {\n      if (!this.argumentTypes) {\n        this.argumentTypes = [];\n        for (let i = 0; i < args.length; i++) {\n          const argType = utils.getVariableType(args[i], this.strictIntegers);\n          const type = argType === 'Integer' ? 'Number' : argType;\n          this.argumentTypes.push(type);\n          this.kernelArguments.push({\n            type\n          });\n        }\n      }\n    } else {\n      for (let i = 0; i < this.argumentTypes.length; i++) {\n        this.kernelArguments.push({\n          type: this.argumentTypes[i]\n        });\n      }\n    }\n\n    this.argumentSizes = new Array(args.length);\n    this.argumentBitRatios = new Int32Array(args.length);\n\n    for (let i = 0; i < args.length; i++) {\n      const arg = args[i];\n      this.argumentSizes[i] = arg.constructor === Input ? arg.size : null;\n      this.argumentBitRatios[i] = this.getBitRatio(arg);\n    }\n\n    if (this.argumentNames.length !== args.length) {\n      throw new Error(`arguments are miss-aligned`);\n    }\n  }\n\n  setupConstants() {\n    this.kernelConstants = [];\n    let needsConstantTypes = this.constantTypes === null;\n    if (needsConstantTypes) {\n      this.constantTypes = {};\n    }\n    this.constantBitRatios = {};\n    if (this.constants) {\n      for (let name in this.constants) {\n        if (needsConstantTypes) {\n          const type = utils.getVariableType(this.constants[name], this.strictIntegers);\n          this.constantTypes[name] = type;\n          this.kernelConstants.push({\n            name,\n            type\n          });\n        } else {\n          this.kernelConstants.push({\n            name,\n            type: this.constantTypes[name]\n          });\n        }\n        this.constantBitRatios[name] = this.getBitRatio(this.constants[name]);\n      }\n    }\n  }\n\n  setOptimizeFloatMemory(flag) {\n    this.optimizeFloatMemory = flag;\n    return this;\n  }\n\n  toKernelOutput(output) {\n    if (output.hasOwnProperty('x')) {\n      if (output.hasOwnProperty('y')) {\n        if (output.hasOwnProperty('z')) {\n          return [output.x, output.y, output.z];\n        } else {\n          return [output.x, output.y];\n        }\n      } else {\n        return [output.x];\n      }\n    } else {\n      return output;\n    }\n  }\n\n  setOutput(output) {\n    this.output = this.toKernelOutput(output);\n    return this;\n  }\n\n  setDebug(flag) {\n    this.debug = flag;\n    return this;\n  }\n\n  setGraphical(flag) {\n    this.graphical = flag;\n    this.precision = 'unsigned';\n    return this;\n  }\n\n  setLoopMaxIterations(max) {\n    this.loopMaxIterations = max;\n    return this;\n  }\n\n  setConstants(constants) {\n    this.constants = constants;\n    return this;\n  }\n\n  setConstantTypes(constantTypes) {\n    this.constantTypes = constantTypes;\n    return this;\n  }\n\n  setFunctions(functions) {\n    for (let i = 0; i < functions.length; i++) {\n      this.addFunction(functions[i]);\n    }\n    return this;\n  }\n\n  setNativeFunctions(nativeFunctions) {\n    for (let i = 0; i < nativeFunctions.length; i++) {\n      const settings = nativeFunctions[i];\n      const { name, source } = settings;\n      this.addNativeFunction(name, source, settings);\n    }\n    return this;\n  }\n\n  setInjectedNative(injectedNative) {\n    this.injectedNative = injectedNative;\n    return this;\n  }\n\n  setPipeline(flag) {\n    this.pipeline = flag;\n    return this;\n  }\n\n  setPrecision(flag) {\n    this.precision = flag;\n    return this;\n  }\n\n  setDimensions(flag) {\n    utils.warnDeprecated('method', 'setDimensions', 'setOutput');\n    this.output = flag;\n    return this;\n  }\n\n  setOutputToTexture(flag) {\n    utils.warnDeprecated('method', 'setOutputToTexture', 'setPipeline');\n    this.pipeline = flag;\n    return this;\n  }\n\n  setImmutable(flag) {\n    this.immutable = flag;\n    return this;\n  }\n\n  setCanvas(canvas) {\n    this.canvas = canvas;\n    return this;\n  }\n\n  setStrictIntegers(flag) {\n    this.strictIntegers = flag;\n    return this;\n  }\n\n  setDynamicOutput(flag) {\n    this.dynamicOutput = flag;\n    return this;\n  }\n\n  setHardcodeConstants(flag) {\n    utils.warnDeprecated('method', 'setHardcodeConstants');\n    this.setDynamicOutput(flag);\n    this.setDynamicArguments(flag);\n    return this;\n  }\n\n  setDynamicArguments(flag) {\n    this.dynamicArguments = flag;\n    return this;\n  }\n\n  setUseLegacyEncoder(flag) {\n    this.useLegacyEncoder = flag;\n    return this;\n  }\n\n  setWarnVarUsage(flag) {\n    utils.warnDeprecated('method', 'setWarnVarUsage');\n    return this;\n  }\n\n  getCanvas() {\n    utils.warnDeprecated('method', 'getCanvas');\n    return this.canvas;\n  }\n\n  getWebGl() {\n    utils.warnDeprecated('method', 'getWebGl');\n    return this.context;\n  }\n\n  setContext(context) {\n    this.context = context;\n    return this;\n  }\n\n  setArgumentTypes(argumentTypes) {\n    if (Array.isArray(argumentTypes)) {\n      this.argumentTypes = argumentTypes;\n    } else {\n      this.argumentTypes = [];\n      for (const p in argumentTypes) {\n        if (!argumentTypes.hasOwnProperty(p)) continue;\n        const argumentIndex = this.argumentNames.indexOf(p);\n        if (argumentIndex === -1) throw new Error(`unable to find argument ${ p }`);\n        this.argumentTypes[argumentIndex] = argumentTypes[p];\n      }\n    }\n    return this;\n  }\n\n  setTactic(tactic) {\n    this.tactic = tactic;\n    return this;\n  }\n\n  requestFallback(args) {\n    if (!this.onRequestFallback) {\n      throw new Error(`\"onRequestFallback\" not defined on ${ this.constructor.name }`);\n    }\n    this.fallbackRequested = true;\n    return this.onRequestFallback(args);\n  }\n\n  validateSettings() {\n    throw new Error(`\"validateSettings\" not defined on ${ this.constructor.name }`);\n  }\n\n  addSubKernel(subKernel) {\n    if (this.subKernels === null) {\n      this.subKernels = [];\n    }\n    if (!subKernel.source) throw new Error('subKernel missing \"source\" property');\n    if (!subKernel.property && isNaN(subKernel.property)) throw new Error('subKernel missing \"property\" property');\n    if (!subKernel.name) throw new Error('subKernel missing \"name\" property');\n    this.subKernels.push(subKernel);\n    return this;\n  }\n\n  destroy(removeCanvasReferences) {\n    throw new Error(`\"destroy\" called on ${ this.constructor.name }`);\n  }\n\n  getBitRatio(value) {\n    if (this.precision === 'single') {\n      return 4;\n    } else if (Array.isArray(value[0])) {\n      return this.getBitRatio(value[0]);\n    } else if (value.constructor === Input) {\n      return this.getBitRatio(value.value);\n    }\n    switch (value.constructor) {\n      case Uint8ClampedArray:\n      case Uint8Array:\n      case Int8Array:\n        return 1;\n      case Uint16Array:\n      case Int16Array:\n        return 2;\n      case Float32Array:\n      case Int32Array:\n      default:\n        return 4;\n    }\n  }\n\n  getPixels(flip) {\n    throw new Error(`\"getPixels\" called on ${ this.constructor.name }`);\n  }\n\n  checkOutput() {\n    if (!this.output || !utils.isArray(this.output)) throw new Error('kernel.output not an array');\n    if (this.output.length < 1) throw new Error('kernel.output is empty, needs at least 1 value');\n    for (let i = 0; i < this.output.length; i++) {\n      if (isNaN(this.output[i]) || this.output[i] < 1) {\n        throw new Error(`${ this.constructor.name }.output[${ i }] incorrectly defined as \\`${ this.output[i] }\\`, needs to be numeric, and greater than 0`);\n      }\n    }\n  }\n\n  prependString(value) {\n    throw new Error(`\"prependString\" called on ${ this.constructor.name }`);\n  }\n\n  hasPrependString(value) {\n    throw new Error(`\"hasPrependString\" called on ${ this.constructor.name }`);\n  }\n\n  toJSON() {\n    return {\n      settings: {\n        output: this.output,\n        pipeline: this.pipeline,\n        argumentNames: this.argumentNames,\n        argumentsTypes: this.argumentTypes,\n        constants: this.constants,\n        pluginNames: this.plugins ? this.plugins.map(plugin => plugin.name) : null,\n        returnType: this.returnType,\n      }\n    };\n  }\n\n  buildSignature(args) {\n    const Constructor = this.constructor;\n    this.signature = Constructor.getSignature(this, Constructor.getArgumentTypes(this, args));\n  }\n\n  static getArgumentTypes(kernel, args) {\n    const argumentTypes = new Array(args.length);\n    for (let i = 0; i < args.length; i++) {\n      const arg = args[i];\n      const type = kernel.argumentTypes[i];\n      if (arg.type) {\n        argumentTypes[i] = arg.type;\n      } else {\n        switch (type) {\n          case 'Number':\n          case 'Integer':\n          case 'Float':\n          case 'ArrayTexture(1)':\n            argumentTypes[i] = utils.getVariableType(arg);\n            break;\n          default:\n            argumentTypes[i] = type;\n        }\n      }\n    }\n    return argumentTypes;\n  }\n\n  static getSignature(kernel, argumentTypes) {\n    throw new Error(`\"getSignature\" not implemented on ${ this.name }`);\n  }\n\n  functionToIGPUFunction(source, settings = {}) {\n    if (typeof source !== 'string' && typeof source !== 'function') throw new Error('source not a string or function');\n    const sourceString = typeof source === 'string' ? source : source.toString();\n    let argumentTypes = [];\n\n    if (Array.isArray(settings.argumentTypes)) {\n      argumentTypes = settings.argumentTypes;\n    } else if (typeof settings.argumentTypes === 'object') {\n      argumentTypes = utils.getArgumentNamesFromString(sourceString)\n        .map(name => settings.argumentTypes[name]) || [];\n    } else {\n      argumentTypes = settings.argumentTypes || [];\n    }\n\n    return {\n      name: utils.getFunctionNameFromString(sourceString) || null,\n      source: sourceString,\n      argumentTypes,\n      returnType: settings.returnType || null,\n    };\n  }\n\n  onActivate(previousKernel) {}\n}\n\nfunction splitArgumentTypes(argumentTypesObject) {\n  const argumentNames = Object.keys(argumentTypesObject);\n  const argumentTypes = [];\n  for (let i = 0; i < argumentNames.length; i++) {\n    const argumentName = argumentNames[i];\n    argumentTypes.push(argumentTypesObject[argumentName]);\n  }\n  return { argumentTypes, argumentNames };\n}\n\nmodule.exports = {\n  Kernel\n};\n},{\"../input\":110,\"../utils\":114}],37:[function(require,module,exports){\nconst fragmentShader = `__HEADER__;\n__FLOAT_TACTIC_DECLARATION__;\n__INT_TACTIC_DECLARATION__;\n__SAMPLER_2D_TACTIC_DECLARATION__;\n\nconst int LOOP_MAX = __LOOP_MAX__;\n\n__PLUGINS__;\n__CONSTANTS__;\n\nvarying vec2 vTexCoord;\n\nfloat acosh(float x) {\n  return log(x + sqrt(x * x - 1.0));\n}\n\nfloat sinh(float x) {\n  return (pow(${Math.E}, x) - pow(${Math.E}, -x)) / 2.0;\n}\n\nfloat asinh(float x) {\n  return log(x + sqrt(x * x + 1.0));\n}\n\nfloat atan2(float v1, float v2) {\n  if (v1 == 0.0 || v2 == 0.0) return 0.0;\n  return atan(v1 / v2);\n}\n\nfloat atanh(float x) {\n  x = (x + 1.0) / (x - 1.0);\n  if (x < 0.0) {\n    return 0.5 * log(-x);\n  }\n  return 0.5 * log(x);\n}\n\nfloat cbrt(float x) {\n  if (x >= 0.0) {\n    return pow(x, 1.0 / 3.0);\n  } else {\n    return -pow(x, 1.0 / 3.0);\n  }\n}\n\nfloat cosh(float x) {\n  return (pow(${Math.E}, x) + pow(${Math.E}, -x)) / 2.0; \n}\n\nfloat expm1(float x) {\n  return pow(${Math.E}, x) - 1.0; \n}\n\nfloat fround(highp float x) {\n  return x;\n}\n\nfloat imul(float v1, float v2) {\n  return float(int(v1) * int(v2));\n}\n\nfloat log10(float x) {\n  return log2(x) * (1.0 / log2(10.0));\n}\n\nfloat log1p(float x) {\n  return log(1.0 + x);\n}\n\nfloat _pow(float v1, float v2) {\n  if (v2 == 0.0) return 1.0;\n  return pow(v1, v2);\n}\n\nfloat tanh(float x) {\n  float e = exp(2.0 * x);\n  return (e - 1.0) / (e + 1.0);\n}\n\nfloat trunc(float x) {\n  if (x >= 0.0) {\n    return floor(x); \n  } else {\n    return ceil(x);\n  }\n}\n\nvec4 _round(vec4 x) {\n  return floor(x + 0.5);\n}\n\nfloat _round(float x) {\n  return floor(x + 0.5);\n}\n\nconst int BIT_COUNT = 32;\nint modi(int x, int y) {\n  return x - y * (x / y);\n}\n\nint bitwiseOr(int a, int b) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) || (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 || b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseXOR(int a, int b) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) != (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 || b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseAnd(int a, int b) {\n  int result = 0;\n  int n = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) && (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 && b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseNot(int a) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (modi(a, 2) == 0) {\n      result += n;    \n    }\n    a = a / 2;\n    n = n * 2;\n  }\n  return result;\n}\nint bitwiseZeroFillLeftShift(int n, int shift) {\n  int maxBytes = BIT_COUNT;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (maxBytes >= n) {\n      break;\n    }\n    maxBytes *= 2;\n  }\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= shift) {\n      break;\n    }\n    n *= 2;\n  }\n\n  int result = 0;\n  int byteVal = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= maxBytes) break;\n    if (modi(n, 2) > 0) { result += byteVal; }\n    n = int(n / 2);\n    byteVal *= 2;\n  }\n  return result;\n}\n\nint bitwiseSignedRightShift(int num, int shifts) {\n  return int(floor(float(num) / pow(2.0, float(shifts))));\n}\n\nint bitwiseZeroFillRightShift(int n, int shift) {\n  int maxBytes = BIT_COUNT;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (maxBytes >= n) {\n      break;\n    }\n    maxBytes *= 2;\n  }\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= shift) {\n      break;\n    }\n    n /= 2;\n  }\n  int result = 0;\n  int byteVal = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= maxBytes) break;\n    if (modi(n, 2) > 0) { result += byteVal; }\n    n = int(n / 2);\n    byteVal *= 2;\n  }\n  return result;\n}\n\nvec2 integerMod(vec2 x, float y) {\n  vec2 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec3 integerMod(vec3 x, float y) {\n  vec3 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec4 integerMod(vec4 x, vec4 y) {\n  vec4 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nfloat integerMod(float x, float y) {\n  float res = floor(mod(x, y));\n  return res * (res > floor(y) - 1.0 ? 0.0 : 1.0);\n}\n\nint integerMod(int x, int y) {\n  return x - (y * int(x / y));\n}\n\n__DIVIDE_WITH_INTEGER_CHECK__;\n\n// Here be dragons!\n// DO NOT OPTIMIZE THIS CODE\n// YOU WILL BREAK SOMETHING ON SOMEBODY\\'S MACHINE\n// LEAVE IT AS IT IS, LEST YOU WASTE YOUR OWN TIME\nconst vec2 MAGIC_VEC = vec2(1.0, -256.0);\nconst vec4 SCALE_FACTOR = vec4(1.0, 256.0, 65536.0, 0.0);\nconst vec4 SCALE_FACTOR_INV = vec4(1.0, 0.00390625, 0.0000152587890625, 0.0); // 1, 1/256, 1/65536\nfloat decode32(vec4 texel) {\n  __DECODE32_ENDIANNESS__;\n  texel *= 255.0;\n  vec2 gte128;\n  gte128.x = texel.b >= 128.0 ? 1.0 : 0.0;\n  gte128.y = texel.a >= 128.0 ? 1.0 : 0.0;\n  float exponent = 2.0 * texel.a - 127.0 + dot(gte128, MAGIC_VEC);\n  float res = exp2(_round(exponent));\n  texel.b = texel.b - 128.0 * gte128.x;\n  res = dot(texel, SCALE_FACTOR) * exp2(_round(exponent-23.0)) + res;\n  res *= gte128.y * -2.0 + 1.0;\n  return res;\n}\n\nfloat decode16(vec4 texel, int index) {\n  int channel = integerMod(index, 2);\n  if (channel == 0) return texel.r * 255.0 + texel.g * 65280.0;\n  if (channel == 1) return texel.b * 255.0 + texel.a * 65280.0;\n  return 0.0;\n}\n\nfloat decode8(vec4 texel, int index) {\n  int channel = integerMod(index, 4);\n  if (channel == 0) return texel.r * 255.0;\n  if (channel == 1) return texel.g * 255.0;\n  if (channel == 2) return texel.b * 255.0;\n  if (channel == 3) return texel.a * 255.0;\n  return 0.0;\n}\n\nvec4 legacyEncode32(float f) {\n  float F = abs(f);\n  float sign = f < 0.0 ? 1.0 : 0.0;\n  float exponent = floor(log2(F));\n  float mantissa = (exp2(-exponent) * F);\n  // exponent += floor(log2(mantissa));\n  vec4 texel = vec4(F * exp2(23.0-exponent)) * SCALE_FACTOR_INV;\n  texel.rg = integerMod(texel.rg, 256.0);\n  texel.b = integerMod(texel.b, 128.0);\n  texel.a = exponent*0.5 + 63.5;\n  texel.ba += vec2(integerMod(exponent+127.0, 2.0), sign) * 128.0;\n  texel = floor(texel);\n  texel *= 0.003921569; // 1/255\n  __ENCODE32_ENDIANNESS__;\n  return texel;\n}\n\n// https://github.com/gpujs/gpu.js/wiki/Encoder-details\nvec4 encode32(float value) {\n  if (value == 0.0) return vec4(0, 0, 0, 0);\n\n  float exponent;\n  float mantissa;\n  vec4  result;\n  float sgn;\n\n  sgn = step(0.0, -value);\n  value = abs(value);\n\n  exponent = floor(log2(value));\n\n  mantissa = value*pow(2.0, -exponent)-1.0;\n  exponent = exponent+127.0;\n  result   = vec4(0,0,0,0);\n\n  result.a = floor(exponent/2.0);\n  exponent = exponent - result.a*2.0;\n  result.a = result.a + 128.0*sgn;\n\n  result.b = floor(mantissa * 128.0);\n  mantissa = mantissa - result.b / 128.0;\n  result.b = result.b + exponent*128.0;\n\n  result.g = floor(mantissa*32768.0);\n  mantissa = mantissa - result.g/32768.0;\n\n  result.r = floor(mantissa*8388608.0);\n  return result/255.0;\n}\n// Dragons end here\n\nint index;\nivec3 threadId;\n\nivec3 indexTo3D(int idx, ivec3 texDim) {\n  int z = int(idx / (texDim.x * texDim.y));\n  idx -= z * int(texDim.x * texDim.y);\n  int y = int(idx / texDim.x);\n  int x = int(integerMod(idx, texDim.x));\n  return ivec3(x, y, z);\n}\n\nfloat get32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize));\n  return decode32(texel);\n}\n\nfloat get16(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x * 2;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize.x * 2, texSize.y));\n  return decode16(texel, index);\n}\n\nfloat get8(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x * 4;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize.x * 4, texSize.y));\n  return decode8(texel, index);\n}\n\nfloat getMemoryOptimized32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int channel = integerMod(index, 4);\n  index = index / 4;\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize));\n  if (channel == 0) return texel.r;\n  if (channel == 1) return texel.g;\n  if (channel == 2) return texel.b;\n  if (channel == 3) return texel.a;\n  return 0.0;\n}\n\nvec4 getImage2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  return texture2D(tex, st / vec2(texSize));\n}\n\nfloat getFloatFromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return result[0];\n}\n\nvec2 getVec2FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return vec2(result[0], result[1]);\n}\n\nvec2 getMemoryOptimizedVec2(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + (texDim.x * (y + (texDim.y * z)));\n  int channel = integerMod(index, 2);\n  index = index / 2;\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize));\n  if (channel == 0) return vec2(texel.r, texel.g);\n  if (channel == 1) return vec2(texel.b, texel.a);\n  return vec2(0.0, 0.0);\n}\n\nvec3 getVec3FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return vec3(result[0], result[1], result[2]);\n}\n\nvec3 getMemoryOptimizedVec3(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int fieldIndex = 3 * (x + texDim.x * (y + texDim.y * z));\n  int vectorIndex = fieldIndex / 4;\n  int vectorOffset = fieldIndex - vectorIndex * 4;\n  int readY = vectorIndex / texSize.x;\n  int readX = vectorIndex - readY * texSize.x;\n  vec4 tex1 = texture2D(tex, (vec2(readX, readY) + 0.5) / vec2(texSize));\n  \n  if (vectorOffset == 0) {\n    return tex1.xyz;\n  } else if (vectorOffset == 1) {\n    return tex1.yzw;\n  } else {\n    readX++;\n    if (readX >= texSize.x) {\n      readX = 0;\n      readY++;\n    }\n    vec4 tex2 = texture2D(tex, vec2(readX, readY) / vec2(texSize));\n    if (vectorOffset == 2) {\n      return vec3(tex1.z, tex1.w, tex2.x);\n    } else {\n      return vec3(tex1.w, tex2.x, tex2.y);\n    }\n  }\n}\n\nvec4 getVec4FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  return getImage2D(tex, texSize, texDim, z, y, x);\n}\n\nvec4 getMemoryOptimizedVec4(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int channel = integerMod(index, 2);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize));\n  return vec4(texel.r, texel.g, texel.b, texel.a);\n}\n\nvec4 actualColor;\nvoid color(float r, float g, float b, float a) {\n  actualColor = vec4(r,g,b,a);\n}\n\nvoid color(float r, float g, float b) {\n  color(r,g,b,1.0);\n}\n\nvoid color(sampler2D image) {\n  actualColor = texture2D(image, vTexCoord);\n}\n\nfloat modulo(float number, float divisor) {\n  if (number < 0.0) {\n    number = abs(number);\n    if (divisor < 0.0) {\n      divisor = abs(divisor);\n    }\n    return -mod(number, divisor);\n  }\n  if (divisor < 0.0) {\n    divisor = abs(divisor);\n  }\n  return mod(number, divisor);\n}\n\n__INJECTED_NATIVE__;\n__MAIN_CONSTANTS__;\n__MAIN_ARGUMENTS__;\n__KERNEL__;\n\nvoid main(void) {\n  index = int(vTexCoord.s * float(uTexSize.x)) + int(vTexCoord.t * float(uTexSize.y)) * uTexSize.x;\n  __MAIN_RESULT__;\n}`;\n\nmodule.exports = {\n  fragmentShader\n};\n},{}],38:[function(require,module,exports){\nconst { utils } = require('../../utils');\nconst { FunctionNode } = require('../function-node');\n\nclass WebGLFunctionNode extends FunctionNode {\n  constructor(source, settings) {\n    super(source, settings);\n    if (settings && settings.hasOwnProperty('fixIntegerDivisionAccuracy')) {\n      this.fixIntegerDivisionAccuracy = settings.fixIntegerDivisionAccuracy;\n    }\n  }\n\n  astConditionalExpression(ast, retArr) {\n    if (ast.type !== 'ConditionalExpression') {\n      throw this.astErrorOutput('Not a conditional expression', ast);\n    }\n    const consequentType = this.getType(ast.consequent);\n    const alternateType = this.getType(ast.alternate);\n    if (consequentType === null && alternateType === null) {\n      retArr.push('if (');\n      this.astGeneric(ast.test, retArr);\n      retArr.push(') {');\n      this.astGeneric(ast.consequent, retArr);\n      retArr.push(';');\n      retArr.push('} else {');\n      this.astGeneric(ast.alternate, retArr);\n      retArr.push(';');\n      retArr.push('}');\n      return retArr;\n    }\n    retArr.push('(');\n    this.astGeneric(ast.test, retArr);\n    retArr.push('?');\n    this.astGeneric(ast.consequent, retArr);\n    retArr.push(':');\n    this.astGeneric(ast.alternate, retArr);\n    retArr.push(')');\n    return retArr;\n  }\n\n  astFunction(ast, retArr) {\n    if (this.isRootKernel) {\n      retArr.push('void');\n    } else {\n      if (!this.returnType) {\n        const lastReturn = this.findLastReturn();\n        if (lastReturn) {\n          this.returnType = this.getType(ast.body);\n          if (this.returnType === 'LiteralInteger') {\n            this.returnType = 'Number';\n          }\n        }\n      }\n\n      const { returnType } = this;\n      if (!returnType) {\n        retArr.push('void');\n      } else {\n        const type = typeMap[returnType];\n        if (!type) {\n          throw new Error(`unknown type ${returnType}`);\n        }\n        retArr.push(type);\n      }\n    }\n    retArr.push(' ');\n    retArr.push(this.name);\n    retArr.push('(');\n\n    if (!this.isRootKernel) {\n      for (let i = 0; i < this.argumentNames.length; ++i) {\n        const argumentName = this.argumentNames[i];\n\n        if (i > 0) {\n          retArr.push(', ');\n        }\n        let argumentType = this.argumentTypes[this.argumentNames.indexOf(argumentName)];\n        if (!argumentType) {\n          throw this.astErrorOutput(`Unknown argument ${argumentName} type`, ast);\n        }\n        if (argumentType === 'LiteralInteger') {\n          this.argumentTypes[i] = argumentType = 'Number';\n        }\n        const type = typeMap[argumentType];\n        if (!type) {\n          throw this.astErrorOutput('Unexpected expression', ast);\n        }\n        const name = utils.sanitizeName(argumentName);\n        if (type === 'sampler2D' || type === 'sampler2DArray') {\n          retArr.push(`${type} user_${name},ivec2 user_${name}Size,ivec3 user_${name}Dim`);\n        } else {\n          retArr.push(`${type} user_${name}`);\n        }\n      }\n    }\n\n    retArr.push(') {\\n');\n\n    for (let i = 0; i < ast.body.body.length; ++i) {\n      this.astGeneric(ast.body.body[i], retArr);\n      retArr.push('\\n');\n    }\n\n    retArr.push('}\\n');\n    return retArr;\n  }\n\n  astReturnStatement(ast, retArr) {\n    if (!ast.argument) throw this.astErrorOutput('Unexpected return statement', ast);\n    this.pushState('skip-literal-correction');\n    const type = this.getType(ast.argument);\n    this.popState('skip-literal-correction');\n\n    const result = [];\n\n    if (!this.returnType) {\n      if (type === 'LiteralInteger' || type === 'Integer') {\n        this.returnType = 'Number';\n      } else {\n        this.returnType = type;\n      }\n    }\n\n    switch (this.returnType) {\n      case 'LiteralInteger':\n      case 'Number':\n      case 'Float':\n        switch (type) {\n          case 'Integer':\n            result.push('float(');\n            this.astGeneric(ast.argument, result);\n            result.push(')');\n            break;\n          case 'LiteralInteger':\n            this.castLiteralToFloat(ast.argument, result);\n\n            if (this.getType(ast) === 'Integer') {\n              result.unshift('float(');\n              result.push(')');\n            }\n            break;\n          default:\n            this.astGeneric(ast.argument, result);\n        }\n        break;\n      case 'Integer':\n        switch (type) {\n          case 'Float':\n          case 'Number':\n            this.castValueToInteger(ast.argument, result);\n            break;\n          case 'LiteralInteger':\n            this.castLiteralToInteger(ast.argument, result);\n            break;\n          default:\n            this.astGeneric(ast.argument, result);\n        }\n        break;\n      case 'Array(4)':\n      case 'Array(3)':\n      case 'Array(2)':\n      case 'Matrix(2)':\n      case 'Matrix(3)':\n      case 'Matrix(4)':\n      case 'Input':\n        this.astGeneric(ast.argument, result);\n        break;\n      default:\n        throw this.astErrorOutput(`unhandled return type ${this.returnType}`, ast);\n    }\n\n    if (this.isRootKernel) {\n      retArr.push(`kernelResult = ${ result.join('') };`);\n      retArr.push('return;');\n    } else if (this.isSubKernel) {\n      retArr.push(`subKernelResult_${ this.name } = ${ result.join('') };`);\n      retArr.push(`return subKernelResult_${ this.name };`);\n    } else {\n      retArr.push(`return ${ result.join('') };`);\n    }\n    return retArr;\n  }\n\n  astLiteral(ast, retArr) {\n    if (isNaN(ast.value)) {\n      throw this.astErrorOutput(\n        'Non-numeric literal not supported : ' + ast.value,\n        ast\n      );\n    }\n\n    const key = this.astKey(ast);\n    if (Number.isInteger(ast.value)) {\n      if (this.isState('casting-to-integer') || this.isState('building-integer')) {\n        this.literalTypes[key] = 'Integer';\n        retArr.push(`${ast.value}`);\n      } else if (this.isState('casting-to-float') || this.isState('building-float')) {\n        this.literalTypes[key] = 'Number';\n        retArr.push(`${ast.value}.0`);\n      } else {\n        this.literalTypes[key] = 'Number';\n        retArr.push(`${ast.value}.0`);\n      }\n    } else if (this.isState('casting-to-integer') || this.isState('building-integer')) {\n      this.literalTypes[key] = 'Integer';\n      retArr.push(Math.round(ast.value));\n    } else {\n      this.literalTypes[key] = 'Number';\n      retArr.push(`${ast.value}`);\n    }\n    return retArr;\n  }\n\n  astBinaryExpression(ast, retArr) {\n    if (this.checkAndUpconvertOperator(ast, retArr)) {\n      return retArr;\n    }\n\n    if (this.fixIntegerDivisionAccuracy && ast.operator === '/') {\n      retArr.push('divWithIntCheck(');\n      this.pushState('building-float');\n      switch (this.getType(ast.left)) {\n        case 'Integer':\n          this.castValueToFloat(ast.left, retArr);\n          break;\n        case 'LiteralInteger':\n          this.castLiteralToFloat(ast.left, retArr);\n          break;\n        default:\n          this.astGeneric(ast.left, retArr);\n      }\n      retArr.push(', ');\n      switch (this.getType(ast.right)) {\n        case 'Integer':\n          this.castValueToFloat(ast.right, retArr);\n          break;\n        case 'LiteralInteger':\n          this.castLiteralToFloat(ast.right, retArr);\n          break;\n        default:\n          this.astGeneric(ast.right, retArr);\n      }\n      this.popState('building-float');\n      retArr.push(')');\n      return retArr;\n    }\n\n    retArr.push('(');\n    const leftType = this.getType(ast.left) || 'Number';\n    const rightType = this.getType(ast.right) || 'Number';\n    if (!leftType || !rightType) {\n      throw this.astErrorOutput(`Unhandled binary expression`, ast);\n    }\n    const key = leftType + ' & ' + rightType;\n    switch (key) {\n      case 'Integer & Integer':\n        this.pushState('building-integer');\n        this.astGeneric(ast.left, retArr);\n        retArr.push(operatorMap[ast.operator] || ast.operator);\n        this.astGeneric(ast.right, retArr);\n        this.popState('building-integer');\n        break;\n      case 'Number & Float':\n      case 'Float & Number':\n      case 'Float & Float':\n      case 'Number & Number':\n        this.pushState('building-float');\n        this.astGeneric(ast.left, retArr);\n        retArr.push(operatorMap[ast.operator] || ast.operator);\n        this.astGeneric(ast.right, retArr);\n        this.popState('building-float');\n        break;\n      case 'LiteralInteger & LiteralInteger':\n        if (this.isState('casting-to-integer') || this.isState('building-integer')) {\n          this.pushState('building-integer');\n          this.astGeneric(ast.left, retArr);\n          retArr.push(operatorMap[ast.operator] || ast.operator);\n          this.astGeneric(ast.right, retArr);\n          this.popState('building-integer');\n        } else {\n          this.pushState('building-float');\n          this.castLiteralToFloat(ast.left, retArr);\n          retArr.push(operatorMap[ast.operator] || ast.operator);\n          this.castLiteralToFloat(ast.right, retArr);\n          this.popState('building-float');\n        }\n        break;\n\n      case 'Integer & Float':\n      case 'Integer & Number':\n        if (ast.operator === '>' || ast.operator === '<' && ast.right.type === 'Literal') {\n          if (!Number.isInteger(ast.right.value)) {\n            this.pushState('building-float');\n            this.castValueToFloat(ast.left, retArr);\n            retArr.push(operatorMap[ast.operator] || ast.operator);\n            this.astGeneric(ast.right, retArr);\n            this.popState('building-float');\n            break;\n          }\n        }\n        this.pushState('building-integer');\n        this.astGeneric(ast.left, retArr);\n        retArr.push(operatorMap[ast.operator] || ast.operator);\n        this.pushState('casting-to-integer');\n        if (ast.right.type === 'Literal') {\n          const literalResult = [];\n          this.astGeneric(ast.right, literalResult);\n          const literalType = this.getType(ast.right);\n          if (literalType === 'Integer') {\n            retArr.push(literalResult.join(''));\n          } else {\n            throw this.astErrorOutput(`Unhandled binary expression with literal`, ast);\n          }\n        } else {\n          retArr.push('int(');\n          this.astGeneric(ast.right, retArr);\n          retArr.push(')');\n        }\n        this.popState('casting-to-integer');\n        this.popState('building-integer');\n        break;\n      case 'Integer & LiteralInteger':\n        this.pushState('building-integer');\n        this.astGeneric(ast.left, retArr);\n        retArr.push(operatorMap[ast.operator] || ast.operator);\n        this.castLiteralToInteger(ast.right, retArr);\n        this.popState('building-integer');\n        break;\n\n      case 'Number & Integer':\n        this.pushState('building-float');\n        this.astGeneric(ast.left, retArr);\n        retArr.push(operatorMap[ast.operator] || ast.operator);\n        this.castValueToFloat(ast.right, retArr);\n        this.popState('building-float');\n        break;\n      case 'Float & LiteralInteger':\n      case 'Number & LiteralInteger':\n        this.pushState('building-float');\n        this.astGeneric(ast.left, retArr);\n        retArr.push(operatorMap[ast.operator] || ast.operator);\n        this.castLiteralToFloat(ast.right, retArr);\n        this.popState('building-float');\n        break;\n      case 'LiteralInteger & Float':\n      case 'LiteralInteger & Number':\n        if (this.isState('casting-to-integer')) {\n          this.pushState('building-integer');\n          this.castLiteralToInteger(ast.left, retArr);\n          retArr.push(operatorMap[ast.operator] || ast.operator);\n          this.castValueToInteger(ast.right, retArr);\n          this.popState('building-integer');\n        } else {\n          this.pushState('building-float');\n          this.astGeneric(ast.left, retArr);\n          retArr.push(operatorMap[ast.operator] || ast.operator);\n          this.pushState('casting-to-float');\n          this.astGeneric(ast.right, retArr);\n          this.popState('casting-to-float');\n          this.popState('building-float');\n        }\n        break;\n      case 'LiteralInteger & Integer':\n        this.pushState('building-integer');\n        this.castLiteralToInteger(ast.left, retArr);\n        retArr.push(operatorMap[ast.operator] || ast.operator);\n        this.astGeneric(ast.right, retArr);\n        this.popState('building-integer');\n        break;\n\n      case 'Boolean & Boolean':\n        this.pushState('building-boolean');\n        this.astGeneric(ast.left, retArr);\n        retArr.push(operatorMap[ast.operator] || ast.operator);\n        this.astGeneric(ast.right, retArr);\n        this.popState('building-boolean');\n        break;\n\n      case 'Float & Integer':\n        this.pushState('building-float');\n        this.astGeneric(ast.left, retArr);\n        retArr.push(operatorMap[ast.operator] || ast.operator);\n        this.castValueToFloat(ast.right, retArr);\n        this.popState('building-float');\n        break;\n\n      default:\n        throw this.astErrorOutput(`Unhandled binary expression between ${key}`, ast);\n    }\n    retArr.push(')');\n\n    return retArr;\n  }\n\n  checkAndUpconvertOperator(ast, retArr) {\n    const bitwiseResult = this.checkAndUpconvertBitwiseOperators(ast, retArr);\n    if (bitwiseResult) {\n      return bitwiseResult;\n    }\n    const upconvertableOperators = {\n      '%': this.fixIntegerDivisionAccuracy ? 'integerCorrectionModulo' : 'modulo',\n      '**': 'pow',\n    };\n    const foundOperator = upconvertableOperators[ast.operator];\n    if (!foundOperator) return null;\n    retArr.push(foundOperator);\n    retArr.push('(');\n    switch (this.getType(ast.left)) {\n      case 'Integer':\n        this.castValueToFloat(ast.left, retArr);\n        break;\n      case 'LiteralInteger':\n        this.castLiteralToFloat(ast.left, retArr);\n        break;\n      default:\n        this.astGeneric(ast.left, retArr);\n    }\n    retArr.push(',');\n    switch (this.getType(ast.right)) {\n      case 'Integer':\n        this.castValueToFloat(ast.right, retArr);\n        break;\n      case 'LiteralInteger':\n        this.castLiteralToFloat(ast.right, retArr);\n        break;\n      default:\n        this.astGeneric(ast.right, retArr);\n    }\n    retArr.push(')');\n    return retArr;\n  }\n\n  checkAndUpconvertBitwiseOperators(ast, retArr) {\n    const upconvertableOperators = {\n      '&': 'bitwiseAnd',\n      '|': 'bitwiseOr',\n      '^': 'bitwiseXOR',\n      '<<': 'bitwiseZeroFillLeftShift',\n      '>>': 'bitwiseSignedRightShift',\n      '>>>': 'bitwiseZeroFillRightShift',\n    };\n    const foundOperator = upconvertableOperators[ast.operator];\n    if (!foundOperator) return null;\n    retArr.push(foundOperator);\n    retArr.push('(');\n    const leftType = this.getType(ast.left);\n    switch (leftType) {\n      case 'Number':\n      case 'Float':\n        this.castValueToInteger(ast.left, retArr);\n        break;\n      case 'LiteralInteger':\n        this.castLiteralToInteger(ast.left, retArr);\n        break;\n      default:\n        this.astGeneric(ast.left, retArr);\n    }\n    retArr.push(',');\n    const rightType = this.getType(ast.right);\n    switch (rightType) {\n      case 'Number':\n      case 'Float':\n        this.castValueToInteger(ast.right, retArr);\n        break;\n      case 'LiteralInteger':\n        this.castLiteralToInteger(ast.right, retArr);\n        break;\n      default:\n        this.astGeneric(ast.right, retArr);\n    }\n    retArr.push(')');\n    return retArr;\n  }\n\n  checkAndUpconvertBitwiseUnary(ast, retArr) {\n    const upconvertableOperators = {\n      '~': 'bitwiseNot',\n    };\n    const foundOperator = upconvertableOperators[ast.operator];\n    if (!foundOperator) return null;\n    retArr.push(foundOperator);\n    retArr.push('(');\n    switch (this.getType(ast.argument)) {\n      case 'Number':\n      case 'Float':\n        this.castValueToInteger(ast.argument, retArr);\n        break;\n      case 'LiteralInteger':\n        this.castLiteralToInteger(ast.argument, retArr);\n        break;\n      default:\n        this.astGeneric(ast.argument, retArr);\n    }\n    retArr.push(')');\n    return retArr;\n  }\n\n  castLiteralToInteger(ast, retArr) {\n    this.pushState('casting-to-integer');\n    this.astGeneric(ast, retArr);\n    this.popState('casting-to-integer');\n    return retArr;\n  }\n\n  castLiteralToFloat(ast, retArr) {\n    this.pushState('casting-to-float');\n    this.astGeneric(ast, retArr);\n    this.popState('casting-to-float');\n    return retArr;\n  }\n\n  castValueToInteger(ast, retArr) {\n    this.pushState('casting-to-integer');\n    retArr.push('int(');\n    this.astGeneric(ast, retArr);\n    retArr.push(')');\n    this.popState('casting-to-integer');\n    return retArr;\n  }\n\n  castValueToFloat(ast, retArr) {\n    this.pushState('casting-to-float');\n    retArr.push('float(');\n    this.astGeneric(ast, retArr);\n    retArr.push(')');\n    this.popState('casting-to-float');\n    return retArr;\n  }\n\n  astIdentifierExpression(idtNode, retArr) {\n    if (idtNode.type !== 'Identifier') {\n      throw this.astErrorOutput('IdentifierExpression - not an Identifier', idtNode);\n    }\n\n    const type = this.getType(idtNode);\n\n    const name = utils.sanitizeName(idtNode.name);\n    if (idtNode.name === 'Infinity') {\n      retArr.push('3.402823466e+38');\n    } else if (type === 'Boolean') {\n      if (this.argumentNames.indexOf(name) > -1) {\n        retArr.push(`bool(user_${name})`);\n      } else {\n        retArr.push(`user_${name}`);\n      }\n    } else {\n      retArr.push(`user_${name}`);\n    }\n\n    return retArr;\n  }\n\n  astForStatement(forNode, retArr) {\n    if (forNode.type !== 'ForStatement') {\n      throw this.astErrorOutput('Invalid for statement', forNode);\n    }\n\n    const initArr = [];\n    const testArr = [];\n    const updateArr = [];\n    const bodyArr = [];\n    let isSafe = null;\n\n    if (forNode.init) {\n      const { declarations } = forNode.init;\n      if (declarations.length > 1) {\n        isSafe = false;\n      }\n      this.astGeneric(forNode.init, initArr);\n      for (let i = 0; i < declarations.length; i++) {\n        if (declarations[i].init && declarations[i].init.type !== 'Literal') {\n          isSafe = false;\n        }\n      }\n    } else {\n      isSafe = false;\n    }\n\n    if (forNode.test) {\n      this.astGeneric(forNode.test, testArr);\n    } else {\n      isSafe = false;\n    }\n\n    if (forNode.update) {\n      this.astGeneric(forNode.update, updateArr);\n    } else {\n      isSafe = false;\n    }\n\n    if (forNode.body) {\n      this.pushState('loop-body');\n      this.astGeneric(forNode.body, bodyArr);\n      this.popState('loop-body');\n    }\n\n    if (isSafe === null) {\n      isSafe = this.isSafe(forNode.init) && this.isSafe(forNode.test);\n    }\n\n    if (isSafe) {\n      const initString = initArr.join('');\n      const initNeedsSemiColon = initString[initString.length - 1] !== ';';\n      retArr.push(`for (${initString}${initNeedsSemiColon ? ';' : ''}${testArr.join('')};${updateArr.join('')}){\\n`);\n      retArr.push(bodyArr.join(''));\n      retArr.push('}\\n');\n    } else {\n      const iVariableName = this.getInternalVariableName('safeI');\n      if (initArr.length > 0) {\n        retArr.push(initArr.join(''), '\\n');\n      }\n      retArr.push(`for (int ${iVariableName}=0;${iVariableName}<LOOP_MAX;${iVariableName}++){\\n`);\n      if (testArr.length > 0) {\n        retArr.push(`if (!${testArr.join('')}) break;\\n`);\n      }\n      retArr.push(bodyArr.join(''));\n      retArr.push(`\\n${updateArr.join('')};`);\n      retArr.push('}\\n');\n    }\n    return retArr;\n  }\n\n  astWhileStatement(whileNode, retArr) {\n    if (whileNode.type !== 'WhileStatement') {\n      throw this.astErrorOutput('Invalid while statement', whileNode);\n    }\n\n    const iVariableName = this.getInternalVariableName('safeI');\n    retArr.push(`for (int ${iVariableName}=0;${iVariableName}<LOOP_MAX;${iVariableName}++){\\n`);\n    retArr.push('if (!');\n    this.astGeneric(whileNode.test, retArr);\n    retArr.push(') break;\\n');\n    this.astGeneric(whileNode.body, retArr);\n    retArr.push('}\\n');\n\n    return retArr;\n  }\n\n  astDoWhileStatement(doWhileNode, retArr) {\n    if (doWhileNode.type !== 'DoWhileStatement') {\n      throw this.astErrorOutput('Invalid while statement', doWhileNode);\n    }\n\n    const iVariableName = this.getInternalVariableName('safeI');\n    retArr.push(`for (int ${iVariableName}=0;${iVariableName}<LOOP_MAX;${iVariableName}++){\\n`);\n    this.astGeneric(doWhileNode.body, retArr);\n    retArr.push('if (!');\n    this.astGeneric(doWhileNode.test, retArr);\n    retArr.push(') break;\\n');\n    retArr.push('}\\n');\n\n    return retArr;\n  }\n\n\n  astAssignmentExpression(assNode, retArr) {\n    if (assNode.operator === '%=') {\n      this.astGeneric(assNode.left, retArr);\n      retArr.push('=');\n      retArr.push('mod(');\n      this.astGeneric(assNode.left, retArr);\n      retArr.push(',');\n      this.astGeneric(assNode.right, retArr);\n      retArr.push(')');\n    } else if (assNode.operator === '**=') {\n      this.astGeneric(assNode.left, retArr);\n      retArr.push('=');\n      retArr.push('pow(');\n      this.astGeneric(assNode.left, retArr);\n      retArr.push(',');\n      this.astGeneric(assNode.right, retArr);\n      retArr.push(')');\n    } else {\n      const leftType = this.getType(assNode.left);\n      const rightType = this.getType(assNode.right);\n      this.astGeneric(assNode.left, retArr);\n      retArr.push(assNode.operator);\n      if (leftType !== 'Integer' && rightType === 'Integer') {\n        retArr.push('float(');\n        this.astGeneric(assNode.right, retArr);\n        retArr.push(')');\n      } else {\n        this.astGeneric(assNode.right, retArr);\n      }\n      return retArr;\n    }\n  }\n\n  astBlockStatement(bNode, retArr) {\n    if (this.isState('loop-body')) {\n      this.pushState('block-body'); \n      for (let i = 0; i < bNode.body.length; i++) {\n        this.astGeneric(bNode.body[i], retArr);\n      }\n      this.popState('block-body');\n    } else {\n      retArr.push('{\\n');\n      for (let i = 0; i < bNode.body.length; i++) {\n        this.astGeneric(bNode.body[i], retArr);\n      }\n      retArr.push('}\\n');\n    }\n    return retArr;\n  }\n\n  astVariableDeclaration(varDecNode, retArr) {\n    const declarations = varDecNode.declarations;\n    if (!declarations || !declarations[0] || !declarations[0].init) {\n      throw this.astErrorOutput('Unexpected expression', varDecNode);\n    }\n    const result = [];\n    let lastType = null;\n    const declarationSets = [];\n    let declarationSet = [];\n    for (let i = 0; i < declarations.length; i++) {\n      const declaration = declarations[i];\n      const init = declaration.init;\n      const info = this.getDeclaration(declaration.id);\n      const actualType = this.getType(declaration.init);\n      let type = actualType;\n      if (type === 'LiteralInteger') {\n        if (info.suggestedType === 'Integer') {\n          type = 'Integer';\n        } else {\n          type = 'Number';\n        }\n      }\n      const markupType = typeMap[type];\n      if (!markupType) {\n        throw this.astErrorOutput(`Markup type ${ type } not handled`, varDecNode);\n      }\n      const declarationResult = [];\n      if (actualType === 'Integer' && type === 'Integer') {\n        info.valueType = 'Number';\n        if (i === 0 || lastType === null) {\n          declarationResult.push('float ');\n        } else if (type !== lastType) {\n          throw new Error('Unhandled declaration');\n        }\n        lastType = type;\n        declarationResult.push(`user_${utils.sanitizeName(declaration.id.name)}=`);\n        declarationResult.push('float(');\n        this.astGeneric(init, declarationResult);\n        declarationResult.push(')');\n      } else {\n        info.valueType = type;\n        if (i === 0 || lastType === null) {\n          declarationResult.push(`${markupType} `);\n        } else if (type !== lastType) {\n          declarationSets.push(declarationSet.join(','));\n          declarationSet = [];\n          declarationResult.push(`${markupType} `);\n        }\n        lastType = type;\n        declarationResult.push(`user_${utils.sanitizeName(declaration.id.name)}=`);\n        if (actualType === 'Number' && type === 'Integer') {\n          if (init.left && init.left.type === 'Literal') {\n            this.astGeneric(init, declarationResult);\n          } else {\n            declarationResult.push('int(');\n            this.astGeneric(init, declarationResult);\n            declarationResult.push(')');\n          }\n        } else if (actualType === 'LiteralInteger' && type === 'Integer') {\n          this.castLiteralToInteger(init, declarationResult);\n        } else {\n          this.astGeneric(init, declarationResult);\n        }\n      }\n      declarationSet.push(declarationResult.join(''));\n    }\n\n    if (declarationSet.length > 0) {\n      declarationSets.push(declarationSet.join(','));\n    }\n\n    result.push(declarationSets.join(';'));\n\n    retArr.push(result.join(''));\n    retArr.push(';');\n    return retArr;\n  }\n\n  astIfStatement(ifNode, retArr) {\n    retArr.push('if (');\n    this.astGeneric(ifNode.test, retArr);\n    retArr.push(')');\n    if (ifNode.consequent.type === 'BlockStatement') {\n      this.astGeneric(ifNode.consequent, retArr);\n    } else {\n      retArr.push(' {\\n');\n      this.astGeneric(ifNode.consequent, retArr);\n      retArr.push('\\n}\\n');\n    }\n\n    if (ifNode.alternate) {\n      retArr.push('else ');\n      if (ifNode.alternate.type === 'BlockStatement' || ifNode.alternate.type === 'IfStatement') {\n        this.astGeneric(ifNode.alternate, retArr);\n      } else {\n        retArr.push(' {\\n');\n        this.astGeneric(ifNode.alternate, retArr);\n        retArr.push('\\n}\\n');\n      }\n    }\n    return retArr;\n  }\n\n  astSwitchStatement(ast, retArr) {\n    if (ast.type !== 'SwitchStatement') {\n      throw this.astErrorOutput('Invalid switch statement', ast);\n    }\n    const { discriminant, cases } = ast;\n    const type = this.getType(discriminant);\n    const varName = `switchDiscriminant${this.astKey(ast, '_')}`;\n    switch (type) {\n      case 'Float':\n      case 'Number':\n        retArr.push(`float ${varName} = `);\n        this.astGeneric(discriminant, retArr);\n        retArr.push(';\\n');\n        break;\n      case 'Integer':\n        retArr.push(`int ${varName} = `);\n        this.astGeneric(discriminant, retArr);\n        retArr.push(';\\n');\n        break;\n    }\n    if (cases.length === 1 && !cases[0].test) {\n      this.astGeneric(cases[0].consequent, retArr);\n      return retArr;\n    }\n\n    let fallingThrough = false;\n    let defaultResult = [];\n    let movingDefaultToEnd = false;\n    let pastFirstIf = false;\n    for (let i = 0; i < cases.length; i++) {\n      if (!cases[i].test) {\n        if (cases.length > i + 1) {\n          movingDefaultToEnd = true;\n          this.astGeneric(cases[i].consequent, defaultResult);\n          continue;\n        } else {\n          retArr.push(' else {\\n');\n        }\n      } else {\n        if (i === 0 || !pastFirstIf) {\n          pastFirstIf = true;\n          retArr.push(`if (${varName} == `);\n        } else {\n          if (fallingThrough) {\n            retArr.push(`${varName} == `);\n            fallingThrough = false;\n          } else {\n            retArr.push(` else if (${varName} == `);\n          }\n        }\n        if (type === 'Integer') {\n          const testType = this.getType(cases[i].test);\n          switch (testType) {\n            case 'Number':\n            case 'Float':\n              this.castValueToInteger(cases[i].test, retArr);\n              break;\n            case 'LiteralInteger':\n              this.castLiteralToInteger(cases[i].test, retArr);\n              break;\n          }\n        } else if (type === 'Float') {\n          const testType = this.getType(cases[i].test);\n          switch (testType) {\n            case 'LiteralInteger':\n              this.castLiteralToFloat(cases[i].test, retArr);\n              break;\n            case 'Integer':\n              this.castValueToFloat(cases[i].test, retArr);\n              break;\n          }\n        } else {\n          throw new Error('unhanlded');\n        }\n        if (!cases[i].consequent || cases[i].consequent.length === 0) {\n          fallingThrough = true;\n          retArr.push(' || ');\n          continue;\n        }\n        retArr.push(`) {\\n`);\n      }\n      this.astGeneric(cases[i].consequent, retArr);\n      retArr.push('\\n}');\n    }\n    if (movingDefaultToEnd) {\n      retArr.push(' else {');\n      retArr.push(defaultResult.join(''));\n      retArr.push('}');\n    }\n    return retArr;\n  }\n\n  astThisExpression(tNode, retArr) {\n    retArr.push('this');\n    return retArr;\n  }\n\n  astMemberExpression(mNode, retArr) {\n    const {\n      property,\n      name,\n      signature,\n      origin,\n      type,\n      xProperty,\n      yProperty,\n      zProperty\n    } = this.getMemberExpressionDetails(mNode);\n    switch (signature) {\n      case 'value.thread.value':\n      case 'this.thread.value':\n        if (name !== 'x' && name !== 'y' && name !== 'z') {\n          throw this.astErrorOutput('Unexpected expression, expected `this.thread.x`, `this.thread.y`, or `this.thread.z`', mNode);\n        }\n        retArr.push(`threadId.${name}`);\n        return retArr;\n      case 'this.output.value':\n        if (this.dynamicOutput) {\n          switch (name) {\n            case 'x':\n              if (this.isState('casting-to-float')) {\n                retArr.push('float(uOutputDim.x)');\n              } else {\n                retArr.push('uOutputDim.x');\n              }\n              break;\n            case 'y':\n              if (this.isState('casting-to-float')) {\n                retArr.push('float(uOutputDim.y)');\n              } else {\n                retArr.push('uOutputDim.y');\n              }\n              break;\n            case 'z':\n              if (this.isState('casting-to-float')) {\n                retArr.push('float(uOutputDim.z)');\n              } else {\n                retArr.push('uOutputDim.z');\n              }\n              break;\n            default:\n              throw this.astErrorOutput('Unexpected expression', mNode);\n          }\n        } else {\n          switch (name) {\n            case 'x':\n              if (this.isState('casting-to-integer')) {\n                retArr.push(this.output[0]);\n              } else {\n                retArr.push(this.output[0], '.0');\n              }\n              break;\n            case 'y':\n              if (this.isState('casting-to-integer')) {\n                retArr.push(this.output[1]);\n              } else {\n                retArr.push(this.output[1], '.0');\n              }\n              break;\n            case 'z':\n              if (this.isState('casting-to-integer')) {\n                retArr.push(this.output[2]);\n              } else {\n                retArr.push(this.output[2], '.0');\n              }\n              break;\n            default:\n              throw this.astErrorOutput('Unexpected expression', mNode);\n          }\n        }\n        return retArr;\n      case 'value':\n        throw this.astErrorOutput('Unexpected expression', mNode);\n      case 'value[]':\n      case 'value[][]':\n      case 'value[][][]':\n      case 'value[][][][]':\n      case 'value.value':\n        if (origin === 'Math') {\n          retArr.push(Math[name]);\n          return retArr;\n        }\n        const cleanName = utils.sanitizeName(name);\n        switch (property) {\n          case 'r':\n            retArr.push(`user_${ cleanName }.r`);\n            return retArr;\n          case 'g':\n            retArr.push(`user_${ cleanName }.g`);\n            return retArr;\n          case 'b':\n            retArr.push(`user_${ cleanName }.b`);\n            return retArr;\n          case 'a':\n            retArr.push(`user_${ cleanName }.a`);\n            return retArr;\n        }\n        break;\n      case 'this.constants.value':\n        if (typeof xProperty === 'undefined') {\n          switch (type) {\n            case 'Array(2)':\n            case 'Array(3)':\n            case 'Array(4)':\n              retArr.push(`constants_${ utils.sanitizeName(name) }`);\n              return retArr;\n          }\n        }\n        case 'this.constants.value[]':\n        case 'this.constants.value[][]':\n        case 'this.constants.value[][][]':\n        case 'this.constants.value[][][][]':\n          break;\n        case 'fn()[]':\n          this.astCallExpression(mNode.object, retArr);\n          retArr.push('[');\n          retArr.push(this.memberExpressionPropertyMarkup(property));\n          retArr.push(']');\n          return retArr;\n        case 'fn()[][]':\n          this.astCallExpression(mNode.object.object, retArr);\n          retArr.push('[');\n          retArr.push(this.memberExpressionPropertyMarkup(mNode.object.property));\n          retArr.push(']');\n          retArr.push('[');\n          retArr.push(this.memberExpressionPropertyMarkup(mNode.property));\n          retArr.push(']');\n          return retArr;\n        case '[][]':\n          this.astArrayExpression(mNode.object, retArr);\n          retArr.push('[');\n          retArr.push(this.memberExpressionPropertyMarkup(property));\n          retArr.push(']');\n          return retArr;\n        default:\n          throw this.astErrorOutput('Unexpected expression', mNode);\n    }\n\n    if (mNode.computed === false) {\n      switch (type) {\n        case 'Number':\n        case 'Integer':\n        case 'Float':\n        case 'Boolean':\n          retArr.push(`${origin}_${utils.sanitizeName(name)}`);\n          return retArr;\n      }\n    }\n\n    const markupName = `${origin}_${utils.sanitizeName(name)}`;\n\n    switch (type) {\n      case 'Array(2)':\n      case 'Array(3)':\n      case 'Array(4)':\n        this.astGeneric(mNode.object, retArr);\n        retArr.push('[');\n        retArr.push(this.memberExpressionPropertyMarkup(xProperty));\n        retArr.push(']');\n        break;\n      case 'HTMLImageArray':\n        retArr.push(`getImage3D(${ markupName }, ${ markupName }Size, ${ markupName }Dim, `);\n        this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n        retArr.push(')');\n        break;\n      case 'ArrayTexture(1)':\n        retArr.push(`getFloatFromSampler2D(${ markupName }, ${ markupName }Size, ${ markupName }Dim, `);\n        this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n        retArr.push(')');\n        break;\n      case 'Array1D(2)':\n      case 'Array2D(2)':\n      case 'Array3D(2)':\n        retArr.push(`getMemoryOptimizedVec2(${ markupName }, ${ markupName }Size, ${ markupName }Dim, `);\n        this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n        retArr.push(')');\n        break;\n      case 'ArrayTexture(2)':\n        retArr.push(`getVec2FromSampler2D(${ markupName }, ${ markupName }Size, ${ markupName }Dim, `);\n        this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n        retArr.push(')');\n        break;\n      case 'Array1D(3)':\n      case 'Array2D(3)':\n      case 'Array3D(3)':\n        retArr.push(`getMemoryOptimizedVec3(${ markupName }, ${ markupName }Size, ${ markupName }Dim, `);\n        this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n        retArr.push(')');\n        break;\n      case 'ArrayTexture(3)':\n        retArr.push(`getVec3FromSampler2D(${ markupName }, ${ markupName }Size, ${ markupName }Dim, `);\n        this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n        retArr.push(')');\n        break;\n      case 'Array1D(4)':\n      case 'Array2D(4)':\n      case 'Array3D(4)':\n        retArr.push(`getMemoryOptimizedVec4(${ markupName }, ${ markupName }Size, ${ markupName }Dim, `);\n        this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n        retArr.push(')');\n        break;\n      case 'ArrayTexture(4)':\n      case 'HTMLCanvas':\n      case 'OffscreenCanvas':\n      case 'HTMLImage':\n      case 'ImageBitmap':\n      case 'ImageData':\n      case 'HTMLVideo':\n        retArr.push(`getVec4FromSampler2D(${ markupName }, ${ markupName }Size, ${ markupName }Dim, `);\n        this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n        retArr.push(')');\n        break;\n      case 'NumberTexture':\n      case 'Array':\n      case 'Array2D':\n      case 'Array3D':\n      case 'Array4D':\n      case 'Input':\n      case 'Number':\n      case 'Float':\n      case 'Integer':\n        if (this.precision === 'single') {\n          retArr.push(`getMemoryOptimized32(${markupName}, ${markupName}Size, ${markupName}Dim, `);\n          this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n          retArr.push(')');\n        } else {\n          const bitRatio = (origin === 'user' ?\n            this.lookupFunctionArgumentBitRatio(this.name, name) :\n            this.constantBitRatios[name]\n          );\n          switch (bitRatio) {\n            case 1:\n              retArr.push(`get8(${markupName}, ${markupName}Size, ${markupName}Dim, `);\n              break;\n            case 2:\n              retArr.push(`get16(${markupName}, ${markupName}Size, ${markupName}Dim, `);\n              break;\n            case 4:\n            case 0:\n              retArr.push(`get32(${markupName}, ${markupName}Size, ${markupName}Dim, `);\n              break;\n            default:\n              throw new Error(`unhandled bit ratio of ${bitRatio}`);\n          }\n          this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n          retArr.push(')');\n        }\n        break;\n      case 'MemoryOptimizedNumberTexture':\n        retArr.push(`getMemoryOptimized32(${ markupName }, ${ markupName }Size, ${ markupName }Dim, `);\n        this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n        retArr.push(')');\n        break;\n      case 'Matrix(2)':\n      case 'Matrix(3)':\n      case 'Matrix(4)':\n        retArr.push(`${markupName}[${this.memberExpressionPropertyMarkup(yProperty)}]`);\n        if (yProperty) {\n          retArr.push(`[${this.memberExpressionPropertyMarkup(xProperty)}]`);\n        }\n        break;\n      default:\n        throw new Error(`unhandled member expression \"${ type }\"`);\n    }\n    return retArr;\n  }\n\n  astCallExpression(ast, retArr) {\n    if (!ast.callee) {\n      throw this.astErrorOutput('Unknown CallExpression', ast);\n    }\n\n    let functionName = null;\n    const isMathFunction = this.isAstMathFunction(ast);\n\n    if (isMathFunction || (ast.callee.object && ast.callee.object.type === 'ThisExpression')) {\n      functionName = ast.callee.property.name;\n    }\n    else if (ast.callee.type === 'SequenceExpression' && ast.callee.expressions[0].type === 'Literal' && !isNaN(ast.callee.expressions[0].raw)) {\n      functionName = ast.callee.expressions[1].property.name;\n    } else {\n      functionName = ast.callee.name;\n    }\n\n    if (!functionName) {\n      throw this.astErrorOutput(`Unhandled function, couldn't find name`, ast);\n    }\n\n    switch (functionName) {\n      case 'pow':\n        functionName = '_pow';\n        break;\n      case 'round':\n        functionName = '_round';\n        break;\n    }\n\n    if (this.calledFunctions.indexOf(functionName) < 0) {\n      this.calledFunctions.push(functionName);\n    }\n\n    if (functionName === 'random' && this.plugins && this.plugins.length > 0) {\n      for (let i = 0; i < this.plugins.length; i++) {\n        const plugin = this.plugins[i];\n        if (plugin.functionMatch === 'Math.random()' && plugin.functionReplace) {\n          retArr.push(plugin.functionReplace);\n          return retArr;\n        }\n      }\n    }\n\n    if (this.onFunctionCall) {\n      this.onFunctionCall(this.name, functionName, ast.arguments);\n    }\n\n    retArr.push(functionName);\n\n    retArr.push('(');\n\n    if (isMathFunction) {\n      for (let i = 0; i < ast.arguments.length; ++i) {\n        const argument = ast.arguments[i];\n        const argumentType = this.getType(argument);\n        if (i > 0) {\n          retArr.push(', ');\n        }\n\n        switch (argumentType) {\n          case 'Integer':\n            this.castValueToFloat(argument, retArr);\n            break;\n          default:\n            this.astGeneric(argument, retArr);\n            break;\n        }\n      }\n    } else {\n      const targetTypes = this.lookupFunctionArgumentTypes(functionName) || [];\n      for (let i = 0; i < ast.arguments.length; ++i) {\n        const argument = ast.arguments[i];\n        let targetType = targetTypes[i];\n        if (i > 0) {\n          retArr.push(', ');\n        }\n        const argumentType = this.getType(argument);\n        if (!targetType) {\n          this.triggerImplyArgumentType(functionName, i, argumentType, this);\n          targetType = argumentType;\n        }\n        switch (argumentType) {\n          case 'Boolean':\n            this.astGeneric(argument, retArr);\n            continue;\n          case 'Number':\n          case 'Float':\n            if (targetType === 'Integer') {\n              retArr.push('int(');\n              this.astGeneric(argument, retArr);\n              retArr.push(')');\n              continue;\n            } else if (targetType === 'Number' || targetType === 'Float') {\n              this.astGeneric(argument, retArr);\n              continue;\n            } else if (targetType === 'LiteralInteger') {\n              this.castLiteralToFloat(argument, retArr);\n              continue;\n            }\n            break;\n          case 'Integer':\n            if (targetType === 'Number' || targetType === 'Float') {\n              retArr.push('float(');\n              this.astGeneric(argument, retArr);\n              retArr.push(')');\n              continue;\n            } else if (targetType === 'Integer') {\n              this.astGeneric(argument, retArr);\n              continue;\n            }\n            break;\n          case 'LiteralInteger':\n            if (targetType === 'Integer') {\n              this.castLiteralToInteger(argument, retArr);\n              continue;\n            } else if (targetType === 'Number' || targetType === 'Float') {\n              this.castLiteralToFloat(argument, retArr);\n              continue;\n            } else if (targetType === 'LiteralInteger') {\n              this.astGeneric(argument, retArr);\n              continue;\n            }\n            break;\n          case 'Array(2)':\n          case 'Array(3)':\n          case 'Array(4)':\n            if (targetType === argumentType) {\n              if (argument.type === 'Identifier') {\n                retArr.push(`user_${utils.sanitizeName(argument.name)}`);\n              } else if (argument.type === 'ArrayExpression' || argument.type === 'MemberExpression' || argument.type === 'CallExpression') {\n                this.astGeneric(argument, retArr);\n              } else {\n                throw this.astErrorOutput(`Unhandled argument type ${ argument.type }`, ast);\n              }\n              continue;\n            }\n            break;\n          case 'HTMLCanvas':\n          case 'OffscreenCanvas':\n          case 'HTMLImage':\n          case 'ImageBitmap':\n          case 'ImageData':\n          case 'HTMLImageArray':\n          case 'HTMLVideo':\n          case 'ArrayTexture(1)':\n          case 'ArrayTexture(2)':\n          case 'ArrayTexture(3)':\n          case 'ArrayTexture(4)':\n          case 'Array':\n          case 'Input':\n            if (targetType === argumentType) {\n              if (argument.type !== 'Identifier') throw this.astErrorOutput(`Unhandled argument type ${ argument.type }`, ast);\n              this.triggerImplyArgumentBitRatio(this.name, argument.name, functionName, i);\n              const name = utils.sanitizeName(argument.name);\n              retArr.push(`user_${name},user_${name}Size,user_${name}Dim`);\n              continue;\n            }\n            break;\n        }\n        throw this.astErrorOutput(`Unhandled argument combination of ${ argumentType } and ${ targetType } for argument named \"${ argument.name }\"`, ast);\n      }\n    }\n    retArr.push(')');\n\n    return retArr;\n  }\n\n  astArrayExpression(arrNode, retArr) {\n    const returnType = this.getType(arrNode);\n\n    const arrLen = arrNode.elements.length;\n\n    switch (returnType) {\n      case 'Matrix(2)':\n      case 'Matrix(3)':\n      case 'Matrix(4)':\n        retArr.push(`mat${arrLen}(`);\n        break;\n      default:\n        retArr.push(`vec${arrLen}(`);\n    }\n    for (let i = 0; i < arrLen; ++i) {\n      if (i > 0) {\n        retArr.push(', ');\n      }\n      const subNode = arrNode.elements[i];\n      this.astGeneric(subNode, retArr)\n    }\n    retArr.push(')');\n\n    return retArr;\n  }\n\n  memberExpressionXYZ(x, y, z, retArr) {\n    if (z) {\n      retArr.push(this.memberExpressionPropertyMarkup(z), ', ');\n    } else {\n      retArr.push('0, ');\n    }\n    if (y) {\n      retArr.push(this.memberExpressionPropertyMarkup(y), ', ');\n    } else {\n      retArr.push('0, ');\n    }\n    retArr.push(this.memberExpressionPropertyMarkup(x));\n    return retArr;\n  }\n\n  memberExpressionPropertyMarkup(property) {\n    if (!property) {\n      throw new Error('Property not set');\n    }\n    const type = this.getType(property);\n    const result = [];\n    switch (type) {\n      case 'Number':\n      case 'Float':\n        this.castValueToInteger(property, result);\n        break;\n      case 'LiteralInteger':\n        this.castLiteralToInteger(property, result);\n        break;\n      default:\n        this.astGeneric(property, result);\n    }\n    return result.join('');\n  }\n}\n\nconst typeMap = {\n  'Array': 'sampler2D',\n  'Array(2)': 'vec2',\n  'Array(3)': 'vec3',\n  'Array(4)': 'vec4',\n  'Matrix(2)': 'mat2',\n  'Matrix(3)': 'mat3',\n  'Matrix(4)': 'mat4',\n  'Array2D': 'sampler2D',\n  'Array3D': 'sampler2D',\n  'Boolean': 'bool',\n  'Float': 'float',\n  'Input': 'sampler2D',\n  'Integer': 'int',\n  'Number': 'float',\n  'LiteralInteger': 'float',\n  'NumberTexture': 'sampler2D',\n  'MemoryOptimizedNumberTexture': 'sampler2D',\n  'ArrayTexture(1)': 'sampler2D',\n  'ArrayTexture(2)': 'sampler2D',\n  'ArrayTexture(3)': 'sampler2D',\n  'ArrayTexture(4)': 'sampler2D',\n  'HTMLVideo': 'sampler2D',\n  'HTMLCanvas': 'sampler2D',\n  'OffscreenCanvas': 'sampler2D',\n  'HTMLImage': 'sampler2D',\n  'ImageBitmap': 'sampler2D',\n  'ImageData': 'sampler2D',\n  'HTMLImageArray': 'sampler2DArray',\n};\n\nconst operatorMap = {\n  '===': '==',\n  '!==': '!='\n};\n\nmodule.exports = {\n  WebGLFunctionNode\n};\n},{\"../../utils\":114,\"../function-node\":10}],39:[function(require,module,exports){\nconst { WebGLKernelValueBoolean } = require('./kernel-value/boolean');\nconst { WebGLKernelValueFloat } = require('./kernel-value/float');\nconst { WebGLKernelValueInteger } = require('./kernel-value/integer');\n\nconst { WebGLKernelValueHTMLImage } = require('./kernel-value/html-image');\nconst { WebGLKernelValueDynamicHTMLImage } = require('./kernel-value/dynamic-html-image');\n\nconst { WebGLKernelValueHTMLVideo } = require('./kernel-value/html-video');\nconst { WebGLKernelValueDynamicHTMLVideo } = require('./kernel-value/dynamic-html-video');\n\nconst { WebGLKernelValueSingleInput } = require('./kernel-value/single-input');\nconst { WebGLKernelValueDynamicSingleInput } = require('./kernel-value/dynamic-single-input');\n\nconst { WebGLKernelValueUnsignedInput } = require('./kernel-value/unsigned-input');\nconst { WebGLKernelValueDynamicUnsignedInput } = require('./kernel-value/dynamic-unsigned-input');\n\nconst { WebGLKernelValueMemoryOptimizedNumberTexture } = require('./kernel-value/memory-optimized-number-texture');\nconst { WebGLKernelValueDynamicMemoryOptimizedNumberTexture } = require('./kernel-value/dynamic-memory-optimized-number-texture');\n\nconst { WebGLKernelValueNumberTexture } = require('./kernel-value/number-texture');\nconst { WebGLKernelValueDynamicNumberTexture } = require('./kernel-value/dynamic-number-texture');\n\nconst { WebGLKernelValueSingleArray } = require('./kernel-value/single-array');\nconst { WebGLKernelValueDynamicSingleArray } = require('./kernel-value/dynamic-single-array');\n\nconst { WebGLKernelValueSingleArray1DI } = require('./kernel-value/single-array1d-i');\nconst { WebGLKernelValueDynamicSingleArray1DI } = require('./kernel-value/dynamic-single-array1d-i');\n\nconst { WebGLKernelValueSingleArray2DI } = require('./kernel-value/single-array2d-i');\nconst { WebGLKernelValueDynamicSingleArray2DI } = require('./kernel-value/dynamic-single-array2d-i');\n\nconst { WebGLKernelValueSingleArray3DI } = require('./kernel-value/single-array3d-i');\nconst { WebGLKernelValueDynamicSingleArray3DI } = require('./kernel-value/dynamic-single-array3d-i');\n\nconst { WebGLKernelValueArray2 } = require('./kernel-value/array2');\nconst { WebGLKernelValueArray3 } = require('./kernel-value/array3');\nconst { WebGLKernelValueArray4 } = require('./kernel-value/array4');\n\nconst { WebGLKernelValueUnsignedArray } = require('./kernel-value/unsigned-array');\nconst { WebGLKernelValueDynamicUnsignedArray } = require('./kernel-value/dynamic-unsigned-array');\n\nconst kernelValueMaps = {\n  unsigned: {\n    dynamic: {\n      'Boolean': WebGLKernelValueBoolean,\n      'Integer': WebGLKernelValueInteger,\n      'Float': WebGLKernelValueFloat,\n      'Array': WebGLKernelValueDynamicUnsignedArray,\n      'Array(2)': WebGLKernelValueArray2,\n      'Array(3)': WebGLKernelValueArray3,\n      'Array(4)': WebGLKernelValueArray4,\n      'Array1D(2)': false,\n      'Array1D(3)': false,\n      'Array1D(4)': false,\n      'Array2D(2)': false,\n      'Array2D(3)': false,\n      'Array2D(4)': false,\n      'Array3D(2)': false,\n      'Array3D(3)': false,\n      'Array3D(4)': false,\n      'Input': WebGLKernelValueDynamicUnsignedInput,\n      'NumberTexture': WebGLKernelValueDynamicNumberTexture,\n      'ArrayTexture(1)': WebGLKernelValueDynamicNumberTexture,\n      'ArrayTexture(2)': WebGLKernelValueDynamicNumberTexture,\n      'ArrayTexture(3)': WebGLKernelValueDynamicNumberTexture,\n      'ArrayTexture(4)': WebGLKernelValueDynamicNumberTexture,\n      'MemoryOptimizedNumberTexture': WebGLKernelValueDynamicMemoryOptimizedNumberTexture,\n      'HTMLCanvas': WebGLKernelValueDynamicHTMLImage,\n      'OffscreenCanvas': WebGLKernelValueDynamicHTMLImage,\n      'HTMLImage': WebGLKernelValueDynamicHTMLImage,\n      'ImageBitmap': WebGLKernelValueDynamicHTMLImage,\n      'ImageData': WebGLKernelValueDynamicHTMLImage,\n      'HTMLImageArray': false,\n      'HTMLVideo': WebGLKernelValueDynamicHTMLVideo,\n    },\n    static: {\n      'Boolean': WebGLKernelValueBoolean,\n      'Float': WebGLKernelValueFloat,\n      'Integer': WebGLKernelValueInteger,\n      'Array': WebGLKernelValueUnsignedArray,\n      'Array(2)': WebGLKernelValueArray2,\n      'Array(3)': WebGLKernelValueArray3,\n      'Array(4)': WebGLKernelValueArray4,\n      'Array1D(2)': false,\n      'Array1D(3)': false,\n      'Array1D(4)': false,\n      'Array2D(2)': false,\n      'Array2D(3)': false,\n      'Array2D(4)': false,\n      'Array3D(2)': false,\n      'Array3D(3)': false,\n      'Array3D(4)': false,\n      'Input': WebGLKernelValueUnsignedInput,\n      'NumberTexture': WebGLKernelValueNumberTexture,\n      'ArrayTexture(1)': WebGLKernelValueNumberTexture,\n      'ArrayTexture(2)': WebGLKernelValueNumberTexture,\n      'ArrayTexture(3)': WebGLKernelValueNumberTexture,\n      'ArrayTexture(4)': WebGLKernelValueNumberTexture,\n      'MemoryOptimizedNumberTexture': WebGLKernelValueMemoryOptimizedNumberTexture,\n      'HTMLCanvas': WebGLKernelValueHTMLImage,\n      'OffscreenCanvas': WebGLKernelValueHTMLImage,\n      'HTMLImage': WebGLKernelValueHTMLImage,\n      'ImageBitmap': WebGLKernelValueHTMLImage,\n      'ImageData': WebGLKernelValueHTMLImage,\n      'HTMLImageArray': false,\n      'HTMLVideo': WebGLKernelValueHTMLVideo,\n    }\n  },\n  single: {\n    dynamic: {\n      'Boolean': WebGLKernelValueBoolean,\n      'Integer': WebGLKernelValueInteger,\n      'Float': WebGLKernelValueFloat,\n      'Array': WebGLKernelValueDynamicSingleArray,\n      'Array(2)': WebGLKernelValueArray2,\n      'Array(3)': WebGLKernelValueArray3,\n      'Array(4)': WebGLKernelValueArray4,\n      'Array1D(2)': WebGLKernelValueDynamicSingleArray1DI,\n      'Array1D(3)': WebGLKernelValueDynamicSingleArray1DI,\n      'Array1D(4)': WebGLKernelValueDynamicSingleArray1DI,\n      'Array2D(2)': WebGLKernelValueDynamicSingleArray2DI,\n      'Array2D(3)': WebGLKernelValueDynamicSingleArray2DI,\n      'Array2D(4)': WebGLKernelValueDynamicSingleArray2DI,\n      'Array3D(2)': WebGLKernelValueDynamicSingleArray3DI,\n      'Array3D(3)': WebGLKernelValueDynamicSingleArray3DI,\n      'Array3D(4)': WebGLKernelValueDynamicSingleArray3DI,\n      'Input': WebGLKernelValueDynamicSingleInput,\n      'NumberTexture': WebGLKernelValueDynamicNumberTexture,\n      'ArrayTexture(1)': WebGLKernelValueDynamicNumberTexture,\n      'ArrayTexture(2)': WebGLKernelValueDynamicNumberTexture,\n      'ArrayTexture(3)': WebGLKernelValueDynamicNumberTexture,\n      'ArrayTexture(4)': WebGLKernelValueDynamicNumberTexture,\n      'MemoryOptimizedNumberTexture': WebGLKernelValueDynamicMemoryOptimizedNumberTexture,\n      'HTMLCanvas': WebGLKernelValueDynamicHTMLImage,\n      'OffscreenCanvas': WebGLKernelValueDynamicHTMLImage,\n      'HTMLImage': WebGLKernelValueDynamicHTMLImage,\n      'ImageBitmap': WebGLKernelValueDynamicHTMLImage,\n      'ImageData': WebGLKernelValueDynamicHTMLImage,\n      'HTMLImageArray': false,\n      'HTMLVideo': WebGLKernelValueDynamicHTMLVideo,\n    },\n    static: {\n      'Boolean': WebGLKernelValueBoolean,\n      'Float': WebGLKernelValueFloat,\n      'Integer': WebGLKernelValueInteger,\n      'Array': WebGLKernelValueSingleArray,\n      'Array(2)': WebGLKernelValueArray2,\n      'Array(3)': WebGLKernelValueArray3,\n      'Array(4)': WebGLKernelValueArray4,\n      'Array1D(2)': WebGLKernelValueSingleArray1DI,\n      'Array1D(3)': WebGLKernelValueSingleArray1DI,\n      'Array1D(4)': WebGLKernelValueSingleArray1DI,\n      'Array2D(2)': WebGLKernelValueSingleArray2DI,\n      'Array2D(3)': WebGLKernelValueSingleArray2DI,\n      'Array2D(4)': WebGLKernelValueSingleArray2DI,\n      'Array3D(2)': WebGLKernelValueSingleArray3DI,\n      'Array3D(3)': WebGLKernelValueSingleArray3DI,\n      'Array3D(4)': WebGLKernelValueSingleArray3DI,\n      'Input': WebGLKernelValueSingleInput,\n      'NumberTexture': WebGLKernelValueNumberTexture,\n      'ArrayTexture(1)': WebGLKernelValueNumberTexture,\n      'ArrayTexture(2)': WebGLKernelValueNumberTexture,\n      'ArrayTexture(3)': WebGLKernelValueNumberTexture,\n      'ArrayTexture(4)': WebGLKernelValueNumberTexture,\n      'MemoryOptimizedNumberTexture': WebGLKernelValueMemoryOptimizedNumberTexture,\n      'HTMLCanvas': WebGLKernelValueHTMLImage,\n      'OffscreenCanvas': WebGLKernelValueHTMLImage,\n      'HTMLImage': WebGLKernelValueHTMLImage,\n      'ImageBitmap': WebGLKernelValueHTMLImage,\n      'ImageData': WebGLKernelValueHTMLImage,\n      'HTMLImageArray': false,\n      'HTMLVideo': WebGLKernelValueHTMLVideo,\n    }\n  },\n};\n\nfunction lookupKernelValueType(type, dynamic, precision, value) {\n  if (!type) {\n    throw new Error('type missing');\n  }\n  if (!dynamic) {\n    throw new Error('dynamic missing');\n  }\n  if (!precision) {\n    throw new Error('precision missing');\n  }\n  if (value.type) {\n    type = value.type;\n  }\n  const types = kernelValueMaps[precision][dynamic];\n  if (types[type] === false) {\n    return null;\n  } else if (types[type] === undefined) {\n    throw new Error(`Could not find a KernelValue for ${ type }`);\n  }\n  return types[type];\n}\n\nmodule.exports = {\n  lookupKernelValueType,\n  kernelValueMaps,\n};\n},{\"./kernel-value/array2\":41,\"./kernel-value/array3\":42,\"./kernel-value/array4\":43,\"./kernel-value/boolean\":44,\"./kernel-value/dynamic-html-image\":45,\"./kernel-value/dynamic-html-video\":46,\"./kernel-value/dynamic-memory-optimized-number-texture\":47,\"./kernel-value/dynamic-number-texture\":48,\"./kernel-value/dynamic-single-array\":49,\"./kernel-value/dynamic-single-array1d-i\":50,\"./kernel-value/dynamic-single-array2d-i\":51,\"./kernel-value/dynamic-single-array3d-i\":52,\"./kernel-value/dynamic-single-input\":53,\"./kernel-value/dynamic-unsigned-array\":54,\"./kernel-value/dynamic-unsigned-input\":55,\"./kernel-value/float\":56,\"./kernel-value/html-image\":57,\"./kernel-value/html-video\":58,\"./kernel-value/integer\":60,\"./kernel-value/memory-optimized-number-texture\":61,\"./kernel-value/number-texture\":62,\"./kernel-value/single-array\":63,\"./kernel-value/single-array1d-i\":64,\"./kernel-value/single-array2d-i\":65,\"./kernel-value/single-array3d-i\":66,\"./kernel-value/single-input\":67,\"./kernel-value/unsigned-array\":68,\"./kernel-value/unsigned-input\":69}],40:[function(require,module,exports){\nconst { WebGLKernelValue } = require('./index');\nconst { Input } = require('../../../input');\n\nclass WebGLKernelArray extends WebGLKernelValue {\n  checkSize(width, height) {\n    if (!this.kernel.validate) return;\n    const { maxTextureSize } = this.kernel.constructor.features;\n    if (width > maxTextureSize || height > maxTextureSize) {\n      if (width > height) {\n        throw new Error(`Argument texture width of ${width} larger than maximum size of ${maxTextureSize} for your GPU`);\n      } else if (width < height) {\n        throw new Error(`Argument texture height of ${height} larger than maximum size of ${maxTextureSize} for your GPU`);\n      } else {\n        throw new Error(`Argument texture height and width of ${height} larger than maximum size of ${maxTextureSize} for your GPU`);\n      }\n    }\n  }\n\n  setup() {\n    this.requestTexture();\n    this.setupTexture();\n    this.defineTexture();\n  }\n\n  requestTexture() {\n    this.texture = this.onRequestTexture();\n  }\n\n  defineTexture() {\n    const { context: gl } = this;\n    gl.activeTexture(this.contextHandle);\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  }\n\n  setupTexture() {\n    this.contextHandle = this.onRequestContextHandle();\n    this.index = this.onRequestIndex();\n    this.dimensionsId = this.id + 'Dim';\n    this.sizeId = this.id + 'Size';\n  }\n\n  getBitRatio(value) {\n    if (Array.isArray(value[0])) {\n      return this.getBitRatio(value[0]);\n    } else if (value.constructor === Input) {\n      return this.getBitRatio(value.value);\n    }\n    switch (value.constructor) {\n      case Uint8ClampedArray:\n      case Uint8Array:\n      case Int8Array:\n        return 1;\n      case Uint16Array:\n      case Int16Array:\n        return 2;\n      case Float32Array:\n      case Int32Array:\n      default:\n        return 4;\n    }\n  }\n\n  destroy() {\n    if (this.prevArg) {\n      this.prevArg.delete();\n    }\n    this.context.deleteTexture(this.texture);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelArray\n};\n},{\"../../../input\":110,\"./index\":59}],41:[function(require,module,exports){\nconst { WebGLKernelValue } = require('./index');\n\nclass WebGLKernelValueArray2 extends WebGLKernelValue {\n  constructor(value, settings) {\n    super(value, settings);\n    this.uploadValue = value;\n  }\n  getSource(value) {\n    if (this.origin === 'constants') {\n      return `const vec2 ${this.id} = vec2(${value[0]},${value[1]});\\n`;\n    }\n    return `uniform vec2 ${this.id};\\n`;\n  }\n\n  getStringValueHandler() {\n    if (this.origin === 'constants') return '';\n    return `const uploadValue_${this.name} = ${this.varName};\\n`;\n  }\n\n  updateValue(value) {\n    if (this.origin === 'constants') return;\n    this.kernel.setUniform2fv(this.id, this.uploadValue = value);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueArray2\n};\n},{\"./index\":59}],42:[function(require,module,exports){\nconst { WebGLKernelValue } = require('./index');\n\nclass WebGLKernelValueArray3 extends WebGLKernelValue {\n  constructor(value, settings) {\n    super(value, settings);\n    this.uploadValue = value;\n  }\n  getSource(value) {\n    if (this.origin === 'constants') {\n      return `const vec3 ${this.id} = vec3(${value[0]},${value[1]},${value[2]});\\n`;\n    }\n    return `uniform vec3 ${this.id};\\n`;\n  }\n\n  getStringValueHandler() {\n    if (this.origin === 'constants') return '';\n    return `const uploadValue_${this.name} = ${this.varName};\\n`;\n  }\n\n  updateValue(value) {\n    if (this.origin === 'constants') return;\n    this.kernel.setUniform3fv(this.id, this.uploadValue = value);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueArray3\n};\n},{\"./index\":59}],43:[function(require,module,exports){\nconst { WebGLKernelValue } = require('./index');\n\nclass WebGLKernelValueArray4 extends WebGLKernelValue {\n  constructor(value, settings) {\n    super(value, settings);\n    this.uploadValue = value;\n  }\n  getSource(value) {\n    if (this.origin === 'constants') {\n      return `const vec4 ${this.id} = vec4(${value[0]},${value[1]},${value[2]},${value[3]});\\n`;\n    }\n    return `uniform vec4 ${this.id};\\n`;\n  }\n\n  getStringValueHandler() {\n    if (this.origin === 'constants') return '';\n    return `const uploadValue_${this.name} = ${this.varName};\\n`;\n  }\n\n  updateValue(value) {\n    if (this.origin === 'constants') return;\n    this.kernel.setUniform4fv(this.id, this.uploadValue = value);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueArray4\n};\n},{\"./index\":59}],44:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelValue } = require('./index');\n\nclass WebGLKernelValueBoolean extends WebGLKernelValue {\n  constructor(value, settings) {\n    super(value, settings);\n    this.uploadValue = value;\n  }\n  getSource(value) {\n    if (this.origin === 'constants') {\n      return `const bool ${this.id} = ${value};\\n`;\n    }\n    return `uniform bool ${this.id};\\n`;\n  }\n\n  getStringValueHandler() {\n    return `const uploadValue_${this.name} = ${this.varName};\\n`;\n  }\n\n  updateValue(value) {\n    if (this.origin === 'constants') return;\n    this.kernel.setUniform1i(this.id, this.uploadValue = value);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueBoolean\n};\n},{\"../../../utils\":114,\"./index\":59}],45:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelValueHTMLImage } = require('./html-image');\n\nclass WebGLKernelValueDynamicHTMLImage extends WebGLKernelValueHTMLImage {\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `uniform ivec2 ${this.sizeId}`,\n      `uniform ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n\n  updateValue(value) {\n    const { width, height } = value;\n    this.checkSize(width, height);\n    this.dimensions = [width, height, 1];\n    this.textureSize = [width, height];\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n    super.updateValue(value);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueDynamicHTMLImage\n};\n},{\"../../../utils\":114,\"./html-image\":57}],46:[function(require,module,exports){\nconst { WebGLKernelValueDynamicHTMLImage } = require('./dynamic-html-image');\n\nclass WebGLKernelValueDynamicHTMLVideo extends WebGLKernelValueDynamicHTMLImage {}\n\nmodule.exports = {\n  WebGLKernelValueDynamicHTMLVideo\n};\n},{\"./dynamic-html-image\":45}],47:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelValueMemoryOptimizedNumberTexture } = require('./memory-optimized-number-texture');\n\nclass WebGLKernelValueDynamicMemoryOptimizedNumberTexture extends WebGLKernelValueMemoryOptimizedNumberTexture {\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `uniform ivec2 ${this.sizeId}`,\n      `uniform ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n\n  updateValue(inputTexture) {\n    this.dimensions = inputTexture.dimensions;\n    this.checkSize(inputTexture.size[0], inputTexture.size[1]);\n    this.textureSize = inputTexture.size;\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n    super.updateValue(inputTexture);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueDynamicMemoryOptimizedNumberTexture\n};\n},{\"../../../utils\":114,\"./memory-optimized-number-texture\":61}],48:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelValueNumberTexture } = require('./number-texture');\n\nclass WebGLKernelValueDynamicNumberTexture extends WebGLKernelValueNumberTexture {\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `uniform ivec2 ${this.sizeId}`,\n      `uniform ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n\n  updateValue(value) {\n    this.dimensions = value.dimensions;\n    this.checkSize(value.size[0], value.size[1]);\n    this.textureSize = value.size;\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n    super.updateValue(value);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueDynamicNumberTexture\n};\n},{\"../../../utils\":114,\"./number-texture\":62}],49:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelValueSingleArray } = require('./single-array');\n\nclass WebGLKernelValueDynamicSingleArray extends WebGLKernelValueSingleArray {\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `uniform ivec2 ${this.sizeId}`,\n      `uniform ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n\n  updateValue(value) {\n    this.dimensions = utils.getDimensions(value, true);\n    this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;\n    this.checkSize(this.textureSize[0], this.textureSize[1]);\n    this.uploadValue = new Float32Array(this.uploadArrayLength);\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n    super.updateValue(value);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueDynamicSingleArray\n};\n},{\"../../../utils\":114,\"./single-array\":63}],50:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelValueSingleArray1DI } = require('./single-array1d-i');\n\nclass WebGLKernelValueDynamicSingleArray1DI extends WebGLKernelValueSingleArray1DI {\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `uniform ivec2 ${this.sizeId}`,\n      `uniform ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n\n  updateValue(value) {\n    this.setShape(value);\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n    super.updateValue(value);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueDynamicSingleArray1DI\n};\n},{\"../../../utils\":114,\"./single-array1d-i\":64}],51:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelValueSingleArray2DI } = require('./single-array2d-i');\n\nclass WebGLKernelValueDynamicSingleArray2DI extends WebGLKernelValueSingleArray2DI {\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `uniform ivec2 ${this.sizeId}`,\n      `uniform ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n\n  updateValue(value) {\n    this.setShape(value);\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n    super.updateValue(value);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueDynamicSingleArray2DI\n};\n},{\"../../../utils\":114,\"./single-array2d-i\":65}],52:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelValueSingleArray3DI } = require('./single-array3d-i');\n\nclass WebGLKernelValueDynamicSingleArray3DI extends WebGLKernelValueSingleArray3DI {\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `uniform ivec2 ${this.sizeId}`,\n      `uniform ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n\n  updateValue(value) {\n    this.setShape(value);\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n    super.updateValue(value);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueDynamicSingleArray3DI\n};\n},{\"../../../utils\":114,\"./single-array3d-i\":66}],53:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelValueSingleInput } = require('./single-input');\n\nclass WebGLKernelValueDynamicSingleInput extends WebGLKernelValueSingleInput {\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `uniform ivec2 ${this.sizeId}`,\n      `uniform ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n\n  updateValue(value) {\n    let [w, h, d] = value.size;\n    this.dimensions = new Int32Array([w || 1, h || 1, d || 1]);\n    this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;\n    this.checkSize(this.textureSize[0], this.textureSize[1]);\n    this.uploadValue = new Float32Array(this.uploadArrayLength);\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n    super.updateValue(value);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueDynamicSingleInput\n};\n},{\"../../../utils\":114,\"./single-input\":67}],54:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelValueUnsignedArray } = require('./unsigned-array');\n\nclass WebGLKernelValueDynamicUnsignedArray extends WebGLKernelValueUnsignedArray {\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `uniform ivec2 ${this.sizeId}`,\n      `uniform ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n\n  updateValue(value) {\n    this.dimensions = utils.getDimensions(value, true);\n    this.textureSize = utils.getMemoryOptimizedPackedTextureSize(this.dimensions, this.bitRatio);\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * (4 / this.bitRatio);\n    this.checkSize(this.textureSize[0], this.textureSize[1]);\n    const Type = this.getTransferArrayType(value);\n    this.preUploadValue = new Type(this.uploadArrayLength);\n    this.uploadValue = new Uint8Array(this.preUploadValue.buffer);\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n    super.updateValue(value);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueDynamicUnsignedArray\n};\n},{\"../../../utils\":114,\"./unsigned-array\":68}],55:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelValueUnsignedInput } = require('./unsigned-input');\n\nclass WebGLKernelValueDynamicUnsignedInput extends WebGLKernelValueUnsignedInput {\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `uniform ivec2 ${this.sizeId}`,\n      `uniform ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n\n  updateValue(value) {\n    let [w, h, d] = value.size;\n    this.dimensions = new Int32Array([w || 1, h || 1, d || 1]);\n    this.textureSize = utils.getMemoryOptimizedPackedTextureSize(this.dimensions, this.bitRatio);\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * (4 / this.bitRatio);\n    this.checkSize(this.textureSize[0], this.textureSize[1]);\n    const Type = this.getTransferArrayType(value.value);\n    this.preUploadValue = new Type(this.uploadArrayLength);\n    this.uploadValue = new Uint8Array(this.preUploadValue.buffer);\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n    super.updateValue(value);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueDynamicUnsignedInput\n};\n},{\"../../../utils\":114,\"./unsigned-input\":69}],56:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelValue } = require('./index');\n\nclass WebGLKernelValueFloat extends WebGLKernelValue {\n  constructor(value, settings) {\n    super(value, settings);\n    this.uploadValue = value;\n  }\n  getStringValueHandler() {\n    return `const uploadValue_${this.name} = ${this.varName};\\n`;\n  }\n  getSource(value) {\n    if (this.origin === 'constants') {\n      if (Number.isInteger(value)) {\n        return `const float ${this.id} = ${value}.0;\\n`;\n      }\n      return `const float ${this.id} = ${value};\\n`;\n    }\n    return `uniform float ${this.id};\\n`;\n  }\n\n  updateValue(value) {\n    if (this.origin === 'constants') return;\n    this.kernel.setUniform1f(this.id, this.uploadValue = value);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueFloat\n};\n},{\"../../../utils\":114,\"./index\":59}],57:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelArray } = require('./array');\n\nclass WebGLKernelValueHTMLImage extends WebGLKernelArray {\n  constructor(value, settings) {\n    super(value, settings);\n    const { width, height } = value;\n    this.checkSize(width, height);\n    this.dimensions = [width, height, 1];\n    this.textureSize = [width, height];\n    this.uploadValue = value;\n  }\n\n  getStringValueHandler() {\n    return `const uploadValue_${this.name} = ${this.varName};\\n`;\n  }\n\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n      `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\n    ]);\n  }\n\n  updateValue(inputImage) {\n    if (inputImage.constructor !== this.initialValueConstructor) {\n      this.onUpdateValueMismatch(inputImage.constructor);\n      return;\n    }\n    const { context: gl } = this;\n    gl.activeTexture(this.contextHandle);\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this.uploadValue = inputImage);\n    this.kernel.setUniform1i(this.id, this.index);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueHTMLImage\n};\n},{\"../../../utils\":114,\"./array\":40}],58:[function(require,module,exports){\nconst { WebGLKernelValueHTMLImage } = require('./html-image');\n\nclass WebGLKernelValueHTMLVideo extends WebGLKernelValueHTMLImage {}\n\nmodule.exports = {\n  WebGLKernelValueHTMLVideo\n};\n},{\"./html-image\":57}],59:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { KernelValue } = require('../../kernel-value');\n\nclass WebGLKernelValue extends KernelValue {\n  constructor(value, settings) {\n    super(value, settings);\n    this.dimensionsId = null;\n    this.sizeId = null;\n    this.initialValueConstructor = value.constructor;\n    this.onRequestTexture = settings.onRequestTexture;\n    this.onRequestIndex = settings.onRequestIndex;\n    this.uploadValue = null;\n    this.textureSize = null;\n    this.bitRatio = null;\n    this.prevArg = null;\n  }\n\n  get id() {\n    return `${this.origin}_${utils.sanitizeName(this.name)}`;\n  }\n\n  setup() {}\n\n  getTransferArrayType(value) {\n    if (Array.isArray(value[0])) {\n      return this.getTransferArrayType(value[0]);\n    }\n    switch (value.constructor) {\n      case Array:\n      case Int32Array:\n      case Int16Array:\n      case Int8Array:\n        return Float32Array;\n      case Uint8ClampedArray:\n      case Uint8Array:\n      case Uint16Array:\n      case Uint32Array:\n      case Float32Array:\n      case Float64Array:\n        return value.constructor;\n    }\n    console.warn('Unfamiliar constructor type.  Will go ahead and use, but likley this may result in a transfer of zeros');\n    return value.constructor;\n  }\n\n  getStringValueHandler() {\n    throw new Error(`\"getStringValueHandler\" not implemented on ${this.constructor.name}`);\n  }\n\n  getVariablePrecisionString() {\n    return this.kernel.getVariablePrecisionString(this.textureSize || undefined, this.tactic || undefined);\n  }\n\n  destroy() {}\n}\n\nmodule.exports = {\n  WebGLKernelValue\n};\n},{\"../../../utils\":114,\"../../kernel-value\":35}],60:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelValue } = require('./index');\n\nclass WebGLKernelValueInteger extends WebGLKernelValue {\n  constructor(value, settings) {\n    super(value, settings);\n    this.uploadValue = value;\n  }\n  getStringValueHandler() {\n    return `const uploadValue_${this.name} = ${this.varName};\\n`;\n  }\n  getSource(value) {\n    if (this.origin === 'constants') {\n      return `const int ${this.id} = ${ parseInt(value) };\\n`;\n    }\n    return `uniform int ${this.id};\\n`;\n  }\n\n  updateValue(value) {\n    if (this.origin === 'constants') return;\n    this.kernel.setUniform1i(this.id, this.uploadValue = value);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueInteger\n};\n},{\"../../../utils\":114,\"./index\":59}],61:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelArray } = require('./array');\n\nconst sameError = `Source and destination textures are the same.  Use immutable = true and manually cleanup kernel output texture memory with texture.delete()`;\n\nclass WebGLKernelValueMemoryOptimizedNumberTexture extends WebGLKernelArray {\n  constructor(value, settings) {\n    super(value, settings);\n    const [width, height] = value.size;\n    this.checkSize(width, height);\n    this.dimensions = value.dimensions;\n    this.textureSize = value.size;\n    this.uploadValue = value.texture;\n    this.forceUploadEachRun = true;\n  }\n\n  setup() {\n    this.setupTexture();\n  }\n\n  getStringValueHandler() {\n    return `const uploadValue_${this.name} = ${this.varName}.texture;\\n`;\n  }\n\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n      `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\n    ]);\n  }\n\n  updateValue(inputTexture) {\n    if (inputTexture.constructor !== this.initialValueConstructor) {\n      this.onUpdateValueMismatch(inputTexture.constructor);\n      return;\n    }\n    if (this.checkContext && inputTexture.context !== this.context) {\n      throw new Error(`Value ${this.name} (${this.type}) must be from same context`);\n    }\n\n    const { kernel, context: gl } = this;\n    if (kernel.pipeline) {\n      if (kernel.immutable) {\n        kernel.updateTextureArgumentRefs(this, inputTexture);\n      } else {\n        if (kernel.texture && kernel.texture.texture === inputTexture.texture) {\n          throw new Error(sameError);\n        } else if (kernel.mappedTextures) {\n          const { mappedTextures } = kernel;\n          for (let i = 0; i < mappedTextures.length; i++) {\n            if (mappedTextures[i].texture === inputTexture.texture) {\n              throw new Error(sameError);\n            }\n          }\n        }\n      }\n    }\n\n    gl.activeTexture(this.contextHandle);\n    gl.bindTexture(gl.TEXTURE_2D, this.uploadValue = inputTexture.texture);\n    this.kernel.setUniform1i(this.id, this.index);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueMemoryOptimizedNumberTexture,\n  sameError\n};\n},{\"../../../utils\":114,\"./array\":40}],62:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelArray } = require('./array');\nconst { sameError } = require('./memory-optimized-number-texture');\n\nclass WebGLKernelValueNumberTexture extends WebGLKernelArray {\n  constructor(value, settings) {\n    super(value, settings);\n    const [width, height] = value.size;\n    this.checkSize(width, height);\n    const { size: textureSize, dimensions } = value;\n    this.bitRatio = this.getBitRatio(value);\n    this.dimensions = dimensions;\n    this.textureSize = textureSize;\n    this.uploadValue = value.texture;\n    this.forceUploadEachRun = true;\n  }\n\n  setup() {\n    this.setupTexture();\n  }\n\n  getStringValueHandler() {\n    return `const uploadValue_${this.name} = ${this.varName}.texture;\\n`;\n  }\n\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n      `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\n    ]);\n  }\n\n  updateValue(inputTexture) {\n    if (inputTexture.constructor !== this.initialValueConstructor) {\n      this.onUpdateValueMismatch(inputTexture.constructor);\n      return;\n    }\n    if (this.checkContext && inputTexture.context !== this.context) {\n      throw new Error(`Value ${this.name} (${this.type}) must be from same context`);\n    }\n\n    const { kernel, context: gl } = this;\n    if (kernel.pipeline) {\n      if (kernel.immutable) {\n        kernel.updateTextureArgumentRefs(this, inputTexture);\n      } else {\n        if (kernel.texture && kernel.texture.texture === inputTexture.texture) {\n          throw new Error(sameError);\n        } else if (kernel.mappedTextures) {\n          const { mappedTextures } = kernel;\n          for (let i = 0; i < mappedTextures.length; i++) {\n            if (mappedTextures[i].texture === inputTexture.texture) {\n              throw new Error(sameError);\n            }\n          }\n        }\n      }\n    }\n\n    gl.activeTexture(this.contextHandle);\n    gl.bindTexture(gl.TEXTURE_2D, this.uploadValue = inputTexture.texture);\n    this.kernel.setUniform1i(this.id, this.index);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueNumberTexture\n};\n},{\"../../../utils\":114,\"./array\":40,\"./memory-optimized-number-texture\":61}],63:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelArray } = require('./array');\n\nclass WebGLKernelValueSingleArray extends WebGLKernelArray {\n  constructor(value, settings) {\n    super(value, settings);\n    this.bitRatio = 4;\n    this.dimensions = utils.getDimensions(value, true);\n    this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;\n    this.checkSize(this.textureSize[0], this.textureSize[1]);\n    this.uploadValue = new Float32Array(this.uploadArrayLength);\n  }\n\n  getStringValueHandler() {\n    return utils.linesToString([\n      `const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})`,\n      `flattenTo(${this.varName}, uploadValue_${this.name})`,\n    ]);\n  }\n\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n      `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\n    ]);\n  }\n\n  updateValue(value) {\n    if (value.constructor !== this.initialValueConstructor) {\n      this.onUpdateValueMismatch(value.constructor);\n      return;\n    }\n    const { context: gl } = this;\n    utils.flattenTo(value, this.uploadValue);\n    gl.activeTexture(this.contextHandle);\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\n    this.kernel.setUniform1i(this.id, this.index);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueSingleArray\n};\n},{\"../../../utils\":114,\"./array\":40}],64:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelArray } = require('./array');\n\nclass WebGLKernelValueSingleArray1DI extends WebGLKernelArray {\n  constructor(value, settings) {\n    super(value, settings);\n    this.bitRatio = 4;\n    this.setShape(value);\n  }\n\n  setShape(value) {\n    const valueDimensions = utils.getDimensions(value, true);\n    this.textureSize = utils.getMemoryOptimizedFloatTextureSize(valueDimensions, this.bitRatio);\n    this.dimensions = new Int32Array([valueDimensions[1], 1, 1]);\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;\n    this.checkSize(this.textureSize[0], this.textureSize[1]);\n    this.uploadValue = new Float32Array(this.uploadArrayLength);\n  }\n\n  getStringValueHandler() {\n    return utils.linesToString([\n      `const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})`,\n      `flattenTo(${this.varName}, uploadValue_${this.name})`,\n    ]);\n  }\n\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n      `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\n    ]);\n  }\n\n  updateValue(value) {\n    if (value.constructor !== this.initialValueConstructor) {\n      this.onUpdateValueMismatch(value.constructor);\n      return;\n    }\n    const { context: gl } = this;\n    utils.flatten2dArrayTo(value, this.uploadValue);\n    gl.activeTexture(this.contextHandle);\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\n    this.kernel.setUniform1i(this.id, this.index);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueSingleArray1DI\n};\n},{\"../../../utils\":114,\"./array\":40}],65:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelArray } = require('./array');\n\nclass WebGLKernelValueSingleArray2DI extends WebGLKernelArray {\n  constructor(value, settings) {\n    super(value, settings);\n    this.bitRatio = 4;\n    this.setShape(value);\n  }\n\n  setShape(value) {\n    const valueDimensions = utils.getDimensions(value, true);\n    this.textureSize = utils.getMemoryOptimizedFloatTextureSize(valueDimensions, this.bitRatio);\n    this.dimensions = new Int32Array([valueDimensions[1], valueDimensions[2], 1]);\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;\n    this.checkSize(this.textureSize[0], this.textureSize[1]);\n    this.uploadValue = new Float32Array(this.uploadArrayLength);\n  }\n\n  getStringValueHandler() {\n    return utils.linesToString([\n      `const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})`,\n      `flattenTo(${this.varName}, uploadValue_${this.name})`,\n    ]);\n  }\n\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n      `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\n    ]);\n  }\n\n  updateValue(value) {\n    if (value.constructor !== this.initialValueConstructor) {\n      this.onUpdateValueMismatch(value.constructor);\n      return;\n    }\n    const { context: gl } = this;\n    utils.flatten3dArrayTo(value, this.uploadValue);\n    gl.activeTexture(this.contextHandle);\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\n    this.kernel.setUniform1i(this.id, this.index);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueSingleArray2DI\n};\n},{\"../../../utils\":114,\"./array\":40}],66:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelArray } = require('./array');\n\nclass WebGLKernelValueSingleArray3DI extends WebGLKernelArray {\n  constructor(value, settings) {\n    super(value, settings);\n    this.bitRatio = 4;\n    this.setShape(value);\n  }\n\n  setShape(value) {\n    const valueDimensions = utils.getDimensions(value, true);\n    this.textureSize = utils.getMemoryOptimizedFloatTextureSize(valueDimensions, this.bitRatio);\n    this.dimensions = new Int32Array([valueDimensions[1], valueDimensions[2], valueDimensions[3]]);\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;\n    this.checkSize(this.textureSize[0], this.textureSize[1]);\n    this.uploadValue = new Float32Array(this.uploadArrayLength);\n  }\n\n  getStringValueHandler() {\n    return utils.linesToString([\n      `const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})`,\n      `flattenTo(${this.varName}, uploadValue_${this.name})`,\n    ]);\n  }\n\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n      `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\n    ]);\n  }\n\n  updateValue(value) {\n    if (value.constructor !== this.initialValueConstructor) {\n      this.onUpdateValueMismatch(value.constructor);\n      return;\n    }\n    const { context: gl } = this;\n    utils.flatten4dArrayTo(value, this.uploadValue);\n    gl.activeTexture(this.contextHandle);\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\n    this.kernel.setUniform1i(this.id, this.index);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueSingleArray3DI\n};\n},{\"../../../utils\":114,\"./array\":40}],67:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelArray } = require('./array');\n\nclass WebGLKernelValueSingleInput extends WebGLKernelArray {\n  constructor(value, settings) {\n    super(value, settings);\n    this.bitRatio = 4;\n    let [w, h, d] = value.size;\n    this.dimensions = new Int32Array([w || 1, h || 1, d || 1]);\n    this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;\n    this.checkSize(this.textureSize[0], this.textureSize[1]);\n    this.uploadValue = new Float32Array(this.uploadArrayLength);\n  }\n\n  getStringValueHandler() {\n    return utils.linesToString([\n      `const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})`,\n      `flattenTo(${this.varName}.value, uploadValue_${this.name})`,\n    ]);\n  }\n\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n      `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\n    ]);\n  }\n\n  updateValue(input) {\n    if (input.constructor !== this.initialValueConstructor) {\n      this.onUpdateValueMismatch(input.constructor);\n      return;\n    }\n    const { context: gl } = this;\n    utils.flattenTo(input.value, this.uploadValue);\n    gl.activeTexture(this.contextHandle);\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\n    this.kernel.setUniform1i(this.id, this.index);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueSingleInput\n};\n},{\"../../../utils\":114,\"./array\":40}],68:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelArray } = require('./array');\n\nclass WebGLKernelValueUnsignedArray extends WebGLKernelArray {\n  constructor(value, settings) {\n    super(value, settings);\n    this.bitRatio = this.getBitRatio(value);\n    this.dimensions = utils.getDimensions(value, true);\n    this.textureSize = utils.getMemoryOptimizedPackedTextureSize(this.dimensions, this.bitRatio);\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * (4 / this.bitRatio);\n    this.checkSize(this.textureSize[0], this.textureSize[1]);\n    this.TranserArrayType = this.getTransferArrayType(value);\n    this.preUploadValue = new this.TranserArrayType(this.uploadArrayLength);\n    this.uploadValue = new Uint8Array(this.preUploadValue.buffer);\n  }\n\n  getStringValueHandler() {\n    return utils.linesToString([\n      `const preUploadValue_${this.name} = new ${this.TranserArrayType.name}(${this.uploadArrayLength})`,\n      `const uploadValue_${this.name} = new Uint8Array(preUploadValue_${this.name}.buffer)`,\n      `flattenTo(${this.varName}, preUploadValue_${this.name})`,\n    ]);\n  }\n\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n      `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\n    ]);\n  }\n\n  updateValue(value) {\n    if (value.constructor !== this.initialValueConstructor) {\n      this.onUpdateValueMismatch(value.constructor);\n      return;\n    }\n    const { context: gl } = this;\n    utils.flattenTo(value, this.preUploadValue);\n    gl.activeTexture(this.contextHandle);\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.uploadValue);\n    this.kernel.setUniform1i(this.id, this.index);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueUnsignedArray\n};\n},{\"../../../utils\":114,\"./array\":40}],69:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelArray } = require('./array');\n\nclass WebGLKernelValueUnsignedInput extends WebGLKernelArray {\n  constructor(value, settings) {\n    super(value, settings);\n    this.bitRatio = this.getBitRatio(value);\n    const [w, h, d] = value.size;\n    this.dimensions = new Int32Array([w || 1, h || 1, d || 1]);\n    this.textureSize = utils.getMemoryOptimizedPackedTextureSize(this.dimensions, this.bitRatio);\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * (4 / this.bitRatio);\n    this.checkSize(this.textureSize[0], this.textureSize[1]);\n    this.TranserArrayType = this.getTransferArrayType(value.value);\n    this.preUploadValue = new this.TranserArrayType(this.uploadArrayLength);\n    this.uploadValue = new Uint8Array(this.preUploadValue.buffer);\n  }\n\n  getStringValueHandler() {\n    return utils.linesToString([\n      `const preUploadValue_${this.name} = new ${this.TranserArrayType.name}(${this.uploadArrayLength})`,\n      `const uploadValue_${this.name} = new Uint8Array(preUploadValue_${this.name}.buffer)`,\n      `flattenTo(${this.varName}.value, preUploadValue_${this.name})`,\n    ]);\n  }\n\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n      `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\n    ]);\n  }\n\n  updateValue(input) {\n    if (input.constructor !== this.initialValueConstructor) {\n      this.onUpdateValueMismatch(value.constructor);\n      return;\n    }\n    const { context: gl } = this;\n    utils.flattenTo(input.value, this.preUploadValue);\n    gl.activeTexture(this.contextHandle);\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.uploadValue);\n    this.kernel.setUniform1i(this.id, this.index);\n  }\n}\n\nmodule.exports = {\n  WebGLKernelValueUnsignedInput\n};\n},{\"../../../utils\":114,\"./array\":40}],70:[function(require,module,exports){\nconst { GLKernel } = require('../gl/kernel');\nconst { FunctionBuilder } = require('../function-builder');\nconst { WebGLFunctionNode } = require('./function-node');\nconst { utils } = require('../../utils');\nconst mrud = require('../../plugins/math-random-uniformly-distributed');\nconst { fragmentShader } = require('./fragment-shader');\nconst { vertexShader } = require('./vertex-shader');\nconst { glKernelString } = require('../gl/kernel-string');\nconst { lookupKernelValueType } = require('./kernel-value-maps');\n\nlet isSupported = null;\nlet testCanvas = null;\nlet testContext = null;\nlet testExtensions = null;\nlet features = null;\n\nconst plugins = [mrud];\nconst canvases = [];\nconst maxTexSizes = {};\n\n\nclass WebGLKernel extends GLKernel {\n  static get isSupported() {\n    if (isSupported !== null) {\n      return isSupported;\n    }\n    this.setupFeatureChecks();\n    isSupported = this.isContextMatch(testContext);\n    return isSupported;\n  }\n\n  static setupFeatureChecks() {\n    if (typeof document !== 'undefined') {\n      testCanvas = document.createElement('canvas');\n    } else if (typeof OffscreenCanvas !== 'undefined') {\n      testCanvas = new OffscreenCanvas(0, 0);\n    }\n    if (!testCanvas) return;\n    testContext = testCanvas.getContext('webgl') || testCanvas.getContext('experimental-webgl');\n    if (!testContext || !testContext.getExtension) return;\n    testExtensions = {\n      OES_texture_float: testContext.getExtension('OES_texture_float'),\n      OES_texture_float_linear: testContext.getExtension('OES_texture_float_linear'),\n      OES_element_index_uint: testContext.getExtension('OES_element_index_uint'),\n      WEBGL_draw_buffers: testContext.getExtension('WEBGL_draw_buffers'),\n    };\n    features = this.getFeatures();\n  }\n\n  static isContextMatch(context) {\n    if (typeof WebGLRenderingContext !== 'undefined') {\n      return context instanceof WebGLRenderingContext;\n    }\n    return false;\n  }\n\n  static getIsTextureFloat() {\n    return Boolean(testExtensions.OES_texture_float);\n  }\n\n  static getIsDrawBuffers() {\n    return Boolean(testExtensions.WEBGL_draw_buffers);\n  }\n\n  static getChannelCount() {\n    return testExtensions.WEBGL_draw_buffers ?\n      testContext.getParameter(testExtensions.WEBGL_draw_buffers.MAX_DRAW_BUFFERS_WEBGL) :\n      1;\n  }\n\n  static getMaxTextureSize() {\n    return testContext.getParameter(testContext.MAX_TEXTURE_SIZE);\n  }\n\n  static lookupKernelValueType(type, dynamic, precision, value) {\n    return lookupKernelValueType(type, dynamic, precision, value);\n  }\n\n  static get testCanvas() {\n    return testCanvas;\n  }\n\n  static get testContext() {\n    return testContext;\n  }\n\n  static get features() {\n    return features;\n  }\n\n  static get fragmentShader() {\n    return fragmentShader;\n  }\n\n  static get vertexShader() {\n    return vertexShader;\n  }\n\n  constructor(source, settings) {\n    super(source, settings);\n    this.program = null;\n    this.pipeline = settings.pipeline;\n    this.endianness = utils.systemEndianness();\n    this.extensions = {};\n    this.argumentTextureCount = 0;\n    this.constantTextureCount = 0;\n    this.fragShader = null;\n    this.vertShader = null;\n    this.drawBuffersMap = null;\n\n    this.maxTexSize = null;\n    this.onRequestSwitchKernel = null;\n\n    this.texture = null;\n    this.mappedTextures = null;\n    this.mergeSettings(source.settings || settings);\n\n    this.threadDim = null;\n    this.framebuffer = null;\n    this.buffer = null;\n\n    this.textureCache = [];\n    this.programUniformLocationCache = {};\n    this.uniform1fCache = {};\n    this.uniform1iCache = {};\n    this.uniform2fCache = {};\n    this.uniform2fvCache = {};\n    this.uniform2ivCache = {};\n    this.uniform3fvCache = {};\n    this.uniform3ivCache = {};\n    this.uniform4fvCache = {};\n    this.uniform4ivCache = {};\n  }\n\n  initCanvas() {\n    if (typeof document !== 'undefined') {\n      const canvas = document.createElement('canvas');\n      canvas.width = 2;\n      canvas.height = 2;\n      return canvas;\n    } else if (typeof OffscreenCanvas !== 'undefined') {\n      return new OffscreenCanvas(0, 0);\n    }\n  }\n\n  initContext() {\n    const settings = {\n      alpha: false,\n      depth: false,\n      antialias: false\n    };\n    return this.canvas.getContext('webgl', settings) || this.canvas.getContext('experimental-webgl', settings);\n  }\n\n  initPlugins(settings) {\n    const pluginsToUse = [];\n    const { source } = this;\n    if (typeof source === 'string') {\n      for (let i = 0; i < plugins.length; i++) {\n        const plugin = plugins[i];\n        if (source.match(plugin.functionMatch)) {\n          pluginsToUse.push(plugin);\n        }\n      }\n    } else if (typeof source === 'object') {\n      if (settings.pluginNames) { \n        for (let i = 0; i < plugins.length; i++) {\n          const plugin = plugins[i];\n          const usePlugin = settings.pluginNames.some(pluginName => pluginName === plugin.name);\n          if (usePlugin) {\n            pluginsToUse.push(plugin);\n          }\n        }\n      }\n    }\n    return pluginsToUse;\n  }\n\n  initExtensions() {\n    this.extensions = {\n      OES_texture_float: this.context.getExtension('OES_texture_float'),\n      OES_texture_float_linear: this.context.getExtension('OES_texture_float_linear'),\n      OES_element_index_uint: this.context.getExtension('OES_element_index_uint'),\n      WEBGL_draw_buffers: this.context.getExtension('WEBGL_draw_buffers'),\n      WEBGL_color_buffer_float: this.context.getExtension('WEBGL_color_buffer_float'),\n    };\n  }\n\n  validateSettings(args) {\n    if (!this.validate) {\n      this.texSize = utils.getKernelTextureSize({\n        optimizeFloatMemory: this.optimizeFloatMemory,\n        precision: this.precision,\n      }, this.output);\n      return;\n    }\n\n    const { features } = this.constructor;\n\n    if (this.optimizeFloatMemory === true && !features.isTextureFloat) {\n      throw new Error('Float textures are not supported');\n    } else if (this.precision === 'single' && !features.isFloatRead) {\n      throw new Error('Single precision not supported');\n    } else if (!this.graphical && this.precision === null && features.isTextureFloat) {\n      this.precision = features.isFloatRead ? 'single' : 'unsigned';\n    }\n\n    if (this.subKernels && this.subKernels.length > 0 && !this.extensions.WEBGL_draw_buffers) {\n      throw new Error('could not instantiate draw buffers extension');\n    }\n\n    if (this.fixIntegerDivisionAccuracy === null) {\n      this.fixIntegerDivisionAccuracy = !features.isIntegerDivisionAccurate;\n    } else if (this.fixIntegerDivisionAccuracy && features.isIntegerDivisionAccurate) {\n      this.fixIntegerDivisionAccuracy = false;\n    }\n\n    this.checkOutput();\n\n    if (!this.output || this.output.length === 0) {\n      if (args.length !== 1) {\n        throw new Error('Auto output only supported for kernels with only one input');\n      }\n\n      const argType = utils.getVariableType(args[0], this.strictIntegers);\n      switch (argType) {\n        case 'Array':\n          this.output = utils.getDimensions(argType);\n          break;\n        case 'NumberTexture':\n        case 'MemoryOptimizedNumberTexture':\n        case 'ArrayTexture(1)':\n        case 'ArrayTexture(2)':\n        case 'ArrayTexture(3)':\n        case 'ArrayTexture(4)':\n          this.output = args[0].output;\n          break;\n        default:\n          throw new Error('Auto output not supported for input type: ' + argType);\n      }\n    }\n\n    if (this.graphical) {\n      if (this.output.length !== 2) {\n        throw new Error('Output must have 2 dimensions on graphical mode');\n      }\n\n      if (this.precision === 'precision') {\n        this.precision = 'unsigned';\n        console.warn('Cannot use graphical mode and single precision at the same time');\n      }\n\n      this.texSize = utils.clone(this.output);\n      return;\n    } else if (this.precision === null && features.isTextureFloat) {\n      this.precision = 'single';\n    }\n\n    this.texSize = utils.getKernelTextureSize({\n      optimizeFloatMemory: this.optimizeFloatMemory,\n      precision: this.precision,\n    }, this.output);\n\n    this.checkTextureSize();\n  }\n\n  updateMaxTexSize() {\n    const { texSize, canvas } = this;\n    if (this.maxTexSize === null) {\n      let canvasIndex = canvases.indexOf(canvas);\n      if (canvasIndex === -1) {\n        canvasIndex = canvases.length;\n        canvases.push(canvas);\n        maxTexSizes[canvasIndex] = [texSize[0], texSize[1]];\n      }\n      this.maxTexSize = maxTexSizes[canvasIndex];\n    }\n    if (this.maxTexSize[0] < texSize[0]) {\n      this.maxTexSize[0] = texSize[0];\n    }\n    if (this.maxTexSize[1] < texSize[1]) {\n      this.maxTexSize[1] = texSize[1];\n    }\n  }\n\n  setupArguments(args) {\n    this.kernelArguments = [];\n    this.argumentTextureCount = 0;\n    const needsArgumentTypes = this.argumentTypes === null;\n    if (needsArgumentTypes) {\n      this.argumentTypes = [];\n    }\n    this.argumentSizes = [];\n    this.argumentBitRatios = [];\n\n    if (args.length < this.argumentNames.length) {\n      throw new Error('not enough arguments for kernel');\n    } else if (args.length > this.argumentNames.length) {\n      throw new Error('too many arguments for kernel');\n    }\n\n    const { context: gl } = this;\n    let textureIndexes = 0;\n\n    const onRequestTexture = () => {\n      return this.createTexture();\n    };\n    const onRequestIndex = () => {\n      return this.constantTextureCount + textureIndexes++;\n    };\n    const onUpdateValueMismatch = (constructor) => {\n      this.switchKernels({\n        type: 'argumentMismatch',\n        needed: constructor\n      });\n    };\n    const onRequestContextHandle = () => {\n      return gl.TEXTURE0 + this.constantTextureCount + this.argumentTextureCount++;\n    };\n\n    for (let index = 0; index < args.length; index++) {\n      const value = args[index];\n      const name = this.argumentNames[index];\n      let type;\n      if (needsArgumentTypes) {\n        type = utils.getVariableType(value, this.strictIntegers);\n        this.argumentTypes.push(type);\n      } else {\n        type = this.argumentTypes[index];\n      }\n      const KernelValue = this.constructor.lookupKernelValueType(type, this.dynamicArguments ? 'dynamic' : 'static', this.precision, args[index]);\n      if (KernelValue === null) {\n        return this.requestFallback(args);\n      }\n      const kernelArgument = new KernelValue(value, {\n        name,\n        type,\n        tactic: this.tactic,\n        origin: 'user',\n        context: gl,\n        checkContext: this.checkContext,\n        kernel: this,\n        strictIntegers: this.strictIntegers,\n        onRequestTexture,\n        onRequestIndex,\n        onUpdateValueMismatch,\n        onRequestContextHandle,\n      });\n      this.kernelArguments.push(kernelArgument);\n      kernelArgument.setup();\n      this.argumentSizes.push(kernelArgument.textureSize);\n      this.argumentBitRatios[index] = kernelArgument.bitRatio;\n    }\n  }\n\n  createTexture() {\n    const texture = this.context.createTexture();\n    this.textureCache.push(texture);\n    return texture;\n  }\n\n  setupConstants(args) {\n    const { context: gl } = this;\n    this.kernelConstants = [];\n    this.forceUploadKernelConstants = [];\n    let needsConstantTypes = this.constantTypes === null;\n    if (needsConstantTypes) {\n      this.constantTypes = {};\n    }\n    this.constantBitRatios = {};\n    let textureIndexes = 0;\n    for (const name in this.constants) {\n      const value = this.constants[name];\n      let type;\n      if (needsConstantTypes) {\n        type = utils.getVariableType(value, this.strictIntegers);\n        this.constantTypes[name] = type;\n      } else {\n        type = this.constantTypes[name];\n      }\n      const KernelValue = this.constructor.lookupKernelValueType(type, 'static', this.precision, value);\n      if (KernelValue === null) {\n        return this.requestFallback(args);\n      }\n      const kernelValue = new KernelValue(value, {\n        name,\n        type,\n        tactic: this.tactic,\n        origin: 'constants',\n        context: this.context,\n        checkContext: this.checkContext,\n        kernel: this,\n        strictIntegers: this.strictIntegers,\n        onRequestTexture: () => {\n          return this.createTexture();\n        },\n        onRequestIndex: () => {\n          return textureIndexes++;\n        },\n        onRequestContextHandle: () => {\n          return gl.TEXTURE0 + this.constantTextureCount++;\n        }\n      });\n      this.constantBitRatios[name] = kernelValue.bitRatio;\n      this.kernelConstants.push(kernelValue);\n      kernelValue.setup();\n      if (kernelValue.forceUploadEachRun) {\n        this.forceUploadKernelConstants.push(kernelValue);\n      }\n    }\n  }\n\n  build() {\n    if (this.built) return;\n    this.initExtensions();\n    this.validateSettings(arguments);\n    this.setupConstants(arguments);\n    if (this.fallbackRequested) return;\n    this.setupArguments(arguments);\n    if (this.fallbackRequested) return;\n    this.updateMaxTexSize();\n    this.translateSource();\n    const failureResult = this.pickRenderStrategy(arguments);\n    if (failureResult) {\n      return failureResult;\n    }\n    const { texSize, context: gl, canvas } = this;\n    gl.enable(gl.SCISSOR_TEST);\n    if (this.pipeline && this.precision === 'single') {\n      gl.viewport(0, 0, this.maxTexSize[0], this.maxTexSize[1]);\n      canvas.width = this.maxTexSize[0];\n      canvas.height = this.maxTexSize[1];\n    } else {\n      gl.viewport(0, 0, this.maxTexSize[0], this.maxTexSize[1]);\n      canvas.width = this.maxTexSize[0];\n      canvas.height = this.maxTexSize[1];\n    }\n    const threadDim = this.threadDim = Array.from(this.output);\n    while (threadDim.length < 3) {\n      threadDim.push(1);\n    }\n\n    const compiledVertexShader = this.getVertexShader(arguments);\n    const vertShader = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(vertShader, compiledVertexShader);\n    gl.compileShader(vertShader);\n    this.vertShader = vertShader;\n\n    const compiledFragmentShader = this.getFragmentShader(arguments);\n    const fragShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(fragShader, compiledFragmentShader);\n    gl.compileShader(fragShader);\n    this.fragShader = fragShader;\n\n    if (this.debug) {\n      console.log('GLSL Shader Output:');\n      console.log(compiledFragmentShader);\n    }\n\n    if (!gl.getShaderParameter(vertShader, gl.COMPILE_STATUS)) {\n      throw new Error('Error compiling vertex shader: ' + gl.getShaderInfoLog(vertShader));\n    }\n    if (!gl.getShaderParameter(fragShader, gl.COMPILE_STATUS)) {\n      throw new Error('Error compiling fragment shader: ' + gl.getShaderInfoLog(fragShader));\n    }\n\n    const program = this.program = gl.createProgram();\n    gl.attachShader(program, vertShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    this.framebuffer = gl.createFramebuffer();\n    this.framebuffer.width = texSize[0];\n    this.framebuffer.height = texSize[1];\n    this.rawValueFramebuffers = {};\n\n    const vertices = new Float32Array([-1, -1,\n      1, -1, -1, 1,\n      1, 1\n    ]);\n    const texCoords = new Float32Array([\n      0, 0,\n      1, 0,\n      0, 1,\n      1, 1\n    ]);\n\n    const texCoordOffset = vertices.byteLength;\n\n    let buffer = this.buffer;\n    if (!buffer) {\n      buffer = this.buffer = gl.createBuffer();\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n      gl.bufferData(gl.ARRAY_BUFFER, vertices.byteLength + texCoords.byteLength, gl.STATIC_DRAW);\n    } else {\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    }\n\n    gl.bufferSubData(gl.ARRAY_BUFFER, 0, vertices);\n    gl.bufferSubData(gl.ARRAY_BUFFER, texCoordOffset, texCoords);\n\n    const aPosLoc = gl.getAttribLocation(this.program, 'aPos');\n    gl.enableVertexAttribArray(aPosLoc);\n    gl.vertexAttribPointer(aPosLoc, 2, gl.FLOAT, false, 0, 0);\n    const aTexCoordLoc = gl.getAttribLocation(this.program, 'aTexCoord');\n    gl.enableVertexAttribArray(aTexCoordLoc);\n    gl.vertexAttribPointer(aTexCoordLoc, 2, gl.FLOAT, false, 0, texCoordOffset);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n\n    let i = 0;\n    gl.useProgram(this.program);\n    for (let p in this.constants) {\n      this.kernelConstants[i++].updateValue(this.constants[p]);\n    }\n\n    this._setupOutputTexture();\n    if (\n      this.subKernels !== null &&\n      this.subKernels.length > 0\n    ) {\n      this._mappedTextureSwitched = {};\n      this._setupSubOutputTextures();\n    }\n    this.buildSignature(arguments);\n    this.built = true;\n  }\n\n  translateSource() {\n    const functionBuilder = FunctionBuilder.fromKernel(this, WebGLFunctionNode, {\n      fixIntegerDivisionAccuracy: this.fixIntegerDivisionAccuracy\n    });\n    this.translatedSource = functionBuilder.getPrototypeString('kernel');\n    this.setupReturnTypes(functionBuilder);\n  }\n\n  setupReturnTypes(functionBuilder) {\n    if (!this.graphical && !this.returnType) {\n      this.returnType = functionBuilder.getKernelResultType();\n    }\n\n    if (this.subKernels && this.subKernels.length > 0) {\n      for (let i = 0; i < this.subKernels.length; i++) {\n        const subKernel = this.subKernels[i];\n        if (!subKernel.returnType) {\n          subKernel.returnType = functionBuilder.getSubKernelResultType(i);\n        }\n      }\n    }\n  }\n\n  run() {\n    const { kernelArguments, texSize, forceUploadKernelConstants, context: gl } = this;\n\n    gl.useProgram(this.program);\n    gl.scissor(0, 0, texSize[0], texSize[1]);\n    if (this.dynamicOutput) {\n      this.setUniform3iv('uOutputDim', new Int32Array(this.threadDim));\n      this.setUniform2iv('uTexSize', texSize);\n    }\n\n    this.setUniform2f('ratio', texSize[0] / this.maxTexSize[0], texSize[1] / this.maxTexSize[1]);\n\n    for (let i = 0; i < forceUploadKernelConstants.length; i++) {\n      const constant = forceUploadKernelConstants[i];\n      constant.updateValue(this.constants[constant.name]);\n      if (this.switchingKernels) return;\n    }\n    for (let i = 0; i < kernelArguments.length; i++) {\n      kernelArguments[i].updateValue(arguments[i]);\n      if (this.switchingKernels) return;\n    }\n\n    if (this.plugins) {\n      for (let i = 0; i < this.plugins.length; i++) {\n        const plugin = this.plugins[i];\n        if (plugin.onBeforeRun) {\n          plugin.onBeforeRun(this);\n        }\n      }\n    }\n\n    if (this.graphical) {\n      if (this.pipeline) {\n        gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n        if (this.immutable) {\n          this._replaceOutputTexture();\n        }\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n        return this.immutable ? this.texture.clone() : this.texture;\n      }\n      gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n      gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n      return;\n    }\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    if (this.immutable) {\n      this._replaceOutputTexture();\n    }\n\n    if (this.subKernels !== null) {\n      if (this.immutable) {\n        this._replaceSubOutputTextures();\n      }\n      this.drawBuffers();\n    }\n\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n  }\n\n  drawBuffers() {\n    this.extensions.WEBGL_draw_buffers.drawBuffersWEBGL(this.drawBuffersMap);\n  }\n\n  getInternalFormat() {\n    return this.context.RGBA;\n  }\n  getTextureFormat() {\n    const { context: gl } = this;\n    switch (this.getInternalFormat()) {\n      case gl.RGBA:\n        return gl.RGBA;\n      default:\n        throw new Error('Unknown internal format');\n    }\n  }\n\n  _replaceOutputTexture() {\n    if (this.texture.beforeMutate() || this._textureSwitched) {\n      const gl = this.context;\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture.texture, 0);\n      this._textureSwitched = false;\n    }\n  }\n\n  _setupOutputTexture() {\n    const gl = this.context;\n    const texSize = this.texSize;\n    if (this.texture) {\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture.texture, 0);\n      return;\n    }\n    const texture = this.createTexture();\n    gl.activeTexture(gl.TEXTURE0 + this.constantTextureCount + this.argumentTextureCount);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    const format = this.getInternalFormat();\n    if (this.precision === 'single') {\n      gl.texImage2D(gl.TEXTURE_2D, 0, format, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);\n    } else {\n      gl.texImage2D(gl.TEXTURE_2D, 0, format, texSize[0], texSize[1], 0, format, gl.UNSIGNED_BYTE, null);\n    }\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    this.texture = new this.TextureConstructor({\n      texture,\n      size: texSize,\n      dimensions: this.threadDim,\n      output: this.output,\n      context: this.context,\n      internalFormat: this.getInternalFormat(),\n      textureFormat: this.getTextureFormat(),\n      kernel: this,\n    });\n  }\n\n  _replaceSubOutputTextures() {\n    const gl = this.context;\n    for (let i = 0; i < this.mappedTextures.length; i++) {\n      const mappedTexture = this.mappedTextures[i];\n      if (mappedTexture.beforeMutate() || this._mappedTextureSwitched[i]) {\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i + 1, gl.TEXTURE_2D, mappedTexture.texture, 0);\n        this._mappedTextureSwitched[i] = false;\n      }\n    }\n  }\n\n  _setupSubOutputTextures() {\n    const gl = this.context;\n    if (this.mappedTextures) {\n      for (let i = 0; i < this.subKernels.length; i++) {\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i + 1, gl.TEXTURE_2D, this.mappedTextures[i].texture, 0);\n      }\n      return;\n    }\n    const texSize = this.texSize;\n    this.drawBuffersMap = [gl.COLOR_ATTACHMENT0];\n    this.mappedTextures = [];\n    for (let i = 0; i < this.subKernels.length; i++) {\n      const texture = this.createTexture();\n      this.drawBuffersMap.push(gl.COLOR_ATTACHMENT0 + i + 1);\n      gl.activeTexture(gl.TEXTURE0 + this.constantTextureCount + this.argumentTextureCount + i);\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n      if (this.precision === 'single') {\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);\n      } else {\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n      }\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i + 1, gl.TEXTURE_2D, texture, 0);\n\n      this.mappedTextures.push(new this.TextureConstructor({\n        texture,\n        size: texSize,\n        dimensions: this.threadDim,\n        output: this.output,\n        context: this.context,\n        internalFormat: this.getInternalFormat(),\n        textureFormat: this.getTextureFormat(),\n        kernel: this,\n      }));\n    }\n  }\n\n  setUniform1f(name, value) {\n    if (this.uniform1fCache.hasOwnProperty(name)) {\n      const cache = this.uniform1fCache[name];\n      if (value === cache) {\n        return;\n      }\n    }\n    this.uniform1fCache[name] = value;\n    const loc = this.getUniformLocation(name);\n    this.context.uniform1f(loc, value);\n  }\n\n  setUniform1i(name, value) {\n    if (this.uniform1iCache.hasOwnProperty(name)) {\n      const cache = this.uniform1iCache[name];\n      if (value === cache) {\n        return;\n      }\n    }\n    this.uniform1iCache[name] = value;\n    const loc = this.getUniformLocation(name);\n    this.context.uniform1i(loc, value);\n  }\n\n  setUniform2f(name, value1, value2) {\n    if (this.uniform2fCache.hasOwnProperty(name)) {\n      const cache = this.uniform2fCache[name];\n      if (\n        value1 === cache[0] &&\n        value2 === cache[1]\n      ) {\n        return;\n      }\n    }\n    this.uniform2fCache[name] = [value1, value2];\n    const loc = this.getUniformLocation(name);\n    this.context.uniform2f(loc, value1, value2);\n  }\n\n  setUniform2fv(name, value) {\n    if (this.uniform2fvCache.hasOwnProperty(name)) {\n      const cache = this.uniform2fvCache[name];\n      if (\n        value[0] === cache[0] &&\n        value[1] === cache[1]\n      ) {\n        return;\n      }\n    }\n    this.uniform2fvCache[name] = value;\n    const loc = this.getUniformLocation(name);\n    this.context.uniform2fv(loc, value);\n  }\n\n  setUniform2iv(name, value) {\n    if (this.uniform2ivCache.hasOwnProperty(name)) {\n      const cache = this.uniform2ivCache[name];\n      if (\n        value[0] === cache[0] &&\n        value[1] === cache[1]\n      ) {\n        return;\n      }\n    }\n    this.uniform2ivCache[name] = value;\n    const loc = this.getUniformLocation(name);\n    this.context.uniform2iv(loc, value);\n  }\n\n  setUniform3fv(name, value) {\n    if (this.uniform3fvCache.hasOwnProperty(name)) {\n      const cache = this.uniform3fvCache[name];\n      if (\n        value[0] === cache[0] &&\n        value[1] === cache[1] &&\n        value[2] === cache[2]\n      ) {\n        return;\n      }\n    }\n    this.uniform3fvCache[name] = value;\n    const loc = this.getUniformLocation(name);\n    this.context.uniform3fv(loc, value);\n  }\n\n  setUniform3iv(name, value) {\n    if (this.uniform3ivCache.hasOwnProperty(name)) {\n      const cache = this.uniform3ivCache[name];\n      if (\n        value[0] === cache[0] &&\n        value[1] === cache[1] &&\n        value[2] === cache[2]\n      ) {\n        return;\n      }\n    }\n    this.uniform3ivCache[name] = value;\n    const loc = this.getUniformLocation(name);\n    this.context.uniform3iv(loc, value);\n  }\n\n  setUniform4fv(name, value) {\n    if (this.uniform4fvCache.hasOwnProperty(name)) {\n      const cache = this.uniform4fvCache[name];\n      if (\n        value[0] === cache[0] &&\n        value[1] === cache[1] &&\n        value[2] === cache[2] &&\n        value[3] === cache[3]\n      ) {\n        return;\n      }\n    }\n    this.uniform4fvCache[name] = value;\n    const loc = this.getUniformLocation(name);\n    this.context.uniform4fv(loc, value);\n  }\n\n  setUniform4iv(name, value) {\n    if (this.uniform4ivCache.hasOwnProperty(name)) {\n      const cache = this.uniform4ivCache[name];\n      if (\n        value[0] === cache[0] &&\n        value[1] === cache[1] &&\n        value[2] === cache[2] &&\n        value[3] === cache[3]\n      ) {\n        return;\n      }\n    }\n    this.uniform4ivCache[name] = value;\n    const loc = this.getUniformLocation(name);\n    this.context.uniform4iv(loc, value);\n  }\n\n  getUniformLocation(name) {\n    if (this.programUniformLocationCache.hasOwnProperty(name)) {\n      return this.programUniformLocationCache[name];\n    }\n    return this.programUniformLocationCache[name] = this.context.getUniformLocation(this.program, name);\n  }\n\n  _getFragShaderArtifactMap(args) {\n    return {\n      HEADER: this._getHeaderString(),\n      LOOP_MAX: this._getLoopMaxString(),\n      PLUGINS: this._getPluginsString(),\n      CONSTANTS: this._getConstantsString(),\n      DECODE32_ENDIANNESS: this._getDecode32EndiannessString(),\n      ENCODE32_ENDIANNESS: this._getEncode32EndiannessString(),\n      DIVIDE_WITH_INTEGER_CHECK: this._getDivideWithIntegerCheckString(),\n      INJECTED_NATIVE: this._getInjectedNative(),\n      MAIN_CONSTANTS: this._getMainConstantsString(),\n      MAIN_ARGUMENTS: this._getMainArgumentsString(args),\n      KERNEL: this.getKernelString(),\n      MAIN_RESULT: this.getMainResultString(),\n      FLOAT_TACTIC_DECLARATION: this.getFloatTacticDeclaration(),\n      INT_TACTIC_DECLARATION: this.getIntTacticDeclaration(),\n      SAMPLER_2D_TACTIC_DECLARATION: this.getSampler2DTacticDeclaration(),\n      SAMPLER_2D_ARRAY_TACTIC_DECLARATION: this.getSampler2DArrayTacticDeclaration(),\n    };\n  }\n\n  _getVertShaderArtifactMap(args) {\n    return {\n      FLOAT_TACTIC_DECLARATION: this.getFloatTacticDeclaration(),\n      INT_TACTIC_DECLARATION: this.getIntTacticDeclaration(),\n      SAMPLER_2D_TACTIC_DECLARATION: this.getSampler2DTacticDeclaration(),\n      SAMPLER_2D_ARRAY_TACTIC_DECLARATION: this.getSampler2DArrayTacticDeclaration(),\n    };\n  }\n\n  _getHeaderString() {\n    return (\n      this.subKernels !== null ?\n      '#extension GL_EXT_draw_buffers : require\\n' :\n      ''\n    );\n  }\n\n  _getLoopMaxString() {\n    return (\n      this.loopMaxIterations ?\n      ` ${parseInt(this.loopMaxIterations)};\\n` :\n      ' 1000;\\n'\n    );\n  }\n\n  _getPluginsString() {\n    if (!this.plugins) return '\\n';\n    return this.plugins.map(plugin => plugin.source && this.source.match(plugin.functionMatch) ? plugin.source : '').join('\\n');\n  }\n\n  _getConstantsString() {\n    const result = [];\n    const { threadDim, texSize } = this;\n    if (this.dynamicOutput) {\n      result.push(\n        'uniform ivec3 uOutputDim',\n        'uniform ivec2 uTexSize'\n      );\n    } else {\n      result.push(\n        `ivec3 uOutputDim = ivec3(${threadDim[0]}, ${threadDim[1]}, ${threadDim[2]})`,\n        `ivec2 uTexSize = ivec2(${texSize[0]}, ${texSize[1]})`\n      );\n    }\n    return utils.linesToString(result);\n  }\n\n  _getTextureCoordinate() {\n    const subKernels = this.subKernels;\n    if (subKernels === null || subKernels.length < 1) {\n      return 'varying vec2 vTexCoord;\\n';\n    } else {\n      return 'out vec2 vTexCoord;\\n';\n    }\n  }\n\n  _getDecode32EndiannessString() {\n    return (\n      this.endianness === 'LE' ?\n      '' :\n      '  texel.rgba = texel.abgr;\\n'\n    );\n  }\n\n  _getEncode32EndiannessString() {\n    return (\n      this.endianness === 'LE' ?\n      '' :\n      '  texel.rgba = texel.abgr;\\n'\n    );\n  }\n\n  _getDivideWithIntegerCheckString() {\n    return this.fixIntegerDivisionAccuracy ?\n      `float divWithIntCheck(float x, float y) {\n  if (floor(x) == x && floor(y) == y && integerMod(x, y) == 0.0) {\n    return float(int(x) / int(y));\n  }\n  return x / y;\n}\n\nfloat integerCorrectionModulo(float number, float divisor) {\n  if (number < 0.0) {\n    number = abs(number);\n    if (divisor < 0.0) {\n      divisor = abs(divisor);\n    }\n    return -(number - (divisor * floor(divWithIntCheck(number, divisor))));\n  }\n  if (divisor < 0.0) {\n    divisor = abs(divisor);\n  }\n  return number - (divisor * floor(divWithIntCheck(number, divisor)));\n}` :\n      '';\n  }\n\n  _getMainArgumentsString(args) {\n    const results = [];\n    const { argumentNames } = this;\n    for (let i = 0; i < argumentNames.length; i++) {\n      results.push(this.kernelArguments[i].getSource(args[i]));\n    }\n    return results.join('');\n  }\n\n  _getInjectedNative() {\n    return this.injectedNative || '';\n  }\n\n  _getMainConstantsString() {\n    const result = [];\n    const { constants } = this;\n    if (constants) {\n      let i = 0;\n      for (const name in constants) {\n        if (!this.constants.hasOwnProperty(name)) continue;\n        result.push(this.kernelConstants[i++].getSource(this.constants[name]));\n      }\n    }\n    return result.join('');\n  }\n\n  getRawValueFramebuffer(width, height) {\n    if (!this.rawValueFramebuffers[width]) {\n      this.rawValueFramebuffers[width] = {};\n    }\n    if (!this.rawValueFramebuffers[width][height]) {\n      const framebuffer = this.context.createFramebuffer();\n      framebuffer.width = width;\n      framebuffer.height = height;\n      this.rawValueFramebuffers[width][height] = framebuffer;\n    }\n    return this.rawValueFramebuffers[width][height];\n  }\n\n  getKernelResultDeclaration() {\n    switch (this.returnType) {\n      case 'Array(2)':\n        return 'vec2 kernelResult';\n      case 'Array(3)':\n        return 'vec3 kernelResult';\n      case 'Array(4)':\n        return 'vec4 kernelResult';\n      case 'LiteralInteger':\n      case 'Float':\n      case 'Number':\n      case 'Integer':\n        return 'float kernelResult';\n      default:\n        if (this.graphical) {\n          return 'float kernelResult';\n        } else {\n          throw new Error(`unrecognized output type \"${ this.returnType }\"`);\n        }\n    }\n  }\n  getKernelString() {\n    const result = [this.getKernelResultDeclaration()];\n    const { subKernels } = this;\n    if (subKernels !== null) {\n      switch (this.returnType) {\n        case 'Number':\n        case 'Float':\n        case 'Integer':\n          for (let i = 0; i < subKernels.length; i++) {\n            const subKernel = subKernels[i];\n            result.push(\n              subKernel.returnType === 'Integer' ?\n              `int subKernelResult_${ subKernel.name } = 0` :\n              `float subKernelResult_${ subKernel.name } = 0.0`\n            );\n          }\n          break;\n        case 'Array(2)':\n          for (let i = 0; i < subKernels.length; i++) {\n            result.push(\n              `vec2 subKernelResult_${ subKernels[i].name }`\n            );\n          }\n          break;\n        case 'Array(3)':\n          for (let i = 0; i < subKernels.length; i++) {\n            result.push(\n              `vec3 subKernelResult_${ subKernels[i].name }`\n            );\n          }\n          break;\n        case 'Array(4)':\n          for (let i = 0; i < subKernels.length; i++) {\n            result.push(\n              `vec4 subKernelResult_${ subKernels[i].name }`\n            );\n          }\n          break;\n      }\n    }\n\n    return utils.linesToString(result) + this.translatedSource;\n  }\n\n  getMainResultGraphical() {\n    return utils.linesToString([\n      '  threadId = indexTo3D(index, uOutputDim)',\n      '  kernel()',\n      '  gl_FragColor = actualColor',\n    ]);\n  }\n\n  getMainResultPackedPixels() {\n    switch (this.returnType) {\n      case 'LiteralInteger':\n      case 'Number':\n      case 'Integer':\n      case 'Float':\n        return this.getMainResultKernelPackedPixels() +\n          this.getMainResultSubKernelPackedPixels();\n      default:\n        throw new Error(`packed output only usable with Numbers, \"${this.returnType}\" specified`);\n    }\n  }\n\n  getMainResultKernelPackedPixels() {\n    return utils.linesToString([\n      '  threadId = indexTo3D(index, uOutputDim)',\n      '  kernel()',\n      `  gl_FragData[0] = ${this.useLegacyEncoder ? 'legacyEncode32' : 'encode32'}(kernelResult)`\n    ]);\n  }\n\n  getMainResultSubKernelPackedPixels() {\n    const result = [];\n    if (!this.subKernels) return '';\n    for (let i = 0; i < this.subKernels.length; i++) {\n      const subKernel = this.subKernels[i];\n      if (subKernel.returnType === 'Integer') {\n        result.push(\n          `  gl_FragData[${i + 1}] = ${this.useLegacyEncoder ? 'legacyEncode32' : 'encode32'}(float(subKernelResult_${this.subKernels[i].name}))`\n        );\n      } else {\n        result.push(\n          `  gl_FragData[${i + 1}] = ${this.useLegacyEncoder ? 'legacyEncode32' : 'encode32'}(subKernelResult_${this.subKernels[i].name})`\n        );\n      }\n    }\n    return utils.linesToString(result);\n  }\n\n  getMainResultMemoryOptimizedFloats() {\n    const result = [\n      '  index *= 4',\n    ];\n\n    switch (this.returnType) {\n      case 'Number':\n      case 'Integer':\n      case 'Float':\n        const channels = ['r', 'g', 'b', 'a'];\n        for (let i = 0; i < channels.length; i++) {\n          const channel = channels[i];\n          this.getMainResultKernelMemoryOptimizedFloats(result, channel);\n          this.getMainResultSubKernelMemoryOptimizedFloats(result, channel);\n          if (i + 1 < channels.length) {\n            result.push('  index += 1');\n          }\n        }\n        break;\n      default:\n        throw new Error(`optimized output only usable with Numbers, ${this.returnType} specified`);\n    }\n\n    return utils.linesToString(result);\n  }\n\n  getMainResultKernelMemoryOptimizedFloats(result, channel) {\n    result.push(\n      '  threadId = indexTo3D(index, uOutputDim)',\n      '  kernel()',\n      `  gl_FragData[0].${channel} = kernelResult`\n    );\n  }\n\n  getMainResultSubKernelMemoryOptimizedFloats(result, channel) {\n    if (!this.subKernels) return result;\n    for (let i = 0; i < this.subKernels.length; i++) {\n      const subKernel = this.subKernels[i];\n      if (subKernel.returnType === 'Integer') {\n        result.push(\n          `  gl_FragData[${i + 1}].${channel} = float(subKernelResult_${this.subKernels[i].name})`\n        );\n      } else {\n        result.push(\n          `  gl_FragData[${i + 1}].${channel} = subKernelResult_${this.subKernels[i].name}`\n        );\n      }\n    }\n  }\n\n  getMainResultKernelNumberTexture() {\n    return [\n      '  threadId = indexTo3D(index, uOutputDim)',\n      '  kernel()',\n      '  gl_FragData[0][0] = kernelResult',\n    ];\n  }\n\n  getMainResultSubKernelNumberTexture() {\n    const result = [];\n    if (!this.subKernels) return result;\n    for (let i = 0; i < this.subKernels.length; ++i) {\n      const subKernel = this.subKernels[i];\n      if (subKernel.returnType === 'Integer') {\n        result.push(\n          `  gl_FragData[${i + 1}][0] = float(subKernelResult_${subKernel.name})`\n        );\n      } else {\n        result.push(\n          `  gl_FragData[${i + 1}][0] = subKernelResult_${subKernel.name}`\n        );\n      }\n    }\n    return result;\n  }\n\n  getMainResultKernelArray2Texture() {\n    return [\n      '  threadId = indexTo3D(index, uOutputDim)',\n      '  kernel()',\n      '  gl_FragData[0][0] = kernelResult[0]',\n      '  gl_FragData[0][1] = kernelResult[1]',\n    ];\n  }\n\n  getMainResultSubKernelArray2Texture() {\n    const result = [];\n    if (!this.subKernels) return result;\n    for (let i = 0; i < this.subKernels.length; ++i) {\n      result.push(\n        `  gl_FragData[${i + 1}][0] = subKernelResult_${this.subKernels[i].name}[0]`,\n        `  gl_FragData[${i + 1}][1] = subKernelResult_${this.subKernels[i].name}[1]`\n      );\n    }\n    return result;\n  }\n\n  getMainResultKernelArray3Texture() {\n    return [\n      '  threadId = indexTo3D(index, uOutputDim)',\n      '  kernel()',\n      '  gl_FragData[0][0] = kernelResult[0]',\n      '  gl_FragData[0][1] = kernelResult[1]',\n      '  gl_FragData[0][2] = kernelResult[2]',\n    ];\n  }\n\n  getMainResultSubKernelArray3Texture() {\n    const result = [];\n    if (!this.subKernels) return result;\n    for (let i = 0; i < this.subKernels.length; ++i) {\n      result.push(\n        `  gl_FragData[${i + 1}][0] = subKernelResult_${this.subKernels[i].name}[0]`,\n        `  gl_FragData[${i + 1}][1] = subKernelResult_${this.subKernels[i].name}[1]`,\n        `  gl_FragData[${i + 1}][2] = subKernelResult_${this.subKernels[i].name}[2]`\n      );\n    }\n    return result;\n  }\n\n  getMainResultKernelArray4Texture() {\n    return [\n      '  threadId = indexTo3D(index, uOutputDim)',\n      '  kernel()',\n      '  gl_FragData[0] = kernelResult',\n    ];\n  }\n\n  getMainResultSubKernelArray4Texture() {\n    const result = [];\n    if (!this.subKernels) return result;\n    switch (this.returnType) {\n      case 'Number':\n      case 'Float':\n      case 'Integer':\n        for (let i = 0; i < this.subKernels.length; ++i) {\n          const subKernel = this.subKernels[i];\n          if (subKernel.returnType === 'Integer') {\n            result.push(\n              `  gl_FragData[${i + 1}] = float(subKernelResult_${this.subKernels[i].name})`\n            );\n          } else {\n            result.push(\n              `  gl_FragData[${i + 1}] = subKernelResult_${this.subKernels[i].name}`\n            );\n          }\n        }\n        break;\n      case 'Array(2)':\n        for (let i = 0; i < this.subKernels.length; ++i) {\n          result.push(\n            `  gl_FragData[${i + 1}][0] = subKernelResult_${this.subKernels[i].name}[0]`,\n            `  gl_FragData[${i + 1}][1] = subKernelResult_${this.subKernels[i].name}[1]`\n          );\n        }\n        break;\n      case 'Array(3)':\n        for (let i = 0; i < this.subKernels.length; ++i) {\n          result.push(\n            `  gl_FragData[${i + 1}][0] = subKernelResult_${this.subKernels[i].name}[0]`,\n            `  gl_FragData[${i + 1}][1] = subKernelResult_${this.subKernels[i].name}[1]`,\n            `  gl_FragData[${i + 1}][2] = subKernelResult_${this.subKernels[i].name}[2]`\n          );\n        }\n        break;\n      case 'Array(4)':\n        for (let i = 0; i < this.subKernels.length; ++i) {\n          result.push(\n            `  gl_FragData[${i + 1}][0] = subKernelResult_${this.subKernels[i].name}[0]`,\n            `  gl_FragData[${i + 1}][1] = subKernelResult_${this.subKernels[i].name}[1]`,\n            `  gl_FragData[${i + 1}][2] = subKernelResult_${this.subKernels[i].name}[2]`,\n            `  gl_FragData[${i + 1}][3] = subKernelResult_${this.subKernels[i].name}[3]`\n          );\n        }\n        break;\n    }\n\n    return result;\n  }\n\n  replaceArtifacts(src, map) {\n    return src.replace(/[ ]*__([A-Z]+[0-9]*([_]?[A-Z]*[0-9]?)*)__;\\n/g, (match, artifact) => {\n      if (map.hasOwnProperty(artifact)) {\n        return map[artifact];\n      }\n      throw `unhandled artifact ${artifact}`;\n    });\n  }\n\n  getFragmentShader(args) {\n    if (this.compiledFragmentShader !== null) {\n      return this.compiledFragmentShader;\n    }\n    return this.compiledFragmentShader = this.replaceArtifacts(this.constructor.fragmentShader, this._getFragShaderArtifactMap(args));\n  }\n\n  getVertexShader(args) {\n    if (this.compiledVertexShader !== null) {\n      return this.compiledVertexShader;\n    }\n    return this.compiledVertexShader = this.replaceArtifacts(this.constructor.vertexShader, this._getVertShaderArtifactMap(args));\n  }\n\n  toString() {\n    const setupContextString = utils.linesToString([\n      `const gl = context`,\n    ]);\n    return glKernelString(this.constructor, arguments, this, setupContextString);\n  }\n\n  destroy(removeCanvasReferences) {\n    if (!this.context) return;\n    if (this.buffer) {\n      this.context.deleteBuffer(this.buffer);\n    }\n    if (this.framebuffer) {\n      this.context.deleteFramebuffer(this.framebuffer);\n    }\n    for (const width in this.rawValueFramebuffers) {\n      for (const height in this.rawValueFramebuffers[width]) {\n        this.context.deleteFramebuffer(this.rawValueFramebuffers[width][height]);\n        delete this.rawValueFramebuffers[width][height];\n      }\n      delete this.rawValueFramebuffers[width];\n    }\n    if (this.vertShader) {\n      this.context.deleteShader(this.vertShader);\n    }\n    if (this.fragShader) {\n      this.context.deleteShader(this.fragShader);\n    }\n    if (this.program) {\n      this.context.deleteProgram(this.program);\n    }\n    if (this.texture) {\n      this.texture.delete();\n      const textureCacheIndex = this.textureCache.indexOf(this.texture.texture);\n      if (textureCacheIndex > -1) {\n        this.textureCache.splice(textureCacheIndex, 1);\n      }\n      this.texture = null;\n    }\n    if (this.mappedTextures && this.mappedTextures.length) {\n      for (let i = 0; i < this.mappedTextures.length; i++) {\n        const mappedTexture = this.mappedTextures[i];\n        mappedTexture.delete();\n        const textureCacheIndex = this.textureCache.indexOf(mappedTexture.texture);\n        if (textureCacheIndex > -1) {\n          this.textureCache.splice(textureCacheIndex, 1);\n        }\n      }\n      this.mappedTextures = null;\n    }\n    if (this.kernelArguments) {\n      for (let i = 0; i < this.kernelArguments.length; i++) {\n        this.kernelArguments[i].destroy();\n      }\n    }\n    if (this.kernelConstants) {\n      for (let i = 0; i < this.kernelConstants.length; i++) {\n        this.kernelConstants[i].destroy();\n      }\n    }\n    while (this.textureCache.length > 0) {\n      const texture = this.textureCache.pop();\n      this.context.deleteTexture(texture);\n    }\n    if (removeCanvasReferences) {\n      const idx = canvases.indexOf(this.canvas);\n      if (idx >= 0) {\n        canvases[idx] = null;\n        maxTexSizes[idx] = null;\n      }\n    }\n    this.destroyExtensions();\n    delete this.context;\n    delete this.canvas;\n    if (!this.gpu) return;\n    const i = this.gpu.kernels.indexOf(this);\n    if (i === -1) return;\n    this.gpu.kernels.splice(i, 1);\n  }\n\n  destroyExtensions() {\n    this.extensions.OES_texture_float = null;\n    this.extensions.OES_texture_float_linear = null;\n    this.extensions.OES_element_index_uint = null;\n    this.extensions.WEBGL_draw_buffers = null;\n  }\n\n  static destroyContext(context) {\n    const extension = context.getExtension('WEBGL_lose_context');\n    if (extension) {\n      extension.loseContext();\n    }\n  }\n\n  toJSON() {\n    const json = super.toJSON();\n    json.functionNodes = FunctionBuilder.fromKernel(this, WebGLFunctionNode).toJSON();\n    json.settings.threadDim = this.threadDim;\n    return json;\n  }\n}\n\nmodule.exports = {\n  WebGLKernel\n};\n},{\"../../plugins/math-random-uniformly-distributed\":112,\"../../utils\":114,\"../function-builder\":9,\"../gl/kernel\":13,\"../gl/kernel-string\":12,\"./fragment-shader\":37,\"./function-node\":38,\"./kernel-value-maps\":39,\"./vertex-shader\":71}],71:[function(require,module,exports){\nconst vertexShader = `__FLOAT_TACTIC_DECLARATION__;\n__INT_TACTIC_DECLARATION__;\n__SAMPLER_2D_TACTIC_DECLARATION__;\n\nattribute vec2 aPos;\nattribute vec2 aTexCoord;\n\nvarying vec2 vTexCoord;\nuniform vec2 ratio;\n\nvoid main(void) {\n  gl_Position = vec4((aPos + vec2(1)) * ratio + vec2(-1), 0, 1);\n  vTexCoord = aTexCoord;\n}`;\n\nmodule.exports = {\n  vertexShader\n};\n},{}],72:[function(require,module,exports){\nconst fragmentShader = `#version 300 es\n__HEADER__;\n__FLOAT_TACTIC_DECLARATION__;\n__INT_TACTIC_DECLARATION__;\n__SAMPLER_2D_TACTIC_DECLARATION__;\n__SAMPLER_2D_ARRAY_TACTIC_DECLARATION__;\n\nconst int LOOP_MAX = __LOOP_MAX__;\n\n__PLUGINS__;\n__CONSTANTS__;\n\nin vec2 vTexCoord;\n\nfloat atan2(float v1, float v2) {\n  if (v1 == 0.0 || v2 == 0.0) return 0.0;\n  return atan(v1 / v2);\n}\n\nfloat cbrt(float x) {\n  if (x >= 0.0) {\n    return pow(x, 1.0 / 3.0);\n  } else {\n    return -pow(x, 1.0 / 3.0);\n  }\n}\n\nfloat expm1(float x) {\n  return pow(${Math.E}, x) - 1.0; \n}\n\nfloat fround(highp float x) {\n  return x;\n}\n\nfloat imul(float v1, float v2) {\n  return float(int(v1) * int(v2));\n}\n\nfloat log10(float x) {\n  return log2(x) * (1.0 / log2(10.0));\n}\n\nfloat log1p(float x) {\n  return log(1.0 + x);\n}\n\nfloat _pow(float v1, float v2) {\n  if (v2 == 0.0) return 1.0;\n  return pow(v1, v2);\n}\n\nfloat _round(float x) {\n  return floor(x + 0.5);\n}\n\n\nconst int BIT_COUNT = 32;\nint modi(int x, int y) {\n  return x - y * (x / y);\n}\n\nint bitwiseOr(int a, int b) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) || (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 || b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseXOR(int a, int b) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) != (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 || b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseAnd(int a, int b) {\n  int result = 0;\n  int n = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) && (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 && b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseNot(int a) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (modi(a, 2) == 0) {\n      result += n;    \n    }\n    a = a / 2;\n    n = n * 2;\n  }\n  return result;\n}\nint bitwiseZeroFillLeftShift(int n, int shift) {\n  int maxBytes = BIT_COUNT;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (maxBytes >= n) {\n      break;\n    }\n    maxBytes *= 2;\n  }\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= shift) {\n      break;\n    }\n    n *= 2;\n  }\n\n  int result = 0;\n  int byteVal = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= maxBytes) break;\n    if (modi(n, 2) > 0) { result += byteVal; }\n    n = int(n / 2);\n    byteVal *= 2;\n  }\n  return result;\n}\n\nint bitwiseSignedRightShift(int num, int shifts) {\n  return int(floor(float(num) / pow(2.0, float(shifts))));\n}\n\nint bitwiseZeroFillRightShift(int n, int shift) {\n  int maxBytes = BIT_COUNT;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (maxBytes >= n) {\n      break;\n    }\n    maxBytes *= 2;\n  }\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= shift) {\n      break;\n    }\n    n /= 2;\n  }\n  int result = 0;\n  int byteVal = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= maxBytes) break;\n    if (modi(n, 2) > 0) { result += byteVal; }\n    n = int(n / 2);\n    byteVal *= 2;\n  }\n  return result;\n}\n\nvec2 integerMod(vec2 x, float y) {\n  vec2 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec3 integerMod(vec3 x, float y) {\n  vec3 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec4 integerMod(vec4 x, vec4 y) {\n  vec4 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nfloat integerMod(float x, float y) {\n  float res = floor(mod(x, y));\n  return res * (res > floor(y) - 1.0 ? 0.0 : 1.0);\n}\n\nint integerMod(int x, int y) {\n  return x - (y * int(x/y));\n}\n\n__DIVIDE_WITH_INTEGER_CHECK__;\n\n// Here be dragons!\n// DO NOT OPTIMIZE THIS CODE\n// YOU WILL BREAK SOMETHING ON SOMEBODY\\'S MACHINE\n// LEAVE IT AS IT IS, LEST YOU WASTE YOUR OWN TIME\nconst vec2 MAGIC_VEC = vec2(1.0, -256.0);\nconst vec4 SCALE_FACTOR = vec4(1.0, 256.0, 65536.0, 0.0);\nconst vec4 SCALE_FACTOR_INV = vec4(1.0, 0.00390625, 0.0000152587890625, 0.0); // 1, 1/256, 1/65536\nfloat decode32(vec4 texel) {\n  __DECODE32_ENDIANNESS__;\n  texel *= 255.0;\n  vec2 gte128;\n  gte128.x = texel.b >= 128.0 ? 1.0 : 0.0;\n  gte128.y = texel.a >= 128.0 ? 1.0 : 0.0;\n  float exponent = 2.0 * texel.a - 127.0 + dot(gte128, MAGIC_VEC);\n  float res = exp2(round(exponent));\n  texel.b = texel.b - 128.0 * gte128.x;\n  res = dot(texel, SCALE_FACTOR) * exp2(round(exponent-23.0)) + res;\n  res *= gte128.y * -2.0 + 1.0;\n  return res;\n}\n\nfloat decode16(vec4 texel, int index) {\n  int channel = integerMod(index, 2);\n  return texel[channel*2] * 255.0 + texel[channel*2 + 1] * 65280.0;\n}\n\nfloat decode8(vec4 texel, int index) {\n  int channel = integerMod(index, 4);\n  return texel[channel] * 255.0;\n}\n\nvec4 legacyEncode32(float f) {\n  float F = abs(f);\n  float sign = f < 0.0 ? 1.0 : 0.0;\n  float exponent = floor(log2(F));\n  float mantissa = (exp2(-exponent) * F);\n  // exponent += floor(log2(mantissa));\n  vec4 texel = vec4(F * exp2(23.0-exponent)) * SCALE_FACTOR_INV;\n  texel.rg = integerMod(texel.rg, 256.0);\n  texel.b = integerMod(texel.b, 128.0);\n  texel.a = exponent*0.5 + 63.5;\n  texel.ba += vec2(integerMod(exponent+127.0, 2.0), sign) * 128.0;\n  texel = floor(texel);\n  texel *= 0.003921569; // 1/255\n  __ENCODE32_ENDIANNESS__;\n  return texel;\n}\n\n// https://github.com/gpujs/gpu.js/wiki/Encoder-details\nvec4 encode32(float value) {\n  if (value == 0.0) return vec4(0, 0, 0, 0);\n\n  float exponent;\n  float mantissa;\n  vec4  result;\n  float sgn;\n\n  sgn = step(0.0, -value);\n  value = abs(value);\n\n  exponent = floor(log2(value));\n\n  mantissa = value*pow(2.0, -exponent)-1.0;\n  exponent = exponent+127.0;\n  result   = vec4(0,0,0,0);\n\n  result.a = floor(exponent/2.0);\n  exponent = exponent - result.a*2.0;\n  result.a = result.a + 128.0*sgn;\n\n  result.b = floor(mantissa * 128.0);\n  mantissa = mantissa - result.b / 128.0;\n  result.b = result.b + exponent*128.0;\n\n  result.g = floor(mantissa*32768.0);\n  mantissa = mantissa - result.g/32768.0;\n\n  result.r = floor(mantissa*8388608.0);\n  return result/255.0;\n}\n// Dragons end here\n\nint index;\nivec3 threadId;\n\nivec3 indexTo3D(int idx, ivec3 texDim) {\n  int z = int(idx / (texDim.x * texDim.y));\n  idx -= z * int(texDim.x * texDim.y);\n  int y = int(idx / texDim.x);\n  int x = int(integerMod(idx, texDim.x));\n  return ivec3(x, y, z);\n}\n\nfloat get32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize));\n  return decode32(texel);\n}\n\nfloat get16(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + (texDim.x * (y + (texDim.y * z)));\n  int w = texSize.x * 2;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize.x * 2, texSize.y));\n  return decode16(texel, index);\n}\n\nfloat get8(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + (texDim.x * (y + (texDim.y * z)));\n  int w = texSize.x * 4;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize.x * 4, texSize.y));\n  return decode8(texel, index);\n}\n\nfloat getMemoryOptimized32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + (texDim.x * (y + (texDim.y * z)));\n  int channel = integerMod(index, 4);\n  index = index / 4;\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  index = index / 4;\n  vec4 texel = texture(tex, st / vec2(texSize));\n  return texel[channel];\n}\n\nvec4 getImage2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  return texture(tex, st / vec2(texSize));\n}\n\nvec4 getImage3D(sampler2DArray tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  return texture(tex, vec3(st / vec2(texSize), z));\n}\n\nfloat getFloatFromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return result[0];\n}\n\nvec2 getVec2FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return vec2(result[0], result[1]);\n}\n\nvec2 getMemoryOptimizedVec2(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int channel = integerMod(index, 2);\n  index = index / 2;\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize));\n  if (channel == 0) return vec2(texel.r, texel.g);\n  if (channel == 1) return vec2(texel.b, texel.a);\n  return vec2(0.0, 0.0);\n}\n\nvec3 getVec3FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return vec3(result[0], result[1], result[2]);\n}\n\nvec3 getMemoryOptimizedVec3(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int fieldIndex = 3 * (x + texDim.x * (y + texDim.y * z));\n  int vectorIndex = fieldIndex / 4;\n  int vectorOffset = fieldIndex - vectorIndex * 4;\n  int readY = vectorIndex / texSize.x;\n  int readX = vectorIndex - readY * texSize.x;\n  vec4 tex1 = texture(tex, (vec2(readX, readY) + 0.5) / vec2(texSize));\n\n  if (vectorOffset == 0) {\n    return tex1.xyz;\n  } else if (vectorOffset == 1) {\n    return tex1.yzw;\n  } else {\n    readX++;\n    if (readX >= texSize.x) {\n      readX = 0;\n      readY++;\n    }\n    vec4 tex2 = texture(tex, vec2(readX, readY) / vec2(texSize));\n    if (vectorOffset == 2) {\n      return vec3(tex1.z, tex1.w, tex2.x);\n    } else {\n      return vec3(tex1.w, tex2.x, tex2.y);\n    }\n  }\n}\n\nvec4 getVec4FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  return getImage2D(tex, texSize, texDim, z, y, x);\n}\n\nvec4 getMemoryOptimizedVec4(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int channel = integerMod(index, 2);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize));\n  return vec4(texel.r, texel.g, texel.b, texel.a);\n}\n\nvec4 actualColor;\nvoid color(float r, float g, float b, float a) {\n  actualColor = vec4(r,g,b,a);\n}\n\nvoid color(float r, float g, float b) {\n  color(r,g,b,1.0);\n}\n\nfloat modulo(float number, float divisor) {\n  if (number < 0.0) {\n    number = abs(number);\n    if (divisor < 0.0) {\n      divisor = abs(divisor);\n    }\n    return -mod(number, divisor);\n  }\n  if (divisor < 0.0) {\n    divisor = abs(divisor);\n  }\n  return mod(number, divisor);\n}\n\n__INJECTED_NATIVE__;\n__MAIN_CONSTANTS__;\n__MAIN_ARGUMENTS__;\n__KERNEL__;\n\nvoid main(void) {\n  index = int(vTexCoord.s * float(uTexSize.x)) + int(vTexCoord.t * float(uTexSize.y)) * uTexSize.x;\n  __MAIN_RESULT__;\n}`;\n\nmodule.exports = {\n  fragmentShader\n};\n},{}],73:[function(require,module,exports){\nconst { utils } = require('../../utils');\nconst { WebGLFunctionNode } = require('../web-gl/function-node');\n\nclass WebGL2FunctionNode extends WebGLFunctionNode {\n\n  astIdentifierExpression(idtNode, retArr) {\n    if (idtNode.type !== 'Identifier') {\n      throw this.astErrorOutput(\n        'IdentifierExpression - not an Identifier',\n        idtNode\n      );\n    }\n\n    const type = this.getType(idtNode);\n\n    const name = utils.sanitizeName(idtNode.name);\n    if (idtNode.name === 'Infinity') {\n      retArr.push('intBitsToFloat(2139095039)');\n    } else if (type === 'Boolean') {\n      if (this.argumentNames.indexOf(name) > -1) {\n        retArr.push(`bool(user_${name})`);\n      } else {\n        retArr.push(`user_${name}`);\n      }\n    } else {\n      retArr.push(`user_${name}`);\n    }\n\n    return retArr;\n  }\n}\n\nmodule.exports = {\n  WebGL2FunctionNode\n};\n},{\"../../utils\":114,\"../web-gl/function-node\":38}],74:[function(require,module,exports){\nconst { WebGL2KernelValueBoolean } = require('./kernel-value/boolean');\nconst { WebGL2KernelValueFloat } = require('./kernel-value/float');\nconst { WebGL2KernelValueInteger } = require('./kernel-value/integer');\n\nconst { WebGL2KernelValueHTMLImage } = require('./kernel-value/html-image');\nconst { WebGL2KernelValueDynamicHTMLImage } = require('./kernel-value/dynamic-html-image');\n\nconst { WebGL2KernelValueHTMLImageArray } = require('./kernel-value/html-image-array');\nconst { WebGL2KernelValueDynamicHTMLImageArray } = require('./kernel-value/dynamic-html-image-array');\n\nconst { WebGL2KernelValueHTMLVideo } = require('./kernel-value/html-video');\nconst { WebGL2KernelValueDynamicHTMLVideo } = require('./kernel-value/dynamic-html-video');\n\nconst { WebGL2KernelValueSingleInput } = require('./kernel-value/single-input');\nconst { WebGL2KernelValueDynamicSingleInput } = require('./kernel-value/dynamic-single-input');\n\nconst { WebGL2KernelValueUnsignedInput } = require('./kernel-value/unsigned-input');\nconst { WebGL2KernelValueDynamicUnsignedInput } = require('./kernel-value/dynamic-unsigned-input');\n\nconst { WebGL2KernelValueMemoryOptimizedNumberTexture } = require('./kernel-value/memory-optimized-number-texture');\nconst { WebGL2KernelValueDynamicMemoryOptimizedNumberTexture } = require('./kernel-value/dynamic-memory-optimized-number-texture');\n\nconst { WebGL2KernelValueNumberTexture } = require('./kernel-value/number-texture');\nconst { WebGL2KernelValueDynamicNumberTexture } = require('./kernel-value/dynamic-number-texture');\n\nconst { WebGL2KernelValueSingleArray } = require('./kernel-value/single-array');\nconst { WebGL2KernelValueDynamicSingleArray } = require('./kernel-value/dynamic-single-array');\n\nconst { WebGL2KernelValueSingleArray1DI } = require('./kernel-value/single-array1d-i');\nconst { WebGL2KernelValueDynamicSingleArray1DI } = require('./kernel-value/dynamic-single-array1d-i');\n\nconst { WebGL2KernelValueSingleArray2DI } = require('./kernel-value/single-array2d-i');\nconst { WebGL2KernelValueDynamicSingleArray2DI } = require('./kernel-value/dynamic-single-array2d-i');\n\nconst { WebGL2KernelValueSingleArray3DI } = require('./kernel-value/single-array3d-i');\nconst { WebGL2KernelValueDynamicSingleArray3DI } = require('./kernel-value/dynamic-single-array3d-i');\n\nconst { WebGL2KernelValueArray2 } = require('./kernel-value/array2');\nconst { WebGL2KernelValueArray3 } = require('./kernel-value/array3');\nconst { WebGL2KernelValueArray4 } = require('./kernel-value/array4');\n\nconst { WebGL2KernelValueUnsignedArray } = require('./kernel-value/unsigned-array');\nconst { WebGL2KernelValueDynamicUnsignedArray } = require('./kernel-value/dynamic-unsigned-array');\n\nconst kernelValueMaps = {\n  unsigned: {\n    dynamic: {\n      'Boolean': WebGL2KernelValueBoolean,\n      'Integer': WebGL2KernelValueInteger,\n      'Float': WebGL2KernelValueFloat,\n      'Array': WebGL2KernelValueDynamicUnsignedArray,\n      'Array(2)': WebGL2KernelValueArray2,\n      'Array(3)': WebGL2KernelValueArray3,\n      'Array(4)': WebGL2KernelValueArray4,\n      'Array1D(2)': false,\n      'Array1D(3)': false,\n      'Array1D(4)': false,\n      'Array2D(2)': false,\n      'Array2D(3)': false,\n      'Array2D(4)': false,\n      'Array3D(2)': false,\n      'Array3D(3)': false,\n      'Array3D(4)': false,\n      'Input': WebGL2KernelValueDynamicUnsignedInput,\n      'NumberTexture': WebGL2KernelValueDynamicNumberTexture,\n      'ArrayTexture(1)': WebGL2KernelValueDynamicNumberTexture,\n      'ArrayTexture(2)': WebGL2KernelValueDynamicNumberTexture,\n      'ArrayTexture(3)': WebGL2KernelValueDynamicNumberTexture,\n      'ArrayTexture(4)': WebGL2KernelValueDynamicNumberTexture,\n      'MemoryOptimizedNumberTexture': WebGL2KernelValueDynamicMemoryOptimizedNumberTexture,\n      'HTMLCanvas': WebGL2KernelValueDynamicHTMLImage,\n      'OffscreenCanvas': WebGL2KernelValueDynamicHTMLImage,\n      'HTMLImage': WebGL2KernelValueDynamicHTMLImage,\n      'ImageBitmap': WebGL2KernelValueDynamicHTMLImage,\n      'ImageData': WebGL2KernelValueDynamicHTMLImage,\n      'HTMLImageArray': WebGL2KernelValueDynamicHTMLImageArray,\n      'HTMLVideo': WebGL2KernelValueDynamicHTMLVideo,\n    },\n    static: {\n      'Boolean': WebGL2KernelValueBoolean,\n      'Float': WebGL2KernelValueFloat,\n      'Integer': WebGL2KernelValueInteger,\n      'Array': WebGL2KernelValueUnsignedArray,\n      'Array(2)': WebGL2KernelValueArray2,\n      'Array(3)': WebGL2KernelValueArray3,\n      'Array(4)': WebGL2KernelValueArray4,\n      'Array1D(2)': false,\n      'Array1D(3)': false,\n      'Array1D(4)': false,\n      'Array2D(2)': false,\n      'Array2D(3)': false,\n      'Array2D(4)': false,\n      'Array3D(2)': false,\n      'Array3D(3)': false,\n      'Array3D(4)': false,\n      'Input': WebGL2KernelValueUnsignedInput,\n      'NumberTexture': WebGL2KernelValueNumberTexture,\n      'ArrayTexture(1)': WebGL2KernelValueNumberTexture,\n      'ArrayTexture(2)': WebGL2KernelValueNumberTexture,\n      'ArrayTexture(3)': WebGL2KernelValueNumberTexture,\n      'ArrayTexture(4)': WebGL2KernelValueNumberTexture,\n      'MemoryOptimizedNumberTexture': WebGL2KernelValueDynamicMemoryOptimizedNumberTexture,\n      'HTMLCanvas': WebGL2KernelValueHTMLImage,\n      'OffscreenCanvas': WebGL2KernelValueHTMLImage,\n      'HTMLImage': WebGL2KernelValueHTMLImage,\n      'ImageBitmap': WebGL2KernelValueHTMLImage,\n      'ImageData': WebGL2KernelValueHTMLImage,\n      'HTMLImageArray': WebGL2KernelValueHTMLImageArray,\n      'HTMLVideo': WebGL2KernelValueHTMLVideo,\n    }\n  },\n  single: {\n    dynamic: {\n      'Boolean': WebGL2KernelValueBoolean,\n      'Integer': WebGL2KernelValueInteger,\n      'Float': WebGL2KernelValueFloat,\n      'Array': WebGL2KernelValueDynamicSingleArray,\n      'Array(2)': WebGL2KernelValueArray2,\n      'Array(3)': WebGL2KernelValueArray3,\n      'Array(4)': WebGL2KernelValueArray4,\n      'Array1D(2)': WebGL2KernelValueDynamicSingleArray1DI,\n      'Array1D(3)': WebGL2KernelValueDynamicSingleArray1DI,\n      'Array1D(4)': WebGL2KernelValueDynamicSingleArray1DI,\n      'Array2D(2)': WebGL2KernelValueDynamicSingleArray2DI,\n      'Array2D(3)': WebGL2KernelValueDynamicSingleArray2DI,\n      'Array2D(4)': WebGL2KernelValueDynamicSingleArray2DI,\n      'Array3D(2)': WebGL2KernelValueDynamicSingleArray3DI,\n      'Array3D(3)': WebGL2KernelValueDynamicSingleArray3DI,\n      'Array3D(4)': WebGL2KernelValueDynamicSingleArray3DI,\n      'Input': WebGL2KernelValueDynamicSingleInput,\n      'NumberTexture': WebGL2KernelValueDynamicNumberTexture,\n      'ArrayTexture(1)': WebGL2KernelValueDynamicNumberTexture,\n      'ArrayTexture(2)': WebGL2KernelValueDynamicNumberTexture,\n      'ArrayTexture(3)': WebGL2KernelValueDynamicNumberTexture,\n      'ArrayTexture(4)': WebGL2KernelValueDynamicNumberTexture,\n      'MemoryOptimizedNumberTexture': WebGL2KernelValueDynamicMemoryOptimizedNumberTexture,\n      'HTMLCanvas': WebGL2KernelValueDynamicHTMLImage,\n      'OffscreenCanvas': WebGL2KernelValueDynamicHTMLImage,\n      'HTMLImage': WebGL2KernelValueDynamicHTMLImage,\n      'ImageBitmap': WebGL2KernelValueDynamicHTMLImage,\n      'ImageData': WebGL2KernelValueDynamicHTMLImage,\n      'HTMLImageArray': WebGL2KernelValueDynamicHTMLImageArray,\n      'HTMLVideo': WebGL2KernelValueDynamicHTMLVideo,\n    },\n    static: {\n      'Boolean': WebGL2KernelValueBoolean,\n      'Float': WebGL2KernelValueFloat,\n      'Integer': WebGL2KernelValueInteger,\n      'Array': WebGL2KernelValueSingleArray,\n      'Array(2)': WebGL2KernelValueArray2,\n      'Array(3)': WebGL2KernelValueArray3,\n      'Array(4)': WebGL2KernelValueArray4,\n      'Array1D(2)': WebGL2KernelValueSingleArray1DI,\n      'Array1D(3)': WebGL2KernelValueSingleArray1DI,\n      'Array1D(4)': WebGL2KernelValueSingleArray1DI,\n      'Array2D(2)': WebGL2KernelValueSingleArray2DI,\n      'Array2D(3)': WebGL2KernelValueSingleArray2DI,\n      'Array2D(4)': WebGL2KernelValueSingleArray2DI,\n      'Array3D(2)': WebGL2KernelValueSingleArray3DI,\n      'Array3D(3)': WebGL2KernelValueSingleArray3DI,\n      'Array3D(4)': WebGL2KernelValueSingleArray3DI,\n      'Input': WebGL2KernelValueSingleInput,\n      'NumberTexture': WebGL2KernelValueNumberTexture,\n      'ArrayTexture(1)': WebGL2KernelValueNumberTexture,\n      'ArrayTexture(2)': WebGL2KernelValueNumberTexture,\n      'ArrayTexture(3)': WebGL2KernelValueNumberTexture,\n      'ArrayTexture(4)': WebGL2KernelValueNumberTexture,\n      'MemoryOptimizedNumberTexture': WebGL2KernelValueMemoryOptimizedNumberTexture,\n      'HTMLCanvas': WebGL2KernelValueHTMLImage,\n      'OffscreenCanvas': WebGL2KernelValueHTMLImage,\n      'HTMLImage': WebGL2KernelValueHTMLImage,\n      'ImageBitmap': WebGL2KernelValueHTMLImage,\n      'ImageData': WebGL2KernelValueHTMLImage,\n      'HTMLImageArray': WebGL2KernelValueHTMLImageArray,\n      'HTMLVideo': WebGL2KernelValueHTMLVideo,\n    }\n  },\n};\n\nfunction lookupKernelValueType(type, dynamic, precision, value) {\n  if (!type) {\n    throw new Error('type missing');\n  }\n  if (!dynamic) {\n    throw new Error('dynamic missing');\n  }\n  if (!precision) {\n    throw new Error('precision missing');\n  }\n  if (value.type) {\n    type = value.type;\n  }\n  const types = kernelValueMaps[precision][dynamic];\n  if (types[type] === false) {\n    return null;\n  } else if (types[type] === undefined) {\n    throw new Error(`Could not find a KernelValue for ${ type }`);\n  }\n  return types[type];\n}\n\nmodule.exports = {\n  kernelValueMaps,\n  lookupKernelValueType\n};\n},{\"./kernel-value/array2\":75,\"./kernel-value/array3\":76,\"./kernel-value/array4\":77,\"./kernel-value/boolean\":78,\"./kernel-value/dynamic-html-image\":80,\"./kernel-value/dynamic-html-image-array\":79,\"./kernel-value/dynamic-html-video\":81,\"./kernel-value/dynamic-memory-optimized-number-texture\":82,\"./kernel-value/dynamic-number-texture\":83,\"./kernel-value/dynamic-single-array\":84,\"./kernel-value/dynamic-single-array1d-i\":85,\"./kernel-value/dynamic-single-array2d-i\":86,\"./kernel-value/dynamic-single-array3d-i\":87,\"./kernel-value/dynamic-single-input\":88,\"./kernel-value/dynamic-unsigned-array\":89,\"./kernel-value/dynamic-unsigned-input\":90,\"./kernel-value/float\":91,\"./kernel-value/html-image\":93,\"./kernel-value/html-image-array\":92,\"./kernel-value/html-video\":94,\"./kernel-value/integer\":95,\"./kernel-value/memory-optimized-number-texture\":96,\"./kernel-value/number-texture\":97,\"./kernel-value/single-array\":98,\"./kernel-value/single-array1d-i\":99,\"./kernel-value/single-array2d-i\":100,\"./kernel-value/single-array3d-i\":101,\"./kernel-value/single-input\":102,\"./kernel-value/unsigned-array\":103,\"./kernel-value/unsigned-input\":104}],75:[function(require,module,exports){\nconst { WebGLKernelValueArray2 } = require('../../web-gl/kernel-value/array2');\n\nclass WebGL2KernelValueArray2 extends WebGLKernelValueArray2 {}\n\nmodule.exports = {\n  WebGL2KernelValueArray2\n};\n},{\"../../web-gl/kernel-value/array2\":41}],76:[function(require,module,exports){\nconst { WebGLKernelValueArray3 } = require('../../web-gl/kernel-value/array3');\n\nclass WebGL2KernelValueArray3 extends WebGLKernelValueArray3 {}\n\nmodule.exports = {\n  WebGL2KernelValueArray3\n};\n},{\"../../web-gl/kernel-value/array3\":42}],77:[function(require,module,exports){\nconst { WebGLKernelValueArray4 } = require('../../web-gl/kernel-value/array4');\n\nclass WebGL2KernelValueArray4 extends WebGLKernelValueArray4 {}\n\nmodule.exports = {\n  WebGL2KernelValueArray4\n};\n},{\"../../web-gl/kernel-value/array4\":43}],78:[function(require,module,exports){\nconst { WebGLKernelValueBoolean } = require('../../web-gl/kernel-value/boolean');\n\nclass WebGL2KernelValueBoolean extends WebGLKernelValueBoolean {}\n\nmodule.exports = {\n  WebGL2KernelValueBoolean\n};\n},{\"../../web-gl/kernel-value/boolean\":44}],79:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGL2KernelValueHTMLImageArray } = require('./html-image-array');\n\nclass WebGL2KernelValueDynamicHTMLImageArray extends WebGL2KernelValueHTMLImageArray {\n  getSource() {\n    const variablePrecision = this.getVariablePrecisionString();\n    return utils.linesToString([\n      `uniform ${ variablePrecision } sampler2DArray ${this.id}`,\n      `uniform ${ variablePrecision } ivec2 ${this.sizeId}`,\n      `uniform ${ variablePrecision } ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n\n  updateValue(images) {\n    const { width, height } = images[0];\n    this.checkSize(width, height);\n    this.dimensions = [width, height, images.length];\n    this.textureSize = [width, height];\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n    super.updateValue(images);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueDynamicHTMLImageArray\n};\n},{\"../../../utils\":114,\"./html-image-array\":92}],80:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelValueDynamicHTMLImage } = require('../../web-gl/kernel-value/dynamic-html-image');\n\nclass WebGL2KernelValueDynamicHTMLImage extends WebGLKernelValueDynamicHTMLImage {\n  getSource() {\n    const variablePrecision = this.getVariablePrecisionString();\n    return utils.linesToString([\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\n      `uniform ${ variablePrecision } ivec2 ${this.sizeId}`,\n      `uniform ${ variablePrecision } ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueDynamicHTMLImage\n};\n},{\"../../../utils\":114,\"../../web-gl/kernel-value/dynamic-html-image\":45}],81:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGL2KernelValueDynamicHTMLImage } = require('./dynamic-html-image');\n\nclass WebGL2KernelValueDynamicHTMLVideo extends WebGL2KernelValueDynamicHTMLImage {}\n\nmodule.exports = {\n  WebGL2KernelValueDynamicHTMLVideo\n};\n},{\"../../../utils\":114,\"./dynamic-html-image\":80}],82:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelValueDynamicMemoryOptimizedNumberTexture } = require('../../web-gl/kernel-value/dynamic-memory-optimized-number-texture');\n\nclass WebGL2KernelValueDynamicMemoryOptimizedNumberTexture extends WebGLKernelValueDynamicMemoryOptimizedNumberTexture {\n  getSource() {\n    return utils.linesToString([\n      `uniform sampler2D ${this.id}`,\n      `uniform ivec2 ${this.sizeId}`,\n      `uniform ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueDynamicMemoryOptimizedNumberTexture\n};\n},{\"../../../utils\":114,\"../../web-gl/kernel-value/dynamic-memory-optimized-number-texture\":47}],83:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelValueDynamicNumberTexture } = require('../../web-gl/kernel-value/dynamic-number-texture');\n\nclass WebGL2KernelValueDynamicNumberTexture extends WebGLKernelValueDynamicNumberTexture {\n  getSource() {\n    const variablePrecision = this.getVariablePrecisionString();\n    return utils.linesToString([\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\n      `uniform ${ variablePrecision } ivec2 ${this.sizeId}`,\n      `uniform ${ variablePrecision } ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueDynamicNumberTexture\n};\n},{\"../../../utils\":114,\"../../web-gl/kernel-value/dynamic-number-texture\":48}],84:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGL2KernelValueSingleArray } = require('../../web-gl2/kernel-value/single-array');\n\nclass WebGL2KernelValueDynamicSingleArray extends WebGL2KernelValueSingleArray {\n  getSource() {\n    const variablePrecision = this.getVariablePrecisionString();\n    return utils.linesToString([\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\n      `uniform ${ variablePrecision } ivec2 ${this.sizeId}`,\n      `uniform ${ variablePrecision } ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n\n  updateValue(value) {\n    this.dimensions = utils.getDimensions(value, true);\n    this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;\n    this.checkSize(this.textureSize[0], this.textureSize[1]);\n    this.uploadValue = new Float32Array(this.uploadArrayLength);\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n    super.updateValue(value);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueDynamicSingleArray\n};\n},{\"../../../utils\":114,\"../../web-gl2/kernel-value/single-array\":98}],85:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGL2KernelValueSingleArray1DI } = require('../../web-gl2/kernel-value/single-array1d-i');\n\nclass WebGL2KernelValueDynamicSingleArray1DI extends WebGL2KernelValueSingleArray1DI {\n  getSource() {\n    const variablePrecision = this.getVariablePrecisionString();\n    return utils.linesToString([\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\n      `uniform ${ variablePrecision } ivec2 ${this.sizeId}`,\n      `uniform ${ variablePrecision } ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n\n  updateValue(value) {\n    this.setShape(value);\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n    super.updateValue(value);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueDynamicSingleArray1DI\n};\n},{\"../../../utils\":114,\"../../web-gl2/kernel-value/single-array1d-i\":99}],86:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGL2KernelValueSingleArray2DI } = require('../../web-gl2/kernel-value/single-array2d-i');\n\nclass WebGL2KernelValueDynamicSingleArray2DI extends WebGL2KernelValueSingleArray2DI {\n  getSource() {\n    const variablePrecision = this.getVariablePrecisionString();\n    return utils.linesToString([\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\n      `uniform ${ variablePrecision } ivec2 ${this.sizeId}`,\n      `uniform ${ variablePrecision } ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n\n  updateValue(value) {\n    this.setShape(value);\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n    super.updateValue(value);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueDynamicSingleArray2DI\n};\n},{\"../../../utils\":114,\"../../web-gl2/kernel-value/single-array2d-i\":100}],87:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGL2KernelValueSingleArray3DI } = require('../../web-gl2/kernel-value/single-array3d-i');\n\nclass WebGL2KernelValueDynamicSingleArray3DI extends WebGL2KernelValueSingleArray3DI {\n  getSource() {\n    const variablePrecision = this.getVariablePrecisionString();\n    return utils.linesToString([\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\n      `uniform ${ variablePrecision } ivec2 ${this.sizeId}`,\n      `uniform ${ variablePrecision } ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n\n  updateValue(value) {\n    this.setShape(value);\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n    super.updateValue(value);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueDynamicSingleArray3DI\n};\n},{\"../../../utils\":114,\"../../web-gl2/kernel-value/single-array3d-i\":101}],88:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGL2KernelValueSingleInput } = require('../../web-gl2/kernel-value/single-input');\n\nclass WebGL2KernelValueDynamicSingleInput extends WebGL2KernelValueSingleInput {\n  getSource() {\n    const variablePrecision = this.getVariablePrecisionString();\n    return utils.linesToString([\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\n      `uniform ${ variablePrecision } ivec2 ${this.sizeId}`,\n      `uniform ${ variablePrecision } ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n\n  updateValue(value) {\n    let [w, h, d] = value.size;\n    this.dimensions = new Int32Array([w || 1, h || 1, d || 1]);\n    this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;\n    this.checkSize(this.textureSize[0], this.textureSize[1]);\n    this.uploadValue = new Float32Array(this.uploadArrayLength);\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\n    super.updateValue(value);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueDynamicSingleInput\n};\n},{\"../../../utils\":114,\"../../web-gl2/kernel-value/single-input\":102}],89:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelValueDynamicUnsignedArray } = require('../../web-gl/kernel-value/dynamic-unsigned-array');\n\nclass WebGL2KernelValueDynamicUnsignedArray extends WebGLKernelValueDynamicUnsignedArray {\n  getSource() {\n    const variablePrecision = this.getVariablePrecisionString();\n    return utils.linesToString([\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\n      `uniform ${ variablePrecision } ivec2 ${this.sizeId}`,\n      `uniform ${ variablePrecision } ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueDynamicUnsignedArray\n};\n},{\"../../../utils\":114,\"../../web-gl/kernel-value/dynamic-unsigned-array\":54}],90:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelValueDynamicUnsignedInput } = require('../../web-gl/kernel-value/dynamic-unsigned-input');\n\nclass WebGL2KernelValueDynamicUnsignedInput extends WebGLKernelValueDynamicUnsignedInput {\n  getSource() {\n    const variablePrecision = this.getVariablePrecisionString();\n    return utils.linesToString([\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\n      `uniform ${ variablePrecision } ivec2 ${this.sizeId}`,\n      `uniform ${ variablePrecision } ivec3 ${this.dimensionsId}`,\n    ]);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueDynamicUnsignedInput\n};\n},{\"../../../utils\":114,\"../../web-gl/kernel-value/dynamic-unsigned-input\":55}],91:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelValueFloat } = require('../../web-gl/kernel-value/float');\n\nclass WebGL2KernelValueFloat extends WebGLKernelValueFloat {}\n\nmodule.exports = {\n  WebGL2KernelValueFloat\n};\n},{\"../../../utils\":114,\"../../web-gl/kernel-value/float\":56}],92:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelArray } = require('../../web-gl/kernel-value/array');\n\nclass WebGL2KernelValueHTMLImageArray extends WebGLKernelArray {\n  constructor(value, settings) {\n    super(value, settings);\n    this.checkSize(value[0].width, value[0].height);\n    this.dimensions = [value[0].width, value[0].height, value.length];\n    this.textureSize = [value[0].width, value[0].height];\n  }\n  defineTexture() {\n    const { context: gl } = this;\n    gl.activeTexture(this.contextHandle);\n    gl.bindTexture(gl.TEXTURE_2D_ARRAY, this.texture);\n    gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  }\n\n  getStringValueHandler() {\n    return `const uploadValue_${this.name} = ${this.varName};\\n`;\n  }\n  getSource() {\n    const variablePrecision = this.getVariablePrecisionString();\n    return utils.linesToString([\n      `uniform ${ variablePrecision } sampler2DArray ${this.id}`,\n      `${ variablePrecision } ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n      `${ variablePrecision } ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\n    ]);\n  }\n\n  updateValue(images) {\n    const { context: gl } = this;\n    gl.activeTexture(this.contextHandle);\n    gl.bindTexture(gl.TEXTURE_2D_ARRAY, this.texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n    gl.texImage3D(\n      gl.TEXTURE_2D_ARRAY,\n      0,\n      gl.RGBA,\n      images[0].width,\n      images[0].height,\n      images.length,\n      0,\n      gl.RGBA,\n      gl.UNSIGNED_BYTE,\n      null\n    );\n    for (let i = 0; i < images.length; i++) {\n      const xOffset = 0;\n      const yOffset = 0;\n      const imageDepth = 1;\n      gl.texSubImage3D(\n        gl.TEXTURE_2D_ARRAY,\n        0,\n        xOffset,\n        yOffset,\n        i,\n        images[i].width,\n        images[i].height,\n        imageDepth,\n        gl.RGBA,\n        gl.UNSIGNED_BYTE,\n        this.uploadValue = images[i]\n      );\n    }\n    this.kernel.setUniform1i(this.id, this.index);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueHTMLImageArray\n};\n},{\"../../../utils\":114,\"../../web-gl/kernel-value/array\":40}],93:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelValueHTMLImage } = require('../../web-gl/kernel-value/html-image');\n\nclass WebGL2KernelValueHTMLImage extends WebGLKernelValueHTMLImage {\n  getSource() {\n    const variablePrecision = this.getVariablePrecisionString();\n    return utils.linesToString([\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\n      `${ variablePrecision } ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n      `${ variablePrecision } ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\n    ]);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueHTMLImage\n};\n},{\"../../../utils\":114,\"../../web-gl/kernel-value/html-image\":57}],94:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGL2KernelValueHTMLImage } = require('./html-image');\n\nclass WebGL2KernelValueHTMLVideo extends WebGL2KernelValueHTMLImage {}\n\nmodule.exports = {\n  WebGL2KernelValueHTMLVideo\n};\n},{\"../../../utils\":114,\"./html-image\":93}],95:[function(require,module,exports){\nconst { WebGLKernelValueInteger } = require('../../web-gl/kernel-value/integer');\n\nclass WebGL2KernelValueInteger extends WebGLKernelValueInteger {\n  getSource(value) {\n    const variablePrecision = this.getVariablePrecisionString();\n    if (this.origin === 'constants') {\n      return `const ${ variablePrecision } int ${this.id} = ${ parseInt(value) };\\n`;\n    }\n    return `uniform ${ variablePrecision } int ${this.id};\\n`;\n  }\n\n  updateValue(value) {\n    if (this.origin === 'constants') return;\n    this.kernel.setUniform1i(this.id, this.uploadValue = value);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueInteger\n};\n},{\"../../web-gl/kernel-value/integer\":60}],96:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelValueMemoryOptimizedNumberTexture } = require('../../web-gl/kernel-value/memory-optimized-number-texture');\n\nclass WebGL2KernelValueMemoryOptimizedNumberTexture extends WebGLKernelValueMemoryOptimizedNumberTexture {\n  getSource() {\n    const { id, sizeId, textureSize, dimensionsId, dimensions } = this;\n    const variablePrecision = this.getVariablePrecisionString();\n    return utils.linesToString([\n      `uniform sampler2D ${id}`,\n      `${ variablePrecision } ivec2 ${sizeId} = ivec2(${textureSize[0]}, ${textureSize[1]})`,\n      `${ variablePrecision } ivec3 ${dimensionsId} = ivec3(${dimensions[0]}, ${dimensions[1]}, ${dimensions[2]})`,\n    ]);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueMemoryOptimizedNumberTexture\n};\n},{\"../../../utils\":114,\"../../web-gl/kernel-value/memory-optimized-number-texture\":61}],97:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelValueNumberTexture } = require('../../web-gl/kernel-value/number-texture');\n\nclass WebGL2KernelValueNumberTexture extends WebGLKernelValueNumberTexture {\n  getSource() {\n    const { id, sizeId, textureSize, dimensionsId, dimensions } = this;\n    const variablePrecision = this.getVariablePrecisionString();\n    return utils.linesToString([\n      `uniform ${ variablePrecision } sampler2D ${id}`,\n      `${ variablePrecision } ivec2 ${sizeId} = ivec2(${textureSize[0]}, ${textureSize[1]})`,\n      `${ variablePrecision } ivec3 ${dimensionsId} = ivec3(${dimensions[0]}, ${dimensions[1]}, ${dimensions[2]})`,\n    ]);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueNumberTexture\n};\n},{\"../../../utils\":114,\"../../web-gl/kernel-value/number-texture\":62}],98:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelValueSingleArray } = require('../../web-gl/kernel-value/single-array');\n\nclass WebGL2KernelValueSingleArray extends WebGLKernelValueSingleArray {\n  getSource() {\n    const variablePrecision = this.getVariablePrecisionString();\n    return utils.linesToString([\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\n      `${ variablePrecision } ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n      `${ variablePrecision } ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\n    ]);\n  }\n\n  updateValue(value) {\n    if (value.constructor !== this.initialValueConstructor) {\n      this.onUpdateValueMismatch(value.constructor);\n      return;\n    }\n    const { context: gl } = this;\n    utils.flattenTo(value, this.uploadValue);\n    gl.activeTexture(this.contextHandle);\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\n    this.kernel.setUniform1i(this.id, this.index);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueSingleArray\n};\n},{\"../../../utils\":114,\"../../web-gl/kernel-value/single-array\":63}],99:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelValueSingleArray1DI } = require('../../web-gl/kernel-value/single-array1d-i');\n\nclass WebGL2KernelValueSingleArray1DI extends WebGLKernelValueSingleArray1DI {\n  updateValue(value) {\n    if (value.constructor !== this.initialValueConstructor) {\n      this.onUpdateValueMismatch(value.constructor);\n      return;\n    }\n    const { context: gl } = this;\n    utils.flattenTo(value, this.uploadValue);\n    gl.activeTexture(this.contextHandle);\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\n    this.kernel.setUniform1i(this.id, this.index);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueSingleArray1DI\n};\n},{\"../../../utils\":114,\"../../web-gl/kernel-value/single-array1d-i\":64}],100:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelValueSingleArray2DI } = require('../../web-gl/kernel-value/single-array2d-i');\n\nclass WebGL2KernelValueSingleArray2DI extends WebGLKernelValueSingleArray2DI {\n  updateValue(value) {\n    if (value.constructor !== this.initialValueConstructor) {\n      this.onUpdateValueMismatch(value.constructor);\n      return;\n    }\n    const { context: gl } = this;\n    utils.flattenTo(value, this.uploadValue);\n    gl.activeTexture(this.contextHandle);\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\n    this.kernel.setUniform1i(this.id, this.index);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueSingleArray2DI\n};\n},{\"../../../utils\":114,\"../../web-gl/kernel-value/single-array2d-i\":65}],101:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelValueSingleArray3DI } = require('../../web-gl/kernel-value/single-array3d-i');\n\nclass WebGL2KernelValueSingleArray3DI extends WebGLKernelValueSingleArray3DI {\n  updateValue(value) {\n    if (value.constructor !== this.initialValueConstructor) {\n      this.onUpdateValueMismatch(value.constructor);\n      return;\n    }\n    const { context: gl } = this;\n    utils.flattenTo(value, this.uploadValue);\n    gl.activeTexture(this.contextHandle);\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\n    this.kernel.setUniform1i(this.id, this.index);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueSingleArray3DI\n};\n},{\"../../../utils\":114,\"../../web-gl/kernel-value/single-array3d-i\":66}],102:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelValueSingleInput } = require('../../web-gl/kernel-value/single-input');\n\nclass WebGL2KernelValueSingleInput extends WebGLKernelValueSingleInput {\n  getSource() {\n    const variablePrecision = this.getVariablePrecisionString();\n    return utils.linesToString([\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\n      `${ variablePrecision } ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n      `${ variablePrecision } ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\n    ]);\n  }\n\n  updateValue(input) {\n    const { context: gl } = this;\n    utils.flattenTo(input.value, this.uploadValue);\n    gl.activeTexture(this.contextHandle);\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\n    this.kernel.setUniform1i(this.id, this.index);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueSingleInput\n};\n},{\"../../../utils\":114,\"../../web-gl/kernel-value/single-input\":67}],103:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelValueUnsignedArray } = require('../../web-gl/kernel-value/unsigned-array');\n\nclass WebGL2KernelValueUnsignedArray extends WebGLKernelValueUnsignedArray {\n  getSource() {\n    const variablePrecision = this.getVariablePrecisionString();\n    return utils.linesToString([\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\n      `${ variablePrecision } ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n      `${ variablePrecision } ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\n    ]);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueUnsignedArray\n};\n},{\"../../../utils\":114,\"../../web-gl/kernel-value/unsigned-array\":68}],104:[function(require,module,exports){\nconst { utils } = require('../../../utils');\nconst { WebGLKernelValueUnsignedInput } = require('../../web-gl/kernel-value/unsigned-input');\n\nclass WebGL2KernelValueUnsignedInput extends WebGLKernelValueUnsignedInput {\n  getSource() {\n    const variablePrecision = this.getVariablePrecisionString();\n    return utils.linesToString([\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\n      `${ variablePrecision } ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\n      `${ variablePrecision } ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\n    ]);\n  }\n}\n\nmodule.exports = {\n  WebGL2KernelValueUnsignedInput\n};\n},{\"../../../utils\":114,\"../../web-gl/kernel-value/unsigned-input\":69}],105:[function(require,module,exports){\nconst { WebGLKernel } = require('../web-gl/kernel');\nconst { WebGL2FunctionNode } = require('./function-node');\nconst { FunctionBuilder } = require('../function-builder');\nconst { utils } = require('../../utils');\nconst { fragmentShader } = require('./fragment-shader');\nconst { vertexShader } = require('./vertex-shader');\nconst { lookupKernelValueType } = require('./kernel-value-maps');\n\nlet isSupported = null;\nlet testCanvas = null;\nlet testContext = null;\nlet testExtensions = null;\n\nlet features = null;\n\nclass WebGL2Kernel extends WebGLKernel {\n  static get isSupported() {\n    if (isSupported !== null) {\n      return isSupported;\n    }\n    this.setupFeatureChecks();\n    isSupported = this.isContextMatch(testContext);\n    return isSupported;\n  }\n\n  static setupFeatureChecks() {\n    if (typeof document !== 'undefined') {\n      testCanvas = document.createElement('canvas');\n    } else if (typeof OffscreenCanvas !== 'undefined') {\n      testCanvas = new OffscreenCanvas(0, 0);\n    }\n    if (!testCanvas) return;\n    testContext = testCanvas.getContext('webgl2');\n    if (!testContext || !testContext.getExtension) return;\n    testExtensions = {\n      EXT_color_buffer_float: testContext.getExtension('EXT_color_buffer_float'),\n      OES_texture_float_linear: testContext.getExtension('OES_texture_float_linear'),\n    };\n    features = this.getFeatures();\n  }\n\n  static isContextMatch(context) {\n    if (typeof WebGL2RenderingContext !== 'undefined') {\n      return context instanceof WebGL2RenderingContext;\n    }\n    return false;\n  }\n\n  static getFeatures() {\n    const gl = this.testContext;\n    return Object.freeze({\n      isFloatRead: this.getIsFloatRead(),\n      isIntegerDivisionAccurate: this.getIsIntegerDivisionAccurate(),\n      isSpeedTacticSupported: this.getIsSpeedTacticSupported(),\n      kernelMap: true,\n      isTextureFloat: true,\n      isDrawBuffers: true,\n      channelCount: this.getChannelCount(),\n      maxTextureSize: this.getMaxTextureSize(),\n      lowIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT),\n      lowFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT),\n      mediumIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT),\n      mediumFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT),\n      highIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT),\n      highFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT),\n    });\n  }\n\n  static getIsTextureFloat() {\n    return true;\n  }\n\n  static getChannelCount() {\n    return testContext.getParameter(testContext.MAX_DRAW_BUFFERS);\n  }\n\n  static getMaxTextureSize() {\n    return testContext.getParameter(testContext.MAX_TEXTURE_SIZE);\n  }\n\n  static lookupKernelValueType(type, dynamic, precision, value) {\n    return lookupKernelValueType(type, dynamic, precision, value);\n  }\n\n  static get testCanvas() {\n    return testCanvas;\n  }\n\n  static get testContext() {\n    return testContext;\n  }\n\n  static get features() {\n    return features;\n  }\n\n  static get fragmentShader() {\n    return fragmentShader;\n  }\n  static get vertexShader() {\n    return vertexShader;\n  }\n\n  initContext() {\n    const settings = {\n      alpha: false,\n      depth: false,\n      antialias: false\n    };\n    return this.canvas.getContext('webgl2', settings);\n  }\n\n  initExtensions() {\n    this.extensions = {\n      EXT_color_buffer_float: this.context.getExtension('EXT_color_buffer_float'),\n      OES_texture_float_linear: this.context.getExtension('OES_texture_float_linear'),\n    };\n  }\n\n  validateSettings(args) {\n    if (!this.validate) {\n      this.texSize = utils.getKernelTextureSize({\n        optimizeFloatMemory: this.optimizeFloatMemory,\n        precision: this.precision,\n      }, this.output);\n      return;\n    }\n\n    const { features } = this.constructor;\n    if (this.precision === 'single' && !features.isFloatRead) {\n      throw new Error('Float texture outputs are not supported');\n    } else if (!this.graphical && this.precision === null) {\n      this.precision = features.isFloatRead ? 'single' : 'unsigned';\n    }\n\n    if (this.fixIntegerDivisionAccuracy === null) {\n      this.fixIntegerDivisionAccuracy = !features.isIntegerDivisionAccurate;\n    } else if (this.fixIntegerDivisionAccuracy && features.isIntegerDivisionAccurate) {\n      this.fixIntegerDivisionAccuracy = false;\n    }\n\n    this.checkOutput();\n\n    if (!this.output || this.output.length === 0) {\n      if (args.length !== 1) {\n        throw new Error('Auto output only supported for kernels with only one input');\n      }\n\n      const argType = utils.getVariableType(args[0], this.strictIntegers);\n      switch (argType) {\n        case 'Array':\n          this.output = utils.getDimensions(argType);\n          break;\n        case 'NumberTexture':\n        case 'MemoryOptimizedNumberTexture':\n        case 'ArrayTexture(1)':\n        case 'ArrayTexture(2)':\n        case 'ArrayTexture(3)':\n        case 'ArrayTexture(4)':\n          this.output = args[0].output;\n          break;\n        default:\n          throw new Error('Auto output not supported for input type: ' + argType);\n      }\n    }\n\n    if (this.graphical) {\n      if (this.output.length !== 2) {\n        throw new Error('Output must have 2 dimensions on graphical mode');\n      }\n\n      if (this.precision === 'single') {\n        console.warn('Cannot use graphical mode and single precision at the same time');\n        this.precision = 'unsigned';\n      }\n\n      this.texSize = utils.clone(this.output);\n      return;\n    } else if (!this.graphical && this.precision === null && features.isTextureFloat) {\n      this.precision = 'single';\n    }\n\n    this.texSize = utils.getKernelTextureSize({\n      optimizeFloatMemory: this.optimizeFloatMemory,\n      precision: this.precision,\n    }, this.output);\n\n    this.checkTextureSize();\n  }\n\n  translateSource() {\n    const functionBuilder = FunctionBuilder.fromKernel(this, WebGL2FunctionNode, {\n      fixIntegerDivisionAccuracy: this.fixIntegerDivisionAccuracy\n    });\n    this.translatedSource = functionBuilder.getPrototypeString('kernel');\n    this.setupReturnTypes(functionBuilder);\n  }\n\n  drawBuffers() {\n    this.context.drawBuffers(this.drawBuffersMap);\n  }\n\n  getTextureFormat() {\n    const { context: gl } = this;\n    switch (this.getInternalFormat()) {\n      case gl.R32F:\n        return gl.RED;\n      case gl.RG32F:\n        return gl.RG;\n      case gl.RGBA32F:\n        return gl.RGBA;\n      case gl.RGBA:\n        return gl.RGBA;\n      default:\n        throw new Error('Unknown internal format');\n    }\n  }\n  getInternalFormat() {\n    const { context: gl } = this;\n\n    if (this.precision === 'single') {\n      if (this.pipeline) {\n        switch (this.returnType) {\n          case 'Number':\n          case 'Float':\n          case 'Integer':\n            if (this.optimizeFloatMemory) {\n              return gl.RGBA32F;\n            } else {\n              return gl.R32F;\n            }\n            case 'Array(2)':\n              return gl.RG32F;\n            case 'Array(3)': \n            case 'Array(4)':\n              return gl.RGBA32F;\n            default:\n              throw new Error('Unhandled return type');\n        }\n      }\n      return gl.RGBA32F;\n    }\n    return gl.RGBA;\n  }\n\n  _setupOutputTexture() {\n    const gl = this.context;\n    if (this.texture) {\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture.texture, 0);\n      return;\n    }\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    const texture = gl.createTexture();\n    const texSize = this.texSize;\n    gl.activeTexture(gl.TEXTURE0 + this.constantTextureCount + this.argumentTextureCount);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    const format = this.getInternalFormat();\n    if (this.precision === 'single') {\n      gl.texStorage2D(gl.TEXTURE_2D, 1, format, texSize[0], texSize[1]);\n    } else {\n      gl.texImage2D(gl.TEXTURE_2D, 0, format, texSize[0], texSize[1], 0, format, gl.UNSIGNED_BYTE, null);\n    }\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    this.texture = new this.TextureConstructor({\n      texture,\n      size: texSize,\n      dimensions: this.threadDim,\n      output: this.output,\n      context: this.context,\n      internalFormat: this.getInternalFormat(),\n      textureFormat: this.getTextureFormat(),\n      kernel: this,\n    });\n  }\n\n  _setupSubOutputTextures() {\n    const gl = this.context;\n    if (this.mappedTextures) {\n      for (let i = 0; i < this.subKernels.length; i++) {\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i + 1, gl.TEXTURE_2D, this.mappedTextures[i].texture, 0);\n      }\n      return;\n    }\n    const texSize = this.texSize;\n    this.drawBuffersMap = [gl.COLOR_ATTACHMENT0];\n    this.mappedTextures = [];\n    for (let i = 0; i < this.subKernels.length; i++) {\n      const texture = this.createTexture();\n      this.drawBuffersMap.push(gl.COLOR_ATTACHMENT0 + i + 1);\n      gl.activeTexture(gl.TEXTURE0 + this.constantTextureCount + this.argumentTextureCount + i);\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n      const format = this.getInternalFormat();\n      if (this.precision === 'single') {\n        gl.texStorage2D(gl.TEXTURE_2D, 1, format, texSize[0], texSize[1]);\n      } else {\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n      }\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i + 1, gl.TEXTURE_2D, texture, 0);\n\n      this.mappedTextures.push(new this.TextureConstructor({\n        texture,\n        size: texSize,\n        dimensions: this.threadDim,\n        output: this.output,\n        context: this.context,\n        internalFormat: this.getInternalFormat(),\n        textureFormat: this.getTextureFormat(),\n        kernel: this,\n      }));\n    }\n  }\n\n  _getHeaderString() {\n    return '';\n  }\n\n  _getTextureCoordinate() {\n    const subKernels = this.subKernels;\n    const variablePrecision = this.getVariablePrecisionString(this.texSize, this.tactic);\n    if (subKernels === null || subKernels.length < 1) {\n      return `in ${ variablePrecision } vec2 vTexCoord;\\n`;\n    } else {\n      return `out ${ variablePrecision } vec2 vTexCoord;\\n`;\n    }\n  }\n\n  _getMainArgumentsString(args) {\n    const result = [];\n    const argumentNames = this.argumentNames;\n    for (let i = 0; i < argumentNames.length; i++) {\n      result.push(this.kernelArguments[i].getSource(args[i]));\n    }\n    return result.join('');\n  }\n\n  getKernelString() {\n    const result = [this.getKernelResultDeclaration()];\n    const subKernels = this.subKernels;\n    if (subKernels !== null) {\n      result.push(\n        'layout(location = 0) out vec4 data0'\n      );\n      switch (this.returnType) {\n        case 'Number':\n        case 'Float':\n        case 'Integer':\n          for (let i = 0; i < subKernels.length; i++) {\n            const subKernel = subKernels[i];\n            result.push(\n              subKernel.returnType === 'Integer' ?\n              `int subKernelResult_${ subKernel.name } = 0` :\n              `float subKernelResult_${ subKernel.name } = 0.0`,\n              `layout(location = ${ i + 1 }) out vec4 data${ i + 1 }`\n            );\n          }\n          break;\n        case 'Array(2)':\n          for (let i = 0; i < subKernels.length; i++) {\n            result.push(\n              `vec2 subKernelResult_${ subKernels[i].name }`,\n              `layout(location = ${ i + 1 }) out vec4 data${ i + 1 }`\n            );\n          }\n          break;\n        case 'Array(3)':\n          for (let i = 0; i < subKernels.length; i++) {\n            result.push(\n              `vec3 subKernelResult_${ subKernels[i].name }`,\n              `layout(location = ${ i + 1 }) out vec4 data${ i + 1 }`\n            );\n          }\n          break;\n        case 'Array(4)':\n          for (let i = 0; i < subKernels.length; i++) {\n            result.push(\n              `vec4 subKernelResult_${ subKernels[i].name }`,\n              `layout(location = ${ i + 1 }) out vec4 data${ i + 1 }`\n            );\n          }\n          break;\n      }\n    } else {\n      result.push(\n        'out vec4 data0'\n      );\n    }\n\n    return utils.linesToString(result) + this.translatedSource;\n  }\n\n  getMainResultGraphical() {\n    return utils.linesToString([\n      '  threadId = indexTo3D(index, uOutputDim)',\n      '  kernel()',\n      '  data0 = actualColor',\n    ]);\n  }\n\n  getMainResultPackedPixels() {\n    switch (this.returnType) {\n      case 'LiteralInteger':\n      case 'Number':\n      case 'Integer':\n      case 'Float':\n        return this.getMainResultKernelPackedPixels() +\n          this.getMainResultSubKernelPackedPixels();\n      default:\n        throw new Error(`packed output only usable with Numbers, \"${this.returnType}\" specified`);\n    }\n  }\n\n  getMainResultKernelPackedPixels() {\n    return utils.linesToString([\n      '  threadId = indexTo3D(index, uOutputDim)',\n      '  kernel()',\n      `  data0 = ${this.useLegacyEncoder ? 'legacyEncode32' : 'encode32'}(kernelResult)`\n    ]);\n  }\n\n  getMainResultSubKernelPackedPixels() {\n    const result = [];\n    if (!this.subKernels) return '';\n    for (let i = 0; i < this.subKernels.length; i++) {\n      const subKernel = this.subKernels[i];\n      if (subKernel.returnType === 'Integer') {\n        result.push(\n          `  data${i + 1} = ${this.useLegacyEncoder ? 'legacyEncode32' : 'encode32'}(float(subKernelResult_${this.subKernels[i].name}))`\n        );\n      } else {\n        result.push(\n          `  data${i + 1} = ${this.useLegacyEncoder ? 'legacyEncode32' : 'encode32'}(subKernelResult_${this.subKernels[i].name})`\n        );\n      }\n    }\n    return utils.linesToString(result);\n  }\n\n  getMainResultKernelMemoryOptimizedFloats(result, channel) {\n    result.push(\n      '  threadId = indexTo3D(index, uOutputDim)',\n      '  kernel()',\n      `  data0.${channel} = kernelResult`\n    );\n  }\n\n  getMainResultSubKernelMemoryOptimizedFloats(result, channel) {\n    if (!this.subKernels) return result;\n    for (let i = 0; i < this.subKernels.length; i++) {\n      const subKernel = this.subKernels[i];\n      if (subKernel.returnType === 'Integer') {\n        result.push(\n          `  data${i + 1}.${channel} = float(subKernelResult_${subKernel.name})`\n        );\n      } else {\n        result.push(\n          `  data${i + 1}.${channel} = subKernelResult_${subKernel.name}`\n        );\n      }\n    }\n  }\n\n  getMainResultKernelNumberTexture() {\n    return [\n      '  threadId = indexTo3D(index, uOutputDim)',\n      '  kernel()',\n      '  data0[0] = kernelResult',\n    ];\n  }\n\n  getMainResultSubKernelNumberTexture() {\n    const result = [];\n    if (!this.subKernels) return result;\n    for (let i = 0; i < this.subKernels.length; ++i) {\n      const subKernel = this.subKernels[i];\n      if (subKernel.returnType === 'Integer') {\n        result.push(\n          `  data${i + 1}[0] = float(subKernelResult_${subKernel.name})`\n        );\n      } else {\n        result.push(\n          `  data${i + 1}[0] = subKernelResult_${subKernel.name}`\n        );\n      }\n    }\n    return result;\n  }\n\n  getMainResultKernelArray2Texture() {\n    return [\n      '  threadId = indexTo3D(index, uOutputDim)',\n      '  kernel()',\n      '  data0[0] = kernelResult[0]',\n      '  data0[1] = kernelResult[1]',\n    ];\n  }\n\n  getMainResultSubKernelArray2Texture() {\n    const result = [];\n    if (!this.subKernels) return result;\n    for (let i = 0; i < this.subKernels.length; ++i) {\n      const subKernel = this.subKernels[i];\n      result.push(\n        `  data${i + 1}[0] = subKernelResult_${subKernel.name}[0]`,\n        `  data${i + 1}[1] = subKernelResult_${subKernel.name}[1]`\n      );\n    }\n    return result;\n  }\n\n  getMainResultKernelArray3Texture() {\n    return [\n      '  threadId = indexTo3D(index, uOutputDim)',\n      '  kernel()',\n      '  data0[0] = kernelResult[0]',\n      '  data0[1] = kernelResult[1]',\n      '  data0[2] = kernelResult[2]',\n    ];\n  }\n\n  getMainResultSubKernelArray3Texture() {\n    const result = [];\n    if (!this.subKernels) return result;\n    for (let i = 0; i < this.subKernels.length; ++i) {\n      const subKernel = this.subKernels[i];\n      result.push(\n        `  data${i + 1}[0] = subKernelResult_${subKernel.name}[0]`,\n        `  data${i + 1}[1] = subKernelResult_${subKernel.name}[1]`,\n        `  data${i + 1}[2] = subKernelResult_${subKernel.name}[2]`\n      );\n    }\n    return result;\n  }\n\n  getMainResultKernelArray4Texture() {\n    return [\n      '  threadId = indexTo3D(index, uOutputDim)',\n      '  kernel()',\n      '  data0 = kernelResult',\n    ];\n  }\n\n  getMainResultSubKernelArray4Texture() {\n    const result = [];\n    if (!this.subKernels) return result;\n    for (let i = 0; i < this.subKernels.length; ++i) {\n      result.push(\n        `  data${i + 1} = subKernelResult_${this.subKernels[i].name}`\n      );\n    }\n    return result;\n  }\n\n  destroyExtensions() {\n    this.extensions.EXT_color_buffer_float = null;\n    this.extensions.OES_texture_float_linear = null;\n  }\n\n  toJSON() {\n    const json = super.toJSON();\n    json.functionNodes = FunctionBuilder.fromKernel(this, WebGL2FunctionNode).toJSON();\n    json.settings.threadDim = this.threadDim;\n    return json;\n  }\n}\n\nmodule.exports = {\n  WebGL2Kernel\n};\n},{\"../../utils\":114,\"../function-builder\":9,\"../web-gl/kernel\":70,\"./fragment-shader\":72,\"./function-node\":73,\"./kernel-value-maps\":74,\"./vertex-shader\":106}],106:[function(require,module,exports){\nconst vertexShader = `#version 300 es\n__FLOAT_TACTIC_DECLARATION__;\n__INT_TACTIC_DECLARATION__;\n__SAMPLER_2D_TACTIC_DECLARATION__;\n\nin vec2 aPos;\nin vec2 aTexCoord;\n\nout vec2 vTexCoord;\nuniform vec2 ratio;\n\nvoid main(void) {\n  gl_Position = vec4((aPos + vec2(1)) * ratio + vec2(-1), 0, 1);\n  vTexCoord = aTexCoord;\n}`;\n\nmodule.exports = {\n  vertexShader\n};\n},{}],107:[function(require,module,exports){\nconst lib = require('./index');\nconst GPU = lib.GPU;\nfor (const p in lib) {\n  if (!lib.hasOwnProperty(p)) continue;\n  if (p === 'GPU') continue; \n  GPU[p] = lib[p];\n}\n\nif (typeof window !== 'undefined') {\n  bindTo(window);\n}\nif (typeof self !== 'undefined') {\n  bindTo(self);\n}\n\nfunction bindTo(target) {\n  if (target.GPU) return;\n  Object.defineProperty(target, 'GPU', {\n    get() {\n      return GPU;\n    }\n  });\n}\n\nmodule.exports = lib;\n},{\"./index\":109}],108:[function(require,module,exports){\nconst { gpuMock } = require('gpu-mock.js');\nconst { utils } = require('./utils');\nconst { Kernel } = require('./backend/kernel');\nconst { CPUKernel } = require('./backend/cpu/kernel');\nconst { HeadlessGLKernel } = require('./backend/headless-gl/kernel');\nconst { WebGL2Kernel } = require('./backend/web-gl2/kernel');\nconst { WebGLKernel } = require('./backend/web-gl/kernel');\nconst { kernelRunShortcut } = require('./kernel-run-shortcut');\n\n\nconst kernelOrder = [HeadlessGLKernel, WebGL2Kernel, WebGLKernel];\n\nconst kernelTypes = ['gpu', 'cpu'];\n\nconst internalKernels = {\n  'headlessgl': HeadlessGLKernel,\n  'webgl2': WebGL2Kernel,\n  'webgl': WebGLKernel,\n};\n\nlet validate = true;\n\nclass GPU {\n  static disableValidation() {\n    validate = false;\n  }\n\n  static enableValidation() {\n    validate = true;\n  }\n\n  static get isGPUSupported() {\n    return kernelOrder.some(Kernel => Kernel.isSupported);\n  }\n\n  static get isKernelMapSupported() {\n    return kernelOrder.some(Kernel => Kernel.isSupported && Kernel.features.kernelMap);\n  }\n\n  static get isOffscreenCanvasSupported() {\n    return (typeof Worker !== 'undefined' && typeof OffscreenCanvas !== 'undefined') || typeof importScripts !== 'undefined';\n  }\n\n  static get isWebGLSupported() {\n    return WebGLKernel.isSupported;\n  }\n\n  static get isWebGL2Supported() {\n    return WebGL2Kernel.isSupported;\n  }\n\n  static get isHeadlessGLSupported() {\n    return HeadlessGLKernel.isSupported;\n  }\n\n  static get isCanvasSupported() {\n    return typeof HTMLCanvasElement !== 'undefined';\n  }\n\n  static get isGPUHTMLImageArraySupported() {\n    return WebGL2Kernel.isSupported;\n  }\n\n  static get isSinglePrecisionSupported() {\n    return kernelOrder.some(Kernel => Kernel.isSupported && Kernel.features.isFloatRead && Kernel.features.isTextureFloat);\n  }\n\n  constructor(settings) {\n    settings = settings || {};\n    this.canvas = settings.canvas || null;\n    this.context = settings.context || null;\n    this.mode = settings.mode;\n    this.Kernel = null;\n    this.kernels = [];\n    this.functions = [];\n    this.nativeFunctions = [];\n    this.injectedNative = null;\n    if (this.mode === 'dev') return;\n    this.chooseKernel();\n    if (settings.functions) {\n      for (let i = 0; i < settings.functions.length; i++) {\n        this.addFunction(settings.functions[i]);\n      }\n    }\n\n    if (settings.nativeFunctions) {\n      for (const p in settings.nativeFunctions) {\n        if (!settings.nativeFunctions.hasOwnProperty(p)) continue;\n        const s = settings.nativeFunctions[p];\n        const { name, source } = s;\n        this.addNativeFunction(name, source, s);\n      }\n    }\n  }\n\n  chooseKernel() {\n    if (this.Kernel) return;\n\n    let Kernel = null;\n\n    if (this.context) {\n      for (let i = 0; i < kernelOrder.length; i++) {\n        const ExternalKernel = kernelOrder[i];\n        if (ExternalKernel.isContextMatch(this.context)) {\n          if (!ExternalKernel.isSupported) {\n            throw new Error(`Kernel type ${ExternalKernel.name} not supported`);\n          }\n          Kernel = ExternalKernel;\n          break;\n        }\n      }\n      if (Kernel === null) {\n        throw new Error('unknown Context');\n      }\n    } else if (this.mode) {\n      if (this.mode in internalKernels) {\n        if (!validate || internalKernels[this.mode].isSupported) {\n          Kernel = internalKernels[this.mode];\n        }\n      } else if (this.mode === 'gpu') {\n        for (let i = 0; i < kernelOrder.length; i++) {\n          if (kernelOrder[i].isSupported) {\n            Kernel = kernelOrder[i];\n            break;\n          }\n        }\n      } else if (this.mode === 'cpu') {\n        Kernel = CPUKernel;\n      }\n      if (!Kernel) {\n        throw new Error(`A requested mode of \"${this.mode}\" and is not supported`);\n      }\n    } else {\n      for (let i = 0; i < kernelOrder.length; i++) {\n        if (kernelOrder[i].isSupported) {\n          Kernel = kernelOrder[i];\n          break;\n        }\n      }\n      if (!Kernel) {\n        Kernel = CPUKernel;\n      }\n    }\n\n    if (!this.mode) {\n      this.mode = Kernel.mode;\n    }\n    this.Kernel = Kernel;\n  }\n\n  createKernel(source, settings) {\n    if (typeof source === 'undefined') {\n      throw new Error('Missing source parameter');\n    }\n    if (typeof source !== 'object' && !utils.isFunction(source) && typeof source !== 'string') {\n      throw new Error('source parameter not a function');\n    }\n\n    const kernels = this.kernels;\n    if (this.mode === 'dev') {\n      const devKernel = gpuMock(source, upgradeDeprecatedCreateKernelSettings(settings));\n      kernels.push(devKernel);\n      return devKernel;\n    }\n\n    source = typeof source === 'function' ? source.toString() : source;\n    const switchableKernels = {};\n    const settingsCopy = upgradeDeprecatedCreateKernelSettings(settings) || {};\n    if (settings && typeof settings.argumentTypes === 'object') {\n      settingsCopy.argumentTypes = Object.keys(settings.argumentTypes).map(argumentName => settings.argumentTypes[argumentName]);\n    }\n\n    function onRequestFallback(args) {\n      console.warn('Falling back to CPU');\n      const fallbackKernel = new CPUKernel(source, {\n        argumentTypes: kernelRun.argumentTypes,\n        constantTypes: kernelRun.constantTypes,\n        graphical: kernelRun.graphical,\n        loopMaxIterations: kernelRun.loopMaxIterations,\n        constants: kernelRun.constants,\n        dynamicOutput: kernelRun.dynamicOutput,\n        dynamicArgument: kernelRun.dynamicArguments,\n        output: kernelRun.output,\n        precision: kernelRun.precision,\n        pipeline: kernelRun.pipeline,\n        immutable: kernelRun.immutable,\n        optimizeFloatMemory: kernelRun.optimizeFloatMemory,\n        fixIntegerDivisionAccuracy: kernelRun.fixIntegerDivisionAccuracy,\n        functions: kernelRun.functions,\n        nativeFunctions: kernelRun.nativeFunctions,\n        injectedNative: kernelRun.injectedNative,\n        subKernels: kernelRun.subKernels,\n        strictIntegers: kernelRun.strictIntegers,\n        debug: kernelRun.debug,\n      });\n      fallbackKernel.build.apply(fallbackKernel, args);\n      const result = fallbackKernel.run.apply(fallbackKernel, args);\n      kernelRun.replaceKernel(fallbackKernel);\n      return result;\n    }\n\n    function onRequestSwitchKernel(reasons, args, _kernel) {\n      if (_kernel.debug) {\n        console.warn('Switching kernels');\n      }\n      let newOutput = null;\n      if (_kernel.signature && !switchableKernels[_kernel.signature]) {\n        switchableKernels[_kernel.signature] = _kernel;\n      }\n      if (_kernel.dynamicOutput) {\n        for (let i = reasons.length - 1; i >= 0; i--) {\n          const reason = reasons[i];\n          if (reason.type === 'outputPrecisionMismatch') {\n            newOutput = reason.needed;\n          }\n        }\n      }\n\n      const Constructor = _kernel.constructor;\n      const argumentTypes = Constructor.getArgumentTypes(_kernel, args);\n      const signature = Constructor.getSignature(_kernel, argumentTypes);\n      const existingKernel = switchableKernels[signature];\n      if (existingKernel) {\n        existingKernel.onActivate(_kernel);\n        return existingKernel;\n      }\n\n      const newKernel = switchableKernels[signature] = new Constructor(source, {\n        argumentTypes,\n        constantTypes: _kernel.constantTypes,\n        graphical: _kernel.graphical,\n        loopMaxIterations: _kernel.loopMaxIterations,\n        constants: _kernel.constants,\n        dynamicOutput: _kernel.dynamicOutput,\n        dynamicArgument: _kernel.dynamicArguments,\n        context: _kernel.context,\n        canvas: _kernel.canvas,\n        output: newOutput || _kernel.output,\n        precision: _kernel.precision,\n        pipeline: _kernel.pipeline,\n        immutable: _kernel.immutable,\n        optimizeFloatMemory: _kernel.optimizeFloatMemory,\n        fixIntegerDivisionAccuracy: _kernel.fixIntegerDivisionAccuracy,\n        functions: _kernel.functions,\n        nativeFunctions: _kernel.nativeFunctions,\n        injectedNative: _kernel.injectedNative,\n        subKernels: _kernel.subKernels,\n        strictIntegers: _kernel.strictIntegers,\n        debug: _kernel.debug,\n        gpu: _kernel.gpu,\n        validate,\n        returnType: _kernel.returnType,\n        tactic: _kernel.tactic,\n        onRequestFallback,\n        onRequestSwitchKernel,\n        texture: _kernel.texture,\n        mappedTextures: _kernel.mappedTextures,\n        drawBuffersMap: _kernel.drawBuffersMap,\n      });\n      newKernel.build.apply(newKernel, args);\n      kernelRun.replaceKernel(newKernel);\n      kernels.push(newKernel);\n      return newKernel;\n    }\n    const mergedSettings = Object.assign({\n      context: this.context,\n      canvas: this.canvas,\n      functions: this.functions,\n      nativeFunctions: this.nativeFunctions,\n      injectedNative: this.injectedNative,\n      gpu: this,\n      validate,\n      onRequestFallback,\n      onRequestSwitchKernel\n    }, settingsCopy);\n\n    const kernel = new this.Kernel(source, mergedSettings);\n    const kernelRun = kernelRunShortcut(kernel);\n\n    if (!this.canvas) {\n      this.canvas = kernel.canvas;\n    }\n\n    if (!this.context) {\n      this.context = kernel.context;\n    }\n\n    kernels.push(kernel);\n\n    return kernelRun;\n  }\n\n  createKernelMap() {\n    let fn;\n    let settings;\n    const argument2Type = typeof arguments[arguments.length - 2];\n    if (argument2Type === 'function' || argument2Type === 'string') {\n      fn = arguments[arguments.length - 2];\n      settings = arguments[arguments.length - 1];\n    } else {\n      fn = arguments[arguments.length - 1];\n    }\n\n    if (this.mode !== 'dev') {\n      if (!this.Kernel.isSupported || !this.Kernel.features.kernelMap) {\n        if (this.mode && kernelTypes.indexOf(this.mode) < 0) {\n          throw new Error(`kernelMap not supported on ${this.Kernel.name}`);\n        }\n      }\n    }\n\n    const settingsCopy = upgradeDeprecatedCreateKernelSettings(settings);\n    if (settings && typeof settings.argumentTypes === 'object') {\n      settingsCopy.argumentTypes = Object.keys(settings.argumentTypes).map(argumentName => settings.argumentTypes[argumentName]);\n    }\n\n    if (Array.isArray(arguments[0])) {\n      settingsCopy.subKernels = [];\n      const functions = arguments[0];\n      for (let i = 0; i < functions.length; i++) {\n        const source = functions[i].toString();\n        const name = utils.getFunctionNameFromString(source);\n        settingsCopy.subKernels.push({\n          name,\n          source,\n          property: i,\n        });\n      }\n    } else {\n      settingsCopy.subKernels = [];\n      const functions = arguments[0];\n      for (let p in functions) {\n        if (!functions.hasOwnProperty(p)) continue;\n        const source = functions[p].toString();\n        const name = utils.getFunctionNameFromString(source);\n        settingsCopy.subKernels.push({\n          name: name || p,\n          source,\n          property: p,\n        });\n      }\n    }\n    return this.createKernel(fn, settingsCopy);\n  }\n\n  combineKernels() {\n    const firstKernel = arguments[0];\n    const combinedKernel = arguments[arguments.length - 1];\n    if (firstKernel.kernel.constructor.mode === 'cpu') return combinedKernel;\n    const canvas = arguments[0].canvas;\n    const context = arguments[0].context;\n    const max = arguments.length - 1;\n    for (let i = 0; i < max; i++) {\n      arguments[i]\n        .setCanvas(canvas)\n        .setContext(context)\n        .setPipeline(true);\n    }\n\n    return function() {\n      const texture = combinedKernel.apply(this, arguments);\n      if (texture.toArray) {\n        return texture.toArray();\n      }\n      return texture;\n    };\n  }\n\n  setFunctions(functions) {\n    this.functions = functions;\n    return this;\n  }\n\n  setNativeFunctions(nativeFunctions) {\n    this.nativeFunctions = nativeFunctions;\n    return this;\n  }\n\n  addFunction(source, settings) {\n    this.functions.push({ source, settings });\n    return this;\n  }\n\n  addNativeFunction(name, source, settings) {\n    if (this.kernels.length > 0) {\n      throw new Error('Cannot call \"addNativeFunction\" after \"createKernels\" has been called.');\n    }\n    this.nativeFunctions.push(Object.assign({ name, source }, settings));\n    return this;\n  }\n\n  injectNative(source) {\n    this.injectedNative = source;\n    return this;\n  }\n\n  destroy() {\n    return new Promise((resolve, reject) => {\n      if (!this.kernels) {\n        resolve();\n      }\n      setTimeout(() => {\n        try {\n          for (let i = 0; i < this.kernels.length; i++) {\n            this.kernels[i].destroy(true); \n          }\n          let firstKernel = this.kernels[0];\n          if (firstKernel) {\n            if (firstKernel.kernel) {\n              firstKernel = firstKernel.kernel;\n            }\n            if (firstKernel.constructor.destroyContext) {\n              firstKernel.constructor.destroyContext(this.context);\n            }\n          }\n        } catch (e) {\n          reject(e);\n        }\n        resolve();\n      }, 0);\n    });\n  }\n}\n\n\nfunction upgradeDeprecatedCreateKernelSettings(settings) {\n  if (!settings) {\n    return {};\n  }\n  const upgradedSettings = Object.assign({}, settings);\n\n  if (settings.hasOwnProperty('floatOutput')) {\n    utils.warnDeprecated('setting', 'floatOutput', 'precision');\n    upgradedSettings.precision = settings.floatOutput ? 'single' : 'unsigned';\n  }\n  if (settings.hasOwnProperty('outputToTexture')) {\n    utils.warnDeprecated('setting', 'outputToTexture', 'pipeline');\n    upgradedSettings.pipeline = Boolean(settings.outputToTexture);\n  }\n  if (settings.hasOwnProperty('outputImmutable')) {\n    utils.warnDeprecated('setting', 'outputImmutable', 'immutable');\n    upgradedSettings.immutable = Boolean(settings.outputImmutable);\n  }\n  if (settings.hasOwnProperty('floatTextures')) {\n    utils.warnDeprecated('setting', 'floatTextures', 'optimizeFloatMemory');\n    upgradedSettings.optimizeFloatMemory = Boolean(settings.floatTextures);\n  }\n  return upgradedSettings;\n}\n\nmodule.exports = {\n  GPU,\n  kernelOrder,\n  kernelTypes\n};\n},{\"./backend/cpu/kernel\":8,\"./backend/headless-gl/kernel\":34,\"./backend/kernel\":36,\"./backend/web-gl/kernel\":70,\"./backend/web-gl2/kernel\":105,\"./kernel-run-shortcut\":111,\"./utils\":114,\"gpu-mock.js\":4}],109:[function(require,module,exports){\nconst { GPU } = require('./gpu');\nconst { alias } = require('./alias');\nconst { utils } = require('./utils');\nconst { Input, input } = require('./input');\nconst { Texture } = require('./texture');\nconst { FunctionBuilder } = require('./backend/function-builder');\nconst { FunctionNode } = require('./backend/function-node');\nconst { CPUFunctionNode } = require('./backend/cpu/function-node');\nconst { CPUKernel } = require('./backend/cpu/kernel');\n\nconst { HeadlessGLKernel } = require('./backend/headless-gl/kernel');\n\nconst { WebGLFunctionNode } = require('./backend/web-gl/function-node');\nconst { WebGLKernel } = require('./backend/web-gl/kernel');\nconst { kernelValueMaps: webGLKernelValueMaps } = require('./backend/web-gl/kernel-value-maps');\n\nconst { WebGL2FunctionNode } = require('./backend/web-gl2/function-node');\nconst { WebGL2Kernel } = require('./backend/web-gl2/kernel');\nconst { kernelValueMaps: webGL2KernelValueMaps } = require('./backend/web-gl2/kernel-value-maps');\n\nconst { GLKernel } = require('./backend/gl/kernel');\n\nconst { Kernel } = require('./backend/kernel');\n\nconst { FunctionTracer } = require('./backend/function-tracer');\n\nconst mathRandom = require('./plugins/math-random-uniformly-distributed');\n\nmodule.exports = {\n  alias,\n  CPUFunctionNode,\n  CPUKernel,\n  GPU,\n  FunctionBuilder,\n  FunctionNode,\n  HeadlessGLKernel,\n  Input,\n  input,\n  Texture,\n  utils,\n\n  WebGL2FunctionNode,\n  WebGL2Kernel,\n  webGL2KernelValueMaps,\n\n  WebGLFunctionNode,\n  WebGLKernel,\n  webGLKernelValueMaps,\n\n  GLKernel,\n  Kernel,\n  FunctionTracer,\n\n  plugins: {\n    mathRandom\n  }\n};\n},{\"./alias\":5,\"./backend/cpu/function-node\":6,\"./backend/cpu/kernel\":8,\"./backend/function-builder\":9,\"./backend/function-node\":10,\"./backend/function-tracer\":11,\"./backend/gl/kernel\":13,\"./backend/headless-gl/kernel\":34,\"./backend/kernel\":36,\"./backend/web-gl/function-node\":38,\"./backend/web-gl/kernel\":70,\"./backend/web-gl/kernel-value-maps\":39,\"./backend/web-gl2/function-node\":73,\"./backend/web-gl2/kernel\":105,\"./backend/web-gl2/kernel-value-maps\":74,\"./gpu\":108,\"./input\":110,\"./plugins/math-random-uniformly-distributed\":112,\"./texture\":113,\"./utils\":114}],110:[function(require,module,exports){\nclass Input {\n  constructor(value, size) {\n    this.value = value;\n    if (Array.isArray(size)) {\n      this.size = size;\n    } else {\n      this.size = new Int32Array(3);\n      if (size.z) {\n        this.size = new Int32Array([size.x, size.y, size.z]);\n      } else if (size.y) {\n        this.size = new Int32Array([size.x, size.y]);\n      } else {\n        this.size = new Int32Array([size.x]);\n      }\n    }\n\n    const [w, h, d] = this.size;\n    if (d) {\n      if (this.value.length !== (w * h * d)) {\n        throw new Error(`Input size ${this.value.length} does not match ${w} * ${h} * ${d} = ${(h * w * d)}`);\n      }\n    } else if (h) {\n      if (this.value.length !== (w * h)) {\n        throw new Error(`Input size ${this.value.length} does not match ${w} * ${h} = ${(h * w)}`);\n      }\n    } else {\n      if (this.value.length !== w) {\n        throw new Error(`Input size ${this.value.length} does not match ${w}`);\n      }\n    }\n\n  }\n\n  toArray() {\n    const { utils } = require('./utils');\n    const [w, h, d] = this.size;\n    if (d) {\n      return utils.erectMemoryOptimized3DFloat(this.value.subarray ? this.value : new Float32Array(this.value), w, h, d);\n    } else if (h) {\n      return utils.erectMemoryOptimized2DFloat(this.value.subarray ? this.value : new Float32Array(this.value), w, h);\n    } else {\n      return this.value;\n    }\n  }\n}\n\nfunction input(value, size) {\n  return new Input(value, size);\n}\n\nmodule.exports = {\n  Input,\n  input\n};\n},{\"./utils\":114}],111:[function(require,module,exports){\nconst { utils } = require('./utils');\n\nfunction kernelRunShortcut(kernel) {\n  let run = function() {\n    kernel.build.apply(kernel, arguments);\n    run = function() {\n      let result = kernel.run.apply(kernel, arguments);\n      if (kernel.switchingKernels) {\n        const reasons = kernel.resetSwitchingKernels();\n        const newKernel = kernel.onRequestSwitchKernel(reasons, arguments, kernel);\n        shortcut.kernel = kernel = newKernel;\n        result = newKernel.run.apply(newKernel, arguments);\n      }\n      if (kernel.renderKernels) {\n        return kernel.renderKernels();\n      } else if (kernel.renderOutput) {\n        return kernel.renderOutput();\n      } else {\n        return result;\n      }\n    };\n    return run.apply(kernel, arguments);\n  };\n  const shortcut = function() {\n    return run.apply(kernel, arguments);\n  };\n  shortcut.exec = function() {\n    return new Promise((accept, reject) => {\n      try {\n        accept(run.apply(this, arguments));\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n  shortcut.replaceKernel = function(replacementKernel) {\n    kernel = replacementKernel;\n    bindKernelToShortcut(kernel, shortcut);\n  };\n\n  bindKernelToShortcut(kernel, shortcut);\n  return shortcut;\n}\n\nfunction bindKernelToShortcut(kernel, shortcut) {\n  if (shortcut.kernel) {\n    shortcut.kernel = kernel;\n    return;\n  }\n  const properties = utils.allPropertiesOf(kernel);\n  for (let i = 0; i < properties.length; i++) {\n    const property = properties[i];\n    if (property[0] === '_' && property[1] === '_') continue;\n    if (typeof kernel[property] === 'function') {\n      if (property.substring(0, 3) === 'add' || property.substring(0, 3) === 'set') {\n        shortcut[property] = function() {\n          shortcut.kernel[property].apply(shortcut.kernel, arguments);\n          return shortcut;\n        };\n      } else {\n        shortcut[property] = function() {\n          return shortcut.kernel[property].apply(shortcut.kernel, arguments);\n        };\n      }\n    } else {\n      shortcut.__defineGetter__(property, () => shortcut.kernel[property]);\n      shortcut.__defineSetter__(property, (value) => {\n        shortcut.kernel[property] = value;\n      });\n    }\n  }\n  shortcut.kernel = kernel;\n}\nmodule.exports = {\n  kernelRunShortcut\n};\n},{\"./utils\":114}],112:[function(require,module,exports){\nconst source = `// https://www.shadertoy.com/view/4t2SDh\n//note: uniformly distributed, normalized rand, [0,1]\nhighp float randomSeedShift = 1.0;\nhighp float slide = 1.0;\nuniform highp float randomSeed1;\nuniform highp float randomSeed2;\n\nhighp float nrand(highp vec2 n) {\n  highp float result = fract(sin(dot((n.xy + 1.0) * vec2(randomSeed1 * slide, randomSeed2 * randomSeedShift), vec2(12.9898, 78.233))) * 43758.5453);\n  randomSeedShift = result;\n  if (randomSeedShift > 0.5) {\n    slide += 0.00009; \n  } else {\n    slide += 0.0009;\n  }\n  return result;\n}`;\n\nconst name = 'math-random-uniformly-distributed';\n\nconst functionMatch = `Math.random()`;\n\nconst functionReplace = `nrand(vTexCoord)`;\n\nconst functionReturnType = 'Number';\nconst onBeforeRun = (kernel) => {\n  kernel.setUniform1f('randomSeed1', Math.random());\n  kernel.setUniform1f('randomSeed2', Math.random());\n};\n\nconst plugin = {\n  name,\n  onBeforeRun,\n  functionMatch,\n  functionReplace,\n  functionReturnType,\n  source\n};\n\nmodule.exports = plugin;\n},{}],113:[function(require,module,exports){\nclass Texture {\n  constructor(settings) {\n    const {\n      texture,\n      size,\n      dimensions,\n      output,\n      context,\n      type = 'NumberTexture',\n      kernel,\n      internalFormat,\n      textureFormat\n    } = settings;\n    if (!output) throw new Error('settings property \"output\" required.');\n    if (!context) throw new Error('settings property \"context\" required.');\n    if (!texture) throw new Error('settings property \"texture\" required.');\n    if (!kernel) throw new Error('settings property \"kernel\" required.');\n    this.texture = texture;\n    if (texture._refs) {\n      texture._refs++;\n    } else {\n      texture._refs = 1;\n    }\n    this.size = size;\n    this.dimensions = dimensions;\n    this.output = output;\n    this.context = context;\n    this.kernel = kernel;\n    this.type = type;\n    this._deleted = false;\n    this.internalFormat = internalFormat;\n    this.textureFormat = textureFormat;\n  }\n\n  toArray() {\n    throw new Error(`Not implemented on ${this.constructor.name}`);\n  }\n\n  clone() {\n    throw new Error(`Not implemented on ${this.constructor.name}`);\n  }\n\n  delete() {\n    throw new Error(`Not implemented on ${this.constructor.name}`);\n  }\n\n  clear() {\n    throw new Error(`Not implemented on ${this.constructor.name}`);\n  }\n}\n\nmodule.exports = {\n  Texture\n};\n},{}],114:[function(require,module,exports){\nconst acorn = require('acorn');\nconst { Input } = require('./input');\nconst { Texture } = require('./texture');\n\nconst FUNCTION_NAME = /function ([^(]*)/;\nconst STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\nconst ARGUMENT_NAMES = /([^\\s,]+)/g;\n\nconst utils = {\n  systemEndianness() {\n    return _systemEndianness;\n  },\n  getSystemEndianness() {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) return 'LE';\n    if (c[0] === 0xde) return 'BE';\n    throw new Error('unknown endianness');\n  },\n\n  isFunction(funcObj) {\n    return typeof(funcObj) === 'function';\n  },\n\n  isFunctionString(fn) {\n    if (typeof fn === 'string') {\n      return (fn\n        .slice(0, 'function'.length)\n        .toLowerCase() === 'function');\n    }\n    return false;\n  },\n\n  getFunctionNameFromString(funcStr) {\n    const result = FUNCTION_NAME.exec(funcStr);\n    if (!result || result.length === 0) return null;\n    return result[1].trim();\n  },\n\n  getFunctionBodyFromString(funcStr) {\n    return funcStr.substring(funcStr.indexOf('{') + 1, funcStr.lastIndexOf('}'));\n  },\n\n  getArgumentNamesFromString(fn) {\n    const fnStr = fn.replace(STRIP_COMMENTS, '');\n    let result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);\n    if (result === null) {\n      result = [];\n    }\n    return result;\n  },\n\n  clone(obj) {\n    if (obj === null || typeof obj !== 'object' || obj.hasOwnProperty('isActiveClone')) return obj;\n\n    const temp = obj.constructor(); \n\n    for (let key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        obj.isActiveClone = null;\n        temp[key] = utils.clone(obj[key]);\n        delete obj.isActiveClone;\n      }\n    }\n\n    return temp;\n  },\n\n  isArray(array) {\n    return !isNaN(array.length);\n  },\n\n  getVariableType(value, strictIntegers) {\n    if (utils.isArray(value)) {\n      if (value.length > 0 && value[0].nodeName === 'IMG') {\n        return 'HTMLImageArray';\n      }\n      return 'Array';\n    }\n\n    switch (value.constructor) {\n      case Boolean:\n        return 'Boolean';\n      case Number:\n        if (strictIntegers && Number.isInteger(value)) {\n          return 'Integer';\n        }\n        return 'Float';\n      case Texture:\n        return value.type;\n      case Input:\n        return 'Input';\n    }\n    if ('nodeName' in value) {\n      switch (value.nodeName) {\n        case 'IMG':\n          return 'HTMLImage';\n        case 'CANVAS':\n          return 'HTMLImage';\n        case 'VIDEO':\n          return 'HTMLVideo';\n      }\n    } else if (value.hasOwnProperty('type')) {\n      return value.type;\n    } else if (typeof OffscreenCanvas !== 'undefined' && value instanceof OffscreenCanvas) {\n      return 'OffscreenCanvas';\n    } else if (typeof ImageBitmap !== 'undefined' && value instanceof ImageBitmap) {\n      return 'ImageBitmap';\n    } else if (typeof ImageData !== 'undefined' && value instanceof ImageData) {\n      return 'ImageData';\n    }\n    return 'Unknown';\n  },\n\n  getKernelTextureSize(settings, dimensions) {\n    let [w, h, d] = dimensions;\n    let texelCount = (w || 1) * (h || 1) * (d || 1);\n\n    if (settings.optimizeFloatMemory && settings.precision === 'single') {\n      w = texelCount = Math.ceil(texelCount / 4);\n    }\n    if (h > 1 && w * h === texelCount) {\n      return new Int32Array([w, h]);\n    }\n    return utils.closestSquareDimensions(texelCount);\n  },\n\n  closestSquareDimensions(length) {\n    const sqrt = Math.sqrt(length);\n    let high = Math.ceil(sqrt);\n    let low = Math.floor(sqrt);\n    while (high * low < length) {\n      high--;\n      low = Math.ceil(length / high);\n    }\n    return new Int32Array([low, Math.ceil(length / low)]);\n  },\n\n  getMemoryOptimizedFloatTextureSize(dimensions, bitRatio) {\n    const totalArea = utils.roundTo((dimensions[0] || 1) * (dimensions[1] || 1) * (dimensions[2] || 1) * (dimensions[3] || 1), 4);\n    const texelCount = totalArea / bitRatio;\n    return utils.closestSquareDimensions(texelCount);\n  },\n\n  getMemoryOptimizedPackedTextureSize(dimensions, bitRatio) {\n    const [w, h, d] = dimensions;\n    const totalArea = utils.roundTo((w || 1) * (h || 1) * (d || 1), 4);\n    const texelCount = totalArea / (4 / bitRatio);\n    return utils.closestSquareDimensions(texelCount);\n  },\n\n  roundTo(n, d) {\n    return Math.floor((n + d - 1) / d) * d;\n  },\n  getDimensions(x, pad) {\n    let ret;\n    if (utils.isArray(x)) {\n      const dim = [];\n      let temp = x;\n      while (utils.isArray(temp)) {\n        dim.push(temp.length);\n        temp = temp[0];\n      }\n      ret = dim.reverse();\n    } else if (x instanceof Texture) {\n      ret = x.output;\n    } else if (x instanceof Input) {\n      ret = x.size;\n    } else {\n      throw new Error(`Unknown dimensions of ${x}`);\n    }\n\n    if (pad) {\n      ret = Array.from(ret);\n      while (ret.length < 3) {\n        ret.push(1);\n      }\n    }\n\n    return new Int32Array(ret);\n  },\n\n  flatten2dArrayTo(array, target) {\n    let offset = 0;\n    for (let y = 0; y < array.length; y++) {\n      target.set(array[y], offset);\n      offset += array[y].length;\n    }\n  },\n\n  flatten3dArrayTo(array, target) {\n    let offset = 0;\n    for (let z = 0; z < array.length; z++) {\n      for (let y = 0; y < array[z].length; y++) {\n        target.set(array[z][y], offset);\n        offset += array[z][y].length;\n      }\n    }\n  },\n\n  flatten4dArrayTo(array, target) {\n    let offset = 0;\n    for (let l = 0; l < array.length; l++) {\n      for (let z = 0; z < array[l].length; z++) {\n        for (let y = 0; y < array[l][z].length; y++) {\n          target.set(array[l][z][y], offset);\n          offset += array[l][z][y].length;\n        }\n      }\n    }\n  },\n\n  flattenTo(array, target) {\n    if (utils.isArray(array[0])) {\n      if (utils.isArray(array[0][0])) {\n        if (utils.isArray(array[0][0][0])) {\n          utils.flatten4dArrayTo(array, target);\n        } else {\n          utils.flatten3dArrayTo(array, target);\n        }\n      } else {\n        utils.flatten2dArrayTo(array, target);\n      }\n    } else {\n      target.set(array);\n    }\n  },\n\n  splitArray(array, part) {\n    const result = [];\n    for (let i = 0; i < array.length; i += part) {\n      result.push(new array.constructor(array.buffer, i * 4 + array.byteOffset, part));\n    }\n    return result;\n  },\n\n  getAstString(source, ast) {\n    const lines = Array.isArray(source) ? source : source.split(/\\r?\\n/g);\n    const start = ast.loc.start;\n    const end = ast.loc.end;\n    const result = [];\n    if (start.line === end.line) {\n      result.push(lines[start.line - 1].substring(start.column, end.column));\n    } else {\n      result.push(lines[start.line - 1].slice(start.column));\n      for (let i = start.line; i < end.line; i++) {\n        result.push(lines[i]);\n      }\n      result.push(lines[end.line - 1].slice(0, end.column));\n    }\n    return result.join('\\n');\n  },\n\n  allPropertiesOf(obj) {\n    const props = [];\n\n    do {\n      props.push.apply(props, Object.getOwnPropertyNames(obj));\n    } while (obj = Object.getPrototypeOf(obj));\n\n    return props;\n  },\n\n  linesToString(lines) {\n    if (lines.length > 0) {\n      return lines.join(';\\n') + ';\\n';\n    } else {\n      return '\\n';\n    }\n  },\n  warnDeprecated(type, oldName, newName) {\n    if (newName) {\n      console.warn(`You are using a deprecated ${ type } \"${ oldName }\". It has been replaced with \"${ newName }\". Fixing, but please upgrade as it will soon be removed.`);\n    } else {\n      console.warn(`You are using a deprecated ${ type } \"${ oldName }\". It has been removed. Fixing, but please upgrade as it will soon be removed.`);\n    }\n  },\n  flipPixels: (pixels, width, height) => {\n    const halfHeight = height / 2 | 0; \n    const bytesPerRow = width * 4;\n    const temp = new Uint8ClampedArray(width * 4);\n    const result = pixels.slice(0);\n    for (let y = 0; y < halfHeight; ++y) {\n      const topOffset = y * bytesPerRow;\n      const bottomOffset = (height - y - 1) * bytesPerRow;\n\n      temp.set(result.subarray(topOffset, topOffset + bytesPerRow));\n\n      result.copyWithin(topOffset, bottomOffset, bottomOffset + bytesPerRow);\n\n      result.set(temp, bottomOffset);\n    }\n    return result;\n  },\n  erectPackedFloat: (array, width) => {\n    return array.subarray(0, width);\n  },\n  erect2DPackedFloat: (array, width, height) => {\n    const yResults = new Array(height);\n    for (let y = 0; y < height; y++) {\n      const xStart = y * width;\n      const xEnd = xStart + width;\n      yResults[y] = array.subarray(xStart, xEnd);\n    }\n    return yResults;\n  },\n  erect3DPackedFloat: (array, width, height, depth) => {\n    const zResults = new Array(depth);\n    for (let z = 0; z < depth; z++) {\n      const yResults = new Array(height);\n      for (let y = 0; y < height; y++) {\n        const xStart = (z * height * width) + y * width;\n        const xEnd = xStart + width;\n        yResults[y] = array.subarray(xStart, xEnd);\n      }\n      zResults[z] = yResults;\n    }\n    return zResults;\n  },\n  erectMemoryOptimizedFloat: (array, width) => {\n    return array.subarray(0, width);\n  },\n  erectMemoryOptimized2DFloat: (array, width, height) => {\n    const yResults = new Array(height);\n    for (let y = 0; y < height; y++) {\n      const offset = y * width;\n      yResults[y] = array.subarray(offset, offset + width);\n    }\n    return yResults;\n  },\n  erectMemoryOptimized3DFloat: (array, width, height, depth) => {\n    const zResults = new Array(depth);\n    for (let z = 0; z < depth; z++) {\n      const yResults = new Array(height);\n      for (let y = 0; y < height; y++) {\n        const offset = (z * height * width) + (y * width);\n        yResults[y] = array.subarray(offset, offset + width);\n      }\n      zResults[z] = yResults;\n    }\n    return zResults;\n  },\n  erectFloat: (array, width) => {\n    const xResults = new Float32Array(width);\n    let i = 0;\n    for (let x = 0; x < width; x++) {\n      xResults[x] = array[i];\n      i += 4;\n    }\n    return xResults;\n  },\n  erect2DFloat: (array, width, height) => {\n    const yResults = new Array(height);\n    let i = 0;\n    for (let y = 0; y < height; y++) {\n      const xResults = new Float32Array(width);\n      for (let x = 0; x < width; x++) {\n        xResults[x] = array[i];\n        i += 4;\n      }\n      yResults[y] = xResults;\n    }\n    return yResults;\n  },\n  erect3DFloat: (array, width, height, depth) => {\n    const zResults = new Array(depth);\n    let i = 0;\n    for (let z = 0; z < depth; z++) {\n      const yResults = new Array(height);\n      for (let y = 0; y < height; y++) {\n        const xResults = new Float32Array(width);\n        for (let x = 0; x < width; x++) {\n          xResults[x] = array[i];\n          i += 4;\n        }\n        yResults[y] = xResults;\n      }\n      zResults[z] = yResults;\n    }\n    return zResults;\n  },\n  erectArray2: (array, width) => {\n    const xResults = new Array(width);\n    const xResultsMax = width * 4;\n    let i = 0;\n    for (let x = 0; x < xResultsMax; x += 4) {\n      xResults[i++] = array.subarray(x, x + 2);\n    }\n    return xResults;\n  },\n  erect2DArray2: (array, width, height) => {\n    const yResults = new Array(height);\n    const XResultsMax = width * 4;\n    for (let y = 0; y < height; y++) {\n      const xResults = new Array(width);\n      const offset = y * XResultsMax;\n      let i = 0;\n      for (let x = 0; x < XResultsMax; x += 4) {\n        xResults[i++] = array.subarray(x + offset, x + offset + 2);\n      }\n      yResults[y] = xResults;\n    }\n    return yResults;\n  },\n  erect3DArray2: (array, width, height, depth) => {\n    const xResultsMax = width * 4;\n    const zResults = new Array(depth);\n    for (let z = 0; z < depth; z++) {\n      const yResults = new Array(height);\n      for (let y = 0; y < height; y++) {\n        const xResults = new Array(width);\n        const offset = (z * xResultsMax * height) + (y * xResultsMax);\n        let i = 0;\n        for (let x = 0; x < xResultsMax; x += 4) {\n          xResults[i++] = array.subarray(x + offset, x + offset + 2);\n        }\n        yResults[y] = xResults;\n      }\n      zResults[z] = yResults;\n    }\n    return zResults;\n  },\n  erectArray3: (array, width) => {\n    const xResults = new Array(width);\n    const xResultsMax = width * 4;\n    let i = 0;\n    for (let x = 0; x < xResultsMax; x += 4) {\n      xResults[i++] = array.subarray(x, x + 3);\n    }\n    return xResults;\n  },\n  erect2DArray3: (array, width, height) => {\n    const xResultsMax = width * 4;\n    const yResults = new Array(height);\n    for (let y = 0; y < height; y++) {\n      const xResults = new Array(width);\n      const offset = y * xResultsMax;\n      let i = 0;\n      for (let x = 0; x < xResultsMax; x += 4) {\n        xResults[i++] = array.subarray(x + offset, x + offset + 3);\n      }\n      yResults[y] = xResults;\n    }\n    return yResults;\n  },\n  erect3DArray3: (array, width, height, depth) => {\n    const xResultsMax = width * 4;\n    const zResults = new Array(depth);\n    for (let z = 0; z < depth; z++) {\n      const yResults = new Array(height);\n      for (let y = 0; y < height; y++) {\n        const xResults = new Array(width);\n        const offset = (z * xResultsMax * height) + (y * xResultsMax);\n        let i = 0;\n        for (let x = 0; x < xResultsMax; x += 4) {\n          xResults[i++] = array.subarray(x + offset, x + offset + 3);\n        }\n        yResults[y] = xResults;\n      }\n      zResults[z] = yResults;\n    }\n    return zResults;\n  },\n  erectArray4: (array, width) => {\n    const xResults = new Array(array);\n    const xResultsMax = width * 4;\n    let i = 0;\n    for (let x = 0; x < xResultsMax; x += 4) {\n      xResults[i++] = array.subarray(x, x + 4);\n    }\n    return xResults;\n  },\n  erect2DArray4: (array, width, height) => {\n    const xResultsMax = width * 4;\n    const yResults = new Array(height);\n    for (let y = 0; y < height; y++) {\n      const xResults = new Array(width);\n      const offset = y * xResultsMax;\n      let i = 0;\n      for (let x = 0; x < xResultsMax; x += 4) {\n        xResults[i++] = array.subarray(x + offset, x + offset + 4);\n      }\n      yResults[y] = xResults;\n    }\n    return yResults;\n  },\n  erect3DArray4: (array, width, height, depth) => {\n    const xResultsMax = width * 4;\n    const zResults = new Array(depth);\n    for (let z = 0; z < depth; z++) {\n      const yResults = new Array(height);\n      for (let y = 0; y < height; y++) {\n        const xResults = new Array(width);\n        const offset = (z * xResultsMax * height) + (y * xResultsMax);\n        let i = 0;\n        for (let x = 0; x < xResultsMax; x += 4) {\n          xResults[i++] = array.subarray(x + offset, x + offset + 4);\n        }\n        yResults[y] = xResults;\n      }\n      zResults[z] = yResults;\n    }\n    return zResults;\n  },\n\n  flattenFunctionToString: (source, settings) => {\n    const { findDependency, thisLookup, doNotDefine } = settings;\n    let flattened = settings.flattened;\n    if (!flattened) {\n      flattened = settings.flattened = {};\n    }\n    const ast = acorn.parse(source);\n    const functionDependencies = [];\n    let indent = 0;\n\n    function flatten(ast) {\n      if (Array.isArray(ast)) {\n        const results = [];\n        for (let i = 0; i < ast.length; i++) {\n          results.push(flatten(ast[i]));\n        }\n        return results.join('');\n      }\n      switch (ast.type) {\n        case 'Program':\n          return flatten(ast.body) + (ast.body[0].type === 'VariableDeclaration' ? ';' : '');\n        case 'FunctionDeclaration':\n          return `function ${ast.id.name}(${ast.params.map(flatten).join(', ')}) ${ flatten(ast.body) }`;\n        case 'BlockStatement': {\n          const result = [];\n          indent += 2;\n          for (let i = 0; i < ast.body.length; i++) {\n            const flat = flatten(ast.body[i]);\n            if (flat) {\n              result.push(' '.repeat(indent) + flat, ';\\n');\n            }\n          }\n          indent -= 2;\n          return `{\\n${result.join('')}}`;\n        }\n        case 'VariableDeclaration':\n          const declarations = utils.normalizeDeclarations(ast)\n            .map(flatten)\n            .filter(r => r !== null);\n          if (declarations.length < 1) {\n            return '';\n          } else {\n            return `${ast.kind} ${declarations.join(',')}`;\n          }\n          case 'VariableDeclarator':\n            if (ast.init.object && ast.init.object.type === 'ThisExpression') {\n              const lookup = thisLookup(ast.init.property.name, true);\n              if (lookup) {\n                return `${ast.id.name} = ${flatten(ast.init)}`;\n              } else {\n                return null;\n              }\n            } else {\n              return `${ast.id.name} = ${flatten(ast.init)}`;\n            }\n            case 'CallExpression': {\n              if (ast.callee.property.name === 'subarray') {\n                return `${flatten(ast.callee.object)}.${flatten(ast.callee.property)}(${ast.arguments.map(value => flatten(value)).join(', ')})`;\n              }\n              if (ast.callee.object.name === 'gl' || ast.callee.object.name === 'context') {\n                return `${flatten(ast.callee.object)}.${flatten(ast.callee.property)}(${ast.arguments.map(value => flatten(value)).join(', ')})`;\n              }\n              if (ast.callee.object.type === 'ThisExpression') {\n                functionDependencies.push(findDependency('this', ast.callee.property.name));\n                return `${ast.callee.property.name}(${ast.arguments.map(value => flatten(value)).join(', ')})`;\n              } else if (ast.callee.object.name) {\n                const foundSource = findDependency(ast.callee.object.name, ast.callee.property.name);\n                if (foundSource === null) {\n                  return `${ast.callee.object.name}.${ast.callee.property.name}(${ast.arguments.map(value => flatten(value)).join(', ')})`;\n                } else {\n                  functionDependencies.push(foundSource);\n                  return `${ast.callee.property.name}(${ast.arguments.map(value => flatten(value)).join(', ')})`;\n                }\n              } else if (ast.callee.object.type === 'MemberExpression') {\n                return `${flatten(ast.callee.object)}.${ast.callee.property.name}(${ast.arguments.map(value => flatten(value)).join(', ')})`;\n              } else {\n                throw new Error('unknown ast.callee');\n              }\n            }\n            case 'ReturnStatement':\n              return `return ${flatten(ast.argument)}`;\n            case 'BinaryExpression':\n              return `(${flatten(ast.left)}${ast.operator}${flatten(ast.right)})`;\n            case 'UnaryExpression':\n              if (ast.prefix) {\n                return `${ast.operator} ${flatten(ast.argument)}`;\n              } else {\n                return `${flatten(ast.argument)} ${ast.operator}`;\n              }\n              case 'ExpressionStatement':\n                return `${flatten(ast.expression)}`;\n              case 'SequenceExpression':\n                return `(${flatten(ast.expressions)})`;\n              case 'ArrowFunctionExpression':\n                return `(${ast.params.map(flatten).join(', ')}) => ${flatten(ast.body)}`;\n              case 'Literal':\n                return ast.raw;\n              case 'Identifier':\n                return ast.name;\n              case 'MemberExpression':\n                if (ast.object.type === 'ThisExpression') {\n                  return thisLookup(ast.property.name);\n                }\n                if (ast.computed) {\n                  return `${flatten(ast.object)}[${flatten(ast.property)}]`;\n                }\n                return flatten(ast.object) + '.' + flatten(ast.property);\n              case 'ThisExpression':\n                return 'this';\n              case 'NewExpression':\n                return `new ${flatten(ast.callee)}(${ast.arguments.map(value => flatten(value)).join(', ')})`;\n              case 'ForStatement':\n                return `for (${flatten(ast.init)};${flatten(ast.test)};${flatten(ast.update)}) ${flatten(ast.body)}`;\n              case 'AssignmentExpression':\n                return `${flatten(ast.left)}${ast.operator}${flatten(ast.right)}`;\n              case 'UpdateExpression':\n                return `${flatten(ast.argument)}${ast.operator}`;\n              case 'IfStatement':\n                return `if (${flatten(ast.test)}) ${flatten(ast.consequent)}`;\n              case 'ThrowStatement':\n                return `throw ${flatten(ast.argument)}`;\n              case 'ObjectPattern':\n                return ast.properties.map(flatten).join(', ');\n              case 'ArrayPattern':\n                return ast.elements.map(flatten).join(', ');\n              case 'DebuggerStatement':\n                return 'debugger;';\n              case 'ConditionalExpression':\n                return `${flatten(ast.test)}?${flatten(ast.consequent)}:${flatten(ast.alternate)}`;\n              case 'Property':\n                if (ast.kind === 'init') {\n                  return flatten(ast.key);\n                }\n      }\n      throw new Error(`unhandled ast.type of ${ ast.type }`);\n    }\n    const result = flatten(ast);\n    if (functionDependencies.length > 0) {\n      const flattenedFunctionDependencies = [];\n      for (let i = 0; i < functionDependencies.length; i++) {\n        const functionDependency = functionDependencies[i];\n        if (!flattened[functionDependency]) {\n          flattened[functionDependency] = true;\n        }\n        functionDependency ? flattenedFunctionDependencies.push(utils.flattenFunctionToString(functionDependency, settings) + '\\n') : '';\n      }\n      return flattenedFunctionDependencies.join('') + result;\n    }\n    return result;\n  },\n\n  normalizeDeclarations: (ast) => {\n    if (ast.type !== 'VariableDeclaration') throw new Error('Ast is not of type \"VariableDeclaration\"');\n    const normalizedDeclarations = [];\n    for (let declarationIndex = 0; declarationIndex < ast.declarations.length; declarationIndex++) {\n      const declaration = ast.declarations[declarationIndex];\n      if (declaration.id && declaration.id.type === 'ObjectPattern' && declaration.id.properties) {\n        const { properties } = declaration.id;\n        for (let propertyIndex = 0; propertyIndex < properties.length; propertyIndex++) {\n          const property = properties[propertyIndex];\n          if (property.value.type === 'ObjectPattern' && property.value.properties) {\n            for (let subPropertyIndex = 0; subPropertyIndex < property.value.properties.length; subPropertyIndex++) {\n              const subProperty = property.value.properties[subPropertyIndex];\n              if (subProperty.type === 'Property') {\n                normalizedDeclarations.push({\n                  type: 'VariableDeclarator',\n                  id: {\n                    type: 'Identifier',\n                    name: subProperty.key.name\n                  },\n                  init: {\n                    type: 'MemberExpression',\n                    object: {\n                      type: 'MemberExpression',\n                      object: declaration.init,\n                      property: {\n                        type: 'Identifier',\n                        name: property.key.name\n                      },\n                      computed: false\n                    },\n                    property: {\n                      type: 'Identifier',\n                      name: subProperty.key.name\n                    },\n                    computed: false\n                  }\n                });\n              } else {\n                throw new Error('unexpected state');\n              }\n            }\n          } else if (property.value.type === 'Identifier') {\n            normalizedDeclarations.push({\n              type: 'VariableDeclarator',\n              id: {\n                type: 'Identifier',\n                name: property.value && property.value.name ? property.value.name : property.key.name\n              },\n              init: {\n                type: 'MemberExpression',\n                object: declaration.init,\n                property: {\n                  type: 'Identifier',\n                  name: property.key.name\n                },\n                computed: false\n              }\n            });\n          } else {\n            throw new Error('unexpected state');\n          }\n        }\n      } else if (declaration.id && declaration.id.type === 'ArrayPattern' && declaration.id.elements) {\n        const { elements } = declaration.id;\n        for (let elementIndex = 0; elementIndex < elements.length; elementIndex++) {\n          const element = elements[elementIndex];\n          if (element.type === 'Identifier') {\n            normalizedDeclarations.push({\n              type: 'VariableDeclarator',\n              id: {\n                type: 'Identifier',\n                name: element.name\n              },\n              init: {\n                type: 'MemberExpression',\n                object: declaration.init,\n                property: {\n                  type: 'Literal',\n                  value: elementIndex,\n                  raw: elementIndex.toString(),\n                  start: element.start,\n                  end: element.end\n                },\n                computed: true\n              }\n            });\n          } else {\n            throw new Error('unexpected state');\n          }\n        }\n      } else {\n        normalizedDeclarations.push(declaration);\n      }\n    }\n    return normalizedDeclarations;\n  },\n\n  splitHTMLImageToRGB: (gpu, image) => {\n    const rKernel = gpu.createKernel(function(a) {\n      const pixel = a[this.thread.y][this.thread.x];\n      return pixel.r * 255;\n    }, {\n      output: [image.width, image.height],\n      precision: 'unsigned',\n      argumentTypes: { a: 'HTMLImage' },\n    });\n    const gKernel = gpu.createKernel(function(a) {\n      const pixel = a[this.thread.y][this.thread.x];\n      return pixel.g * 255;\n    }, {\n      output: [image.width, image.height],\n      precision: 'unsigned',\n      argumentTypes: { a: 'HTMLImage' },\n    });\n    const bKernel = gpu.createKernel(function(a) {\n      const pixel = a[this.thread.y][this.thread.x];\n      return pixel.b * 255;\n    }, {\n      output: [image.width, image.height],\n      precision: 'unsigned',\n      argumentTypes: { a: 'HTMLImage' },\n    });\n    const aKernel = gpu.createKernel(function(a) {\n      const pixel = a[this.thread.y][this.thread.x];\n      return pixel.a * 255;\n    }, {\n      output: [image.width, image.height],\n      precision: 'unsigned',\n      argumentTypes: { a: 'HTMLImage' },\n    });\n    const result = [\n      rKernel(image),\n      gKernel(image),\n      bKernel(image),\n      aKernel(image),\n    ];\n    result.rKernel = rKernel;\n    result.gKernel = gKernel;\n    result.bKernel = bKernel;\n    result.aKernel = aKernel;\n    result.gpu = gpu;\n    return result;\n  },\n\n  splitRGBAToCanvases: (gpu, rgba, width, height) => {\n    const visualKernelR = gpu.createKernel(function(v) {\n      const pixel = v[this.thread.y][this.thread.x];\n      this.color(pixel.r / 255, 0, 0, 255);\n    }, {\n      output: [width, height],\n      graphical: true,\n      argumentTypes: { v: 'Array2D(4)' }\n    });\n    visualKernelR(rgba);\n\n    const visualKernelG = gpu.createKernel(function(v) {\n      const pixel = v[this.thread.y][this.thread.x];\n      this.color(0, pixel.g / 255, 0, 255);\n    }, {\n      output: [width, height],\n      graphical: true,\n      argumentTypes: { v: 'Array2D(4)' }\n    });\n    visualKernelG(rgba);\n\n    const visualKernelB = gpu.createKernel(function(v) {\n      const pixel = v[this.thread.y][this.thread.x];\n      this.color(0, 0, pixel.b / 255, 255);\n    }, {\n      output: [width, height],\n      graphical: true,\n      argumentTypes: { v: 'Array2D(4)' }\n    });\n    visualKernelB(rgba);\n\n    const visualKernelA = gpu.createKernel(function(v) {\n      const pixel = v[this.thread.y][this.thread.x];\n      this.color(255, 255, 255, pixel.a / 255);\n    }, {\n      output: [width, height],\n      graphical: true,\n      argumentTypes: { v: 'Array2D(4)' }\n    });\n    visualKernelA(rgba);\n    return [\n      visualKernelR.canvas,\n      visualKernelG.canvas,\n      visualKernelB.canvas,\n      visualKernelA.canvas,\n    ];\n  },\n\n  getMinifySafeName: (fn) => {\n    try {\n      const ast = acorn.parse(`const value = ${fn.toString()}`);\n      const { init } = ast.body[0].declarations[0];\n      return init.body.name || init.body.body[0].argument.name;\n    } catch (e) {\n      throw new Error('Unrecognized function type.  Please use `() => yourFunctionVariableHere` or function() { return yourFunctionVariableHere; }');\n    }\n  },\n  sanitizeName: function(name) {\n    if (dollarSign.test(name)) {\n      name = name.replace(dollarSign, 'S_S');\n    }\n    if (doubleUnderscore.test(name)) {\n      name = name.replace(doubleUnderscore, 'U_U');\n    } else if (singleUnderscore.test(name)) {\n      name = name.replace(singleUnderscore, 'u_u');\n    }\n    return name;\n  }\n};\n\nconst dollarSign = /\\$/;\nconst doubleUnderscore = /__/;\nconst singleUnderscore = /_/;\n\nconst _systemEndianness = utils.getSystemEndianness();\n\nmodule.exports = {\n  utils\n};\n},{\"./input\":110,\"./texture\":113,\"acorn\":1}]},{},[107])(107)\n});\n"],"names":["$bcaa5dedc49d55dc$exports","f","define","r","e","n","t","o","i","c","undefined","u","a","Error","code","p","exports","call","length","require1","module1","global","factory","reservedWords","strict","strictBind","ecma5AndLessKeywords","keywords","keywordRelationalOperator","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","RegExp","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","set","pos","isIdentifierStart","astral","test","String","fromCharCode","isIdentifierChar","TokenType","label","conf","keyword","beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","binop","updateContext","name1","prec","keywords$1","kw","options","types","num","regexp","string","name","eof","bracketL","bracketR","braceL","braceR","parenL","parenR","comma","semi","colon","dot","question","arrow","template","invalidTemplate","ellipsis","backQuote","dollarBraceL","eq","assign","incDec","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","starstar","_break","_case","_catch","_continue","_debugger","_default","_do","_else","_finally","_for","_function","_if","_return","_switch","_throw","_try","_var","_const","_while","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_in","_instanceof","_typeof","_void","_delete","lineBreak","lineBreakG","source","isNewLine","ecma2019String","nonASCIIwhitespace","skipWhiteSpace","ref","Object","prototype","hasOwnProperty","toString","has","obj","propName","isArray","Array","wordsRegexp","words","replace","Position","line","col","column","offset","SourceLocation","start","end","sourceFile","getLineInfo","input","cur","lastIndex","match","exec","index","defaultOptions","ecmaVersion","sourceType","onInsertedSemicolon","onTrailingComma","allowReserved","allowReturnOutsideFunction","allowImportExportEverywhere","allowAwaitOutsideFunction","allowHashBang","locations","onToken","onComment","ranges","program","directSourceFile","preserveParens","functionFlags","async","generator","SCOPE_FUNCTION","Parser","startPos","getOptions","opts","array","opt","tokens","token","push","block","text","startLoc","endLoc","comment","type","value","loc","range","reserved","v","reservedStrict","reservedWordsStrict","reservedWordsStrictBind","containsEsc","lineStart","lastIndexOf","curLine","slice","split","curPosition","lastTokEndLoc","lastTokStartLoc","lastTokStart","lastTokEnd","context","initialContext","exprAllowed","inModule","strictDirective","potentialArrowAt","yieldPos","awaitPos","awaitIdentPos","labels","undefinedExports","skipLineComment","scopeStack","enterScope","regexpState","prototypeAccessors","inFunction","configurable","inGenerator","inAsync","allowSuper","allowDirectSuper","treatFunctionsAsVar","parse","node","startNode","nextToken","parseTopLevel","get","currentVarScope","flags","currentThisScope","treatFunctionsAsVarInScope","currentScope","inNonArrowFunction","extend","plugins","len","arguments","cls","parseExpressionAt","parser","parseExpression","tokenizer","defineProperties","pp","literal","DestructuringErrors","shorthandAssign","trailingComma","parenthesizedAssign","parenthesizedBind","doubleProto","eat","next","isContextual","eatContextual","expectContextual","unexpected","canInsertSemicolon","insertSemicolon","semicolon","afterTrailingComma","tokType","notNext","expect","raise","checkPatternErrors","refDestructuringErrors","raiseRecoverable","parens","checkExpressionErrors","andThrow","checkYieldAwaitInDefaultParams","isSimpleAssignTarget","expr","expression","pp$1","body","stmt","parseStatement","list","keys","adaptDirectivePrologue","finishNode","loopLabel","kind","switchLabel","isLet","skip","nextCh","charCodeAt","ident","isAsyncFunction","charAt","topLevel","starttype","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseFunctionStatement","parseClass","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVarStatement","parseWhileStatement","parseWithStatement","parseBlock","parseEmptyStatement","parseExpressionStatement","parseImport","parseExport","maybeName","parseLabeledStatement","isBreak","parseIdent","lab","pop","parseParenExpression","awaitAt","parseFor","init$1","parseVar","declarations","await","parseForIn","init","toAssignable","checkLVal","isAsync","declarationPosition","parseFunction","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","consequent","alternate","argument","discriminant","cases","sawDefault","isCase","exitScope","empty","handler","clause","param","parseBindingAtom","simple","finalizer","object","i$1","label$1","statementStart","indexOf","createNewLexicalScope","update","isForIn","id","left","right","parseMaybeAssign","isFor","decl","parseVarId","statement","allowExpressionBody","initFunction","oldYieldPos","oldAwaitPos","oldAwaitIdentPos","parseFunctionParams","parseFunctionBody","params","parseBindingList","isStatement","oldStrict","parseClassId","parseClassSuper","classBody","hadConstructor","element","parseClassElement","superClass","constructorAllowsSuper","this$1","method","tryContextual","k","noLineBreak","key","computed","startNodeAt","static","isGenerator","parsePropertyName","allowsDirectSuper","parseClassMethod","parseMethod","parseExprSubscripts","parseExprAtom","checkExport","fNode","declaration","cNode","shouldParseExportStatement","checkVariableExport","specifiers","parseExportSpecifiers","spec","checkUnreserved","local","checkLocalExport","checkPatternExport","pat","properties","prop","list$1","elements","elt","decls","nodes","first","exported","parseImportSpecifiers","node$1","node$2","imported","statements","isDirectiveCandidate","directive","raw","pp$2","isBinding","toAssignableList","operator","exprList","last","parseSpread","parseRestBinding","parseObj","close","allowEmpty","allowTrailingComma","elts","rest","parseBindingListItem","elem","parseMaybeDefault","bindingType","checkClashes","declareName","pp$3","checkPropClash","propHash","shorthand","proto","other","noIn","expressions","afterLeftParse","parseYield","ownDestructuringErrors","oldParenAssign","oldTrailingComma","parseMaybeConditional","parseExprOps","parseMaybeUnary","parseExprOp","leftStartPos","leftStartLoc","minPrec","logical","op","buildBinary","sawUnary","parseAwait","result","parseSubscripts","base","noCalls","maybeAsyncArrow","parseSubscript","property","parseExprList","parseArrowExpression","callee","tag","quasi","parseTemplate","isTagged","readRegexp","canBeArrow","value1","parseLiteral","regex","pattern","parseParenAndDistinguishExpression","parseNew","parseExprImport","parseDynamicImport","errorPos","bigint","val","spreadStart","innerStartPos","innerStartLoc","lastIsComma","parseParenItem","innerEndPos","innerEndLoc","parseParenArrowList","finishNodeAt","par","item","empty$1","meta","isImport","parseTemplateElement","cooked","tail","curElt","quasis","isAsyncProp","isPattern","parseProperty","parsePropertyValue","paramCount","isArrowFunction","isMethod","isExpression","useStrict","checkParams","nonSimple","isSimpleParamList","oldLabels","allowDuplicates","nameHash","re","liberal","delegate","pp$4","message","err","SyntaxError","raisedAt","pp$5","Scope","var","lexical","functions","scope","redeclared","scope$1","scope$2","scope$3","SCOPE_TOP","Node","pp$6","TokContext","isExpr","preserveSpace","override","types$1","b_stat","b_expr","b_tmpl","p_stat","p_expr","q_tmpl","tryReadTemplateToken","f_stat","f_expr","f_expr_gen","f_gen","pp$7","braceIsBlock","prevType","parent","curContext","inGeneratorContext","out","statementParens","allowed","ecma9BinaryProperties","ecma10BinaryProperties","unicodeBinaryProperties","unicodeGeneralCategoryValues","ecma9ScriptValues","ecma10ScriptValues","unicodeScriptValues","data","buildUnicodeData","d","binary","nonBinary","General_Category","Script","Script_Extensions","gc","sc","scx","pp$8","RegExpValidationState","validFlags","unicodeProperties","switchU","switchN","lastIntValue","lastStringValue","lastAssertionIsQuantifiable","numCapturingParens","maxBackReference","groupNames","backReferenceNames","codePointToString","ch","isSyntaxCharacter","isControlLetter","isUnicodePropertyNameCharacter","isDecimalDigit","isHexDigit","hexToInt","isOctalDigit","reset","unicode","at","s","l","nextIndex","current","lookahead","advance","validateRegExpFlags","state","flag","validateRegExpPattern","regexp_pattern","regexp_disjunction","regexp_alternative","regexp_eatQuantifier","regexp_eatTerm","regexp_eatAssertion","regexp_eatAtom","regexp_eatExtendedAtom","lookbehind","noError","regexp_eatQuantifierPrefix","regexp_eatBracedQuantifier","min","max","regexp_eatDecimalDigits","regexp_eatPatternCharacters","regexp_eatReverseSolidusAtomEscape","regexp_eatCharacterClass","regexp_eatUncapturingGroup","regexp_eatCapturingGroup","regexp_eatAtomEscape","regexp_groupSpecifier","regexp_eatInvalidBracedQuantifier","regexp_eatExtendedPatternCharacter","regexp_eatSyntaxCharacter","regexp_eatGroupName","regexp_eatRegExpIdentifierName","regexp_eatRegExpIdentifierStart","regexp_eatRegExpIdentifierPart","regexp_eatRegExpUnicodeEscapeSequence","regexp_eatBackReference","regexp_eatCharacterClassEscape","regexp_eatCharacterEscape","regexp_eatKGroupName","regexp_eatDecimalEscape","regexp_eatControlEscape","regexp_eatCControlLetter","regexp_eatZero","regexp_eatHexEscapeSequence","regexp_eatLegacyOctalEscapeSequence","regexp_eatIdentityEscape","regexp_eatControlLetter","regexp_eatFixedHexDigits","lead","leadSurrogateEnd","trail","regexp_eatHexDigits","regexp_eatUnicodePropertyValueExpression","regexp_eatUnicodePropertyName","regexp_eatUnicodePropertyValue","regexp_validateUnicodePropertyNameAndValue","regexp_eatLoneUnicodePropertyNameOrValue","nameOrValue","regexp_validateUnicodePropertyNameOrValue","regexp_classRanges","regexp_eatClassAtom","regexp_eatClassEscape","ch$1","regexp_eatClassControlLetter","regexp_eatOctalDigit","n1","n2","Token","pp$9","codePointToString$1","ignoreEscapeSequenceInKeyword","getToken","Symbol","iterator","done","skipSpace","finishToken","readToken","fullCharCodeAtPos","readWord","getTokenFromCode","skipBlockComment","startSkip","loop","readToken_dot","readNumber","next2","readToken_slash","finishOp","readToken_mult_modulo_exp","size","tokentype","readToken_pipe_amp","readToken_caret","readToken_plus_min","readToken_lt_gt","readToken_eq_excl","readRadixNumber","readString","str","escaped","inClass","flagsStart","readWord1","readInt","radix","total","Infinity","BigInt","startsWithDot","octal","str$1","val$1","parseInt","parseFloat","readCodePoint","codePos","readHexChar","invalidStringToken","quote","chunkStart","readEscapedChar","INVALID_TEMPLATE_ESCAPE_ERROR","inTemplateElement","readTmplToken","readInvalidTemplateToken","position","inTemplate","octalStr","substr","word","escStart","esc","version","acorn","tokTypes","keywordTypes","tokContexts","defineProperty","amd","self","glWiretap","gl","readPixelsVariableName","contextName","throwGetError","useTrackablePrimitives","readPixelsFile","recording","variables","onReadPixels","onUnrecognizedArgumentLookup","proxy","Proxy","addComment","checkThrowError","insertVariable","setIndent","getContextVariableName","indent","getError","variableName","contextVariables","extension","getExtension","tappedExtension","glExtensionWiretap","getEntity","targetVariableName","getVariableName","constructor","argumentAsStrings","join","writePPM","width","height","sourceVariable","imageVariable","imageCount","readPixels","apply","argumentsToString","addVariable","drawBuffers","methodCallToString","trackablePrimitive","entityNames","spaces","repeat","args","getExtensionEntity","drawBuffersWEBGL","extensionEntityNames","from","map","arg","argumentToString","hasLines","hasSingleQuotes","hasDoubleQuotes","JSON","stringify","instantiationString","window","setupArguments","newArguments","toArray","mock1D","row","Float32Array","output","x","thread","y","z","_fn","mock2D","matrix","mock2DGraphical","mock3D","cube","setupGraphical","kernel","createImageData","Uint8ClampedArray","_imageData","_colorData","setupOutput","gpuMock","fn","settings","graphical","constants","canvas","apiDecorate","setOutput","toJSON","setConstants","setGraphical","setCanvas","setContext","destroy","validateSettings","Promise","resolve","reject","getPixels","flip","flipPixels","pixels","halfHeight","bytesPerRow","temp","topOffset","bottomOffset","subarray","copyWithin","color","g","b","Math","floor","mockMethod","methods","utils","alias","fnString","Function","getArgumentNamesFromString","getFunctionBodyFromString","FunctionNode","CPUFunctionNode","astFunction","ast","retArr","isRootKernel","argumentNames","argumentName","astGeneric","astReturnStatement","returnType","getType","leadingReturnStatement","followingReturnStatement","isSubKernel","astLiteral","isNaN","astErrorOutput","astBinaryExpression","astIdentifierExpression","idtNode","astForStatement","forNode","initArr","testArr","updateArr","bodyArr","isSafe","pushState","includes","popState","iVariableName","getInternalVariableName","astWhileStatement","whileNode","astDoWhileStatement","doWhileNode","astAssignmentExpression","assNode","getDeclaration","assignable","astBlockStatement","bNode","isState","astVariableDeclaration","varDecNode","info","valueType","astIfStatement","ifNode","astSwitchStatement","astThisExpression","tNode","astMemberExpression","mNode","signature","xProperty","yProperty","zProperty","origin","getMemberExpressionDetails","markupName","isInput","constant","constantTypes","argumentSizes","dynamicArguments","astCallExpression","functionName","astMemberExpressionUnroll","calledFunctions","isAstMathFunction","onFunctionCall","targetTypes","lookupFunctionArgumentTypes","argumentType","triggerImplyArgumentType","astArrayExpression","arrNode","arrLen","astDebuggerStatement","cpuKernelString","cpuKernel","header","thisProperties","beforeReturn","useFunctionKeyword","constantsToString","results","colorFn","flattenFunctionToString","thisLookup","propertyName","findDependency","getPixelsFn","constantKeys","argumentTypes","flattenedImageTo3DArray","_imageTo3DArray","doNotDefine","flattenedImageTo2DArray","_mediaTo2DArray","_kernelString","Kernel","FunctionBuilder","CPUKernel","getFeatures","features","freeze","kernelMap","isIntegerDivisionAccurate","isSupported","isContextMatch","mode","nativeFunctionArguments","nativeFunctionReturnType","combineKernels","combinedKernel","getSignature","mergeSettings","_prependedString","translatedSources","initCanvas","document","createElement","OffscreenCanvas","initContext","getContext","initPlugins","argType","getVariableType","strictIntegers","getDimensions","checkOutput","translateSource","subKernels","functionBuilder","fromKernel","getPrototypes","getKernelResultType","build","built","setupConstants","kernelString","getKernelString","debug","console","log","run","bind","error","buildSignature","kernelThreadString","filter","shift","_getLoopMaxString","injectedNative","_resultKernelHeader","_processConstants","_earlyThrows","_processArguments","_graphicalKernelBody","_resultKernelBody","loopMaxIterations","immutable","pipeline","arrayArguments","checks","checkSubKernels","_mapSubKernels","subKernel","media","pixelsData","videoWidth","videoHeight","ctx","ImageData","drawImage","getImageData","imageArray","pixel","images","imagesArray","_mutableKernel1DResults","_mutableKernel2DResults","_mutableKernel3DResults","_resultMutableKernel1DLoop","_resultImmutableKernel1DLoop","_kernelOutput","_resultMutableKernel2DLoop","_resultImmutableKernel2DLoop","_resultMutableKernel3DLoop","_resultImmutableKernel3DLoop","_graphicalKernel2DLoop","_graphicalOutput","_getKernelResultTypeConstructorString","constructorString","removeCanvasReference","destroyContext","json","functionNodes","prependString","hasPrependString","extraNodeOptions","kernelArguments","kernelConstants","argumentBitRatios","constantBitRatios","nativeFunctions","optimizeFloatMemory","precision","dynamicOutput","kernelConstant","needsArgumentType","assignArgumentType","lookupReturnType","requestingNode","lookupFunctionArgumentName","argumentIndex","lookupFunctionArgumentBitRatio","triggerImplyArgumentBitRatio","calleeFunctionName","assignArgumentBitRatio","trackFunctionCall","onNestedFunction","nestedFunction","nodeOptions","traceFunctionAST","addFunctionNode","rootNodeOptions","fromJSON","rootNode","subKernelNodes","functionMap","nativeFunctionNames","lookupChain","functionNodeDependencies","functionCalls","nativeFunction","functionNode","traceFunctionCalls","retList","nativeFunctionIndex","dependantNativeFunctionName","splice","functionIndex","dependantFunctionName","getPrototypeString","getPrototypesFromFunctionNames","reverse","getStringFromFunctionNames","functionList","ret","nativeIndex","jsonFunctionNodes","jsonFunctionNode","getString","_isNativeFunction","_lookupNativeFunctionReturnType","_isFunction","_getFunction","j","getJsAST","Boolean","_getNativeFunction","bitRatio","fnNode","calleeNode","calleeBitRatio","Set","add","getSubKernelResultType","subKernelNode","called","functionCallIndex","functionCall","getReturnTypes","FunctionTracer","typeLookupMap","getFunctionNameFromString","identifiers","contexts","states","strictTypingChecking","fixIntegerDivisionAccuracy","literalTypes","validate","_string","_internalVariableNames","isFunctionString","isIdentifierConstant","firstExpression","inParser","functionAST","inForLoopInit","inForLoopTest","dependencies","getDependencies","realType","isSafeDependencies","identifier","getLookupType","getConstantType","constantName","trim","childType","literalKey","astKey","Number","isInteger","inferArgumentTypesIfNeeded","getVariableSignature","rightType","lastType","isAstVariable","getCheckVariableType","findIdentifierOrigin","variableSignature","isAstMathVariable","lastReturn","findLastReturn","mathProperties","mathFunctions","every","dependency","isNotSafe","details","returnRawValue","unshift","signatureString","allowedExpressions","astFunctionDeclaration","astFunctionExpression","astExpressionStatement","astEmptyStatement","astBreakStatement","astContinueStatement","astVariableDeclarator","astSequenceExpression","astUnaryExpression","astUpdateExpression","astLogicalExpression","astConditionalExpression","debugString","getAstString","leadingSource","splitLines","lineBefore","isChildFunction","esNode","eNode","brNode","crNode","iVarDecNode","sNode","sequenceResult","expressionResult","uNode","unaryResult","checkAndUpconvertBitwiseUnary","logNode","astToFind","stack","atNode","separator","trackIdentifiers","memberExpression","runningContexts","functionContexts","returnStatements","trackedIdentifiers","newFunctionContext","scan","hasState","currentFunctionContext","currentContext","newContext","useFunctionContext","functionContext","getIdentifiers","previousRunningContext","suggestedType","normalizeDeclarations","testIdentifiers","toStringWithoutUtils","getRenderString","targetName","readBackValue","getToArrayString","kernelResult","textureName","framebufferName","flattenedFunctions","isDeclaration","findKernelValue","kernelValues","values","uploadedValues","HTMLImageElement","kernelValue","uploadValue","variableIndex","variable","glKernelString","originKernel","setupContextString","destroyContextString","postResult","subKernelsResultVariableSetup","subKernelsResultIndex","tactic","checkContext","forEach","kernelArgument","imageIndex","texture","flattenTo","flatten2dArrayTo","flatten3dArrayTo","flatten4dArrayTo","renderOutput","renderTexture","formatValues","varName","renderKernels","getStringValueHandler","framebuffer","mappedTextures","subKernelResult","subKernelTextureName","rendered","getGetPixelsString","constantsUpload","GLTextureArray2Float","GLTextureArray2Float2D","GLTextureArray2Float3D","GLTextureArray3Float","GLTextureArray3Float2D","GLTextureArray3Float3D","GLTextureArray4Float","GLTextureArray4Float2D","GLTextureArray4Float3D","GLTextureFloat","GLTextureFloat2D","GLTextureFloat3D","GLTextureMemoryOptimized","GLTextureMemoryOptimized2D","GLTextureMemoryOptimized3D","GLTextureUnsigned","GLTextureUnsigned2D","GLTextureUnsigned3D","GLTextureGraphical","typeMap","int","float","vec2","vec3","vec4","GLKernel","getIsFloatRead","testContext","testCanvas","getIsIntegerDivisionAccurate","kernelFunction","v1","v2","getIsSpeedTacticSupported","round","isDrawBuffers","getIsDrawBuffers","isFloatRead","isSpeedTacticSupported","isTextureFloat","getIsTextureFloat","channelCount","getChannelCount","maxTextureSize","getMaxTextureSize","lowIntPrecision","getShaderPrecisionFormat","FRAGMENT_SHADER","LOW_INT","lowFloatPrecision","LOW_FLOAT","mediumIntPrecision","MEDIUM_INT","mediumFloatPrecision","MEDIUM_FLOAT","highIntPrecision","HIGH_INT","highFloatPrecision","HIGH_FLOAT","setupFeatureChecks","getVariablePrecisionString","setFixIntegerDivisionAccuracy","fix","setPrecision","setFloatTextures","warnDeprecated","floatTextures","isStartingVariableName","isVariableChar","char","nextChar","lastKernel","texSize","threadDim","w","h","ceil","RGBA","FLOAT","bytes","Uint8Array","UNSIGNED_BYTE","buffer","splitArray","transferValues","TextureConstructor","renderRawOutput","translatedSource","compiledFragmentShader","compiledVertexShader","switchingKernels","_textureSwitched","_mappedTextureSwitched","checkTextureSize","pickRenderStrategy","readPackedPixelsToUint8Array","readPackedPixelsToFloat32Array","renderKernelsToTextures","requestFallback","renderKernelsToArrays","renderValues","erect3DPackedFloat","erect2DPackedFloat","erectPackedFloat","readFloatPixelsToFloat32Array","erectMemoryOptimized3DFloat","erectMemoryOptimized2DFloat","erectMemoryOptimizedFloat","erect3DArray2","erect2DArray2","erectArray2","erect3DArray3","erect2DArray3","erectArray3","erect3DArray4","erect2DArray4","erectArray4","erect3DFloat","erect2DFloat","erectFloat","getMainResultTexture","getMainResultNumberTexture","getMainResultArray2Texture","getMainResultArray3Texture","getMainResultArray4Texture","getMainResultKernelNumberTexture","getMainResultSubKernelNumberTexture","getMainResultKernelArray2Texture","getMainResultSubKernelArray2Texture","getMainResultKernelArray3Texture","getMainResultSubKernelArray3Texture","getMainResultKernelArray4Texture","getMainResultSubKernelArray4Texture","getMainResultGraphical","getMainResultMemoryOptimizedFloats","getMainResultPackedPixels","getMainResultString","linesToString","getFloatTacticDeclaration","variablePrecision","getIntTacticDeclaration","getSampler2DTacticDeclaration","getSampler2DArrayTacticDeclaration","clone","resetSwitchingKernels","existingValue","newOutput","toKernelOutput","newThreadDim","newTexSize","getKernelTextureSize","oldTexSize","oldPrecision","newPrecision","warn","switchKernels","needed","bindFramebuffer","FRAMEBUFFER","updateMaxTexSize","viewport","maxTexSize","delete","_setupOutputTexture","_setupSubOutputTextures","reason","textureSize","isInt","low","medium","high","requiredSize","log2","rangeMax","updateTextureArgumentRefs","prevArg","_refs","mappedTexture","onActivate","previousKernel","GLTexture","textureType","framebufferTexture2D","COLOR_ATTACHMENT0","TEXTURE_2D","_deleted","Texture","selectTexture","activeTexture","TEXTURE15","bindTexture","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","beforeMutate","newTexture","cloneTexture","target","createTexture","texImage2D","internalFormat","textureFormat","copyTexSubImage2D","clear","clearColor","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","deleteTexture","_framebuffer","getRawValueFramebuffer","WebGLKernel","testExtensions","HeadlessGLKernel","preserveDrawingBuffer","STACKGL_resize_drawingbuffer","STACKGL_destroy_context","OES_texture_float","OES_texture_float_linear","OES_element_index_uint","WEBGL_draw_buffers","WEBGL_color_buffer_float","getParameter","RENDERER","MAX_DRAW_BUFFERS_WEBGL","MAX_TEXTURE_SIZE","initExtensions","extensions","fallbackRequested","resize","destroyExtensions","KernelValue","onRequestContextHandle","onUpdateValueMismatch","contextHandle","forceUploadEachRun","getSource","updateValue","Input","useLegacyEncoder","onRequestFallback","forceUploadKernelConstants","gpu","addFunction","addNativeFunction","functionToIGPUFunction","splitArgumentTypes","argumentTypesObject","Int32Array","getBitRatio","needsConstantTypes","setOptimizeFloatMemory","setDebug","setLoopMaxIterations","setConstantTypes","setFunctions","setNativeFunctions","setInjectedNative","setPipeline","setDimensions","setOutputToTexture","setImmutable","setStrictIntegers","setDynamicOutput","setHardcodeConstants","setDynamicArguments","setUseLegacyEncoder","setWarnVarUsage","getCanvas","getWebGl","setArgumentTypes","setTactic","addSubKernel","removeCanvasReferences","Int8Array","Uint16Array","Int16Array","argumentsTypes","pluginNames","plugin","Constructor","getArgumentTypes","sourceString","fragmentShader","E","operatorMap","WebGLFunctionNode","consequentType","alternateType","sanitizeName","castLiteralToFloat","castValueToInteger","castLiteralToInteger","checkAndUpconvertOperator","castValueToFloat","leftType","literalResult","literalType","bitwiseResult","checkAndUpconvertBitwiseOperators","upconvertableOperators","foundOperator","initString","initNeedsSemiColon","declarationSets","declarationSet","actualType","markupType","declarationResult","fallingThrough","defaultResult","movingDefaultToEnd","pastFirstIf","testType","cleanName","memberExpressionPropertyMarkup","memberExpressionXYZ","isMathFunction","functionMatch","functionReplace","targetType","subNode","WebGLKernelValueBoolean","WebGLKernelValueFloat","WebGLKernelValueInteger","WebGLKernelValueHTMLImage","WebGLKernelValueDynamicHTMLImage","WebGLKernelValueHTMLVideo","WebGLKernelValueDynamicHTMLVideo","WebGLKernelValueSingleInput","WebGLKernelValueDynamicSingleInput","WebGLKernelValueUnsignedInput","WebGLKernelValueDynamicUnsignedInput","WebGLKernelValueMemoryOptimizedNumberTexture","WebGLKernelValueDynamicMemoryOptimizedNumberTexture","WebGLKernelValueNumberTexture","WebGLKernelValueDynamicNumberTexture","WebGLKernelValueSingleArray","WebGLKernelValueDynamicSingleArray","WebGLKernelValueSingleArray1DI","WebGLKernelValueDynamicSingleArray1DI","WebGLKernelValueSingleArray2DI","WebGLKernelValueDynamicSingleArray2DI","WebGLKernelValueSingleArray3DI","WebGLKernelValueDynamicSingleArray3DI","WebGLKernelValueArray2","WebGLKernelValueArray3","WebGLKernelValueArray4","WebGLKernelValueUnsignedArray","WebGLKernelValueDynamicUnsignedArray","kernelValueMaps","unsigned","dynamic","single","lookupKernelValueType","WebGLKernelValue","WebGLKernelArray","checkSize","setup","requestTexture","setupTexture","defineTexture","onRequestTexture","onRequestIndex","dimensionsId","sizeId","setUniform2fv","setUniform3fv","setUniform4fv","setUniform1i","dimensions","setUniform3iv","setUniform2iv","inputTexture","getMemoryOptimizedFloatTextureSize","uploadArrayLength","setShape","getMemoryOptimizedPackedTextureSize","Type","getTransferArrayType","preUploadValue","setUniform1f","inputImage","initialValueConstructor","pixelStorei","UNPACK_FLIP_Y_WEBGL","Uint32Array","Float64Array","sameError","valueDimensions","TranserArrayType","mrud","vertexShader","canvases","maxTexSizes","WebGLRenderingContext","endianness","systemEndianness","argumentTextureCount","constantTextureCount","fragShader","vertShader","drawBuffersMap","onRequestSwitchKernel","textureCache","programUniformLocationCache","uniform1fCache","uniform1iCache","uniform2fCache","uniform2fvCache","uniform2ivCache","uniform3fvCache","uniform3ivCache","uniform4fvCache","uniform4ivCache","alpha","depth","antialias","pluginsToUse","usePlugin","some","pluginName","canvasIndex","needsArgumentTypes","textureIndexes","TEXTURE0","failureResult","enable","SCISSOR_TEST","getVertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","getFragmentShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","createProgram","attachShader","linkProgram","createFramebuffer","rawValueFramebuffers","vertices","texCoords","texCoordOffset","byteLength","bindBuffer","ARRAY_BUFFER","createBuffer","bufferData","STATIC_DRAW","bufferSubData","aPosLoc","getAttribLocation","enableVertexAttribArray","vertexAttribPointer","aTexCoordLoc","useProgram","setupReturnTypes","scissor","setUniform2f","onBeforeRun","bindRenderbuffer","RENDERBUFFER","_replaceOutputTexture","drawArrays","TRIANGLE_STRIP","_replaceSubOutputTextures","getInternalFormat","getTextureFormat","format","cache","getUniformLocation","uniform1f","uniform1i","value2","uniform2f","uniform2fv","uniform2iv","uniform3fv","uniform3iv","uniform4fv","setUniform4iv","uniform4iv","_getFragShaderArtifactMap","HEADER","_getHeaderString","LOOP_MAX","PLUGINS","_getPluginsString","CONSTANTS","_getConstantsString","DECODE32_ENDIANNESS","_getDecode32EndiannessString","ENCODE32_ENDIANNESS","_getEncode32EndiannessString","DIVIDE_WITH_INTEGER_CHECK","_getDivideWithIntegerCheckString","INJECTED_NATIVE","_getInjectedNative","MAIN_CONSTANTS","_getMainConstantsString","MAIN_ARGUMENTS","_getMainArgumentsString","KERNEL","MAIN_RESULT","FLOAT_TACTIC_DECLARATION","INT_TACTIC_DECLARATION","SAMPLER_2D_TACTIC_DECLARATION","SAMPLER_2D_ARRAY_TACTIC_DECLARATION","_getVertShaderArtifactMap","_getTextureCoordinate","getKernelResultDeclaration","getMainResultKernelPackedPixels","getMainResultSubKernelPackedPixels","channels","channel","getMainResultKernelMemoryOptimizedFloats","getMainResultSubKernelMemoryOptimizedFloats","replaceArtifacts","src","artifact","deleteBuffer","deleteFramebuffer","deleteShader","deleteProgram","textureCacheIndex","idx","kernels","loseContext","WebGL2FunctionNode","WebGL2KernelValueBoolean","WebGL2KernelValueFloat","WebGL2KernelValueInteger","WebGL2KernelValueHTMLImage","WebGL2KernelValueDynamicHTMLImage","WebGL2KernelValueHTMLImageArray","WebGL2KernelValueDynamicHTMLImageArray","WebGL2KernelValueHTMLVideo","WebGL2KernelValueDynamicHTMLVideo","WebGL2KernelValueSingleInput","WebGL2KernelValueDynamicSingleInput","WebGL2KernelValueUnsignedInput","WebGL2KernelValueDynamicUnsignedInput","WebGL2KernelValueMemoryOptimizedNumberTexture","WebGL2KernelValueDynamicMemoryOptimizedNumberTexture","WebGL2KernelValueNumberTexture","WebGL2KernelValueDynamicNumberTexture","WebGL2KernelValueSingleArray","WebGL2KernelValueDynamicSingleArray","WebGL2KernelValueSingleArray1DI","WebGL2KernelValueDynamicSingleArray1DI","WebGL2KernelValueSingleArray2DI","WebGL2KernelValueDynamicSingleArray2DI","WebGL2KernelValueSingleArray3DI","WebGL2KernelValueDynamicSingleArray3DI","WebGL2KernelValueArray2","WebGL2KernelValueArray3","WebGL2KernelValueArray4","WebGL2KernelValueUnsignedArray","WebGL2KernelValueDynamicUnsignedArray","TEXTURE_2D_ARRAY","texImage3D","texSubImage3D","RGBA32F","WebGL2Kernel","WebGL2RenderingContext","MAX_DRAW_BUFFERS","EXT_color_buffer_float","R32F","RED","RG32F","RG","REPEAT","texStorage2D","lib","GPU","bindTo","kernelRunShortcut","kernelOrder","kernelTypes","internalKernels","upgradeDeprecatedCreateKernelSettings","upgradedSettings","floatOutput","outputToTexture","outputImmutable","disableValidation","enableValidation","isGPUSupported","isKernelMapSupported","isOffscreenCanvasSupported","Worker","importScripts","isWebGLSupported","isWebGL2Supported","isHeadlessGLSupported","isCanvasSupported","HTMLCanvasElement","isGPUHTMLImageArraySupported","isSinglePrecisionSupported","chooseKernel","ExternalKernel","createKernel","isFunction","devKernel","switchableKernels","settingsCopy","fallbackKernel","kernelRun","dynamicArgument","replaceKernel","mergedSettings","reasons","_kernel","existingKernel","newKernel","createKernelMap","argument2Type","firstKernel","injectNative","setTimeout","webGLKernelValueMaps","webGL2KernelValueMaps","mathRandom","bindKernelToShortcut","shortcut","allPropertiesOf","substring","__defineGetter__","__defineSetter__","accept","replacementKernel","random","functionReturnType","FUNCTION_NAME","STRIP_COMMENTS","ARGUMENT_NAMES","_systemEndianness","getSystemEndianness","ArrayBuffer","funcObj","toLowerCase","funcStr","fnStr","isActiveClone","nodeName","ImageBitmap","texelCount","closestSquareDimensions","sqrt","totalArea","roundTo","pad","dim","part","byteOffset","lines","props","getOwnPropertyNames","getPrototypeOf","oldName","newName","yResults","xStart","xEnd","zResults","xResults","xResultsMax","XResultsMax","flattened","functionDependencies","flatten","flat","lookup","foundSource","flattenedFunctionDependencies","functionDependency","normalizedDeclarations","declarationIndex","propertyIndex","subPropertyIndex","subProperty","elementIndex","splitHTMLImageToRGB","image","rKernel","gKernel","bKernel","aKernel","splitRGBAToCanvases","rgba","visualKernelR","visualKernelG","visualKernelB","visualKernelA","getMinifySafeName","dollarSign","doubleUnderscore","singleUnderscore","$2b6e161c9edcf319$var$gpu","$2b6e161c9edcf319$var$canvas","getElementById","$2b6e161c9edcf319$var$ctx","clientWidth","clientHeight","$2b6e161c9edcf319$var$width","$2b6e161c9edcf319$var$height","$2b6e161c9edcf319$var$initial","trunc","$2b6e161c9edcf319$var$render","sum","status","initPixels","$2b6e161c9edcf319$var$animate","requestAnimationFrame"],"version":3,"file":"index.d192ae2a.js.map"}